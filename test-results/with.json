{"total":880,"result":[{"query":"WITH (SELECT groupConcat(',')(st) FROM t) AS a, (SELECT groupConcat(',')(st :: String) FROM t) AS b\nSELECT equals(a, b);","fileName":"../ClickHouse/tests/queries/0_stateless/03235_groupArray_string_consistency.sql","errors":[{"message":"no viable alternative at input 'WITH (SELECT groupConcat(',')(st) FROM t) AS a, (SELECT groupConcat(',')(st :'","startColumn":76,"startLine":1,"endColumn":77,"endLine":1}]},{"query":"with activity as ( select\ngroupUniqArrayState(toDate('2025-01-01 01:00:00')) as dates_seen,\ntoDateTime('2025-01-01 01:00:00') as last_seen\nunion all\nselect\ngroupUniqArrayState(toDate('2023-11-11 11:11:11')) as dates_seen,\ntoDateTime('2023-11-11 11:11:11') as last_seen\n)\nselect last_seen from activity\nwhere last_seen < toDateTime('2020-01-01 00:00:00');","fileName":"../ClickHouse/tests/queries/0_stateless/03217_fliter_pushdown_no_keys.sql","errors":[]},{"query":"WITH wkt(CAST([[(1, 1), (2, 2), (3, 3), (1, 1)]], 'Array(Array(Tuple(Float64, Float64)))')) as x SELECT x, toTypeName(x), readWKTPolygon(x) as y, toTypeName(y);","fileName":"../ClickHouse/tests/queries/0_stateless/03215_multilinestring_geometry.sql","errors":[]},{"query":"WITH ( SELECT CAST(toFixedString(toFixedString(materialize(toFixedString('111111111111111111111111111111111111111', 39)), 39), 39), 'UInt128')\n) AS v\nSELECT\ncoalesce(materialize(toLowCardinality(toNullable(1))), 10, NULL),\nmax(v)\nFROM remote('127.0.0.{1,2}', currentDatabase(), test__fuzz_21)\nGROUP BY\ncoalesce(NULL),\ncoalesce(1, 10, 10, materialize(NULL));","fileName":"../ClickHouse/tests/queries/0_stateless/03215_analyzer_materialized_constants_bug.sql","errors":[]},{"query":"WITH '{ \"v\":1.1}' AS raw SELECT JSONExtract(raw, 'float') AS float32_1, JSONExtract(concat(tuple('1970-01-05', 10, materialize(10), 10, 10, 10, toUInt256(10), 10, toNullable(10), 10, 10), materialize(toUInt256(0)), ', ', 2, 2, toLowCardinality(toLowCardinality(2))), raw, toLowCardinality('v'), 'Float32') AS float32_2, JSONExtractFloat(raw) AS float64_1, JSONExtract(raw, 'v', 'double') AS float64_2;","fileName":"../ClickHouse/tests/queries/0_stateless/03209_functions_json_msan_fuzzer_issue.sql","errors":[]},{"query":"WITH number - 12 AS offset SELECT offset, overlay('Spark SQL', '__', offset), overlayUTF8('Spark SQL和CH', '之', offset) FROM numbers(26) ORDER BY number;","fileName":"../ClickHouse/tests/queries/0_stateless/03205_overlay.sql","errors":[]},{"query":"WITH number - 1 AS length SELECT length, overlay('Spark SQL', 'ANSI ', 7, length), overlayUTF8('Spark SQL和CH', 'ANSI ', 7, length) FROM numbers(8) ORDER BY number;","fileName":"../ClickHouse/tests/queries/0_stateless/03205_overlay.sql","errors":[]},{"query":"WITH (num > 1) AND (arraySum(arrayMap(y -> ((y > 1) AND (y < num) AND ((num % y) = 0)), range(toUInt64(sqrt(num)) + 1))) = 0) AS is_prime_slow\nSELECT\nnum,\nds,\nFROM\n(\nWITH\narraySum(arrayMap(y -> toUInt8(y), splitByString('', toString(num)))) AS digits_sum\nSELECT\n1 + (number * 2) AS num,\ndigits_sum AS ds\nFROM numbers_mt(10000)\nWHERE ds IN (\nWITH\n(number > 1) AND (arraySum(arrayMap(y -> ((y > 1) AND (y < number) AND ((number % y) = 0)), range(toUInt64(sqrt(number)) + 1))) = 0) AS is_prime_slow\nSELECT number\nFROM numbers(180 + 1)\nWHERE is_prime_slow\n)\n)\nWHERE is_prime_slow\nORDER BY num ASC\nLIMIT 998, 1\nSETTINGS max_block_size = 64, max_threads=16;","fileName":"../ClickHouse/tests/queries/0_stateless/03203_system_numbers_limit_and_offset_complex.sql","errors":[{"message":"no viable alternative at input 'WITH (num > 1) AND (arraySum(arrayMap(y -> ((y > 1) AND (y < num) AND ((num % y) = 0)), range(toUInt64(sqrt(num)) + 1))) = 0) AS is_prime_slow\\nSELECT\\nnum,\\nds,\\nFROM\\n(\\nWITH\\narraySum('","startColumn":8,"startLine":8,"endColumn":9,"endLine":8}]},{"query":"WITH 4096 AS w, 4096 AS h, w * h AS pixels,\narrayJoin(coverage) AS num,\nnum DIV (32768 * 32768 DIV pixels) AS idx,\nmortonDecode(2, idx) AS coord,\n255 AS b,\nleast(255, uniq(test_name)) AS r,\n255 * uniq(test_name) / (max(uniq(test_name)) OVER ()) AS g\nSELECT r::UInt8, g::UInt8, b::UInt8\nFROM test\nGROUP BY coord\nORDER BY coord.2 * w + coord.1\nWITH FILL FROM 0 TO 10;","fileName":"../ClickHouse/tests/queries/0_stateless/03199_queries_with_new_analyzer.sql","errors":[{"message":"no viable alternative at input 'WITH 4096 AS w, 4096 AS h, w * h AS pixels,\\narrayJoin(coverage) AS num,\\nnum DIV ('","startColumn":8,"startLine":3,"endColumn":9,"endLine":3}]},{"query":"WITH (Select min(number), max(number) from seq) as range Select * from numbers(range.1, range.2);","fileName":"../ClickHouse/tests/queries/0_stateless/03199_queries_with_new_analyzer.sql","errors":[{"message":"no viable alternative at input 'WITH (Select min(number), max(number) from seq) as range Select * from numbers(range.1'","startColumn":85,"startLine":1,"endColumn":86,"endLine":1}]},{"query":"WITH tmp1 AS\n(\nSELECT\nCAST(s1, 'FixedString(10)') AS fs1,\ns2 AS sector,\ns3\nFROM t1\nWHERE  (s3 != 'test')\n)\nSELECT\nfs1\nFROM t2\nLEFT JOIN tmp1 USING (fs1)\nWHERE (fs1 IN ('test')) SETTINGS enable_multiple_prewhere_read_steps = 0;","fileName":"../ClickHouse/tests/queries/0_stateless/03199_merge_filters_bug.sql","errors":[]},{"query":"WITH tmp1 AS\n(\nSELECT\nCAST(s1, 'FixedString(10)') AS fs1,\ns2 AS sector,\ns3\nFROM t1\nWHERE  (s3 != 'test')\n)\nSELECT\nfs1\nFROM t2\nLEFT JOIN tmp1 USING (fs1)\nWHERE (fs1 IN ('test'));","fileName":"../ClickHouse/tests/queries/0_stateless/03199_merge_filters_bug.sql","errors":[]},{"query":"WITH (60 * 60) * 24 AS d select toStartOfDay(x) as k, sum(y) as v,\n(z + d) * (z + d - 1) / 2 - (toUInt64(k - toDateTime('2000-01-01', 'UTC')) as z) * (z - 1) / 2 as est,\nest - v as delta\nfrom tab final group by k order by k\nsettings max_threads=8, optimize_aggregation_in_order=1, split_parts_ranges_into_intersecting_and_non_intersecting_final=1;","fileName":"../ClickHouse/tests/queries/0_stateless/03174_split_parts_ranges_into_intersecting_and_non_intersecting_final_and_read-in-order_bug.sql","errors":[]},{"query":"WITH 'OK' AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","errors":[{"message":"no viable alternative at input 'WITH 'OK' AS s SELECT * FROM param_test(test_str='","startColumn":48,"startLine":1,"endColumn":49,"endLine":1}]},{"query":"WITH (SELECT 123) AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","errors":[{"message":"no viable alternative at input 'WITH (SELECT 123) AS s SELECT * FROM param_test(test_str='","startColumn":56,"startLine":1,"endColumn":57,"endLine":1}]},{"query":"WITH (SELECT 100 + 20 + 3) AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","errors":[{"message":"no viable alternative at input 'WITH (SELECT 100 + 20 + 3) AS s SELECT * FROM param_test(test_str='","startColumn":65,"startLine":1,"endColumn":66,"endLine":1}]},{"query":"WITH (SELECT number FROM numbers(123, 1)) AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","errors":[{"message":"no viable alternative at input 'WITH (SELECT number FROM numbers(123, 1)) AS s SELECT * FROM param_test(test_str='","startColumn":80,"startLine":1,"endColumn":81,"endLine":1}]},{"query":"WITH CAST(123, 'String') AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","errors":[{"message":"no viable alternative at input 'WITH CAST(123, 'String') AS s SELECT * FROM param_test(test_str='","startColumn":63,"startLine":1,"endColumn":64,"endLine":1}]},{"query":"WITH (SELECT uuid FROM system.tables WHERE database = currentDatabase() AND table = 't_ind_merge_2') AS uuid,\nextractAllGroupsVertical(message, 'containing (\\\\\\\\d+) columns \\\\((\\\\\\\\d+) merged, (\\\\\\\\d+) gathered\\\\)')[1] AS groups\nSELECT\ngroups[1] AS total,\ngroups[2] AS merged,\ngroups[3] AS gathered\nFROM system.text_log\nWHERE ((query_id = uuid || '::all_1_2_1') OR (query_id = currentDatabase() || '.t_ind_merge_2::all_1_2_1')) AND notEmpty(groups)\nORDER BY event_time_microseconds;","fileName":"../ClickHouse/tests/queries/0_stateless/03166_skip_indexes_vertical_merge_2.sql","errors":[]},{"query":"WITH (SELECT uuid FROM system.tables WHERE database = currentDatabase() AND table = 't_ind_merge_1') AS uuid,\nextractAllGroupsVertical(message, 'containing (\\\\\\\\d+) columns \\\\((\\\\\\\\d+) merged, (\\\\\\\\d+) gathered\\\\)')[1] AS groups\nSELECT\ngroups[1] AS total,\ngroups[2] AS merged,\ngroups[3] AS gathered\nFROM system.text_log\nWHERE ((query_id = uuid || '::all_1_2_1') OR (query_id = currentDatabase() || '.t_ind_merge_1::all_1_2_1')) AND notEmpty(groups)\nORDER BY event_time_microseconds;","fileName":"../ClickHouse/tests/queries/0_stateless/03166_skip_indexes_vertical_merge_1.sql","errors":[]},{"query":"WITH wkt(CAST([(1, 1), (2, 2), (3, 3)], 'Array(Tuple(Float64, Float64))')) as x SELECT x, toTypeName(x), readWKTRing(x) as y, toTypeName(y);","fileName":"../ClickHouse/tests/queries/0_stateless/03164_linestring_geometry.sql","errors":[]},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, parent_id, [parent_id] AS path, toUInt64(0) AS depth\nFROM test_table\nUNION ALL\nSELECT t.id, t.parent_id, arrayConcat(path, [t.id]) as path, depth + 1\nFROM test_table t, search_tree st\nWHERE t.parent_id = st.id)\nSELECT * FROM search_tree ORDER BY depth, id, parent_id;","fileName":"../ClickHouse/tests/queries/0_stateless/03154_recursive_cte_distributed.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('","startColumn":30,"startLine":1,"endColumn":31,"endLine":1}]},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, parent_id, [parent_id] AS path, toUInt64(0) AS depth\nFROM remote('127.0.0.1', currentDatabase(), test_table)\nUNION ALL\nSELECT t.id, t.parent_id, arrayConcat(path, [t.id]) as path, depth + 1\nFROM remote('127.0.0.1', currentDatabase(), test_table) t, search_tree st\nWHERE t.parent_id = st.id)\nSELECT * FROM search_tree ORDER BY depth, id, parent_id;","fileName":"../ClickHouse/tests/queries/0_stateless/03154_recursive_cte_distributed.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('","startColumn":30,"startLine":1,"endColumn":31,"endLine":1}]},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, parent_id, [parent_id] AS path, toUInt64(0) AS depth\nFROM remote('127.0.0.{1,2}', currentDatabase(), test_table)\nUNION ALL\nSELECT t.id, t.parent_id, arrayConcat(path, [t.id]) as path, depth + 1\nFROM remote('127.0.0.{1,2}', currentDatabase(), test_table) t, search_tree st\nWHERE t.parent_id = st.id)\nSELECT * FROM search_tree ORDER BY depth, id, parent_id;;","fileName":"../ClickHouse/tests/queries/0_stateless/03154_recursive_cte_distributed.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('","startColumn":30,"startLine":1,"endColumn":31,"endLine":1}]},{"query":"WITH 'https://www3.botinok.co.edu.il/~kozlevich/CGI-BIN/WEBSIT~0.DLL?longptr=0xFFFFFFFF&ONERR=CONTINUE#!PGNUM=99' AS url SELECT URLHash(url, arrayJoin(range(10)));","fileName":"../ClickHouse/tests/queries/0_stateless/03150_url_hash_non_constant_level.sql","errors":[]},{"query":"WITH 'https://www3.botinok.co.edu.il/~kozlevich/CGI-BIN/WEBSIT~0.DLL?longptr=0xFFFFFFFF&ONERR=CONTINUE#!PGNUM=99' AS url SELECT URLHash(materialize(url), arrayJoin(range(10)));","fileName":"../ClickHouse/tests/queries/0_stateless/03150_url_hash_non_constant_level.sql","errors":[]},{"query":"WITH 'https://www3.botinok.co.edu.il/~kozlevich/CGI-BIN/WEBSIT~0.DLL?longptr=0xFFFFFFFF&ONERR=CONTINUE#!PGNUM=99' AS url SELECT cityHash64(substring(x, -1, 1) IN ('/', '?', '#') ? substring(x, 1, -1) : x), arrayJoin(URLHierarchy(url)) AS x;","fileName":"../ClickHouse/tests/queries/0_stateless/03150_url_hash_non_constant_level.sql","errors":[]},{"query":"WITH 'https://www3.botinok.co.edu.il/~kozlevich/CGI-BIN/WEBSIT~0.DLL?longptr=0xFFFFFFFF&ONERR=CONTINUE#!PGNUM=99' AS url SELECT cityHash64(substring(x, -1, 1) IN ('/', '?', '#') ? substring(x, 1, -1) : x), arrayJoin(URLHierarchy(materialize(url))) AS x;","fileName":"../ClickHouse/tests/queries/0_stateless/03150_url_hash_non_constant_level.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(10), (SELECT number AS k FROM numbers(5))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk * 2 AS k,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(10), (SELECT number AS k FROM numbers(5))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nintDiv(k, 2) AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v), COUNT(*)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(20), (SELECT number AS k FROM numbers(5))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(30), (SELECT number AS k FROM numbers(5))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(50), (SELECT number AS k FROM numbers(5))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(100), (SELECT number AS k FROM numbers(5))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(100), (SELECT number AS k FROM numbers(50))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(1000), (SELECT number AS k FROM numbers(5))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(1000), (SELECT number AS k FROM numbers(50))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH build AS ( SELECT\nk,\ntoDateTime('2001-01-01 00:00:00') + INTERVAL number MINUTE AS t,\nnumber AS v\nFROM numbers(10000), (SELECT number AS k FROM numbers(50))\nSETTINGS join_algorithm = 'default'\n),\nprobe AS (\nSELECT\nk * 2 AS k,\nt - INTERVAL 30 SECOND AS t\nFROM build\n)\nSELECT SUM(v)\nFROM probe ASOF JOIN build USING (k, t);","fileName":"../ClickHouse/tests/queries/0_stateless/03147_asof_join_ddb_missing.sql","errors":[]},{"query":"WITH CAST(tuple(1), 'Tuple (value UInt64)') AS compound_value SELECT id, test_table.* APPLY x -> compound_value.*\nFROM test_table\nWHERE arrayMap(x -> toString(x) AS lambda, [NULL, 256, 257, NULL, NULL])\nSETTINGS convert_query_to_cnf = true, optimize_using_constraints = true, optimize_substitute_columns = true; -- { serverError ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER }\nDESCRIBE TABLE (SELECT test_table.COLUMNS(id) FROM test_table WHERE '2147483647'); -- { serverError ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER }\nDROP TABLE test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/03144_invalid_filter.sql","errors":[{"message":"mismatched input '->' expecting <EOF>","startColumn":94,"startLine":1,"endColumn":96,"endLine":1}]},{"query":"WITH merged_test AS( \tSELECT * FROM  t Final\n)\nSELECT * FROM  merged_test;","fileName":"../ClickHouse/tests/queries/0_stateless/03129_cte_with_final.sql","errors":[]},{"query":"WITH cte1 as ( SELECT '1234' as x\n), cte2 as (\nSELECT '1234' as x\n)\nSELECT *\nFROM events AS events\nJOIN cte2 ON cte2.x = events.distinct_id\nJOIN cte1 ON cte1.x = cte2.x\nlimit 1;","fileName":"../ClickHouse/tests/queries/0_stateless/03125_analyzer_CTE_two_joins.sql","errors":[]},{"query":"with x as (\nselect number\nfrom numbers(10)\nwhere number % 3=0),\ny as (\nselect number, count()\nfrom table_dist\nwhere number in (select * from x)\ngroup by number\n)\nselect * from y\nORDER BY ALL;","fileName":"../ClickHouse/tests/queries/0_stateless/03124_analyzer_nested_CTE_dist_in.sql","errors":[]},{"query":"WITH {test_a:UInt32} as column SELECT column as number FROM numbers(2) FORMAT TSVWithNames;","fileName":"../ClickHouse/tests/queries/0_stateless/03120_analyzer_param_in_CTE_alias.sql","errors":[{"message":"no viable alternative at input 'WITH {'","startColumn":5,"startLine":1,"endColumn":6,"endLine":1}]},{"query":"WITH {test_a:UInt32} as column SELECT {test_a:UInt32} as number FROM numbers(2) FORMAT TSVWithNames;","fileName":"../ClickHouse/tests/queries/0_stateless/03120_analyzer_param_in_CTE_alias.sql","errors":[{"message":"no viable alternative at input 'WITH {'","startColumn":5,"startLine":1,"endColumn":6,"endLine":1}]},{"query":"WITH {test_a:UInt32} as column SELECT column FROM numbers(2) FORMAT TSVWithNames;","fileName":"../ClickHouse/tests/queries/0_stateless/03120_analyzer_param_in_CTE_alias.sql","errors":[{"message":"no viable alternative at input 'WITH {'","startColumn":5,"startLine":1,"endColumn":6,"endLine":1}]},{"query":"WITH avg(a) OVER () AS a SELECT a, id FROM test SETTINGS allow_experimental_window_functions = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/03119_analyzer_window_function_in_CTE_alias.sql","errors":[]},{"query":"WITH avg(a) OVER () AS a2 SELECT a2, id FROM test SETTINGS allow_experimental_window_functions = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/03119_analyzer_window_function_in_CTE_alias.sql","errors":[]},{"query":"with a as (select 1 as column_a) , b as (select 2 as column_b) select * FROM remote('127.0.0.{1,2}', currentDatabase(), t) as c\ninner join a on ID=column_a inner join b on ID=column_b;","fileName":"../ClickHouse/tests/queries/0_stateless/03114_analyzer_cte_with_join.sql","errors":[]},{"query":"WITH data AS (\nSELECT\nrand64() AS val1,\nrand64() AS val2,\nrand64() AS val3,\nrand64() AS val4,\nrand64() AS val5,\nrand64() AS val6,\nrand64() AS val7,\nrand64() AS val8,\nrand64() AS val9,\nrand64() AS val10,\nrand64() AS val11,\nrand64() AS val12,\nrand64() AS val13,\nrand64() AS val14\nFROM numbers(10)\n),\n(SELECT avg(val1) FROM data) AS value1,\n(SELECT avg(val2) FROM data) AS value2,\n(SELECT avg(val3) FROM data) AS value3,\n(SELECT avg(val4) FROM data) AS value4,\n(SELECT avg(val5) FROM data) AS value5,\n(SELECT avg(val6) FROM data) AS value6,\n(SELECT avg(val7) FROM data) AS value7,\n(SELECT avg(val8) FROM data) AS value8,\n(SELECT avg(val9) FROM data) AS value9,\n(SELECT avg(val10) FROM data) AS value10,\n(SELECT avg(val11) FROM data) AS value11,\n(SELECT avg(val12) FROM data) AS value12,\n(SELECT avg(val13) FROM data) AS value13,\n(SELECT avg(val14) FROM data) AS value14\nSELECT\nvalue1 AS v1,\nvalue2 AS v2,\nvalue3 AS v3,\nvalue4 AS v4,\nvalue5 AS v5,\nvalue6 AS v6,\nvalue7 AS v7,\nvalue8 AS v8,\nvalue9 AS v9,\nvalue10 AS v10,\nvalue11 AS v11,\nvalue12 AS v12,\nvalue13 AS v13,\nvalue14 AS v14\nFORMAT Null;","fileName":"../ClickHouse/tests/queries/0_stateless/03109_ast_too_big.sql","errors":[{"message":"no viable alternative at input 'WITH data AS (\\nSELECT\\nrand64() AS val1,\\nrand64() AS val2,\\nrand64() AS val3,\\nrand64() AS val4,\\nrand64() AS val5,\\nrand64() AS val6,\\nrand64() AS val7,\\nrand64() AS val8,\\nrand64() AS val9,\\nrand64() AS val10,\\nrand64() AS val11,\\nrand64() AS val12,\\nrand64() AS val13,\\nrand64() AS val14\\nFROM numbers(10)\\n),\\n('","startColumn":0,"startLine":19,"endColumn":1,"endLine":19}]},{"query":"with block_0 as ( select * from loans\n),\nblock_1 as (\nselect sum(loan_number) as loan_number from block_0 group by security_id\n)\nselect loan_number from block_1 where loan_number > 3 order by loan_number settings prefer_column_name_to_alias = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/03102_prefer_column_name_to_alias.sql","errors":[]},{"query":"WITH 123 AS x SELECT 555 FROM (SELECT a, x FROM (SELECT 1 AS a, 2 AS b));","fileName":"../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_2.sql","errors":[]},{"query":"WITH t AS (SELECT 1) SELECT t, (SELECT * FROM t) FROM t; -- { serverError UNKNOWN_IDENTIFIER } SELECT x FROM (SELECT y FROM VALUES ('y UInt16', (2)) WHERE (1 AS x) = y) AS t;  -- { serverError UNKNOWN_IDENTIFIER }\nSELECT t.x FROM (SELECT * FROM (SELECT 1 AS x) AS t); -- { serverError UNKNOWN_IDENTIFIER }\nSELECT x FROM (SELECT * FROM (SELECT 99 AS x) AS t);","fileName":"../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_2.sql","errors":[]},{"query":"WITH ['asynchronous_metric_log', 'asynchronous_insert_log', 'opentelemetry_span_log', 'coverage_log'] AS known_tables,\n'event_date, event_time' as default_sorting_key\nSELECT\n'Table ' || name || ' has non-default sorting key: ' || sorting_key\nFROM system.tables\nWHERE (database = 'system') AND (engine = 'MergeTree') AND (NOT arraySum(arrayMap(x -> position(name, x), known_tables))) AND (sorting_key != default_sorting_key);","fileName":"../ClickHouse/tests/queries/0_stateless/03096_order_by_system_tables.sql","errors":[]},{"query":"WITH 0 AS l, 10 AS r SELECT number * 2 FROM numbers(5) ORDER BY 1 WITH FILL FROM l TO r;","fileName":"../ClickHouse/tests/queries/0_stateless/03093_with_fill_support_constant_expression.sql","errors":[{"message":"mismatched input 'WITH' expecting <EOF>","startColumn":66,"startLine":1,"endColumn":70,"endLine":1}]},{"query":"WITH 0 AS l, 10 AS r SELECT number * 2 FROM numbers(5) ORDER BY 1 WITH FILL FROM l TO l + r;","fileName":"../ClickHouse/tests/queries/0_stateless/03093_with_fill_support_constant_expression.sql","errors":[{"message":"mismatched input 'WITH' expecting <EOF>","startColumn":66,"startLine":1,"endColumn":70,"endLine":1}]},{"query":"with dummy + 1 as dummy select dummy from system.one;","fileName":"../ClickHouse/tests/queries/0_stateless/03089_analyzer_alias_replacement.sql","errors":[]},{"query":"WITH dummy + 3 AS dummy SELECT dummy + 1 AS y\nFROM system.one\nSETTINGS enable_global_with_statement = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/03089_analyzer_alias_replacement.sql","errors":[]},{"query":"WITH max(dt) AS maxDt SELECT maxDt\nFROM test;","fileName":"../ClickHouse/tests/queries/0_stateless/03081_analyzer_agg_func_CTE.sql","errors":[]},{"query":"WITH max(number) AS maxDt SELECT maxDt\nFROM numbers(10);","fileName":"../ClickHouse/tests/queries/0_stateless/03081_analyzer_agg_func_CTE.sql","errors":[]},{"query":"WITH ( SELECT max(i)\nFROM t1\n) AS value\nSELECT\nvalue AS i,\nvalue AS j,\nvalue AS k,\nvalue AS l\nFROM t1;","fileName":"../ClickHouse/tests/queries/0_stateless/03077_analyzer_multi_scalar_subquery_aliases.sql","errors":[]},{"query":"with (select 25) as something\nselect *, something\nfrom numbers(toUInt64(assumeNotNull(something)));","fileName":"../ClickHouse/tests/queries/0_stateless/03070_analyzer_CTE_scalar_as_numbers.sql","errors":[]},{"query":"with d as (select 'key'::Varchar(255) c, 'x'::Varchar(255) s) SELECT r1, c as r2\nFROM (\nSELECT t as s, c as r1\nFROM ( SELECT 'y'::Varchar(255) as t, 'x'::Varchar(255) as s) t1\nLEFT JOIN d USING (s)\n) t2\nLEFT JOIN d using (s)\nSETTINGS join_use_nulls=1;","fileName":"../ClickHouse/tests/queries/0_stateless/03067_analyzer_complex_alias_join.sql","errors":[{"message":"no viable alternative at input 'with d as (select 'key':'","startColumn":23,"startLine":1,"endColumn":24,"endLine":1}]},{"query":"WITH toInt64(2) AS new_x SELECT new_x AS x FROM (SELECT 1 AS x) t;","fileName":"../ClickHouse/tests/queries/0_stateless/03051_many_ctes.sql","errors":[]},{"query":"WITH toInt64(2) AS new_x SELECT * replace(new_x as x)  FROM (SELECT 1 AS x) t;","fileName":"../ClickHouse/tests/queries/0_stateless/03051_many_ctes.sql","errors":[{"message":"mismatched input 'replace' expecting <EOF>","startColumn":34,"startLine":1,"endColumn":41,"endLine":1}]},{"query":"WITH a as key\nSELECT\na as k1,\nsum(b) as k2\nFROM\ntest\nGROUP BY\nkey\nORDER BY k1, k2;","fileName":"../ClickHouse/tests/queries/0_stateless/03049_analyzer_group_by_alias.sql","errors":[]},{"query":"WITH a as key SELECT key as k1 FROM test GROUP BY key ORDER BY key;","fileName":"../ClickHouse/tests/queries/0_stateless/03049_analyzer_group_by_alias.sql","errors":[]},{"query":"WITH a as key SELECT key as k1 FROM test ORDER BY key;","fileName":"../ClickHouse/tests/queries/0_stateless/03049_analyzer_group_by_alias.sql","errors":[]},{"query":"WITH 10 as k SELECT k as key, * FROM repl_tbl WHERE key = k;","fileName":"../ClickHouse/tests/queries/0_stateless/03045_unknown_identifier_alias_substitution.sql","errors":[]},{"query":"WITH with_table as ( SELECT p.a_id, p.b_id, p.c_id FROM parent p\nLEFT JOIN join_table_1 jt1 ON jt1.a_id = p.a_id AND jt1.b_id = p.b_id\nLEFT JOIN join_table_2 jt2 ON jt2.c_id = p.c_id\nWHERE\np.a_id = 0 AND (jt2.c_id = 0 OR p.created_at = 0)\n)\nSELECT p.a_id, p.b_id, COUNT(*) as f_count FROM with_table\nGROUP BY p.a_id, p.b_id;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_select_with_query_result.sql","errors":[]},{"query":"WITH RECURSIVE foo AS (SELECT 1 AS i\nUNION ALL\n(SELECT i+1 FROM foo WHERE i < 10\nUNION ALL\nSELECT i+1 FROM foo WHERE i < 5)\n) SELECT * FROM foo;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE foo AS ('","startColumn":22,"startLine":1,"endColumn":23,"endLine":1}]},{"query":"WITH RECURSIVE foo AS (SELECT 1 AS i\nUNION ALL\nSELECT * FROM\n(SELECT i+1 FROM foo WHERE i < 10\nUNION ALL\nSELECT i+1 FROM foo WHERE i < 5) AS t\n) SELECT * FROM foo;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE foo AS ('","startColumn":22,"startLine":1,"endColumn":23,"endLine":1}]},{"query":"WITH RECURSIVE foo AS (SELECT 1 AS i\nUNION ALL\n(SELECT i+1 FROM foo WHERE i < 10\nEXCEPT\nSELECT i+1 FROM foo WHERE i < 5)\n) SELECT * FROM foo;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE foo AS ('","startColumn":22,"startLine":1,"endColumn":23,"endLine":1}]},{"query":"WITH RECURSIVE foo AS (SELECT 1 AS i\nUNION ALL\n(SELECT i+1 FROM foo WHERE i < 10\nINTERSECT\nSELECT i+1 FROM foo WHERE i < 5)\n) SELECT * FROM foo;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE foo AS ('","startColumn":22,"startLine":1,"endColumn":23,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( WITH RECURSIVE s AS (\nSELECT toUInt64(1) AS i\nUNION ALL\nSELECT i+1 FROM s WHERE i < 10\n)\nSELECT i AS j FROM s\nUNION ALL\nSELECT j+1 FROM t WHERE j < 10\n)\nSELECT * FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE tab AS (SELECT * FROM values('id_key UInt64, link UInt64', (1,17), (2,17), (3,17), (4,17), (6,17), (5,17))),\niter AS (\nSELECT 0 AS id_key, 'base' AS row_type, 17 AS link\nUNION ALL (\nWITH remaining AS (\nSELECT tab.id_key AS id_key, 'true'::text AS row_type, iter.link AS link, MIN(tab.id_key) OVER () AS min\nFROM tab INNER JOIN iter USING (link)\nWHERE tab.id_key > iter.id_key\n),\nfirst_remaining AS (\nSELECT id_key, row_type, link\nFROM remaining\nWHERE id_key=min\n),\neffect AS (\nSELECT tab.id_key AS id_key, 'new'::text AS row_type, tab.link AS link\nFROM first_remaining e INNER JOIN tab ON e.id_key=tab.id_key\nWHERE e.row_type = 'false'\n)\nSELECT * FROM first_remaining\nUNION ALL SELECT * FROM effect\n)\n)\nSELECT * FROM iter;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE tab AS ('","startColumn":22,"startLine":1,"endColumn":23,"endLine":1}]},{"query":"WITH RECURSIVE x AS (SELECT 1 AS n INTERSECT SELECT n+1 FROM x) SELECT * FROM x; -- {serverError UNSUPPORTED_METHOD}\nWITH RECURSIVE x AS (SELECT 1 AS n INTERSECT ALL SELECT n+1 FROM x)\nSELECT * FROM x; -- {serverError UNSUPPORTED_METHOD}\nWITH RECURSIVE x AS (SELECT 1 AS n EXCEPT SELECT n+1 FROM x)\nSELECT * FROM x; -- {serverError UNSUPPORTED_METHOD}\nWITH RECURSIVE x AS (SELECT 1 AS n EXCEPT ALL SELECT n+1 FROM x)\nSELECT * FROM x; -- {serverError UNSUPPORTED_METHOD}\nWITH RECURSIVE x AS (SELECT n FROM x)\nSELECT * FROM x; -- {serverError UNKNOWN_TABLE}\nWITH RECURSIVE x AS (SELECT n FROM x UNION ALL SELECT 1 AS n)\nSELECT * FROM x; -- {serverError UNKNOWN_TABLE}\nDROP TABLE IF EXISTS y;","fileName":"../ClickHouse/tests/queries/0_stateless/03040_recursive_cte_postgres_6.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE x AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH toString(number) as str\nSELECT\n*,\ncount() OVER () AS c\nFROM numbers(10)\nORDER BY str;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_unknown_identifier_window_function.sql","errors":[]},{"query":"WITH test AS (\nSELECT\n*,\ncount() OVER () AS c\nFROM numbers(10)\n)\nSELECT * FROM test\nORDER BY toString(number);","fileName":"../ClickHouse/tests/queries/0_stateless/03039_unknown_identifier_window_function.sql","errors":[]},{"query":"WITH RECURSIVE y AS (SELECT 1 AS id),\nx AS (SELECT * FROM y UNION ALL SELECT id+1 FROM x WHERE id < 5)\nSELECT * FROM x ORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE y AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE x AS (SELECT * FROM y UNION ALL SELECT id+1 FROM x WHERE id < 5),\ny AS (SELECT 1 AS id)\nSELECT * FROM x ORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE x AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE x AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 5),\ny AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM y WHERE id < 10)\nSELECT y.*, x.* FROM y LEFT JOIN x USING (id) ORDER BY y.id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE x AS\\n('","startColumn":0,"startLine":2,"endColumn":1,"endLine":2}]},{"query":"WITH RECURSIVE x AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 5),\ny AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 10)\nSELECT y.*, x.* FROM y LEFT JOIN x USING (id) ORDER BY y.id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE x AS\\n('","startColumn":0,"startLine":2,"endColumn":1,"endLine":2}]},{"query":"WITH RECURSIVE x AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 3 ),\ny AS\n(SELECT * FROM x UNION ALL SELECT * FROM x),\nz AS\n(SELECT * FROM x UNION ALL SELECT id+1 FROM z WHERE id < 10)\nSELECT * FROM z ORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE x AS\\n('","startColumn":0,"startLine":2,"endColumn":1,"endLine":2}]},{"query":"WITH RECURSIVE x AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 3 ),\ny AS\n(SELECT * FROM x UNION ALL SELECT * FROM x),\nz AS\n(SELECT * FROM y UNION ALL SELECT id+1 FROM z WHERE id < 10)\nSELECT * FROM z ORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE x AS\\n('","startColumn":0,"startLine":2,"endColumn":1,"endLine":2}]},{"query":"WITH RECURSIVE search_graph AS ( \tSELECT *, false AS is_cycle, [tuple(g.f, g.t)] AS path FROM graph g\n\tUNION ALL\n\tSELECT g.*, has(path, tuple(g.f, g.t)), arrayConcat(sg.path, [tuple(g.f, g.t)])\n\tFROM graph g, search_graph sg\n\tWHERE g.f = sg.t AND NOT is_cycle\n)\nSELECT * FROM search_graph;","fileName":"../ClickHouse/tests/queries/0_stateless/03038_recursive_cte_postgres_4.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_graph AS ('","startColumn":31,"startLine":1,"endColumn":32,"endLine":1}]},{"query":"WITH RECURSIVE search_graph AS ( \tSELECT *, false AS is_cycle, [tuple(g.f, g.t)] AS path FROM graph g\n\tUNION ALL\n\tSELECT g.*, has(path, tuple(g.f, g.t)), arrayConcat(sg.path, [tuple(g.f, g.t)])\n\tFROM graph g, search_graph sg\n\tWHERE g.f = sg.t AND NOT is_cycle\n)\nSELECT * FROM search_graph ORDER BY path;","fileName":"../ClickHouse/tests/queries/0_stateless/03038_recursive_cte_postgres_4.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_graph AS ('","startColumn":31,"startLine":1,"endColumn":32,"endLine":1}]},{"query":"WITH subquery AS ( SELECT\ntoUInt64(time) AS time,\ntoHour(03038_table.time)\nFROM 03038_table\n)\nSELECT *\nFROM subquery\nORDER BY subquery.time ASC;","fileName":"../ClickHouse/tests/queries/0_stateless/03038_ambiguous_column.sql","errors":[{"message":"no viable alternative at input 'WITH subquery AS ( SELECT\\ntoUInt64(time) AS time,\\ntoHour(03038_table.time'","startColumn":19,"startLine":3,"endColumn":23,"endLine":3}]},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS id, []::Array(UInt64) AS path\nUNION ALL\nSELECT tree.id, arrayConcat(t.path, [tree.id])\nFROM tree JOIN t ON (tree.parent_id = t.id)\n)\nSELECT t1.*, t2.* FROM t AS t1 JOIN t AS t2 ON\n(t1.path[1] = t2.path[1] AND\nlength(t1.path) = 1 AND\nlength(t2.path) > 1)\nORDER BY t1.id, t2.id;","fileName":"../ClickHouse/tests/queries/0_stateless/03037_recursive_cte_postgres_3.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS id, []::Array(UInt64) AS path\nUNION ALL\nSELECT tree.id, arrayConcat(t.path, [tree.id])\nFROM tree JOIN t ON (tree.parent_id = t.id)\n)\nSELECT t1.id, count(t2.path) FROM t AS t1 JOIN t AS t2 ON\n(t1.path[1] = t2.path[1] AND\nlength(t1.path) = 1 AND\nlength(t2.path) > 1)\nGROUP BY t1.id\nORDER BY t1.id;","fileName":"../ClickHouse/tests/queries/0_stateless/03037_recursive_cte_postgres_3.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS id, []::Array(UInt64) AS path\nUNION ALL\nSELECT tree.id, arrayConcat(t.path, [tree.id])\nFROM tree JOIN t ON (tree.parent_id = t.id)\n)\nSELECT t1.id, t2.path, tuple(t2.*) FROM t AS t1 JOIN t AS t2 ON\n(t1.id=t2.id);","fileName":"../ClickHouse/tests/queries/0_stateless/03037_recursive_cte_postgres_3.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH 10 AS n SELECT *\nFROM numbers(n);","fileName":"../ClickHouse/tests/queries/0_stateless/03036_with_numbers.sql","errors":[]},{"query":"WITH cast(10, 'UInt64') AS n SELECT *\nFROM numbers(n);","fileName":"../ClickHouse/tests/queries/0_stateless/03036_with_numbers.sql","errors":[]},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT name as root_name, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.root_name, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT 1 AS level, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT 1 AS level, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment WHERE level >= 2 ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT * FROM department WHERE name = 'A'\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE q AS ( SELECT * FROM department\nUNION ALL\n(WITH x AS (SELECT * FROM q)\nSELECT * FROM x)\n)\nSELECT * FROM q LIMIT 24;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE q AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE q AS ( SELECT * FROM department\nUNION ALL\n(WITH RECURSIVE x AS (\nSELECT * FROM department\nUNION ALL\n(SELECT * FROM q UNION ALL SELECT * FROM x)\n)\nSELECT * FROM x)\n)\nSELECT * FROM q LIMIT 32;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE q AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS i, 2 AS j\nUNION ALL\nSELECT t2.i, t.j+1 FROM\n(SELECT 2 AS i UNION ALL SELECT 3 AS i) AS t2\nJOIN t ON (t2.i = t.i+1))\nSELECT * FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS n\nUNION ALL\nSELECT n+1 FROM t WHERE n < 100\n)\nSELECT sum(n) FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS n\nUNION ALL\nSELECT n+1 FROM t WHERE n < 5\n)\nSELECT * FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS n\nUNION ALL\nSELECT n+1 FROM t)\nSELECT * FROM t LIMIT 10;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( SELECT 'foo' AS n\nUNION ALL\nSELECT n || ' bar' FROM t WHERE length(n) < 20\n)\nSELECT n, toTypeName(n) FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE t AS ( SELECT '7' AS n\nUNION ALL\nSELECT n+1 FROM t WHERE n < 10\n)\nSELECT n, toTypeName(n) FROM t; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nWITH RECURSIVE w1 AS\n(WITH w2 AS\n(WITH w3 AS\n(WITH w4 AS\n(WITH w5 AS\n(WITH RECURSIVE w6 AS\n(WITH w7 AS\n(WITH w8 AS\n(SELECT 1)\nSELECT * FROM w8)\nSELECT * FROM w7)\nSELECT * FROM w6)\nSELECT * FROM w5)\nSELECT * FROM w4)\nSELECT * FROM w3)\nSELECT * FROM w2)\nSELECT * FROM w1;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE t AS ('","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, link, data\nFROM tree t\nWHERE t.id = 0\nUNION ALL\nSELECT t.id, t.link, t.data\nFROM tree t, search_tree st\nWHERE t.link = st.id\n)\nSELECT * FROM search_tree;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('","startColumn":30,"startLine":1,"endColumn":31,"endLine":1}]},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, link, data, [t.id] AS path\nFROM tree t\nWHERE t.id = 0\nUNION ALL\nSELECT t.id, t.link, t.data, arrayConcat(path, [t.id])\nFROM tree t, search_tree st\nWHERE t.link = st.id\n)\nSELECT * FROM search_tree;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('","startColumn":30,"startLine":1,"endColumn":31,"endLine":1}]},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT name as root_name, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.root_name, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT 1 AS level, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT 1 AS level, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment WHERE level >= 2 ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT * FROM department WHERE name = 'A'\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, link, data\nFROM tree t\nWHERE t.id = 0\nUNION ALL\nSELECT t.id, t.link, t.data\nFROM tree t, search_tree st\nWHERE t.link = st.id\n)\nSELECT * FROM search_tree;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('","startColumn":30,"startLine":1,"endColumn":31,"endLine":1}]},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, link, data, [t.id] AS path\nFROM tree t\nWHERE t.id = 0\nUNION ALL\nSELECT t.id, t.link, t.data, arrayConcat(path, [t.id])\nFROM tree t, search_tree st\nWHERE t.link = st.id\n)\nSELECT * FROM search_tree;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('","startColumn":30,"startLine":1,"endColumn":31,"endLine":1}]},{"query":"WITH helper AS (\nSELECT\n*\nFROM\n03033_example_table\nORDER BY\nColumnA WITH FILL INTERPOLATE (\nColumnB AS ColumnC,\nColumnC AS ColumnA\n)\n)\nSELECT ColumnB FROM helper;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_with_fill_interpolate.sql","errors":[{"message":"no viable alternative at input 'WITH helper AS (\\nSELECT\\n*\\nFROM\\n03033'","startColumn":0,"startLine":5,"endColumn":5,"endLine":5}]},{"query":"WITH RECURSIVE recursive_cte AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE recursive_cte AS (SELECT toUInt8(1) AS n UNION ALL SELECT toUInt8(n + 1) FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE recursive_cte AS (SELECT toUInt16(1) AS n UNION ALL SELECT toUInt8(n + 1) FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE recursive_cte AS (SELECT materialize(toUInt16(1)) AS n UNION ALL SELECT toUInt8(n + 1) FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE recursive_cte AS (SELECT toUInt16(1) AS n UNION ALL SELECT materialize(toUInt8(n + 1)) FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE recursive_cte AS (SELECT toUInt16(1) AS n, '1' AS concat UNION ALL SELECT materialize(toUInt8(n + 1)), concat || toString(n + 1) FROM recursive_cte WHERE n < 10) SELECT n, concat FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH RECURSIVE recursive_cte AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM recursive_cte) SELECT n FROM recursive_cte LIMIT 5;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","errors":[{"message":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH (SELECT number FROM system.numbers LIMIT 1) as w1,\n(SELECT number FROM system.numbers LIMIT 1) as w2,\n(SELECT number FROM system.numbers LIMIT 1) as w3,\n(SELECT number FROM system.numbers LIMIT 1) as w4,\n(SELECT number FROM system.numbers LIMIT 1) as w5,\n(SELECT number FROM system.numbers LIMIT 1) as w6\nSELECT number FROM (\nSELECT number FROM system.numbers LIMIT 10\nUNION ALL\nSELECT number FROM system.numbers LIMIT 10\n)\nWHERE number < 5;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_cte_numbers_memory.sql","errors":[]},{"query":"WITH (SELECT v FROM vecs_Float32 limit 1) AS a SELECT count(dp) FROM (SELECT dotProduct(a, v) AS dp FROM vecs_Float32);","fileName":"../ClickHouse/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.sql","errors":[]},{"query":"WITH 'Hello'::Enum8('Hello', 'World') AS enum1, 'test'::Enum8('test', 'best') AS enum2 SELECT [enum1, 'Goodbye', enum2];","fileName":"../ClickHouse/tests/queries/0_stateless/03003_enum_and_string_compatible.sql","errors":[{"message":"no viable alternative at input 'WITH 'Hello':'","startColumn":12,"startLine":1,"endColumn":13,"endLine":1}]},{"query":"WITH ( SELECT dummy AS x\nFROM system.one\n) AS y\nSELECT\ny,\nmin(dummy)\nFROM remote('127.0.0.{1,2}', system.one)\nGROUP BY y;","fileName":"../ClickHouse/tests/queries/0_stateless/02992_analyzer_group_by_const.sql","errors":[]},{"query":"WITH ( SELECT dummy AS x\nFROM system.one\n) AS y\nSELECT\ny,\nmin(dummy)\nFROM remote('127.0.0.{2,3}', system.one)\nGROUP BY y;","fileName":"../ClickHouse/tests/queries/0_stateless/02992_analyzer_group_by_const.sql","errors":[]},{"query":"WITH (\nSELECT\n(query_id, query_start_time, query_start_time_microseconds)\nFROM\nsystem.query_log\nWHERE\nevent_date >= yesterday()\nAND current_database = currentDatabase()\nAND log_comment = '02985_shard_query_start_time_query_1'\nAND type = 'QueryFinish'\n) AS id_and_start_tuple\nSELECT\ntype,\ncountIf(query_start_time >= initial_query_start_time), -- Using >= because it's comparing seconds\ncountIf(query_start_time_microseconds > initial_query_start_time_microseconds),\ncountIf(initial_query_start_time = id_and_start_tuple.2),\ncountIf(initial_query_start_time_microseconds = id_and_start_tuple.3)\nFROM\nsystem.query_log\nWHERE\nNOT is_initial_query AND initial_query_id = id_and_start_tuple.1\nGROUP BY type;","fileName":"../ClickHouse/tests/queries/0_stateless/02985_shard_query_start_time.sql","errors":[]},{"query":"with d1 as ( select\n1 as a,\n2 as b\n),\nd2 as (\nselect\n1 as a,\n3 as c\n),\njoined as (\nselect\nd1.*,\nd2.c\nfrom d1\ninner join d2\non (d1.a = d2.a)\n)\nselect c\nfrom joined;","fileName":"../ClickHouse/tests/queries/0_stateless/02973_analyzer_join_use_nulls_column_not_found.sql","errors":[]},{"query":"WITH a AS ( SELECT 0 AS key, 'a' AS acol ),\nb AS ( SELECT 2 AS key )\nSELECT a.key\nFROM b\nLEFT JOIN a ON 1\nLEFT JOIN a AS a1 ON 1\n;","fileName":"../ClickHouse/tests/queries/0_stateless/02973_analyzer_join_use_nulls_column_not_found.sql","errors":[]},{"query":"WITH a AS ( SELECT 0 AS key, 'a' AS acol ),\nb AS ( SELECT 2 AS key )\nSELECT a.acol, a1.acol\nFROM b\nLEFT JOIN a ON a.key = b.key\nLEFT JOIN a AS a1 ON a1.key = a.key\n;","fileName":"../ClickHouse/tests/queries/0_stateless/02973_analyzer_join_use_nulls_column_not_found.sql","errors":[]},{"query":"WITH a AS ( SELECT 0 AS key, 'a' AS acol ),\nb AS ( SELECT 2 AS key )\nSELECT a.acol, a1.acol\nFROM b\nFULL JOIN a ON a.key = b.key\nFULL JOIN a AS a1 ON a1.key = a.key\nORDER BY 1\nSETTINGS join_use_nulls = 0\n;","fileName":"../ClickHouse/tests/queries/0_stateless/02973_analyzer_join_use_nulls_column_not_found.sql","errors":[]},{"query":"WITH a AS ( SELECT 0 AS key, 'a' AS acol ),\nb AS ( SELECT 2 AS key )\nSELECT a.acol, a1.acol\nFROM b\nFULL JOIN a ON a.key = b.key\nFULL JOIN a AS a1 ON a1.key = a.key\nORDER BY 1\n;","fileName":"../ClickHouse/tests/queries/0_stateless/02973_analyzer_join_use_nulls_column_not_found.sql","errors":[]},{"query":"WITH filtered_groups AS (SELECT a FROM pr_1 WHERE a >= 100) SELECT count() FROM pr_2 INNER JOIN filtered_groups ON pr_2.a = filtered_groups.a;","fileName":"../ClickHouse/tests/queries/0_stateless/02972_parallel_replicas_cte.sql","errors":[]},{"query":"WITH filtered_groups AS (SELECT a FROM pr_1 WHERE a >= 100) SELECT count() FROM pr_2 INNER JOIN filtered_groups ON pr_2.a = filtered_groups.a\nSETTINGS allow_experimental_parallel_reading_from_replicas = 1, parallel_replicas_for_non_replicated_merge_tree = 1, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', max_parallel_replicas = 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02972_parallel_replicas_cte.sql","errors":[]},{"query":"WITH filtered_groups AS (SELECT a FROM pr_1 WHERE a >= 100) SELECT count() FROM pr_2 INNER JOIN filtered_groups ON pr_2.a = filtered_groups.a\nSETTINGS enable_analyzer = 0, allow_experimental_parallel_reading_from_replicas = 2, parallel_replicas_for_non_replicated_merge_tree = 1, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', max_parallel_replicas = 3; -- { serverError SUPPORT_IS_DISABLED }\nWITH filtered_groups AS (SELECT a FROM pr_1 WHERE a >= 100)\nSELECT count() FROM pr_2 INNER JOIN filtered_groups ON pr_2.a = filtered_groups.a\nSETTINGS enable_analyzer = 0, allow_experimental_parallel_reading_from_replicas = 512, parallel_replicas_for_non_replicated_merge_tree = 1, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', max_parallel_replicas = 3; -- { serverError SUPPORT_IS_DISABLED }\nSELECT count() FROM pr_2 JOIN numbers(10) as pr_1 ON pr_2.a = pr_1.number\nSETTINGS allow_experimental_parallel_reading_from_replicas = 1, parallel_replicas_for_non_replicated_merge_tree = 1, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', max_parallel_replicas = 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02972_parallel_replicas_cte.sql","errors":[]},{"query":"WITH cte1 AS\n(\nSELECT n\nFROM numbers_1e3\n),\ncte2 AS\n(\nSELECT n\nFROM numbers_1e3\nWHERE n IN (cte1)\n)\nSELECT count()\nFROM cte2\nSETTINGS allow_experimental_parallel_reading_from_replicas = 1, parallel_replicas_for_non_replicated_merge_tree = 1, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', max_parallel_replicas = 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02972_parallel_replicas_cte.sql","errors":[]},{"query":"WITH arraySlice(arrayReverseSort(x -> (x.2, x.1), arrayZip(untuple(sumMap(([k], [1]))))), 1, 5) AS topKExact,\narraySlice(arrayReverseSort(x -> (x.2, x.1), arrayZip(untuple(sumMap(([k], [w]))))), 1, 5) AS topKWeightedExact\nSELECT\ntopKExact,\ntopKWeightedExact,\ntopK(3, 2, 'counts')(k) AS topK_counts,\ntopKWeighted(3, 2, 'counts')(k, w) AS topKWeighted_counts,\napprox_top_count(3, 6)(k) AS approx_top_count,\napprox_top_k(3, 6)(k) AS approx_top_k,\napprox_top_sum(3, 6)(k, w) AS approx_top_sum\nFROM\n(\nSELECT\nconcat(countDigits(number * number), '_', intDiv((number % 10), 7)) AS k,\nnumber AS w\nFROM numbers(1000)\n);","fileName":"../ClickHouse/tests/queries/0_stateless/02966_topk_counts_approx_count_sum.sql","errors":[]},{"query":"WITH arrayJoin(['Hello', 'world'])::Enum('Hello', 'world') AS x SELECT x, transform(x, ['Hello', 'world'], [123, 456], 0);","fileName":"../ClickHouse/tests/queries/0_stateless/02958_transform_enum.sql","errors":[{"message":"no viable alternative at input 'WITH arrayJoin(['Hello', 'world']):'","startColumn":34,"startLine":1,"endColumn":35,"endLine":1}]},{"query":"WITH arrayJoin(['Hello', 'world'])::Enum('Hello', 'world') AS x SELECT x, transform(x, ['Hello', 'world', 'goodbye'], [123, 456], 0); -- { serverError UNKNOWN_ELEMENT_OF_ENUM } WITH arrayJoin(['Hello', 'world'])::Enum('Hello', 'world') AS x SELECT x, transform(x, ['Hello', 'world'], ['test', 'best']::Array(Enum('test' = 123, 'best' = 456, '' = 0)), ''::Enum('test' = 123, 'best' = 456, '' = 0)) AS y;","fileName":"../ClickHouse/tests/queries/0_stateless/02958_transform_enum.sql","errors":[{"message":"no viable alternative at input 'WITH arrayJoin(['Hello', 'world']):'","startColumn":34,"startLine":1,"endColumn":35,"endLine":1}]},{"query":"WITH (SELECT '111111111111111111111111111111111111111'::UInt128) AS v SELECT sum(x), max(v) FROM test;","fileName":"../ClickHouse/tests/queries/0_stateless/02949_parallel_replicas_scalar_subquery_big_integer.sql","errors":[{"message":"no viable alternative at input 'WITH (SELECT '111111111111111111111111111111111111111':'","startColumn":54,"startLine":1,"endColumn":55,"endLine":1}]},{"query":"WITH toIPv6('FFFF:0000:FFFF:0000:FFFF:0000:FFFF:0000') AS ip1, toIPv6('0000:FFFF:0000:FFFF:0000:FFFF:0000:FFFF') AS ip2, CAST('226854911280625642308916404954512140970', 'UInt128') AS n1, CAST('113427455640312821154458202477256070485', 'UInt128') AS n2\nSELECT bin(ip1), bin(ip2), bin(n1), bin(n2),\nbin(bitAnd(ip1, n1)), bin(bitAnd(n1, ip1)), bin(bitAnd(ip2, n1)), bin(bitAnd(n1, ip2)),\nbin(bitAnd(ip1, n2)), bin(bitAnd(n2, ip1)), bin(bitAnd(ip2, n2)), bin(bitAnd(n2, ip2)),\nbin(bitOr(ip1, n1)), bin(bitOr(n1, ip1)), bin(bitOr(ip2, n1)), bin(bitOr(n1, ip2)),\nbin(bitOr(ip1, n2)), bin(bitOr(n2, ip1)), bin(bitOr(ip2, n2)), bin(bitOr(n2, ip2));","fileName":"../ClickHouse/tests/queries/0_stateless/02935_ipv6_bit_operations.sql","errors":[]},{"query":"WITH 1::Nullable(UInt64) as my_literal Select sum(number + my_literal) from numbers(0);","fileName":"../ClickHouse/tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.sql","errors":[{"message":"no viable alternative at input 'WITH 1:'","startColumn":6,"startLine":1,"endColumn":7,"endLine":1}]},{"query":"WITH 1::Nullable(UInt64) as my_literal Select sum(number) + my_literal * count() from numbers(0);","fileName":"../ClickHouse/tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.sql","errors":[{"message":"no viable alternative at input 'WITH 1:'","startColumn":6,"startLine":1,"endColumn":7,"endLine":1}]},{"query":"WITH 1::Nullable(UInt64) as my_literal Select sum(number + my_literal) from numbers(0);","fileName":"../ClickHouse/tests/queries/0_stateless/02931_rewrite_sum_column_and_constant.sql","errors":[{"message":"no viable alternative at input 'WITH 1:'","startColumn":6,"startLine":1,"endColumn":7,"endLine":1}]},{"query":"WITH 1::Nullable(UInt64) as my_literal Select sum(number) + my_literal * count() from numbers(0);","fileName":"../ClickHouse/tests/queries/0_stateless/02931_rewrite_sum_column_and_constant.sql","errors":[{"message":"no viable alternative at input 'WITH 1:'","startColumn":6,"startLine":1,"endColumn":7,"endLine":1}]},{"query":"WITH (path = 'test1') OR match(path, 'test2') OR (match(path, 'test3') AND match(path, 'test2')) OR match(path, 'test4') OR (path = 'test5') OR (path = 'test6') AS alias_in_error SELECT count(1)\nFROM test_bug_optimization\nWHERE alias_in_error;","fileName":"../ClickHouse/tests/queries/0_stateless/02923_cte_equality_disjunction.sql","errors":[]},{"query":"WITH x AS (SELECT in((SELECT * FROM y))),\ny AS (SELECT 1)\nSELECT * FROM x; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n","fileName":"../ClickHouse/tests/queries/0_stateless/02918_analyzer_to_ast_crash.sql","errors":[]},{"query":"WITH cte_1 AS (select\nsubq_1.c_5_c1698_16 as c_2_c1702_3,\nsubq_1.c_5_c1694_12 as c_2_c1703_4\nfrom\n(select\ncovarPop(-0, 74) as c_5_c1686_4,\nsumWithOverflow(0) as c_5_c1694_12,\ncovarPop(-53.64, 92.63) as c_5_c1698_16\nfrom\nt3 as ref_8\ngroup by ref_8.c17) as subq_1)\nselect\nref_15.c_2_c1703_4 as c_2_c1723_6,\nref_15.c_2_c1702_3 as c_2_c1724_7\nfrom\nt0 as ref_14\nRIGHT outer join cte_1 as ref_15\non (ref_14.c1 = ref_15.c_2_c1702_3)\nRIGHT outer join t1 as ref_16\non (ref_14.pkey = ref_16.vkey);","fileName":"../ClickHouse/tests/queries/0_stateless/02911_cte_invalid_query_analysis.sql","errors":[]},{"query":"WITH minSimpleState(value) AS c SELECT toTypeName(c), c\nFROM (\nSELECT NULL as value\nUNION ALL\nSELECT 1 as value\n);","fileName":"../ClickHouse/tests/queries/0_stateless/02888_single_state_nullable_type.sql","errors":[]},{"query":"WITH 'hours' AS maximum_unit,\narrayJoin([1.12, 60.2, 123.33, 24.45, 35.57, 66.64, 67.79, 48.88, 99.96, 3600]) AS elapsed\nSELECT\nformatReadableTimeDelta(elapsed, maximum_unit) AS time_delta;","fileName":"../ClickHouse/tests/queries/0_stateless/02887_format_readable_timedelta_subseconds.sql","errors":[]},{"query":"WITH 'milliseconds' AS maximum_unit,\narrayJoin([1.12, 60.2, 123.33, 24.45, 35.57, 66.64, 67.79797979, 48.888888, 99.96, 3600]) AS elapsed\nSELECT\nformatReadableTimeDelta(elapsed, maximum_unit) AS time_delta;","fileName":"../ClickHouse/tests/queries/0_stateless/02887_format_readable_timedelta_subseconds.sql","errors":[]},{"query":"WITH 'milliseconds' AS maximum_unit,\narrayJoin([0, 1.0005]) AS elapsed\nSELECT\nformatReadableTimeDelta(elapsed, maximum_unit);","fileName":"../ClickHouse/tests/queries/0_stateless/02887_format_readable_timedelta_subseconds.sql","errors":[]},{"query":"WITH 44100 AS sample_frequency\n, number AS tick\n, tick / sample_frequency AS time\n, (time, wave, delay_, decay, count) -> arraySum(n1 -> wave(time - delay_ * n1), range(count)) AS delay\n, delay(time, (time -> 0.5), 0.2, 0.5, 5) AS kick\nSELECT\nkick\nFROM system.numbers\nLIMIT 5;","fileName":"../ClickHouse/tests/queries/0_stateless/02841_with_clause_resolve.sql","errors":[{"message":"no viable alternative at input 'WITH 44100 AS sample_frequency\\n, number AS tick\\n, tick / sample_frequency AS time\\n, (time, wave, delay_, decay, count) ->'","startColumn":37,"startLine":4,"endColumn":39,"endLine":4}]},{"query":"WITH 44100 AS sample_frequency\n, number AS tick\n, tick / sample_frequency AS time\n, 1 AS master_volume\n, level -> least(1.0, greatest(-1.0, level)) AS clamp\n, level -> (clamp(level) * 0x7FFF * master_volume)::Int16 AS output\n, x -> (x, x) AS mono\n, time -> sin(time * 2 * pi()) AS sine_wave\n, time -> time::UInt64 % 2 * 2 - 1 AS square_wave\n, time -> (time - floor(time)) * 2 - 1 AS sawtooth_wave\n, time -> abs(sawtooth_wave(time)) * 2 - 1 AS triangle_wave\n, (from, to, wave, time) -> from + ((wave(time) + 1) / 2) * (to - from) AS lfo\n, (from, to, steps, time) -> from + floor((time - floor(time)) * steps) / steps * (to - from) AS step_lfo\n, (from, to, steps, time) -> exp(step_lfo(log(from), log(to), steps, time)) AS exp_step_lfo\n, time -> cityHash64(time) / 0xFFFFFFFFFFFFFFFF AS uniform_noise\n, time -> erf(uniform_noise(time)) AS white_noise\n, time -> cityHash64(time) % 2 ? 1 : -1 AS bernoulli_noise\n, (x, amount) -> clamp(x * amount) AS clipping\n, (x, amount) -> clamp(x > 0 ? pow(x, amount) : -pow(-x, amount)) AS power_distortion\n, (x, amount) -> round(x * exp2(amount)) / exp2(amount) AS bitcrush\n, (time, sample_frequency) -> round(time * sample_frequency) / sample_frequency AS desample\n, (time, wave, amount) -> (time - floor(time) < (1 - amount)) ? wave(time * (1 - amount)) : 0 AS thin\n, (time, wave, amount) -> wave(floor(time) + pow(time - floor(time), amount)) AS skew\n, (a, b, weight) -> a * (1 - weight) + b * weight AS combine\n, (time, offset, attack, hold, release) ->\ntime < offset ? 0\n: (time < offset + attack                  ? ((time - offset) / attack)\n: (time < offset + attack + hold           ? 1\n: (time < offset + attack + hold + release ? (offset + attack + hold + release - time) / release\n: 0))) AS envelope\n, (bpm, time, offset, attack, hold, release) ->\nenvelope(\ntime * (bpm / 60) - floor(time * (bpm / 60)),\noffset,\nattack,\nhold,\nrelease) AS running_envelope\n, (sequence, time) -> sequence[1 + time::UInt64 % length(sequence)] AS sequencer\n, (time, wave, delay, decay, count) -> arraySum(n -> wave(time - delay * n) * pow(decay, n), range(count)) AS delay\n, delay(time, (time -> power_distortion(sine_wave(time * 80 + sine_wave(time * 2)), lfo(0.5, 1, sine_wave, time / 16))\n* running_envelope(60, time, 0, 0.0, 0.01, 0.1)),\n0.2, 0.5, 5) AS kick\nSELECT\n(output(\nkick +\ndelay(time, (time ->\npower_distortion(\nsine_wave(time * 50 + 1 * sine_wave(time * 100 + 1/4))\n* running_envelope(60, time, 0, 0.01, 0.01, 0.1),\nlfo(1, 0.75, triangle_wave, time / 8))),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, time / 7)\n+ delay(time, (time ->\npower_distortion(\nsine_wave(time * sequencer([50, 100, 200, 400], time / 2) + 1 * sine_wave(time * sequencer([50, 100, 200], time / 4) + 1/4))\n* running_envelope(60, time, 0.5, 0.01, 0.01, 0.1),\nlfo(1, 0.75, triangle_wave, time / 8))),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, 16 + time / 11)\n+ delay(time, (time ->\nwhite_noise(time) * running_envelope(60, time, 0.75, 0.01, 0.01, 0.1)),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, 24 + time / 13)\n+ sine_wave(time * 100 + 1 * sine_wave(time * 10 + 1/4))\n* running_envelope(120, time, 0, 0.01, 0.01, 0.1)\n),\noutput(\nkick +\ndelay(time + 0.01, (time ->\npower_distortion(\nsine_wave(time * 50 + 1 * sine_wave(time * 100 + 1/4))\n* running_envelope(60, time, 0, 0.01, 0.01, 0.1),\nlfo(1, 0.75, triangle_wave, time / 8))),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, time / 7)\n+ delay(time - 0.01, (time ->\npower_distortion(\nsine_wave(time * sequencer([50, 100, 200, 400], time / 2) + 1 * sine_wave(time * sequencer([50, 100, 200], time / 4) + 1/4))\n* running_envelope(60, time, 0.5, 0.01, 0.01, 0.1),\nlfo(1, 0.75, triangle_wave, time / 8))),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, 16 + time / 11)\n+ delay(time + 0.005, (time ->\nwhite_noise(time) * running_envelope(60, time, 0.75, 0.01, 0.01, 0.1)),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, 24 + time / 13)\n))\nFROM system.numbers\nLIMIT 10;","fileName":"../ClickHouse/tests/queries/0_stateless/02841_with_clause_resolve.sql","errors":[{"message":"no viable alternative at input 'WITH 44100 AS sample_frequency\\n, number AS tick\\n, tick / sample_frequency AS time\\n, 1 AS master_volume\\n, level ->'","startColumn":8,"startLine":5,"endColumn":10,"endLine":5}]},{"query":"WITH subquery AS (SELECT []) SELECT t.* FROM 02834_t AS t JOIN subquery ON arrayExists(x -> x = 1, t.arr); -- { serverError INVALID_JOIN_ON_EXPRESSION } DROP TABLE 02834_t;","fileName":"../ClickHouse/tests/queries/0_stateless/02834_array_exists_segfault.sql","errors":[{"message":"no viable alternative at input 'WITH subquery AS (SELECT []) SELECT t.* FROM 02834'","startColumn":45,"startLine":1,"endColumn":50,"endLine":1}]},{"query":"WITH test_aliases AS (SELECT number FROM numbers(20)), alias2 AS (SELECT number FROM test_aliases) SELECT number FROM alias2 SETTINGS enable_global_with_statement = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02834_analyzer_with_statement_references.sql","errors":[]},{"query":"WITH (1,2,3) || ('a','b','c') || ('2020-10-08'::Date, '2020-11-08'::Date) AS t SELECT t, t.1, t.2, t.3, t.4, t.5, t.6, t.7, t.8;","fileName":"../ClickHouse/tests/queries/0_stateless/02833_tuple_concat.sql","errors":[{"message":"no viable alternative at input 'WITH (1,2,3) || ('a','b','c') || ('2020-10-08':'","startColumn":46,"startLine":1,"endColumn":47,"endLine":1}]},{"query":"WITH (tup || tup) AS res SELECT res, res.1, res.2, res.3, res.4 FROM t_02833;","fileName":"../ClickHouse/tests/queries/0_stateless/02833_tuple_concat.sql","errors":[]},{"query":"WITH (tup || (3, 4)) AS res SELECT res, res.1, res.2, res.3, res.4 FROM t_02833;","fileName":"../ClickHouse/tests/queries/0_stateless/02833_tuple_concat.sql","errors":[]},{"query":"WITH ((3, 4) || tup) AS res SELECT res, res.1, res.2, res.3, res.4 FROM t_02833;","fileName":"../ClickHouse/tests/queries/0_stateless/02833_tuple_concat.sql","errors":[]},{"query":"WITH (SELECT value IN ('ON', '1') FROM system.build_options WHERE name = 'USE_JEMALLOC') AS jemalloc_enabled,\n(SELECT count() FROM system.jemalloc_bins) AS total_bins,\n(SELECT count() FROM system.jemalloc_bins WHERE large) AS large_bins,\n(SELECT count() FROM system.jemalloc_bins WHERE NOT large) AS small_bins,\n(SELECT sum(size * (allocations - deallocations)) FROM system.jemalloc_bins WHERE large) AS large_allocated_bytes,\n(SELECT sum(size * (allocations - deallocations)) FROM system.jemalloc_bins WHERE NOT large) AS small_allocated_bytes\nSELECT\n(total_bins > 0) = jemalloc_enabled,\n(large_bins > 0) = jemalloc_enabled,\n(small_bins > 0) = jemalloc_enabled,\n(large_allocated_bytes > 0) = jemalloc_enabled,\n(small_allocated_bytes > 0) = jemalloc_enabled;","fileName":"../ClickHouse/tests/queries/0_stateless/02810_system_jemalloc_bins.sql","errors":[]},{"query":"with c as ( select 1 ID, toDate('2023-06-24') dt, 0 p ) select multiIf(t.ID = 1, formatRowNoNewline('JSONEachRow', dd), '') AS params     from (select ID, case when p = 0 then toString(date_add(hour, p, dt)) else '2022-01-01' end as dd from c) t;","fileName":"../ClickHouse/tests/queries/0_stateless/02806_cte_block_cannot_be_empty.sql","errors":[]},{"query":"with c as ( select 1 ID, toDate('2023-06-24') dt, 0 p ) select multiIf(t.ID = 1, formatRowNoNewline('JSONEachRow', dd), '') AS params, dd from (select ID, case when p = 0 then toString(date_add(hour, p, dt)) else '2022-01-01' end as dd from c) t;","fileName":"../ClickHouse/tests/queries/0_stateless/02806_cte_block_cannot_be_empty.sql","errors":[]},{"query":"WITH toDateTime('2023-06-30 23:59:30') AS dt_ref,\nnow() AS dt_now, \ndate_sub(DAY, 1, dt_now) as dt_before,\ndateDiff(SECOND, dt_ref, dt_now) AS time_shift,\nformatDateTime(dt_before, '%b %e %T') AS syslog_before\nSELECT\nformatDateTime(dt_before - time_shift, '%b %e %T') AS syslog_arg,\nparseDateTimeBestEffort(syslog_before) - time_shift AS res,\nparseDateTimeBestEffortOrNull(syslog_before) - time_shift AS res_null,\nparseDateTimeBestEffortOrZero(syslog_before) - time_shift AS res_zero,\nparseDateTimeBestEffortUS(syslog_before) - time_shift AS res_us,\nparseDateTimeBestEffortUSOrNull(syslog_before) - time_shift AS res_us_null,\nparseDateTimeBestEffortUSOrZero(syslog_before) - time_shift AS res_us_zero,\nparseDateTime64BestEffort(syslog_before) - time_shift AS res64,\nparseDateTime64BestEffortOrNull(syslog_before) - time_shift AS res64_null,\nparseDateTime64BestEffortOrZero(syslog_before) - time_shift AS res64_zero,\nparseDateTime64BestEffortUS(syslog_before) - time_shift AS res64_us,\nparseDateTime64BestEffortUSOrNull(syslog_before) - time_shift AS res64_us_null,\nparseDateTime64BestEffortUSOrZero(syslog_before) - time_shift AS res64_us_zero\nFORMAT Vertical;","fileName":"../ClickHouse/tests/queries/0_stateless/02783_parsedatetimebesteffort_syslog.sql","errors":[]},{"query":"WITH toDateTime('2023-06-30 23:59:30') AS dt_ref,\nnow() AS dt_now, \ndate_add(DAY, 1, dt_now) as dt_after,\ndateDiff(SECOND, dt_ref, dt_now) AS time_shift,\nformatDateTime(dt_after, '%b %e %T') AS syslog_after\nSELECT\nformatDateTime(dt_after - time_shift, '%b %e %T') AS syslog_arg,\nparseDateTimeBestEffort(syslog_after) - time_shift AS res,\nparseDateTimeBestEffortOrNull(syslog_after) - time_shift AS res_null,\nparseDateTimeBestEffortOrZero(syslog_after) - time_shift AS res_zero,\nparseDateTimeBestEffortUS(syslog_after) - time_shift AS res_us,\nparseDateTimeBestEffortUSOrNull(syslog_after) - time_shift AS res_us_null,\nparseDateTimeBestEffortUSOrZero(syslog_after) - time_shift AS res_us_zero,\nparseDateTime64BestEffort(syslog_after) - time_shift AS res64,\nparseDateTime64BestEffortOrNull(syslog_after) - time_shift AS res64_null,\nparseDateTime64BestEffortOrZero(syslog_after) - time_shift AS res64_zero,\nparseDateTime64BestEffortUS(syslog_after) - time_shift AS res64_us,\nparseDateTime64BestEffortUSOrNull(syslog_after) - time_shift AS res64_us_null,\nparseDateTime64BestEffortUSOrZero(syslog_after) - time_shift AS res64_us_zero\nFORMAT Vertical;","fileName":"../ClickHouse/tests/queries/0_stateless/02783_parsedatetimebesteffort_syslog.sql","errors":[]},{"query":"WITH test_cte AS (\nSELECT\nref_10.c11 as c_2_c2350_1,\nref_9.c9 as c_2_c2351_2\nFROM\ntest_table_1 as ref_9\nRIGHT OUTER JOIN test_table_1 as ref_10 ON (ref_9.c11 = ref_10.c9)\nINNER JOIN test_table_2 as ref_11 ON (ref_10.c8 = ref_11.vkey)\nWHERE ((ref_10.pkey + ref_11.pkey) BETWEEN ref_11.vkey AND (CASE WHEN (-30.87 >= ref_9.c10) THEN ref_11.c15 ELSE ref_11.pkey END))\n)\nSELECT ref_13.c_2_c2350_1 as c_2_c2357_3 FROM test_cte as ref_13 WHERE (ref_13.c_2_c2351_2) in (select ref_14.c_2_c2351_2 as c_5_c2352_0 FROM test_cte as ref_14);","fileName":"../ClickHouse/tests/queries/0_stateless/02771_jit_functions_comparison_crash.sql","errors":[]},{"query":"with (select count() > 0 from remote('127.2', system.settings)) as s select s;","fileName":"../ClickHouse/tests/queries/0_stateless/02768_cse_nested_distributed.sql","errors":[]},{"query":"with (select count() > 0 from remote('127.2', remote('127.2', system.settings))) as s select s;","fileName":"../ClickHouse/tests/queries/0_stateless/02768_cse_nested_distributed.sql","errors":[]},{"query":"with (select count() > 0 from remote('127.2', view(select count() from remote('127.2', system.settings)))) as s select s;","fileName":"../ClickHouse/tests/queries/0_stateless/02768_cse_nested_distributed.sql","errors":[{"message":"no viable alternative at input 'with (select count() > 0 from remote('127.2', view(select count'","startColumn":58,"startLine":1,"endColumn":63,"endLine":1}]},{"query":"WITH 18 AS precision,\ntoUInt256(-1) AS int,\ntoUInt256(toFloat64(int)) AS converted,\ntoString(int) AS int_str,\ntoString(converted) AS converted_str\nSELECT\nlength(int_str) = length(converted_str) AS have_same_length,\nsubstring(int_str, 1, precision) = substring(converted_str, 1, precision) AS have_same_prefix\n","fileName":"../ClickHouse/tests/queries/0_stateless/02734_big_int_from_float_ubsan.sql","errors":[]},{"query":"with toDateTime64('2023-01-01 00:00:00.000000001', 9, 'US/Eastern') as c select c+v1 as c_v1, c+v2 as c_v2, c+v3 as c_v3, date_diff(second, c, c_v1), date_diff(hour, c, c_v2), date_diff(second, c, c_v3) from saved_intervals_tmp;","fileName":"../ClickHouse/tests/queries/0_stateless/02724_persist_interval_type.sql","errors":[]},{"query":"with toDateTime64('2023-01-01 00:00:00.000000001', 9, 'US/Eastern') as c select c+v1 as c_v1, c+v2 as c_v2, c+v3 as c_v3, date_diff(second, c, c_v1), date_diff(hour, c, c_v2), date_diff(second, c, c_v3) from saved_intervals_mgt;","fileName":"../ClickHouse/tests/queries/0_stateless/02724_persist_interval_type.sql","errors":[]},{"query":"WITH toIPv4('127.0.0.10') AS ip SELECT\nip = 2130706442::UInt32,\nip = 0::UInt32,\nip < 2130706443::UInt32,\nip > 2130706441::UInt32,\nip <= 2130706442::UInt32,\nip >= 2130706442::UInt32,\nip != 2130706442::UInt32;","fileName":"../ClickHouse/tests/queries/0_stateless/02713_ip4_uint_compare.sql","errors":[{"message":"mismatched input ':' expecting <EOF>","startColumn":15,"startLine":2,"endColumn":16,"endLine":2}]},{"query":"WITH [(1, 2)] AS arr1 SELECT arrayMap((x, y) -> (y, x), arr1);","fileName":"../ClickHouse/tests/queries/0_stateless/02706_array_map_tuples.sql","errors":[]},{"query":"WITH [(1, 2)] AS arr1 SELECT arrayMap(x -> x.1, arr1);","fileName":"../ClickHouse/tests/queries/0_stateless/02706_array_map_tuples.sql","errors":[]},{"query":"WITH [(1, 2)] AS arr1, [(3, 4)] AS arr2 SELECT arrayMap((x, y) -> (y.1, x.2), arr1, arr2);","fileName":"../ClickHouse/tests/queries/0_stateless/02706_array_map_tuples.sql","errors":[]},{"query":"WITH ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR (path = '/b') OR (path = '/b/') as alias1 SELECT max(alias1) FROM remote('127.0.0.{1,2}', currentDatabase(), test_local) WHERE (id = 299386662);","fileName":"../ClickHouse/tests/queries/0_stateless/02695_logical_optimizer_alias_bug.sql","errors":[]},{"query":"WITH ('a', 'b')::Tuple(c1 String, c2 String) AS t SELECT t.c1, t.c2;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH ('a', 'b'):'","startColumn":15,"startLine":1,"endColumn":16,"endLine":1}]},{"query":"WITH materialize(('a', 'b')::Tuple(c1 String, c2 String)) AS t SELECT t.c1, t.c2;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH materialize(('a', 'b'):'","startColumn":27,"startLine":1,"endColumn":28,"endLine":1}]},{"query":"WITH (1, ('a', 'b'))::Tuple(c1 UInt64, t1 Tuple(c1 String, c2 String)) AS t SELECT t.c1, t.t1.c1, t.t1.c2;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH (1, ('a', 'b')):'","startColumn":20,"startLine":1,"endColumn":21,"endLine":1}]},{"query":"WITH materialize((1, ('a', 'b'))::Tuple(c1 UInt64, t1 Tuple(c1 String, c2 String))) AS t SELECT t.c1, t.t1.c1, t.t1.c2;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH materialize((1, ('a', 'b')):'","startColumn":32,"startLine":1,"endColumn":33,"endLine":1}]},{"query":"WITH [1, 2, 3] AS arr SELECT arr.size0;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[]},{"query":"WITH materialize([1, 2, 3]) AS arr SELECT arr.size0;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[]},{"query":"WITH [1, 2, NULL] AS arr SELECT arr.null;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH [1, 2, NULL] AS arr SELECT arr.null'","startColumn":36,"startLine":1,"endColumn":40,"endLine":1}]},{"query":"WITH materialize([1, 2, NULL]) AS arr SELECT arr.null;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH materialize([1, 2, NULL]) AS arr SELECT arr.null'","startColumn":49,"startLine":1,"endColumn":53,"endLine":1}]},{"query":"WITH [[1, 2], [], [3]] AS arr SELECT arr.size0, arr.size1;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[]},{"query":"WITH materialize([[1, 2], [], [3]]) AS arr SELECT arr.size0, arr.size1;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[]},{"query":"WITH map('foo', 1, 'bar', 2) AS m SELECT m.keys, m.values;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[]},{"query":"WITH materialize(map('foo', 1, 'bar', 2)) AS m SELECT m.keys, m.values;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[]},{"query":"WITH map('foo', 1, 'bar', 2) AS m SELECT m.*;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[]},{"query":"WITH map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64)) AS m SELECT m.keys, m.values, m.values.a, m.values.b;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH map('foo', (1, 2), 'bar', (3, 4)):'","startColumn":38,"startLine":1,"endColumn":39,"endLine":1}]},{"query":"WITH materialize(map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64))) AS m SELECT m.keys, m.values, m.values.a, m.values.b;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH materialize(map('foo', (1, 2), 'bar', (3, 4)):'","startColumn":50,"startLine":1,"endColumn":51,"endLine":1}]},{"query":"WITH map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64)) AS m SELECT m.keys, m.values, m.values.*;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH map('foo', (1, 2), 'bar', (3, 4)):'","startColumn":38,"startLine":1,"endColumn":39,"endLine":1}]},{"query":"WITH materialize(map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64))) AS m SELECT m.keys, m.values, m.values.*;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[{"message":"no viable alternative at input 'WITH materialize(map('foo', (1, 2), 'bar', (3, 4)):'","startColumn":50,"startLine":1,"endColumn":51,"endLine":1}]},{"query":"WITH [1, 2, 3] AS arr SELECT arr.*; -- { serverError UNSUPPORTED_METHOD } SELECT getSubcolumn([1, 2, 3], 'size0');","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","errors":[]},{"query":"WITH 1 as a SELECT a, FROM numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02676_trailing_commas.sql","errors":[{"message":"mismatched input '(' expecting <EOF>","startColumn":34,"startLine":1,"endColumn":35,"endLine":1}]},{"query":"WITH 1 as from SELECT from, from + from, from in [0], FROM numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02676_trailing_commas.sql","errors":[{"message":"mismatched input '(' expecting <EOF>","startColumn":66,"startLine":1,"endColumn":67,"endLine":1}]},{"query":"with arrayJoin([0, 1, 2, 10]) as x select quantilesGK(100, 0.5, 0.4, 0.1)(x);","fileName":"../ClickHouse/tests/queries/0_stateless/02661_quantile_approx.sql","errors":[]},{"query":"with arrayJoin([0, 6, 7, 9, 10]) as x select quantileGK(100, 0.5)(x);","fileName":"../ClickHouse/tests/queries/0_stateless/02661_quantile_approx.sql","errors":[]},{"query":"with number + 1 as col select quantilesGK(10000, 0.25, 0.5, 0.75)(col), count(col), quantilesGK(10000, 0.0, 1.0)(col), sum(col) from numbers(1000);","fileName":"../ClickHouse/tests/queries/0_stateless/02661_quantile_approx.sql","errors":[]},{"query":"WITH ( SELECT uuid\nFROM system.tables\nWHERE (database = currentDatabase()) AND (name = '02581_trips')\n) AS table_uuid\nSELECT\nCAST(splitByChar('_', query_id)[5], 'UInt64') AS mutation_version, -- '5521485f-8a40-4aba-87a2-00342c369563::all_3_3_0_6'\nsum(message LIKE 'Created Set with % entries%') >= 1  AS has_parts_for_which_set_was_built,\nsum(message LIKE 'Got set from cache%') >= 1 AS has_parts_that_shared_set\nFROM system.text_log\nWHERE\nquery_id LIKE concat(CAST(table_uuid, 'String'), '::all\\\\\\\\_%')\nAND (event_date >= yesterday())\nAND (message LIKE 'Created Set with % entries%' OR message LIKE 'Got set from cache%')\nGROUP BY mutation_version ORDER BY mutation_version FORMAT TSVWithNames;","fileName":"../ClickHouse/tests/queries/0_stateless/02581_share_big_sets_between_mutation_tasks_long.sql","errors":[]},{"query":"WITH ( SELECT uuid\nFROM system.tables\nWHERE (database = currentDatabase()) AND (name = '02581_trips')\n) AS table_uuid\nSELECT\nCAST(splitByChar('_', query_id)[5], 'UInt64') AS mutation_version, -- '5521485f-8a40-4aba-87a2-00342c369563::all_3_3_0_6'\nsum(message LIKE 'Created Set with % entries%') >= 1  AS has_parts_for_which_set_was_built,\nsum(message LIKE 'Got set from cache%') >= 1 AS has_parts_that_shared_set\nFROM system.text_log\nWHERE\nquery_id LIKE concat(CAST(table_uuid, 'String'), '::all\\\\\\\\_%')\nAND (event_date >= yesterday())\nAND (message LIKE 'Created Set with % entries%' OR message LIKE 'Got set from cache%')\nGROUP BY mutation_version ORDER BY mutation_version FORMAT TSVWithNames;","fileName":"../ClickHouse/tests/queries/0_stateless/02581_share_big_sets_between_multiple_mutations_tasks_long.sql","errors":[]},{"query":"WITH pow(NULL, 256) AS four SELECT NULL AS two GROUP BY GROUPING SETS ((pow(two, 65536)));","fileName":"../ClickHouse/tests/queries/0_stateless/02541_analyzer_grouping_sets_crash_fix.sql","errors":[{"message":"mismatched input '(' expecting <EOF>","startColumn":70,"startLine":1,"endColumn":71,"endLine":1}]},{"query":"WITH (SELECT pow(two, 1) GROUP BY GROUPING SETS ((pow(1, 9)))) AS four SELECT 2 AS two GROUP BY pow(1, two);","fileName":"../ClickHouse/tests/queries/0_stateless/02541_analyzer_grouping_sets_crash_fix.sql","errors":[{"message":"no viable alternative at input 'WITH (SELECT pow(two, 1) GROUP BY GROUPING SETS ('","startColumn":48,"startLine":1,"endColumn":49,"endLine":1}]},{"query":"WITH splitByChar('_', part_name) AS name_parts, name_parts[2]::UInt64 AS min_block,\nname_parts[3]::UInt64 AS max_block\nSELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log\nWHERE\ndatabase = currentDatabase() AND\ntable = 't_compact_vertical_merge' AND\nmin_block = 1 AND max_block = 2;","fileName":"../ClickHouse/tests/queries/0_stateless/02539_vertical_merge_compact_parts.sql","errors":[{"message":"no viable alternative at input 'WITH splitByChar('_', part_name) AS name_parts, name_parts[2]:'","startColumn":61,"startLine":1,"endColumn":62,"endLine":1}]},{"query":"WITH splitByChar('_', part_name) AS name_parts, name_parts[2]::UInt64 AS min_block,\nname_parts[3]::UInt64 AS max_block\nSELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log\nWHERE\ndatabase = currentDatabase() AND\ntable = 't_compact_vertical_merge' AND\nmin_block = 1 AND max_block = 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02539_vertical_merge_compact_parts.sql","errors":[{"message":"no viable alternative at input 'WITH splitByChar('_', part_name) AS name_parts, name_parts[2]:'","startColumn":61,"startLine":1,"endColumn":62,"endLine":1}]},{"query":"with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon), toDayOfWeek(date_sun);","fileName":"../ClickHouse/tests/queries/0_stateless/02521_to_custom_day_of_week.sql","errors":[]},{"query":"with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 0), toDayOfWeek(date_sun, 0);","fileName":"../ClickHouse/tests/queries/0_stateless/02521_to_custom_day_of_week.sql","errors":[]},{"query":"with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 1), toDayOfWeek(date_sun, 1);","fileName":"../ClickHouse/tests/queries/0_stateless/02521_to_custom_day_of_week.sql","errors":[]},{"query":"with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 2), toDayOfWeek(date_sun, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02521_to_custom_day_of_week.sql","errors":[]},{"query":"with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 3), toDayOfWeek(date_sun, 3);","fileName":"../ClickHouse/tests/queries/0_stateless/02521_to_custom_day_of_week.sql","errors":[]},{"query":"with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 4), toDayOfWeek(date_sun, 4);","fileName":"../ClickHouse/tests/queries/0_stateless/02521_to_custom_day_of_week.sql","errors":[]},{"query":"with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 5), toDayOfWeek(date_sun, 5);","fileName":"../ClickHouse/tests/queries/0_stateless/02521_to_custom_day_of_week.sql","errors":[]},{"query":"with toUInt64(id) as id_with select day, count(id_with) from test where day >= '2023-01-01' group by day limit 1000;","fileName":"../ClickHouse/tests/queries/0_stateless/02521_cannot_find_column_in_projection.sql","errors":[]},{"query":"with NULL as pid select a.col1, sum(a.col2) as summ\nfrom table1 a\nprewhere (pid is null or a.col2 = pid)\ngroup by a.col1;","fileName":"../ClickHouse/tests/queries/0_stateless/02510_group_by_prewhere_null.sql","errors":[]},{"query":"with 123 as pid select a.col1, sum(a.col2) as summ\nfrom table1 a\nprewhere (pid is null or a.col2 = pid)\ngroup by a.col1;","fileName":"../ClickHouse/tests/queries/0_stateless/02510_group_by_prewhere_null.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('1name:neymar, 4ge:31 _team:_psg,\\$nationality:@brazil') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('_:_, @:@ #:#,\\$:\\$') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:ney!mar, age:3! t&am:@psg,nationality:br4z!l') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('currency:\\\\\\$USD, amount\\\\z:\\$5\\\\h') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairsWithEscaping('valid_key:valid_value key:invalid_escape_sequence\\\\\\\\', ':', ' ', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:\"neymar\", \"age\":31 \"team\":\"psg\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:\"\", age: , nationality:') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('\"\":abc, :def') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:neymar;age:31;team:psg;random_key:value_with_comma,still_part_of_value:still_part_of_value;anotherkey:anothervalue', ':', ';') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:neymar;age:31;team:psg;nationality:brazil,last_key:last_value', ':', ';,') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:\\\\'neymar\\\\';\\\\'age\\\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[{"message":"no viable alternative at input 'WITH extractKeyValuePairs('name:\\\\'neymar\\'","startColumn":41,"startLine":1,"endColumn":42,"endLine":1}]},{"query":"WITH extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil', ':', ', ', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:ney!mar, age:3! t&am:@psg,nationality:br4z!l', ':', ', ', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('currency:\\\\\\$USD, amount\\\\z:\\$5\\\\h', ':', ', ', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('key1:header\\\\nbody key2:start_of_text\\\\tend_of_text', ':', ', ', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:\"neymar\", \"age\":31 \"team\":\"psg\"', ':', ', ', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:\"\", age: , nationality:', ':', ', ', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('\"\":abc, :def', ':', ', ', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:neymar;age:31;team:psg;nationality:brazil', ':', ';', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:neymar;age:31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\"') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('name:\\\\'neymar\\\\';\\\\'age\\\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[{"message":"no viable alternative at input 'WITH extractKeyValuePairs('name:\\\\'neymar\\'","startColumn":41,"startLine":1,"endColumn":42,"endLine":1}]},{"query":"WITH extractKeyValuePairs('not_important', ':', ',:', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError BAD_ARGUMENTS}\nWITH\nextractKeyValuePairs('not_important', ':', ',', '\\\\':') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError BAD_ARGUMENTS}\nWITH\nextractKeyValuePairs('not_important', ':', ',', ',') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError BAD_ARGUMENTS}\nWITH\nextractKeyValuePairs([1, 2]) AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH\nextractKeyValuePairs('', [1, 2]) AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH\nextractKeyValuePairs('', ':', [1, 2]) AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH\nextractKeyValuePairs('', ':', ' ', [1, 2]) AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH\nextractKeyValuePairs('not_important', ':', '123456789', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError BAD_ARGUMENTS}\nWITH\nextractKeyValuePairs() AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nWITH\nextractKeyValuePairs('a', ':', ',', '\"', '') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nSET extract_key_value_pairs_max_pairs_per_row = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[{"message":"no viable alternative at input 'WITH extractKeyValuePairs('not_important', ':', ',:', '\\\\'') AS s_map,\\nCAST(\\narrayMap(\\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\\n),\\n'Map('","startColumn":4,"startLine":6,"endColumn":5,"endLine":6}]},{"query":"WITH extractKeyValuePairs('key1:value1,key2:value2') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError LIMIT_EXCEEDED}\nSET extract_key_value_pairs_max_pairs_per_row = 2;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('key1:value1,key2:value2') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('key1:value1,key2:value2') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('not_important', ':', '12345678', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[{"message":"no viable alternative at input 'WITH extractKeyValuePairs('not_important', ':', '12345678', '\\\\'') AS s_map,\\nCAST(\\narrayMap(\\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\\n),\\n'Map('","startColumn":4,"startLine":6,"endColumn":5,"endLine":6}]},{"query":"WITH extractKeyValuePairs('formula=1+2=3 argument1=1 argument2=2 result=3, char=\"=\" char2== string=\"foo=bar\"', '=') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH extractKeyValuePairs('{\"a\":\"1\", \"b\":\"2\"}') as s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH sTr_tO_mAp('name:neymar, age:31 team:psg,nationality:brazil') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"WITH mapFromString('name:neymar, age:31 team:psg,nationality:brazil') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'S', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SS', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSS', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSS', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSS', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSS', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSSS', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSSSS', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSSSSS', 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_from_unixtime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G'), formatDateTimeInJodaSyntax(datetime64, 'G'), formatDateTimeInJodaSyntax(date, 'G'), formatDateTimeInJodaSyntax(date32, 'G');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'GG'), formatDateTimeInJodaSyntax(datetime64, 'GG'), formatDateTimeInJodaSyntax(date, 'GG'), formatDateTimeInJodaSyntax(date32, 'GG');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'GGG'), formatDateTimeInJodaSyntax(datetime64, 'GGG'), formatDateTimeInJodaSyntax(date, 'GGG'), formatDateTimeInJodaSyntax(date32, 'GGG');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'GGGG'), formatDateTimeInJodaSyntax(datetime64, 'GGGG'), formatDateTimeInJodaSyntax(date, 'GGGG'), formatDateTimeInJodaSyntax(date32, 'GGGG');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'GGGGG'), formatDateTimeInJodaSyntax(datetime64, 'GGGGG'), formatDateTimeInJodaSyntax(date, 'GGGGG'), formatDateTimeInJodaSyntax(date32, 'GGGGG');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'C'), formatDateTimeInJodaSyntax(datetime64, 'C'), formatDateTimeInJodaSyntax(date, 'C'), formatDateTimeInJodaSyntax(date32, 'C');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'CC'), formatDateTimeInJodaSyntax(datetime64, 'CC'), formatDateTimeInJodaSyntax(date, 'CC'), formatDateTimeInJodaSyntax(date32, 'CC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'CCC'), formatDateTimeInJodaSyntax(datetime64, 'CCC'), formatDateTimeInJodaSyntax(date, 'CCC'), formatDateTimeInJodaSyntax(date32, 'CCC');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'Y'), formatDateTimeInJodaSyntax(datetime64, 'Y'), formatDateTimeInJodaSyntax(date, 'Y'), formatDateTimeInJodaSyntax(date32, 'Y');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'YY'), formatDateTimeInJodaSyntax(datetime64, 'YY'), formatDateTimeInJodaSyntax(date, 'YY'), formatDateTimeInJodaSyntax(date32, 'YY');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'YYY'), formatDateTimeInJodaSyntax(datetime64, 'YYY'), formatDateTimeInJodaSyntax(date, 'YYY'), formatDateTimeInJodaSyntax(date32, 'YYY');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'YYYY'), formatDateTimeInJodaSyntax(datetime64, 'YYYY'), formatDateTimeInJodaSyntax(date, 'YYYY'), formatDateTimeInJodaSyntax(date32, 'YYYY');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'YYYYY'), formatDateTimeInJodaSyntax(datetime64, 'YYYYY'), formatDateTimeInJodaSyntax(date, 'YYYYY'), formatDateTimeInJodaSyntax(date32, 'YYYYY');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'e'), formatDateTimeInJodaSyntax(datetime64, 'e'), formatDateTimeInJodaSyntax(date, 'e'), formatDateTimeInJodaSyntax(date32, 'e');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'ee'), formatDateTimeInJodaSyntax(datetime64, 'ee'), formatDateTimeInJodaSyntax(date, 'ee'), formatDateTimeInJodaSyntax(date32, 'ee');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'E'), formatDateTimeInJodaSyntax(datetime64, 'E'), formatDateTimeInJodaSyntax(date, 'E'), formatDateTimeInJodaSyntax(date32, 'E');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'EE'), formatDateTimeInJodaSyntax(datetime64, 'EE'), formatDateTimeInJodaSyntax(date, 'EE'), formatDateTimeInJodaSyntax(date32, 'EE');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'EEE'), formatDateTimeInJodaSyntax(datetime64, 'EEE'), formatDateTimeInJodaSyntax(date, 'EEE'), formatDateTimeInJodaSyntax(date32, 'EEE');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'EEEE'), formatDateTimeInJodaSyntax(datetime64, 'EEEE'), formatDateTimeInJodaSyntax(date, 'EEEE'), formatDateTimeInJodaSyntax(date32, 'EEEE');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'EEEEE'), formatDateTimeInJodaSyntax(datetime64, 'EEEEE'), formatDateTimeInJodaSyntax(date, 'EEEEE'), formatDateTimeInJodaSyntax(date32, 'EEEEE');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'y'), formatDateTimeInJodaSyntax(datetime64, 'y'), formatDateTimeInJodaSyntax(date, 'y'), formatDateTimeInJodaSyntax(date32, 'y');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'yy'), formatDateTimeInJodaSyntax(datetime64, 'yy'), formatDateTimeInJodaSyntax(date, 'yy'), formatDateTimeInJodaSyntax(date32, 'yy');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'yyy'), formatDateTimeInJodaSyntax(datetime64, 'yyy'), formatDateTimeInJodaSyntax(date, 'yyy'), formatDateTimeInJodaSyntax(date32, 'yyy');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'yyyy'), formatDateTimeInJodaSyntax(datetime64, 'yyyy'), formatDateTimeInJodaSyntax(date, 'yyyy'), formatDateTimeInJodaSyntax(date32, 'yyyy');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'yyyyy'), formatDateTimeInJodaSyntax(datetime64, 'yyyyy'), formatDateTimeInJodaSyntax(date, 'yyyyy'), formatDateTimeInJodaSyntax(date32, 'yyyyy');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'D'), formatDateTimeInJodaSyntax(datetime64, 'D'), formatDateTimeInJodaSyntax(date, 'D'), formatDateTimeInJodaSyntax(date32, 'D');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'DD'), formatDateTimeInJodaSyntax(datetime64, 'DD'), formatDateTimeInJodaSyntax(date, 'DD'), formatDateTimeInJodaSyntax(date32, 'DD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'DDD'), formatDateTimeInJodaSyntax(datetime64, 'DDD'), formatDateTimeInJodaSyntax(date, 'DDD'), formatDateTimeInJodaSyntax(date32, 'DDD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'M'), formatDateTimeInJodaSyntax(datetime64, 'M'), formatDateTimeInJodaSyntax(date, 'M'), formatDateTimeInJodaSyntax(date32, 'M');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'MM'), formatDateTimeInJodaSyntax(datetime64, 'MM'), formatDateTimeInJodaSyntax(date, 'MM'), formatDateTimeInJodaSyntax(date32, 'MM');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'MMM'), formatDateTimeInJodaSyntax(datetime64, 'MMM'), formatDateTimeInJodaSyntax(date, 'MMM'), formatDateTimeInJodaSyntax(date32, 'MMM');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'MMMM'), formatDateTimeInJodaSyntax(datetime64, 'MMMM'), formatDateTimeInJodaSyntax(date, 'MMMM'), formatDateTimeInJodaSyntax(date32, 'MMMM');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'd'), formatDateTimeInJodaSyntax(datetime64, 'd'), formatDateTimeInJodaSyntax(date, 'd'), formatDateTimeInJodaSyntax(date32, 'd');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'dd'), formatDateTimeInJodaSyntax(datetime64, 'dd'), formatDateTimeInJodaSyntax(date, 'dd'), formatDateTimeInJodaSyntax(date32, 'dd');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'ddd'), formatDateTimeInJodaSyntax(datetime64, 'ddd'), formatDateTimeInJodaSyntax(date, 'ddd'), formatDateTimeInJodaSyntax(date32, 'ddd');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'a'), formatDateTimeInJodaSyntax(datetime64, 'a'), formatDateTimeInJodaSyntax(date, 'a'), formatDateTimeInJodaSyntax(date32, 'a');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'aa'), formatDateTimeInJodaSyntax(datetime64, 'aa'), formatDateTimeInJodaSyntax(date, 'aa'), formatDateTimeInJodaSyntax(date32, 'aa');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'aaa'), formatDateTimeInJodaSyntax(datetime64, 'aaa'), formatDateTimeInJodaSyntax(date, 'aaa'), formatDateTimeInJodaSyntax(date32, 'aaa');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'K'), formatDateTimeInJodaSyntax(datetime64, 'K'), formatDateTimeInJodaSyntax(date, 'K'), formatDateTimeInJodaSyntax(date32, 'K');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'KK'), formatDateTimeInJodaSyntax(datetime64, 'KK'), formatDateTimeInJodaSyntax(date, 'KK'), formatDateTimeInJodaSyntax(date32, 'KK');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'KKK'), formatDateTimeInJodaSyntax(datetime64, 'KKK'), formatDateTimeInJodaSyntax(date, 'KKK'), formatDateTimeInJodaSyntax(date32, 'KKK');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'h'), formatDateTimeInJodaSyntax(datetime64, 'h'), formatDateTimeInJodaSyntax(date, 'h'), formatDateTimeInJodaSyntax(date32, 'h');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'hh'), formatDateTimeInJodaSyntax(datetime64, 'hh'), formatDateTimeInJodaSyntax(date, 'hh'), formatDateTimeInJodaSyntax(date32, 'hh');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'hhh'), formatDateTimeInJodaSyntax(datetime64, 'hhh'), formatDateTimeInJodaSyntax(date, 'hhh'), formatDateTimeInJodaSyntax(date32, 'hhh');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'H'), formatDateTimeInJodaSyntax(datetime64, 'H'), formatDateTimeInJodaSyntax(date, 'H'), formatDateTimeInJodaSyntax(date32, 'H');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'HH'), formatDateTimeInJodaSyntax(datetime64, 'HH'), formatDateTimeInJodaSyntax(date, 'HH'), formatDateTimeInJodaSyntax(date32, 'HH');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'HHH'), formatDateTimeInJodaSyntax(datetime64, 'HHH'), formatDateTimeInJodaSyntax(date, 'HHH'), formatDateTimeInJodaSyntax(date32, 'HHH');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'k'), formatDateTimeInJodaSyntax(datetime64, 'k'), formatDateTimeInJodaSyntax(date, 'k'), formatDateTimeInJodaSyntax(date32, 'k');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'kk'), formatDateTimeInJodaSyntax(datetime64, 'kk'), formatDateTimeInJodaSyntax(date, 'kk'), formatDateTimeInJodaSyntax(date32, 'kk');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'kkk'), formatDateTimeInJodaSyntax(datetime64, 'kkk'), formatDateTimeInJodaSyntax(date, 'kkk'), formatDateTimeInJodaSyntax(date32, 'kkk');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'm'), formatDateTimeInJodaSyntax(datetime64, 'm'), formatDateTimeInJodaSyntax(date, 'm'), formatDateTimeInJodaSyntax(date32, 'm');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'mm'), formatDateTimeInJodaSyntax(datetime64, 'mm'), formatDateTimeInJodaSyntax(date, 'mm'), formatDateTimeInJodaSyntax(date32, 'mm');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'mmm'), formatDateTimeInJodaSyntax(datetime64, 'mmm'), formatDateTimeInJodaSyntax(date, 'mmm'), formatDateTimeInJodaSyntax(date32, 'mmm');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 's'), formatDateTimeInJodaSyntax(datetime64, 's'), formatDateTimeInJodaSyntax(date, 's'), formatDateTimeInJodaSyntax(date32, 's');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'ss'), formatDateTimeInJodaSyntax(datetime64, 'ss'), formatDateTimeInJodaSyntax(date, 'ss'), formatDateTimeInJodaSyntax(date32, 'ss');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'sss'), formatDateTimeInJodaSyntax(datetime64, 'sss'), formatDateTimeInJodaSyntax(date, 'sss'), formatDateTimeInJodaSyntax(date32, 'sss');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s, 'UTC') as datetime, toDateTime64(s, 6, 'UTC') as datetime64, toDate(s) as date, toDate32(s) as date32 select formatDateTimeInJodaSyntax(datetime, 'zzzz'), formatDateTimeInJodaSyntax(datetime64, 'zzzz');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G123DDD'), formatDateTimeInJodaSyntax(datetime64, 'G123DDD'), formatDateTimeInJodaSyntax(date, 'G123DDD'), formatDateTimeInJodaSyntax(date32, 'G123DDD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'\\\\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\\\\'\\\\'DDD'), formatDateTimeInJodaSyntax(date, 'G\\\\'\\\\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\\\\'\\\\'DDD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[{"message":"no viable alternative at input 'with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'\\'","startColumn":184,"startLine":1,"endColumn":185,"endLine":1}]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'aaa\\\\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\\\\'aaa\\\\'DDD'), formatDateTimeInJodaSyntax(date, 'G\\\\'aaa\\\\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\\\\'aaa\\\\'DDD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[{"message":"no viable alternative at input 'with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'aaa\\'","startColumn":187,"startLine":1,"endColumn":188,"endLine":1}]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'a\\\\'\\\\'aa\\\\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\\\\'a\\\\'\\\\'aa\\\\'DDD'), formatDateTimeInJodaSyntax(date, 'G\\\\'a\\\\'\\\\'aa\\\\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\\\\'a\\\\'\\\\'aa\\\\'DDD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[{"message":"no viable alternative at input 'with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'a\\'","startColumn":185,"startLine":1,"endColumn":186,"endLine":1}]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'x'), formatDateTimeInJodaSyntax(datetime64, 'x'), formatDateTimeInJodaSyntax(date, 'x'), formatDateTimeInJodaSyntax(date32, 'x');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'w'), formatDateTimeInJodaSyntax(datetime64, 'w'), formatDateTimeInJodaSyntax(date, 'w'), formatDateTimeInJodaSyntax(date32, 'w');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'S'), formatDateTimeInJodaSyntax(datetime64, 'S'), formatDateTimeInJodaSyntax(date, 'S'), formatDateTimeInJodaSyntax(date32, 'S');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'S');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSSS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSSSS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSSSSS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSSSSSS');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","errors":[]},{"query":"WITH splitByChar('_', _file)[3]::UInt64 AS num SELECT count(), min(num), max(num)\nFROM  s3(s3_conn, filename = 'test_02495_*', format = Parquet)\nWHERE num >= 5;","fileName":"../ClickHouse/tests/queries/0_stateless/02495_s3_filter_by_file.sql","errors":[{"message":"no viable alternative at input 'WITH splitByChar('_', _file)[3]:'","startColumn":31,"startLine":1,"endColumn":32,"endLine":1}]},{"query":"WITH a AS (SELECT t1.number AS n1, t2.number AS n2 FROM numbers(1) AS t1, numbers(1) AS t2), b AS (SELECT sum(n1) AS s FROM a) SELECT * FROM b AS l, a AS r;","fileName":"../ClickHouse/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.sql","errors":[]},{"query":"WITH a AS (SELECT t1.number AS n1, t2.number AS n2 FROM numbers(1) AS t1, numbers(1) AS t2), b AS (SELECT sum(n1) AS s FROM a) SELECT * FROM b AS l, a AS r;","fileName":"../ClickHouse/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.sql","errors":[]},{"query":"WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM b as l, a as r;","fileName":"../ClickHouse/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.sql","errors":[]},{"query":"WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM a as l, b as r;","fileName":"../ClickHouse/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.sql","errors":[]},{"query":"with (select uuid from system.tables where database = currentDatabase() and table = 'data_02491') as table_uuid_ select\ntable_uuid != toUUIDOrDefault(Null),\nevent_type,\nmerge_reason,\npart_name\nfrom system.part_log\nwhere\ndatabase = currentDatabase() and\ntable = 'data_02491' and\ntable_uuid = table_uuid_\norder by event_time_microseconds;","fileName":"../ClickHouse/tests/queries/0_stateless/02491_part_log_has_table_uuid.sql","errors":[]},{"query":"WITH cte_subquery AS (SELECT 1) SELECT * FROM cte_subquery AS cte_subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02478_analyzer_table_expression_aliases.sql","errors":[]},{"query":"WITH cte_subquery AS (SELECT 1) SELECT * FROM cte_subquery AS cte_subquery, cte_subquery AS subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02478_analyzer_table_expression_aliases.sql","errors":[]},{"query":"WITH subquery AS (SELECT sum(number) FROM numbers(10)) SELECT * FROM subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02475_analyzer_join_tree_subquery.sql","errors":[]},{"query":"WITH subquery AS (SELECT sum(number) FROM numbers(10)) SELECT (SELECT * FROM subquery);","fileName":"../ClickHouse/tests/queries/0_stateless/02475_analyzer_join_tree_subquery.sql","errors":[]},{"query":"WITH map(1, 2, 3, NULL) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH map(1, 2, 3, NULL) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH map('a', 2, 'b', NULL) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH map('a', 2, 'b', NULL) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH map(1, 2, 3, NULL) AS m SELECT m[1], m[2], m[3];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH map(1, 2, 3, NULL) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[1], m[2], m[3];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH map('a', 2, 'b', NULL) AS m SELECT m['a'], m['b'], m['c'];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH map('a', 2, 'b', NULL) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m['a'], m['b'], m['c'];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];","fileName":"../ClickHouse/tests/queries/0_stateless/02473_map_element_nullable.sql","errors":[]},{"query":"WITH tuple(INTERVAL 1 SECOND) - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH INTERVAL 1 SECOND + tuple(INTERVAL 1 SECOND) as expr SELECT expr, toTypeName(expr); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } WITH INTERVAL 1 SECOND - tuple(INTERVAL 1 SECOND) as expr SELECT expr, toTypeName(expr); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT '---';","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH INTERVAL 1 SECOND + INTERVAL 1 SECOND + INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH INTERVAL 1 HOUR + INTERVAL 1 SECOND + INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH INTERVAL 1 SECOND + INTERVAL 1 HOUR + INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH INTERVAL 1 SECOND + INTERVAL 1 SECOND + INTERVAL 1 HOUR as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH - INTERVAL 1 SECOND - INTERVAL 1 SECOND - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH - INTERVAL 1 HOUR - INTERVAL 1 SECOND - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH - INTERVAL 1 SECOND - INTERVAL 1 HOUR - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH - INTERVAL 1 SECOND - INTERVAL 1 SECOND - INTERVAL 1 HOUR as expr SELECT expr, toTypeName(expr);","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[]},{"query":"WITH '2022-01-30'::Date + INTERVAL 1 MONTH + INTERVAL 1 DAY AS e1, '2022-01-30'::Date + (INTERVAL 1 MONTH + INTERVAL 1 DAY) AS e2,\n'2022-01-30'::Date + (INTERVAL 1 MONTH, INTERVAL 1 DAY) AS e3,\n'2022-01-30'::Date + INTERVAL '1 MONTH 1 DAY' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[{"message":"no viable alternative at input 'WITH '2022-01-30':'","startColumn":17,"startLine":1,"endColumn":18,"endLine":1}]},{"query":"WITH '2022-01-30'::Date + INTERVAL 1 DAY + INTERVAL 1 MONTH AS e1, '2022-01-30'::Date + (INTERVAL 1 DAY + INTERVAL 1 MONTH) AS e2,\n'2022-01-30'::Date + (INTERVAL 1 DAY, INTERVAL 1 MONTH) AS e3,\n'2022-01-30'::Date + INTERVAL '1 DAY 1 MONTH' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[{"message":"no viable alternative at input 'WITH '2022-01-30':'","startColumn":17,"startLine":1,"endColumn":18,"endLine":1}]},{"query":"WITH '2022-10-11'::Date + INTERVAL -1 SECOND + INTERVAL 2 MINUTE + INTERVAL -3 MONTH + INTERVAL 1 YEAR AS e1, '2022-10-11'::Date + (INTERVAL -1 SECOND + INTERVAL 2 MINUTE + INTERVAL -3 MONTH + INTERVAL 1 YEAR) AS e2,\n'2022-10-11'::Date + (INTERVAL -1 SECOND, INTERVAL 2 MINUTE, INTERVAL -3 MONTH, INTERVAL 1 YEAR) AS e3,\n'2022-10-11'::Date + INTERVAL '-1 SECOND 2 MINUTE -3 MONTH 1 YEAR' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[{"message":"no viable alternative at input 'WITH '2022-10-11':'","startColumn":17,"startLine":1,"endColumn":18,"endLine":1}]},{"query":"WITH '2022-10-11'::DateTime - INTERVAL 1 QUARTER - INTERVAL -3 WEEK - INTERVAL 1 YEAR - INTERVAL 1 HOUR AS e1, '2022-10-11'::DateTime + (- INTERVAL 1 QUARTER - INTERVAL -3 WEEK - INTERVAL 1 YEAR - INTERVAL 1 HOUR) AS e2,\n'2022-10-11'::DateTime - (INTERVAL 1 QUARTER, INTERVAL -3 WEEK, INTERVAL 1 YEAR, INTERVAL 1 HOUR) AS e3,\n'2022-10-11'::DateTime - INTERVAL '1 QUARTER -3 WEEK 1 YEAR 1 HOUR' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[{"message":"no viable alternative at input 'WITH '2022-10-11':'","startColumn":17,"startLine":1,"endColumn":18,"endLine":1}]},{"query":"WITH '2022-10-11'::DateTime64 - INTERVAL 1 YEAR - INTERVAL 4 MONTH - INTERVAL 1 SECOND AS e1, '2022-10-11'::DateTime64 + (- INTERVAL 1 YEAR - INTERVAL 4 MONTH - INTERVAL 1 SECOND) AS e2,\n'2022-10-11'::DateTime64 - (INTERVAL 1 YEAR, INTERVAL 4 MONTH, INTERVAL 1 SECOND) AS e3,\n'2022-10-11'::DateTime64 - INTERVAL '1 YEAR 4 MONTH 1 SECOND' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","errors":[{"message":"no viable alternative at input 'WITH '2022-10-11':'","startColumn":17,"startLine":1,"endColumn":18,"endLine":1}]},{"query":"WITH 1 as n FROM numbers(1) SELECT number * n;","fileName":"../ClickHouse/tests/queries/0_stateless/02417_from_select_syntax.sql","errors":[{"message":"no viable alternative at input 'WITH 1 as n FROM'","startColumn":12,"startLine":1,"endColumn":16,"endLine":1}]},{"query":"WITH arrayJoin([1, 2, 3, nan, 4, 5]) AS data,\narrayJoin([nan, 1, 2, 3, 4]) AS data2,\narrayJoin([1, 2, 3, 4, nan]) AS data3,\narrayJoin([nan, nan, nan]) AS data4,\narrayJoin([nan, 1, 2, 3, nan]) AS data5\nSELECT\nmin(data),\nmin(data2),\nmin(data3),\nmin(data4),\nmin(data5);","fileName":"../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql","errors":[]},{"query":"WITH arrayJoin([1, 2, 3, nan, 4, 5]) AS data,\narrayJoin([nan, 1, 2, 3, 4]) AS data2,\narrayJoin([1, 2, 3, 4, nan]) AS data3,\narrayJoin([nan, nan, nan]) AS data4,\narrayJoin([nan, 1, 2, 3, nan]) AS data5\nSELECT\nmax(data),\nmax(data2),\nmax(data3),\nmax(data4),\nmax(data5);","fileName":"../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql","errors":[]},{"query":"WITH arrayJoin([1, 2, 3, nan, 4, 5]) AS data,\narrayJoin([nan, 1, 2, 3, 4]) AS data2,\narrayJoin([1, 2, 3, 4, nan]) AS data3,\narrayJoin([nan, nan, nan]) AS data4,\narrayJoin([nan, 1, 2, 3, nan]) AS data5\nSELECT\nmin(data),\nmin(data2),\nmin(data3),\nmin(data4),\nmin(data5);","fileName":"../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql","errors":[]},{"query":"WITH arrayJoin([1, 2, 3, nan, 4, 5]) AS data,\narrayJoin([nan, 1, 2, 3, 4]) AS data2,\narrayJoin([1, 2, 3, 4, nan]) AS data3,\narrayJoin([nan, nan, nan]) AS data4,\narrayJoin([nan, 1, 2, 3, nan]) AS data5\nSELECT\nmax(data),\nmax(data2),\nmax(data3),\nmax(data4),\nmax(data5);","fileName":"../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql","errors":[]},{"query":"WITH x -> toString(x) AS lambda SELECT arrayMap(x -> lambda(x), [1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> toString(x) AS lambda SELECT arrayMap(x -> arrayMap(y -> concat(lambda(x), '_', lambda(y)), [1,2,3]), [1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> toString(id) AS lambda SELECT arrayMap(x -> lambda(x), [1,2,3]) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> toString(id) AS lambda SELECT arrayMap(x -> arrayMap(y -> lambda(y), [1,2,3]), [1,2,3]) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> toString(id) AS lambda SELECT arrayMap(x -> arrayMap(y -> concat(lambda(x), '_', lambda(y)), [1,2,3]), [1,2,3]) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> plus(lambda(1), x) AS lambda SELECT lambda(1048576); -- { serverError UNSUPPORTED_METHOD };","fileName":"../ClickHouse/tests/queries/0_stateless/02388_analyzer_recursive_lambda.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH lambda(lambda(plus(x, x, -1)), tuple(x), x + 2147483646) AS lambda, x -> plus(lambda(1), x, 2) AS lambda SELECT 1048576, lambda(1048576); -- { serverError UNSUPPORTED_METHOD };","fileName":"../ClickHouse/tests/queries/0_stateless/02388_analyzer_recursive_lambda.sql","errors":[{"message":"no viable alternative at input 'WITH lambda(lambda(plus(x, x, -1)), tuple(x), x + 2147483646) AS lambda, x ->'","startColumn":75,"startLine":1,"endColumn":77,"endLine":1}]},{"query":"WITH cte_subquery AS (SELECT 1) SELECT * FROM cte_subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02387_analyzer_cte.sql","errors":[]},{"query":"WITH cte_subquery AS (SELECT * FROM test_table) SELECT * FROM cte_subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02387_analyzer_cte.sql","errors":[]},{"query":"WITH cte_subquery AS (SELECT 1 UNION DISTINCT SELECT 1) SELECT * FROM cte_subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02387_analyzer_cte.sql","errors":[{"message":"no viable alternative at input 'WITH cte_subquery AS (SELECT 1 UNION DISTINCT'","startColumn":37,"startLine":1,"endColumn":45,"endLine":1}]},{"query":"WITH cte_subquery AS (SELECT * FROM test_table UNION DISTINCT SELECT * FROM test_table) SELECT * FROM cte_subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02387_analyzer_cte.sql","errors":[{"message":"no viable alternative at input 'WITH cte_subquery AS (SELECT * FROM test_table UNION DISTINCT'","startColumn":53,"startLine":1,"endColumn":61,"endLine":1}]},{"query":"WITH  'John' AS name,  toDate('1990-01-01') AS birthdate SELECT * FROM numbers(10)\nWHERE (number, name, birthdate) IN (userid_set2);","fileName":"../ClickHouse/tests/queries/0_stateless/02386_set_columns_order.sql","errors":[]},{"query":"WITH (x -> x + 1) AS lambda SELECT lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql","errors":[{"message":"no viable alternative at input 'WITH (x ->'","startColumn":8,"startLine":1,"endColumn":10,"endLine":1}]},{"query":"WITH (x -> x + 1) AS lambda SELECT lambda.nested(1); -- { serverError BAD_ARGUMENTS } SELECT '--';","fileName":"../ClickHouse/tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql","errors":[{"message":"no viable alternative at input 'WITH (x ->'","startColumn":8,"startLine":1,"endColumn":10,"endLine":1}]},{"query":"WITH 'test_dictionary' AS dictionary SELECT dictGet(dictionary, 'value', toUInt64(0));","fileName":"../ClickHouse/tests/queries/0_stateless/02384_analyzer_dict_get_join_get.sql","errors":[]},{"query":"WITH 'invalid_dictionary' AS dictionary SELECT dictGet(dictionary, 'value', toUInt64(0)); -- { serverError BAD_ARGUMENTS } DROP DICTIONARY test_dictionary;","fileName":"../ClickHouse/tests/queries/0_stateless/02384_analyzer_dict_get_join_get.sql","errors":[]},{"query":"WITH 'test_table_join' AS join_table SELECT joinGet(join_table, 'value', toUInt64(0));","fileName":"../ClickHouse/tests/queries/0_stateless/02384_analyzer_dict_get_join_get.sql","errors":[]},{"query":"WITH 'invalid_test_table_join' AS join_table SELECT joinGet(join_table, 'value', toUInt64(0)); -- { serverError UNKNOWN_TABLE } DROP TABLE test_table_join;","fileName":"../ClickHouse/tests/queries/0_stateless/02384_analyzer_dict_get_join_get.sql","errors":[]},{"query":"WITH groupArray((table, bytes))::Map(String, UInt64) AS stats SELECT\nlength(stats), stats['t_modify_from_lc_1'] < stats['t_modify_from_lc_2']\nFROM\n(\nSELECT table, sum(bytes_on_disk) AS bytes FROM system.parts\nWHERE database = currentDatabase() AND table LIKE 't_modify_from_lc%' AND active\nGROUP BY table\n);","fileName":"../ClickHouse/tests/queries/0_stateless/02377_modify_column_from_lc.sql","errors":[{"message":"no viable alternative at input 'WITH groupArray((table, bytes)):'","startColumn":31,"startLine":1,"endColumn":32,"endLine":1}]},{"query":"WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN cte_test_table_for_in;","fileName":"../ClickHouse/tests/queries/0_stateless/02376_analyzer_in_function_subquery.sql","errors":[]},{"query":"WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN (SELECT id FROM cte_test_table_for_in UNION DISTINCT SELECT id FROM cte_test_table_for_in);","fileName":"../ClickHouse/tests/queries/0_stateless/02376_analyzer_in_function_subquery.sql","errors":[{"message":"no viable alternative at input 'WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN (SELECT id FROM cte_test_table_for_in UNION DISTINCT'","startColumn":154,"startLine":1,"endColumn":162,"endLine":1}]},{"query":"WITH ( SELECT toLowCardinality('a') ) AS bar SELECT bar","fileName":"../ClickHouse/tests/queries/0_stateless/02375_scalar_lc_cte.sql","errors":[]},{"query":"WITH [1, 2, 3] AS constant_array SELECT id, value FROM test_table ARRAY JOIN constant_array AS value;","fileName":"../ClickHouse/tests/queries/0_stateless/02374_analyzer_array_join.sql","errors":[]},{"query":"WITH [1, 2, 3] AS constant_array SELECT id, value, value_1 FROM test_table ARRAY JOIN constant_array AS value_1;","fileName":"../ClickHouse/tests/queries/0_stateless/02374_analyzer_array_join.sql","errors":[]},{"query":"WITH 'CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"' AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02368_analyzer_table_functions.sql","errors":[{"message":"no viable alternative at input 'WITH 'CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc\\'","startColumn":36,"startLine":1,"endColumn":37,"endLine":1}]},{"query":"WITH concat('1,2,\"[1,2,3]\",','\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"') AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02368_analyzer_table_functions.sql","errors":[{"message":"no viable alternative at input 'WITH concat('1,2,\"[1,2,3]\",','\"[[\\\\'abc\\'","startColumn":39,"startLine":1,"endColumn":40,"endLine":1}]},{"query":"WITH v1 AS (SELECT t1.c2, t2.c2, t2.c3 FROM t1 ASOF JOIN t2 USING (c1, c2))\nSELECT count() FROM v1 WHERE c3 = 'b';","fileName":"../ClickHouse/tests/queries/0_stateless/02366_asof_optimize_predicate_bug_37813.sql","errors":[]},{"query":"WITH v1 AS (SELECT t1.c2, t2.c2, t2.c3 FROM t1 ASOF JOIN t2 USING (c1, c2))\nSELECT count() FROM v1 WHERE c3 = 'b';","fileName":"../ClickHouse/tests/queries/0_stateless/02366_asof_optimize_predicate_bug_37813.sql","errors":[]},{"query":"WITH b AS bb SELECT bb FROM t2 WHERE a IN (SELECT a FROM t1);","fileName":"../ClickHouse/tests/queries/0_stateless/02354_with_statement_non_exist_column.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, cosineDistance(vec, reference_vec)\nFROM tab\nORDER BY cosineDistance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab_f64\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab_f32\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab_f16\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab_bf16\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab_i8\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_queries.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_detach_attach.sql","errors":[]},{"query":"WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 3; -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }\nDROP TABLE tab;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_bugs.sql","errors":[]},{"query":"WITH [1.0, 0.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_bugs.sql","errors":[]},{"query":"WITH [9000.0, 0.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec)\nFROM tab\nORDER BY L2Distance(vec, reference_vec)\nLIMIT 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02354_vector_search_bugs.sql","errors":[]},{"query":"WITH 1 AS a SELECT (SELECT a);","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH 1 AS global_a SELECT a FROM (SELECT global_a AS a) AS b;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH 1 AS global_a SELECT b.a FROM (SELECT global_a AS a) AS b;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH 1 AS a SELECT (SELECT * FROM (SELECT * FROM (SELECT a + 1)));","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery AS (SELECT 1 AS a) SELECT * FROM subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery AS (SELECT 1 AS a) SELECT a FROM subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery AS (SELECT 1 AS a) SELECT subquery.a FROM subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery AS (SELECT 1 AS a) SELECT subquery.* FROM subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery AS (SELECT 1 AS a) SELECT subquery.* APPLY toString FROM subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery AS (SELECT 1 AS a) SELECT subquery_alias.a FROM subquery AS subquery_alias;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery AS (SELECT 1 AS a) SELECT subquery_alias.* FROM subquery AS subquery_alias;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery AS (SELECT 1 AS a) SELECT subquery_alias.* APPLY toString FROM subquery AS subquery_alias;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery_1 AS (SELECT 1 AS a), subquery_2 AS (SELECT 1 + subquery_1.a FROM subquery_1) SELECT * FROM subquery_2;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH subquery_1 AS (SELECT 1 AS a), subquery_2 AS (SELECT (1 + subquery_1.a) AS a FROM subquery_1) SELECT subquery_2.a FROM subquery_2;","fileName":"../ClickHouse/tests/queries/0_stateless/02345_analyzer_subqueries.sql","errors":[]},{"query":"WITH x -> x + 1 AS lambda, x -> x + 1 AS lambda SELECT lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02344_analyzer_multiple_aliases_for_expression.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> x + 1 AS lambda SELECT lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> toString(x) AS lambda SELECT lambda(1), lambda(NULL), lambda([1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> toString(x) AS lambda_1, lambda_1 AS lambda_2, lambda_2 AS lambda_3 SELECT lambda_1(1), lambda_2(NULL), lambda_3([1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> x + 1 AS lambda SELECT lambda(id) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> toString(x) AS lambda SELECT lambda(id), lambda(value) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> x + 1 AS lambda SELECT arrayMap(lambda, [1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> toString(x) AS lambda_1 SELECT arrayMap(lambda_1 AS lambda_2, [1,2,3]), arrayMap(lambda_2, ['1', '2', '3']);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> concat(concat(toString(x.id), '_'), x.value) AS lambda SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, lambda(value);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> concat(concat(x.value_0_level_0, '_'), x.value_1_level_0) AS lambda SELECT lambda(value) FROM test_table_tuple;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> * AS lambda SELECT lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH x -> * AS lambda SELECT lambda(1) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH cast(tuple(1), 'Tuple (value UInt64)') AS compound_value SELECT arrayMap(x -> compound_value.*, [1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[]},{"query":"WITH cast(tuple(1, 1), 'Tuple (value_1 UInt64, value_2 UInt64)') AS compound_value SELECT arrayMap(x -> compound_value.*, [1,2,3]); -- { serverError UNSUPPORTED_METHOD } WITH cast(tuple(1, 1), 'Tuple (value_1 UInt64, value_2 UInt64)') AS compound_value SELECT arrayMap(x -> plus(compound_value.*), [1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[]},{"query":"WITH cast(tuple(1), 'Tuple (value UInt64)') AS compound_value SELECT id, test_table.* APPLY x -> compound_value.* FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"mismatched input '->' expecting <EOF>","startColumn":94,"startLine":1,"endColumn":96,"endLine":1}]},{"query":"WITH cast(tuple(1, 1), 'Tuple (value_1 UInt64, value_2 UInt64)') AS compound_value SELECT id, test_table.* APPLY x -> compound_value.* FROM test_table; -- { serverError UNSUPPORTED_METHOD } WITH cast(tuple(1, 1), 'Tuple (value_1 UInt64, value_2 UInt64)') AS compound_value SELECT id, test_table.* APPLY x -> plus(compound_value.*) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"mismatched input '->' expecting <EOF>","startColumn":115,"startLine":1,"endColumn":117,"endLine":1}]},{"query":"WITH x -> untuple(x) AS lambda SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, lambda(value);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH (functor, x) -> functor(x) AS lambda, x -> x + 1 AS functor_1, x -> toString(x) AS functor_2 SELECT lambda(functor_1, 1), lambda(functor_2, 1);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH (functor, x) ->'","startColumn":18,"startLine":1,"endColumn":20,"endLine":1}]},{"query":"WITH (functor, x) -> functor(x) AS lambda, x -> x + 1 AS functor_1, x -> toString(x) AS functor_2 SELECT lambda(functor_1, id), lambda(functor_2, id) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH (functor, x) ->'","startColumn":18,"startLine":1,"endColumn":20,"endLine":1}]},{"query":"WITH 222 AS lambda SELECT arrayMap(lambda(tuple(x), x + 1), [1, 2, 3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[]},{"query":"WITH 222 AS lambda SELECT arrayMap(lambda((x, ), x + 1), [1, 2, 3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH 222 AS lambda SELECT arrayMap(lambda((x, )'","startColumn":46,"startLine":1,"endColumn":47,"endLine":1}]},{"query":"WITH x -> x + 1 AS lambda SELECT arrayMap(lambda(tuple(x), x + 1), [1, 2, 3]), lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH x ->'","startColumn":7,"startLine":1,"endColumn":9,"endLine":1}]},{"query":"WITH (x, y) -> y AS lambda SELECT arrayMap(lambda(tuple(x), x + 1), [1, 2, 3]), lambda(tuple(x), x + 1), 1 AS x; -- { serverError BAD_ARGUMENTS }\nWITH (x, y) -> y AS lambda2\nSELECT arrayMap(lambda(tuple(x), x + 1), [1, 2, 3]), lambda2(tuple(x), x + 1), 1 AS x;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","errors":[{"message":"no viable alternative at input 'WITH (x, y) ->'","startColumn":12,"startLine":1,"endColumn":14,"endLine":1}]},{"query":"with rhs as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs using (d1) order by rhs.d2 settings enable_analyzer=0; -- { serverError ALIAS_REQUIRED } with rhs as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs using (d1) order by rhs.d2 settings enable_analyzer=1; -- It works with analyzer; rhs is an alias itself.\nwith rhs as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs using (d1) order by rhs.d2 settings joined_subquery_requires_alias=0;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_global_join_cte.sql","errors":[{"message":"no viable alternative at input 'with rhs as (select * from remote('127.{1,2}', view(select dummy'","startColumn":59,"startLine":1,"endColumn":64,"endLine":1}]},{"query":"with rhs_ as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs_ rhs using (d1) order by rhs.d2 settings joined_subquery_requires_alias=0;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_global_join_cte.sql","errors":[{"message":"no viable alternative at input 'with rhs_ as (select * from remote('127.{1,2}', view(select dummy'","startColumn":60,"startLine":1,"endColumn":65,"endLine":1}]},{"query":"WITH 1 as a SELECT a;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql","errors":[]},{"query":"WITH a as b SELECT 1 as a, b;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql","errors":[]},{"query":"WITH value_1 as value_2, id_1 as id_2, id AS id_1, value AS value_1 SELECT id_2, value_2 FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql","errors":[]},{"query":"WITH id AS value SELECT value FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql","errors":[]},{"query":"WITH id AS value SELECT value FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql","errors":[]},{"query":"WITH path('clickhouse.com/a/b/c') AS x SELECT x AS path;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql","errors":[]},{"query":"WITH toDateTime64('1959-09-16 19:20:12.999999998', 9, 'UTC') AS dt1,\ntoDateTime64('1959-09-16 19:20:12.999999999', 9, 'UTC') AS dt2\nSELECT\ndt1 < dt2,\n(dt1 + INTERVAL 1 NANOSECOND) = dt2,\n(dt1 + INTERVAL 2 NANOSECOND) > dt2,\n(dt1 + INTERVAL 3 NANOSECOND) > dt2;","fileName":"../ClickHouse/tests/queries/0_stateless/02313_negative_datetime64.sql","errors":[{"message":"no viable alternative at input 'WITH toDateTime64('1959-09-16 19:20:12.999999998', 9, 'UTC') AS dt1,\\ntoDateTime64('1959-09-16 19:20:12.999999999', 9, 'UTC') AS dt2\\nSELECT\\ndt1 < dt2,\\n(dt1 + INTERVAL 1 NANOSECOND)'","startColumn":28,"startLine":5,"endColumn":29,"endLine":5}]},{"query":"WITH toDateTime64('1969-12-31 23:59:59.999999998', 9, 'UTC') AS dt1,\ntoDateTime64('1969-12-31 23:59:59.999999999', 9, 'UTC') AS dt2\nSELECT\ndt1 < dt2,\n(dt1 + INTERVAL 1 NANOSECOND) = dt2,\n(dt1 + INTERVAL 2 NANOSECOND) > dt2,\n(dt1 + INTERVAL 3 NANOSECOND) > dt2;","fileName":"../ClickHouse/tests/queries/0_stateless/02313_negative_datetime64.sql","errors":[{"message":"no viable alternative at input 'WITH toDateTime64('1969-12-31 23:59:59.999999998', 9, 'UTC') AS dt1,\\ntoDateTime64('1969-12-31 23:59:59.999999999', 9, 'UTC') AS dt2\\nSELECT\\ndt1 < dt2,\\n(dt1 + INTERVAL 1 NANOSECOND)'","startColumn":28,"startLine":5,"endColumn":29,"endLine":5}]},{"query":"WITH toDateTime64('2001-12-31 23:59:59.999999998', 9, 'UTC') AS dt1,\ntoDateTime64('2001-12-31 23:59:59.999999999', 9, 'UTC') AS dt2\nSELECT\ndt1 < dt2,\n(dt1 + INTERVAL 1 NANOSECOND) = dt2,\n(dt1 + INTERVAL 2 NANOSECOND) > dt2,\n(dt1 + INTERVAL 3 NANOSECOND) > dt2;","fileName":"../ClickHouse/tests/queries/0_stateless/02313_negative_datetime64.sql","errors":[{"message":"no viable alternative at input 'WITH toDateTime64('2001-12-31 23:59:59.999999998', 9, 'UTC') AS dt1,\\ntoDateTime64('2001-12-31 23:59:59.999999999', 9, 'UTC') AS dt2\\nSELECT\\ndt1 < dt2,\\n(dt1 + INTERVAL 1 NANOSECOND)'","startColumn":28,"startLine":5,"endColumn":29,"endLine":5}]},{"query":"WITH toDateTime64('2282-12-31 23:59:59.999998', 6, 'UTC') AS dt1,\ntoDateTime64('2282-12-31 23:59:59.999999', 6, 'UTC') AS dt2\nSELECT\ndt1 < dt2,\n(dt1 + INTERVAL 1 MICROSECOND) = dt2,\n(dt1 + INTERVAL 2 MICROSECOND) > dt2,\n(dt1 + INTERVAL 3 MICROSECOND) > dt2;","fileName":"../ClickHouse/tests/queries/0_stateless/02313_negative_datetime64.sql","errors":[{"message":"no viable alternative at input 'WITH toDateTime64('2282-12-31 23:59:59.999998', 6, 'UTC') AS dt1,\\ntoDateTime64('2282-12-31 23:59:59.999999', 6, 'UTC') AS dt2\\nSELECT\\ndt1 < dt2,\\n(dt1 + INTERVAL 1 MICROSECOND)'","startColumn":29,"startLine":5,"endColumn":30,"endLine":5}]},{"query":"WITH (SELECT 1) as v0 SELECT v0, v > 0 FROM (\nWITH (SELECT 1) AS v1, (SELECT 2) AS v2\nSELECT v1 AS v\nUNION ALL\nSELECT v2 AS v\n) AS a;","fileName":"../ClickHouse/tests/queries/0_stateless/02295_global_with_in_subquery.sql","errors":[]},{"query":"WITH CAST([-547274980, 1790553898, 1981517754, 1908431500, 1352428565, -573412550, -552499284, 2096941042], 'Array(Int32)') AS a SELECT\nL1Norm(a),\nL2Norm(a),\nL2SquaredNorm(a),\nLpNorm(a,1),\nLpNorm(a,2),\nLpNorm(a,3.14),\nLinfNorm(a);","fileName":"../ClickHouse/tests/queries/0_stateless/02283_array_norm.sql","errors":[]},{"query":"WITH CAST([-547274980, 1790553898, 1981517754, 1908431500, 1352428565, -573412550, -552499284, 2096941042], 'Array(Int32)') AS a SELECT\nL1Distance(a, a),\nL2Distance(a, a),\nL2SquaredDistance(a, a),\nLinfDistance(a, a),\ncosineDistance(a, a);","fileName":"../ClickHouse/tests/queries/0_stateless/02282_array_distance.sql","errors":[]},{"query":"with top_repos as ( select repo_name from github_events where event_type = 'WatchEvent' and toDate(created_at) = today() - 1 group by repo_name order by count() desc limit 100 union distinct select repo_name from github_events where event_type = 'WatchEvent' and toMonday(created_at) = toMonday(today() - interval 1 week) group by repo_name order by count() desc limit 100 union distinct select repo_name from github_events where event_type = 'WatchEvent' and toStartOfMonth(created_at) = toStartOfMonth(today()) - interval 1 month group by repo_name order by count() desc limit 100 union distinct select repo_name from github_events where event_type = 'WatchEvent' and toYear(created_at) = toYear(today()) - 1 group by repo_name order by count() desc limit 100 ),\nlast_day as ( select repo_name, count() as count_last_day, rowNumberInAllBlocks() + 1 as position_last_day from github_events where repo_name in (select repo_name from top_repos) and toDate(created_at) = today() - 1 group by repo_name order by count_last_day desc ),\nlast_week as ( select repo_name, count() as count_last_week, rowNumberInAllBlocks() + 1 as position_last_week from github_events where repo_name in (select repo_name from top_repos) and toMonday(created_at) = toMonday(today()) - interval 1 week group by repo_name order by count_last_week desc ),\nlast_month as ( select repo_name, count() as count_last_month, rowNumberInAllBlocks() + 1 as position_last_month from github_events where repo_name in (select repo_name from top_repos) and toStartOfMonth(created_at) = toStartOfMonth(today()) - interval 1 month group by repo_name order by count_last_month desc )\nselect d.repo_name, columns('count') from last_day d join last_week w on d.repo_name = w.repo_name join last_month m on d.repo_name = m.repo_name;","fileName":"../ClickHouse/tests/queries/0_stateless/02271_fix_column_matcher_and_column_transformer.sql","errors":[{"message":"no viable alternative at input 'with top_repos as ( select repo_name from github_events where event_type = 'WatchEvent' and toDate(created_at) = today() - 1 group by repo_name order by count() desc limit 100 union distinct'","startColumn":182,"startLine":1,"endColumn":190,"endLine":1}]},{"query":"WITH arrayJoin(['a', 'a', 'b', 'b']) AS field SELECT\nfield,\ncount() OVER (PARTITION BY field)\nORDER BY field ASC\nLIMIT 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.sql","errors":[]},{"query":"WITH toDate('2021-09-12') AS date_value,\ntoDateTime('2021-09-12 11:22:33') AS date_time_value,\ntoDateTime64('2021-09-12 11:22:33', 3) AS date_time_64_value\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","errors":[]},{"query":"WITH toDate('2021-03-12') AS date_value,\ntoDateTime('2021-03-12 11:22:33') AS date_time_value,\ntoDateTime64('2021-03-12 11:22:33', 3) AS date_time_64_value\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","errors":[]},{"query":"WITH toDate('2021-02-12') AS date_value,\ntoDateTime('2021-02-12 11:22:33') AS date_time_value,\ntoDateTime64('2021-02-12 11:22:33', 3) AS date_time_64_value\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","errors":[]},{"query":"WITH toDate('2020-02-12') AS date_value,\ntoDateTime('2020-02-12 11:22:33') AS date_time_value,\ntoDateTime64('2020-02-12 11:22:33', 3) AS date_time_64_value\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","errors":[]},{"query":"WITH toDate('2021-12-12') AS date_value,\ntoDateTime('2021-12-12 11:22:33') AS date_time_value,\ntoDateTime64('2021-12-12 11:22:33', 3) AS date_time_64_value\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","errors":[]},{"query":"WITH toDate('2020-12-12') AS date_value,\ntoDateTime('2020-12-12 11:22:33') AS date_time_value,\ntoDateTime64('2020-12-12 11:22:33', 3) AS date_time_64_value\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","errors":[]},{"query":"WITH toDate('2020-12-12') AS date_value\nSELECT last_day(date_value), LAST_DAY(date_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","errors":[]},{"query":"WITH toDate('1970-01-01') AS date_value,\ntoDateTime('1970-01-01 11:22:33') AS date_time_value,\ntoDateTime64('1900-01-01 11:22:33', 3) AS date_time_64_value\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value)\nSETTINGS enable_extended_results_for_datetime_functions = true;","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","errors":[{"message":"no viable alternative at input 'WITH toDate('1970-01-01') AS date_value,\\ntoDateTime('1970-01-01 11:22:33') AS date_time_value,\\ntoDateTime64('1900-01-01 11:22:33', 3) AS date_time_64_value\\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value)\\nSETTINGS enable_extended_results_for_datetime_functions = true'","startColumn":58,"startLine":5,"endColumn":62,"endLine":5}]},{"query":"WITH 'number: 1' as year SELECT extract(year, '\\\\\\\\d+');","fileName":"../ClickHouse/tests/queries/0_stateless/02247_fix_extract_parser.sql","errors":[]},{"query":"WITH 'number: 2' as mm SELECT extract(mm, '\\\\\\\\d+');","fileName":"../ClickHouse/tests/queries/0_stateless/02247_fix_extract_parser.sql","errors":[]},{"query":"WITH 'number: 3' as s SELECT extract(s, '\\\\\\\\d+');","fileName":"../ClickHouse/tests/queries/0_stateless/02247_fix_extract_parser.sql","errors":[]},{"query":"WITH 'test' AS u SELECT count() FROM ev WHERE a IN (SELECT a FROM idx) SETTINGS enable_global_with_statement = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02233_set_enable_with_statement_cte_perf.sql","errors":[]},{"query":"WITH 'test' AS u SELECT count() FROM ev WHERE a IN (SELECT a FROM idx) SETTINGS enable_global_with_statement = 0;","fileName":"../ClickHouse/tests/queries/0_stateless/02233_set_enable_with_statement_cte_perf.sql","errors":[]},{"query":"WITH h3ToGeo(arrayJoin([579205133326352383,589753847883235327,594082350283882495])) AS p SELECT round(p.1, 2), round(p.2, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02223_h3_test_const_columns.sql","errors":[]},{"query":"WITH (SELECT * FROM data_02222) AS bm1,\n(SELECT * FROM data_02222) AS bm2,\n(SELECT * FROM data_02222) AS bm3,\n(SELECT * FROM data_02222) AS bm4,\n(SELECT * FROM data_02222) AS bm5,\n(SELECT * FROM data_02222) AS bm6,\n(SELECT * FROM data_02222) AS bm7,\n(SELECT * FROM data_02222) AS bm8,\n(SELECT * FROM data_02222) AS bm9,\n(SELECT * FROM data_02222) AS bm10\nSELECT bm1, bm2, bm3, bm4, bm5, bm6, bm7, bm8, bm9, bm10 FROM data_02222;","fileName":"../ClickHouse/tests/queries/0_stateless/02222_allow_experimental_projection_optimization__enable_global_with_statement.sql","errors":[]},{"query":"WITH t AS (\nSELECT number AS n\nFROM numbers(10000)\n)\nSELECT count(*)\nFROM t AS a\nWHERE a.n < 5000;","fileName":"../ClickHouse/tests/queries/0_stateless/02212_cte_and_table_alias.sql","errors":[]},{"query":"WITH t AS (\nSELECT number AS n\nFROM numbers(10000)\n)\nSELECT count(*)\nFROM t AS a\nWHERE t.n < 5000;","fileName":"../ClickHouse/tests/queries/0_stateless/02212_cte_and_table_alias.sql","errors":[]},{"query":"WITH t AS (\nSELECT number AS n\nFROM numbers(10000)\n)\nSELECT count(*)\nFROM t AS a\nWHERE a.n < 5000;","fileName":"../ClickHouse/tests/queries/0_stateless/02212_cte_and_table_alias.sql","errors":[]},{"query":"WITH t AS (\nSELECT number AS n\nFROM numbers(10000)\n)\nSELECT count(*)\nFROM t AS a\nWHERE t.n < 5000;","fileName":"../ClickHouse/tests/queries/0_stateless/02212_cte_and_table_alias.sql","errors":[]},{"query":"WITH (\nSELECT query_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND Settings['log_processors_profiles']='1'\n) AS query_id_\nSELECT\nname,\nmultiIf(\nname = 'ExpressionTransform', elapsed_us >= 0.9e6 ? 1 : elapsed_us,\nname = 'SourceFromSingleChunk', output_wait_elapsed_us >= 0.9e6 ? 1 : output_wait_elapsed_us,\ninput_wait_elapsed_us>=1e6 ? 1 : input_wait_elapsed_us)\nelapsed,\ninput_rows,\ninput_bytes,\noutput_rows,\noutput_bytes\nFROM system.processors_profile_log\nWHERE query_id = query_id_\nORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/02210_processors_profile_log.sql","errors":[]},{"query":"WITH minSampleSizeContinous(20, 10, 0.05, 0.8, 0.05) AS res SELECT 'continous const 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(0.0, 10.0, 0.05, 0.8, 0.05) AS res SELECT 'continous const 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(20, 10.0, 0.05, 0.8, 0.05) AS res SELECT 'continous const 3', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(20.0, 10, 0.05, 0.8, 0.05) AS res SELECT 'continous const 4', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(baseline, sigma, 0.05, 0.8, 0.05) AS res SELECT 'continous UInt64 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(20, sigma, 0.05, 0.8, 0.05) AS res SELECT 'continous UInt64 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(baseline, 10, 0.05, 0.8, 0.05) AS res SELECT 'continous UInt64 3', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(baseline, sigma, 0.05, 0.8, 0.05) AS res SELECT 'continous Float64 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(20, sigma, 0.05, 0.8, 0.05) AS res SELECT 'continous Float64 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeContinous(baseline, 10, 0.05, 0.8, 0.05) AS res SELECT 'continous UInt64 3', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeConversion(0.9, 0.01, 0.8, 0.05) AS res SELECT 'conversion const 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeConversion(0.0, 0.01, 0.8, 0.05) AS res SELECT 'conversion const 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeConversion(p1, 0.01, 0.8, 0.05) AS res SELECT 'conversion Float64 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_conversion ORDER BY roundBankers(res.1, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH minSampleSizeConversion(0.9, 0.01, 0.8, 0.05) AS res SELECT 'conversion Float64 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_conversion ORDER BY roundBankers(res.1, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/02206_minimum_sample_size.sql","errors":[]},{"query":"WITH (\nSELECT initial_query_id\nFROM system.query_log\nWHERE\ncurrent_database = currentDatabase()\nAND event_date >= yesterday()\nAND query LIKE '-- INSERT USING VALUES%'\nLIMIT 1\n) AS q_id\nSELECT 'VALUES', view_duration_ms >= 50\nFROM system.query_views_log\nWHERE initial_query_id = q_id;","fileName":"../ClickHouse/tests/queries/0_stateless/02187_insert_values_with_mv.sql","errors":[{"message":"no viable alternative at input 'WITH (\\nSELECT initial_query_id\\nFROM system.query_log\\nWHERE\\ncurrent_database = currentDatabase()\\nAND event_date >= yesterday()\\nAND query'","startColumn":4,"startLine":7,"endColumn":9,"endLine":7}]},{"query":"WITH (\nSELECT initial_query_id\nFROM system.query_log\nWHERE\ncurrent_database = currentDatabase()\nAND event_date >= yesterday()\nAND query LIKE '-- INSERT USING TABLE%'\nLIMIT 1\n) AS q_id\nSELECT 'TABLE', view_duration_ms >= 50\nFROM system.query_views_log\nWHERE initial_query_id = q_id;","fileName":"../ClickHouse/tests/queries/0_stateless/02187_insert_values_with_mv.sql","errors":[{"message":"no viable alternative at input 'WITH (\\nSELECT initial_query_id\\nFROM system.query_log\\nWHERE\\ncurrent_database = currentDatabase()\\nAND event_date >= yesterday()\\nAND query'","startColumn":4,"startLine":7,"endColumn":9,"endLine":7}]},{"query":"WITH map(1, 'Test') AS value, 'Array(Tuple(UInt64, String))' AS type SELECT value, cast(value, type), cast(materialize(value), type);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH map(1, 'Test') AS value, 'Array(Tuple(UInt64, UInt64))' AS type SELECT value, cast(value, type), cast(materialize(value), type); --{serverError CANNOT_PARSE_TEXT}\nWITH map(1, '1234') AS value, 'Array(Tuple(UInt64, UInt64))' AS type\nSELECT value, cast(value, type), cast(materialize(value), type);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH map(1, [1, 2, 3]) AS value, 'Array(Tuple(UInt64, Array(String)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH map(1, ['1', '2', '3']) AS value, 'Array(Tuple(UInt64, Array(UInt64)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Map(UInt64, String)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Map(UInt64, UInt64)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Array(Tuple(UInt64, String))))' AS type SELECT value, cast(value, type), cast(materialize(value), type);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH map(1, map(1, '1234')) as value, 'Array(Tuple(UInt64, Array(Tuple(UInt64, UInt64))))' AS type SELECT value, cast(value, type), cast(materialize(value), type);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH map(1, 'val1', 2, 'val2') AS map SELECT CAST(map, 'Array(Tuple(k UInt32, v String))') AS c, toTypeName(c);","fileName":"../ClickHouse/tests/queries/0_stateless/02179_map_cast_to_array.sql","errors":[]},{"query":"WITH ( SELECT sleep(0.0001) FROM system.one ) as a1,\n( SELECT sleep(0.0001) FROM system.one ) as a2,\n( SELECT sleep(0.0001) FROM system.one ) as a3,\n( SELECT sleep(0.0001) FROM system.one ) as a4,\n( SELECT sleep(0.0001) FROM system.one ) as a5\nSELECT '02177_CTE_GLOBAL_ON', a1, a2, a3, a4, a5 FROM system.numbers LIMIT 100\nFORMAT Null\nSETTINGS enable_global_with_statement = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02174_cte_scalar_cache.sql","errors":[{"message":"mismatched input 'SETTINGS' expecting <EOF>","startColumn":0,"startLine":8,"endColumn":8,"endLine":8}]},{"query":"WITH ( SELECT sleep(0.0001) FROM system.one ) as a1,\n( SELECT sleep(0.0001) FROM system.one ) as a2,\n( SELECT sleep(0.0001) FROM system.one ) as a3,\n( SELECT sleep(0.0001) FROM system.one ) as a4,\n( SELECT sleep(0.0001) FROM system.one ) as a5\nSELECT '02177_CTE_GLOBAL_OFF', a1, a2, a3, a4, a5 FROM system.numbers LIMIT 100\nFORMAT Null\nSETTINGS enable_global_with_statement = 0;","fileName":"../ClickHouse/tests/queries/0_stateless/02174_cte_scalar_cache.sql","errors":[{"message":"mismatched input 'SETTINGS' expecting <EOF>","startColumn":0,"startLine":8,"endColumn":8,"endLine":8}]},{"query":"WITH ( SELECT sleep(0.0001) FROM system.one ) as a1,\n( SELECT sleep(0.0001) FROM system.one ) as a2,\n( SELECT sleep(0.0001) FROM system.one ) as a3,\n( SELECT sleep(0.0001) FROM system.one ) as a4,\n( SELECT sleep(0.0001) FROM system.one ) as a5\nSELECT '02177_CTE_NEW_ANALYZER', a1, a2, a3, a4, a5 FROM system.numbers LIMIT 100\nFORMAT Null\nSETTINGS enable_analyzer = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02174_cte_scalar_cache.sql","errors":[{"message":"mismatched input 'SETTINGS' expecting <EOF>","startColumn":0,"startLine":8,"endColumn":8,"endLine":8}]},{"query":"WITH (range(0, number % 10), range(0, number % 10))::Map(UInt64, UInt64) AS m1, (range(0, number % 10, 2), arrayMap(x -> x * x, range(0, number % 10, 2)))::Map(UInt64, UInt64) AS m2\nSELECT DISTINCT mapUpdate(m1, m2) FROM numbers (100000);","fileName":"../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql","errors":[{"message":"no viable alternative at input 'WITH (range(0, number % 10), range(0, number % 10)):'","startColumn":51,"startLine":1,"endColumn":52,"endLine":1}]},{"query":"WITH 2 AS \\`b.c\\`, [4, 5] AS a, 6 AS u, 3 AS v, 2 AS d, TRUE AS e, 1 AS f, 0 AS g, 2 AS h, 'Hello' AS i, 'World' AS j, 'hi' AS w, NULL AS k, (1, 2) AS l, 2 AS m, 3 AS n, [] AS o, [1] AS p, 1 AS q, q AS r, 1 AS s, 1 AS t SELECT INTERVAL CASE CASE WHEN NOT -a[\\`b.c\\`] * u DIV v + d IS NOT NULL AND e OR f BETWEEN g AND h THEN i ELSE j END WHEN w THEN k END || [l, (m, n)] MINUTE IS NULL OR NOT o::Array(INT) = p <> q < r > s != t AS upyachka;","fileName":"../ClickHouse/tests/queries/0_stateless/02163_operators.sql","errors":[{"message":"no viable alternative at input 'WITH 2 AS \\'","startColumn":10,"startLine":1,"endColumn":11,"endLine":1}]},{"query":"WITH lineWithInlines AS\n(\nSELECT DISTINCT addressToLineWithInlines(arrayJoin(trace)) AS lineWithInlines FROM system.trace_log WHERE query_id =\n(\nSELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND log_comment='02161_test_case' ORDER BY event_time DESC LIMIT 1\n)\n)\nSELECT 'has inlines:', or(max(length(lineWithInlines)) > 1, max(locate(lineWithInlines[1], ':')) = 0) FROM lineWithInlines SETTINGS short_circuit_function_evaluation='enable';","fileName":"../ClickHouse/tests/queries/0_stateless/02161_addressToLineWithInlines.sql","errors":[]},{"query":"WITH toDate('2021-01-14') AS date_value,\ntoDateTime('2021-01-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-01-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-02-14') AS date_value,\ntoDateTime('2021-02-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-02-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-03-14') AS date_value,\ntoDateTime('2021-03-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-03-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-04-14') AS date_value,\ntoDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-05-14') AS date_value,\ntoDateTime('2021-05-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-05-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-06-14') AS date_value,\ntoDateTime('2021-06-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-06-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-07-14') AS date_value,\ntoDateTime('2021-07-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-07-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-08-14') AS date_value,\ntoDateTime('2021-08-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-08-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-09-14') AS date_value,\ntoDateTime('2021-09-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-09-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-10-14') AS date_value,\ntoDateTime('2021-10-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-10-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-11-14') AS date_value,\ntoDateTime('2021-11-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-11-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"WITH toDate('2021-12-14') AS date_value,\ntoDateTime('2021-12-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-12-14 11:22:33', 3) AS date_time_64_value\nSELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02160_monthname.sql","errors":[]},{"query":"with generateUUIDv4() as uuid, replace(toString(uuid), '-', '') as str1,\nlower(hex(uuid)) as str2\nselect str1 = str2;","fileName":"../ClickHouse/tests/queries/0_stateless/02128_hex_bin_on_uuid.sql","errors":[]},{"query":"WITH * APPLY lambda(e); -- { clientError SYNTAX_ERROR } SELECT * APPLY lambda(); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(1); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(x); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(range(1)); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(range(x)); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(1, 2); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(x, y); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda((x, y), 2); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda((x, y), x + y); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(tuple(1), 1); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(tuple(x), 1) FROM numbers(5);","fileName":"../ClickHouse/tests/queries/0_stateless/02128_apply_lambda_parsing.sql","errors":[{"message":"no viable alternative at input 'WITH * APPLY lambda('","startColumn":19,"startLine":1,"endColumn":20,"endLine":1}]},{"query":"WITH (\nSELECT initial_query_id\nFROM system.query_log\nWHERE current_database = currentDatabase()\nAND event_date >= yesterday()\nAND query LIKE '-- INSERT INTO wv%'\nLIMIT 1\n) AS q_id\nSELECT view_name, view_type, view_query, read_rows, read_bytes, written_rows, written_bytes\nFROM system.query_views_log\nWHERE initial_query_id = q_id FORMAT Vertical;","fileName":"../ClickHouse/tests/queries/0_stateless/02125_query_views_log_window_function.sql","errors":[{"message":"no viable alternative at input 'WITH (\\nSELECT initial_query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase()\\nAND event_date >= yesterday()\\nAND query'","startColumn":4,"startLine":6,"endColumn":9,"endLine":6}]},{"query":"WITH (\nSELECT initial_query_id\nFROM system.query_log\nWHERE current_database = currentDatabase()\nAND event_date >= yesterday()\nAND query LIKE '-- INSERT INTO wv%'\nLIMIT 1\n) AS q_id\nSELECT views\nFROM system.query_log\nWHERE initial_query_id = q_id\nAND type = 'QueryFinish'\nFORMAT Vertical;","fileName":"../ClickHouse/tests/queries/0_stateless/02125_query_views_log_window_function.sql","errors":[{"message":"no viable alternative at input 'WITH (\\nSELECT initial_query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase()\\nAND event_date >= yesterday()\\nAND query'","startColumn":4,"startLine":6,"endColumn":9,"endLine":6}]},{"query":"WITH 'aes-256-ecb' as mode, 'Hello World!' as plaintext, 'test_key________________________' as key SELECT hex(aes_encrypt_mysql(mode, toNullable(plaintext), key));","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-ecb' as mode, unhex('D1B43643E1D0E9390E39BA4EAE150851') as ciphertext, 'test_key________________________' as key SELECT hex(aes_decrypt_mysql(mode, toNullable(ciphertext), key));","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-ecb' as mode, 'test_key________________________' as key SELECT mode, encrypt(mode, CAST(null as Nullable(String)), key);","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv SELECT mode, encrypt(mode, CAST(null as Nullable(String)), key, iv);","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-ecb' as mode, 'test_key________________________' as key SELECT mode, hex(encrypt(mode, toNullable('Hello World!'), key));","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv SELECT mode, hex(encrypt(mode, toNullable('Hello World!'), key, iv));","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-ecb' as mode, 'test_key________________________' as key SELECT mode, decrypt(mode, CAST(null as Nullable(String)), key);","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv SELECT mode, decrypt(mode, CAST(null as Nullable(String)), key, iv);","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-ecb' as mode, unhex('D1B43643E1D0E9390E39BA4EAE150851') as ciphertext, 'test_key________________________' as key SELECT mode, decrypt(mode, toNullable(ciphertext), key);","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH 'aes-256-gcm' as mode, unhex('219E6478A1A3BB5B686DA4BAD70323F192EFEDCCBBD6F49E78A7E2F6') as ciphertext, 'test_key________________________' as key, 'test_iv_____' as iv SELECT mode, decrypt(mode, toNullable(ciphertext), key, iv);","fileName":"../ClickHouse/tests/queries/0_stateless/02124_encrypt_decrypt_nullable.sql","errors":[]},{"query":"WITH (1, 2) AS t SELECT t.1, t.2;","fileName":"../ClickHouse/tests/queries/0_stateless/02116_tuple_element_analyzer.sql","errors":[]},{"query":"WITH (1, 2)::Tuple(a UInt32, b UInt32) AS t SELECT t.1, tupleElement(t, 'b');","fileName":"../ClickHouse/tests/queries/0_stateless/02116_tuple_element_analyzer.sql","errors":[{"message":"no viable alternative at input 'WITH (1, 2):'","startColumn":11,"startLine":1,"endColumn":12,"endLine":1}]},{"query":"WITH splitByChar(' ', getOSKernelVersion()) AS version_pair SELECT version_pair[1] ","fileName":"../ClickHouse/tests/queries/0_stateless/02095_function_get_os_kernel_version.sql","errors":[]},{"query":"with lowerUTF8(str) as l_, upperUTF8(str) as u_, '0x' || hex(str) as h_ select length(str), if(l_ == '\\\\xe2', h_, l_), if(u_ == '\\\\xe2', h_, u_) from utf8_overlap format CSV;","fileName":"../ClickHouse/tests/queries/0_stateless/02071_lower_upper_utf8_row_overlaps.sql","errors":[]},{"query":"WITH lower('\\\\RealVNC\\\\WinVNC4 /v password') as CommandLine SELECT\nCommandLine LIKE '%\\\\\\\\\\\\\\\\realvnc\\\\\\\\\\\\\\\\winvnc4%password%' as t1,\nCommandLine LIKE '%\\\\\\\\\\\\\\\\realvnc\\\\\\\\\\\\\\\\winvnc4 %password%' as t2,\nCommandLine LIKE '%\\\\\\\\\\\\\\\\realvnc\\\\\\\\\\\\\\\\winvnc4%password' as t3,\nCommandLine LIKE '%\\\\\\\\\\\\\\\\realvnc\\\\\\\\\\\\\\\\winvnc4 %password' as t4,\nCommandLine LIKE '%realvnc%winvnc4%password%' as t5,\nCommandLine LIKE '%\\\\\\\\\\\\\\\\winvnc4%password%' as t6;","fileName":"../ClickHouse/tests/queries/0_stateless/02045_like_function.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(1000));","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum_shard.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(10000));","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum_shard.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(100000));","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum_shard.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(1000000));","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum_shard.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(10);","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(100);","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(1000);","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(10000);","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(100000);","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(1000000);","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum.sql","errors":[]},{"query":"WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(10000000);","fileName":"../ClickHouse/tests/queries/0_stateless/02021_exponential_sum.sql","errors":[]},{"query":"WITH number DIV 50 AS k, toUInt32(number % 50) AS value SELECT k, sparkbar(50, 0, 99)(number, value) FROM numbers(100) GROUP BY k ORDER BY k;","fileName":"../ClickHouse/tests/queries/0_stateless/02016_aggregation_spark_bar.sql","errors":[{"message":"no viable alternative at input 'WITH number DIV 50'","startColumn":16,"startLine":1,"endColumn":18,"endLine":1}]},{"query":"WITH map(1, 2, 3, 4) AS m SELECT m[number] FROM numbers(5);","fileName":"../ClickHouse/tests/queries/0_stateless/02014_map_different_keys.sql","errors":[]},{"query":"WITH map('1', 2, '3', 4) AS m SELECT m[toString(number)] FROM numbers(5);","fileName":"../ClickHouse/tests/queries/0_stateless/02014_map_different_keys.sql","errors":[]},{"query":"WITH map(1, 2, 3, 4) AS m SELECT m[3];","fileName":"../ClickHouse/tests/queries/0_stateless/02014_map_different_keys.sql","errors":[]},{"query":"WITH map('1', 2, '3', 4) AS m SELECT m['3'];","fileName":"../ClickHouse/tests/queries/0_stateless/02014_map_different_keys.sql","errors":[]},{"query":"with (select count() from (select * from test union distinct select * from test except select * from test where toUInt8(name) > 3)) as max select count() from (select * from test union all select * from test where toUInt8(name) < max);","fileName":"../ClickHouse/tests/queries/0_stateless/02008_test_union_distinct_in_subquery.sql","errors":[{"message":"no viable alternative at input 'with (select count() from (select * from test union distinct'","startColumn":52,"startLine":1,"endColumn":60,"endLine":1}]},{"query":"with (select count() from (select * from test union distinct select * from test except select * from test where toUInt8(name) > 3)) as max select count() from (select * from test except select * from test where toUInt8(name) < max);","fileName":"../ClickHouse/tests/queries/0_stateless/02008_test_union_distinct_in_subquery.sql","errors":[{"message":"no viable alternative at input 'with (select count() from (select * from test union distinct'","startColumn":52,"startLine":1,"endColumn":60,"endLine":1}]},{"query":"WITH 1 AS max_size SELECT groupArray(max_size)(col)\nFROM\n(SELECT col FROM (\nSELECT 1 as col\nUNION ALL\nSELECT 2\n) ORDER BY col);","fileName":"../ClickHouse/tests/queries/0_stateless/02006_use_constants_in_with_and_select.sql","errors":[]},{"query":"WITH 0.1 AS level SELECT quantile(level)(number)\nFROM numbers(1000);","fileName":"../ClickHouse/tests/queries/0_stateless/02006_use_constants_in_with_and_select.sql","errors":[]},{"query":"WITH 0.1 AS level,\n1 AS max_size\nSELECT groupArray(max_size)(col)\nFROM\n(\nSELECT quantile(level)(number) AS col\nFROM numbers(1000)\n);","fileName":"../ClickHouse/tests/queries/0_stateless/02006_use_constants_in_with_and_select.sql","errors":[]},{"query":"with res as (select first_col from (select first_col, second_col as total from tp2 order by 2 desc) limit 1) select * from res;","fileName":"../ClickHouse/tests/queries/0_stateless/02006_test_positional_arguments.sql","errors":[]},{"query":"with (select number from numbers(10) intersect select 5) as a select a * 10;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","errors":[{"message":"no viable alternative at input 'with (select number from numbers(10) intersect select'","startColumn":47,"startLine":1,"endColumn":53,"endLine":1}]},{"query":"with (select 5 except select 1) as a select a except select 5;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","errors":[{"message":"no viable alternative at input 'with (select 5 except select'","startColumn":22,"startLine":1,"endColumn":28,"endLine":1}]},{"query":"with (select number from numbers(10) intersect select 5) as a select a intersect select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","errors":[{"message":"no viable alternative at input 'with (select number from numbers(10) intersect select'","startColumn":47,"startLine":1,"endColumn":53,"endLine":1}]},{"query":"with (select number from numbers(10) intersect select 5) as a select a except select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","errors":[{"message":"no viable alternative at input 'with (select number from numbers(10) intersect select'","startColumn":47,"startLine":1,"endColumn":53,"endLine":1}]},{"query":"with (select count() from (select 1 union distinct select 2 except select 1)) as max select count() from (select 1 union all select max) limit 100;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","errors":[{"message":"no viable alternative at input 'with (select count() from (select 1 union distinct'","startColumn":42,"startLine":1,"endColumn":50,"endLine":1}]},{"query":"with (select number from numbers(10) intersect select 5) as a select a * 10;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","errors":[{"message":"no viable alternative at input 'with (select number from numbers(10) intersect select'","startColumn":47,"startLine":1,"endColumn":53,"endLine":1}]},{"query":"with (select 5 except select 1) as a select a except select 5;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","errors":[{"message":"no viable alternative at input 'with (select 5 except select'","startColumn":22,"startLine":1,"endColumn":28,"endLine":1}]},{"query":"with (select number from numbers(10) intersect select 5) as a select a intersect select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","errors":[{"message":"no viable alternative at input 'with (select number from numbers(10) intersect select'","startColumn":47,"startLine":1,"endColumn":53,"endLine":1}]},{"query":"with (select number from numbers(10) intersect select 5) as a select a except select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","errors":[{"message":"no viable alternative at input 'with (select number from numbers(10) intersect select'","startColumn":47,"startLine":1,"endColumn":53,"endLine":1}]},{"query":"with (select count() from (select 1 union distinct select 2 except select 1)) as max select count() from (select 1 union all select max) limit 100;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","errors":[{"message":"no viable alternative at input 'with (select count() from (select 1 union distinct'","startColumn":42,"startLine":1,"endColumn":50,"endLine":1}]},{"query":"WITH toDateTime('1970-06-17 07:39:21', 'Africa/Monrovia') as t SELECT toUnixTimestamp(t),\ntimeZoneOffset(t),\nformatDateTime(t, '%F %T', 'Africa/Monrovia'),\ntoString(t, 'Africa/Monrovia'),\ntoStartOfMinute(t),\ntoStartOfFiveMinutes(t),\ntoStartOfFifteenMinutes(t),\ntoStartOfTenMinutes(t),\ntoStartOfHour(t),\ntoStartOfDay(t),\ntoStartOfWeek(t),\ntoStartOfInterval(t, INTERVAL 1 second),\ntoStartOfInterval(t, INTERVAL 1 minute),\ntoStartOfInterval(t, INTERVAL 2 minute),\ntoStartOfInterval(t, INTERVAL 5 minute),\ntoStartOfInterval(t, INTERVAL 60 minute),\naddMinutes(t, 1),\naddMinutes(t, 60)\nFORMAT Vertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01958_partial_hour_timezone.sql","errors":[]},{"query":"WITH CAST(1426860704886947840 AS Int64) AS i64,\n'UTC' AS tz\nSELECT\ntz,\ni64,\nsnowflakeToDateTime(i64, tz) as dt,\ntoTypeName(dt),\nsnowflakeToDateTime64(i64, tz) as dt64,\ntoTypeName(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01942_snowflakeToDateTime.sql","errors":[]},{"query":"WITH CAST(1426860704886947840 AS Int64) AS i64,\n'Asia/Shanghai' AS tz\nSELECT\ntz,\ni64,\nsnowflakeToDateTime(i64, tz) as dt,\ntoTypeName(dt),\nsnowflakeToDateTime64(i64, tz) as dt64,\ntoTypeName(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01942_snowflakeToDateTime.sql","errors":[]},{"query":"WITH 7204436857747984384 AS sf\nSELECT\nsf,\nsnowflakeIDToDateTime(sf) as dt,\nsnowflakeIDToDateTime64(sf) as dt64\nFORMAT\nVertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_snowflakeIDToDateTime.sql","errors":[]},{"query":"WITH 1426981498778550272 AS sf,\n1288834974657 AS epoch\nSELECT\nsf,\nsnowflakeIDToDateTime(sf, epoch) as dt,\nsnowflakeIDToDateTime64(sf, epoch) as dt64\nFORMAT\nVertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_snowflakeIDToDateTime.sql","errors":[]},{"query":"WITH 7204436857747984384 AS sf,\n0 AS epoch, -- default epoch\n'Asia/Shanghai' AS tz\nSELECT\nsf,\nsnowflakeIDToDateTime(sf, epoch, tz) as dt,\nsnowflakeIDToDateTime64(sf, epoch, tz) as dt64\nFORMAT\nVertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_snowflakeIDToDateTime.sql","errors":[]},{"query":"WITH 7204436857747984384 AS sf,\n0 AS epoch, -- default epoch\nmaterialize('Asia/Shanghai') AS tz\nSELECT\nsf,\nsnowflakeIDToDateTime(sf, epoch, tz) as dt,\nsnowflakeIDToDateTime64(sf, epoch, tz) as dt64\nFORMAT\nVertical\nSETTINGS\nallow_nonconst_timezone_arguments = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_snowflakeIDToDateTime.sql","errors":[{"message":"mismatched input 'SETTINGS' expecting <EOF>","startColumn":0,"startLine":10,"endColumn":8,"endLine":10}]},{"query":"WITH generateSnowflakeID() AS snowflake\nSELECT\nsnowflakeIDToDateTime(snowflake),\nsnowflakeIDToDateTime64(snowflake)\nFORMAT\nNull;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_snowflakeIDToDateTime.sql","errors":[]},{"query":"WITH toDateTime('2021-08-15 18:57:56') AS dt,\ntoDateTime64('2021-08-15 18:57:56.492', 3) AS dt64,\n1288834974657 AS twitter_epoch\nSELECT\ndt,\ndt64,\ndateTimeToSnowflakeID(dt),\ndateTime64ToSnowflakeID(dt64),\ndateTimeToSnowflakeID(dt, twitter_epoch),\ndateTime64ToSnowflakeID(dt64, twitter_epoch)\nFORMAT\nVertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_dateTimeToSnowflakeID.sql","errors":[]},{"query":"WITH toDateTime64('2021-08-15 18:57:56.492', 0, 'UTC') AS dt64_0,\ntoDateTime64('2021-08-15 18:57:56.492', 1, 'UTC') AS dt64_1,\ntoDateTime64('2021-08-15 18:57:56.492', 2, 'UTC') AS dt64_2,\ntoDateTime64('2021-08-15 18:57:56.492', 3, 'UTC') AS dt64_3,\ntoDateTime64('2021-08-15 18:57:56.492', 4, 'UTC') AS dt64_4\nSELECT\ndateTime64ToSnowflakeID(dt64_0),\ndateTime64ToSnowflakeID(dt64_1),\ndateTime64ToSnowflakeID(dt64_2),\ndateTime64ToSnowflakeID(dt64_3),\ndateTime64ToSnowflakeID(dt64_4)\nFormat\nVertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_dateTimeToSnowflakeID.sql","errors":[]},{"query":"WITH now64(0) AS dt64_0,\nnow64(1) AS dt64_1,\nnow64(2) AS dt64_2,\nnow64(3) AS dt64_3\nSELECT\nsnowflakeIDToDateTime64(dateTime64ToSnowflakeID(dt64_0), 0, 'UTC') == dt64_0,\nsnowflakeIDToDateTime64(dateTime64ToSnowflakeID(dt64_1), 0, 'UTC') == dt64_1,\nsnowflakeIDToDateTime64(dateTime64ToSnowflakeID(dt64_2), 0, 'UTC') == dt64_2,\nsnowflakeIDToDateTime64(dateTime64ToSnowflakeID(dt64_3), 0, 'UTC') == dt64_3\nFORMAT\nVertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_dateTimeToSnowflakeID.sql","errors":[]},{"query":"WITH toDateTime64('2023-11-11 11:11:11.1231', 4, 'UTC') AS dt64_4\nSELECT\ndt64_4,\nsnowflakeIDToDateTime64(dateTime64ToSnowflakeID(dt64_4))\nFORMAT\nVertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_dateTimeToSnowflakeID.sql","errors":[]},{"query":"WITH toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt SELECT dt, dateTimeToSnowflake(dt), materialize(dateTimeToSnowflake(dt));","fileName":"../ClickHouse/tests/queries/0_stateless/01942_dateTimeToSnowflake.sql","errors":[]},{"query":"WITH toDateTime64('2021-08-15 18:57:56.492', 3, 'Asia/Shanghai') AS dt64 SELECT dt64, dateTime64ToSnowflake(dt64), materialize(dateTime64ToSnowflake(dt64));","fileName":"../ClickHouse/tests/queries/0_stateless/01942_dateTimeToSnowflake.sql","errors":[]},{"query":"WITH toDateTime64('2021-08-15 18:57:56.492', 0, 'UTC') AS dt64_0, toDateTime64('2021-08-15 18:57:56.492', 1, 'UTC') AS dt64_1,\ntoDateTime64('2021-08-15 18:57:56.492', 2, 'UTC') AS dt64_2,\ntoDateTime64('2021-08-15 18:57:56.492', 3, 'UTC') AS dt64_3,\ntoDateTime64('2021-08-15 18:57:56.492', 4, 'UTC') AS dt64_4\nSELECT dateTime64ToSnowflake(dt64_0),\ndateTime64ToSnowflake(dt64_1),\ndateTime64ToSnowflake(dt64_2),\ndateTime64ToSnowflake(dt64_3),\ndateTime64ToSnowflake(dt64_4);","fileName":"../ClickHouse/tests/queries/0_stateless/01942_dateTimeToSnowflake.sql","errors":[]},{"query":"WITH now64(0, 'UTC') AS dt64_0, now64(1, 'UTC') AS dt64_1,\nnow64(2, 'UTC') AS dt64_2,\nnow64(3, 'UTC') AS dt64_3\nSELECT snowflakeToDateTime64(dateTime64ToSnowflake(dt64_0), 'UTC') == dt64_0,\nsnowflakeToDateTime64(dateTime64ToSnowflake(dt64_1), 'UTC') == dt64_1,\nsnowflakeToDateTime64(dateTime64ToSnowflake(dt64_2), 'UTC') == dt64_2,\nsnowflakeToDateTime64(dateTime64ToSnowflake(dt64_3), 'UTC') == dt64_3;","fileName":"../ClickHouse/tests/queries/0_stateless/01942_dateTimeToSnowflake.sql","errors":[]},{"query":"WITH toDate('2000-01-01') as a, toDateTime('2000-01-01', 'Asia/Istanbul') as b SELECT if(value, b, a) as result, toTypeName(result)\nFROM predicate_table;","fileName":"../ClickHouse/tests/queries/0_stateless/01926_date_date_time_supertype.sql","errors":[]},{"query":"WITH toDateTime('2000-01-01', 'Asia/Istanbul') as a, toDateTime64('2000-01-01', 5, 'Asia/Istanbul') as b SELECT if(value, b, a) as result, toTypeName(result)\nFROM predicate_table;","fileName":"../ClickHouse/tests/queries/0_stateless/01926_date_date_time_supertype.sql","errors":[]},{"query":"with '{\"string_value\":null}' as json select JSONExtract(json, 'string_value', 'Nullable(String)');","fileName":"../ClickHouse/tests/queries/0_stateless/01915_json_extract_raw_string.sql","errors":[]},{"query":"with '{\"string_value\":null}' as json select JSONExtract(json, 'string_value', 'LowCardinality(Nullable(String))');","fileName":"../ClickHouse/tests/queries/0_stateless/01915_json_extract_raw_string.sql","errors":[]},{"query":"WITH arrayJoin(['a', 'b']) AS z SELECT\nz,\nsumMergeForEach(x) AS x\nFROM\n(\nSELECT sumStateForEach([1., 1.1, 1.1300175]) AS x\nFROM remote('127.0.0.{1,2}', system.one)\n)\nGROUP BY z\nORDER BY z;","fileName":"../ClickHouse/tests/queries/0_stateless/01915_for_each_crakjie.sql","errors":[]},{"query":"WITH A as (SELECT rowNumberInAllBlocks() R,addDays(toDate('2021-05-18'), R) TVV from numbers(5)), B as (SELECT rowNumberInAllBlocks() R,toDateTime(NULL) TVV from numbers(1))\nSELECT\njoinGet('DATE_INFO_DICT',  'SHAMSI',   toDate(A.TVV) ) TV1,\nsubstr(TV1, 3,  8) || ' : ' || toString(1) TV_CHAR_1\nfrom A LEFT JOIN B USING (R)\nORDER BY TV1;","fileName":"../ClickHouse/tests/queries/0_stateless/01909_mbtolou.sql","errors":[]},{"query":"WITH A as (SELECT rowNumberInAllBlocks() R,addDays(toDate('2021-05-18'), R) TVV from numbers(5)), B as (SELECT rowNumberInAllBlocks() R,toDateTime(NULL) TVV from numbers(1))\nSELECT\njoinGetOrNull('DATE_INFO_DICT',    'SHAMSI',   toDate(A.TVV) ) TV1,\nsubstr(TV1, 3,  8) || ' : ' || toString(1) TV_CHAR_1\nfrom A LEFT JOIN B USING (R)\nORDER BY TV1;","fileName":"../ClickHouse/tests/queries/0_stateless/01909_mbtolou.sql","errors":[]},{"query":"WITH (d < '2018-01-01') AND (d < '2018-01-02') AS x SELECT 1\nFROM t\nWHERE x;","fileName":"../ClickHouse/tests/queries/0_stateless/01907_multiple_aliases.sql","errors":[]},{"query":"WITH h3ToGeo(h3_index) AS p SELECT round(p.1, 3), round(p.2, 3) FROM h3_indexes ORDER BY h3_index;","fileName":"../ClickHouse/tests/queries/0_stateless/01906_h3_to_geo.sql","errors":[]},{"query":"with t as s select t from tab where s > '2020-01-01 01:01:01';","fileName":"../ClickHouse/tests/queries/0_stateless/01889_key_condition_function_chains.sql","errors":[]},{"query":"with t + 1 as s select t from tab where s > '2020-01-01 01:01:01';","fileName":"../ClickHouse/tests/queries/0_stateless/01889_key_condition_function_chains.sql","errors":[]},{"query":"with x + y as s select x, y from tab where s = 2;","fileName":"../ClickHouse/tests/queries/0_stateless/01889_key_condition_function_chains.sql","errors":[]},{"query":"WITH [3,4,5] AS x SELECT x[1]::Int32;","fileName":"../ClickHouse/tests/queries/0_stateless/01852_cast_operator_4.sql","errors":[{"message":"mismatched input ':' expecting <EOF>","startColumn":29,"startLine":1,"endColumn":30,"endLine":1}]},{"query":"WITH tuple(3,4,5) AS x SELECT x.1::Int32;","fileName":"../ClickHouse/tests/queries/0_stateless/01852_cast_operator_4.sql","errors":[{"message":"mismatched input ':' expecting <EOF>","startColumn":33,"startLine":1,"endColumn":34,"endLine":1}]},{"query":"WITH toDate('2021-04-14') AS date_value,\ntoDate32('2021-04-14') AS date_32_value,\ntoDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('year', date_value), dateName('year', date_32_value), dateName('year', date_time_value), dateName('year', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDate('2021-04-14') AS date_value,\ntoDate32('2021-04-14') AS date_32_value,\ntoDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('quarter', date_value), dateName('quarter', date_32_value), dateName('quarter', date_time_value), dateName('quarter', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDate('2021-04-14') AS date_value,\ntoDate32('2021-04-14') AS date_32_value,\ntoDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('month', date_value), dateName('month', date_32_value), dateName('month', date_time_value), dateName('month', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDate('2021-04-14') AS date_value,\ntoDate32('2021-04-14') AS date_32_value,\ntoDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('dayofyear', date_value), dateName('dayofyear', date_32_value), dateName('dayofyear', date_time_value), dateName('dayofyear', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDate('2021-04-14') AS date_value,\ntoDate32('2021-04-14') AS date_32_value,\ntoDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('day', date_value), dateName('day', date_32_value), dateName('day', date_time_value), dateName('day', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDate('2021-04-14') AS date_value,\ntoDate32('2021-04-14') AS date_32_value,\ntoDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('week', date_value), dateName('week', date_32_value), dateName('week', date_time_value), dateName('week', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDate('2021-04-14') AS date_value,\ntoDate32('2021-04-14') AS date_32_value,\ntoDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('weekday', date_value), dateName('weekday', date_32_value), dateName('weekday', date_time_value), dateName('weekday', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('hour', date_time_value), dateName('hour', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('minute', date_time_value), dateName('minute', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDateTime('2021-04-14 11:22:33') AS date_time_value,\ntoDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value\nSELECT dateName('second', date_time_value), dateName('second', date_time_64_value);","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDateTime('2021-04-14 23:22:33', 'UTC') as date\nSELECT\ndateName('weekday', date, 'UTC'),\ndateName('hour', date, 'UTC'),\ndateName('minute', date, 'UTC'),\ndateName('second', date, 'UTC');","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH toDateTime('2021-04-14 23:22:33', 'UTC') as date\nSELECT\ndateName('weekday', date, 'Asia/Istanbul'),\ndateName('hour', date, 'Asia/Istanbul'),\ndateName('minute', date, 'Asia/Istanbul'),\ndateName('second', date, 'Asia/Istanbul');","fileName":"../ClickHouse/tests/queries/0_stateless/01811_datename.sql","errors":[]},{"query":"WITH arrayJoin(['192.168.99.255', '192.168.100.1', '192.168.103.255', '192.168.104.0']) as addr, '192.168.100.0/22' as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);","fileName":"../ClickHouse/tests/queries/0_stateless/01774_ip_address_in_range.sql","errors":[]},{"query":"WITH arrayJoin(['::192.168.99.255', '::192.168.100.1', '::192.168.103.255', '::192.168.104.0']) as addr, '::192.168.100.0/118' as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);","fileName":"../ClickHouse/tests/queries/0_stateless/01774_ip_address_in_range.sql","errors":[]},{"query":"WITH '192.168.100.1' as addr, arrayJoin(['192.168.100.0/22', '192.168.100.0/24', '192.168.100.0/32']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);","fileName":"../ClickHouse/tests/queries/0_stateless/01774_ip_address_in_range.sql","errors":[]},{"query":"WITH '::192.168.100.1' as addr, arrayJoin(['::192.168.100.0/118', '::192.168.100.0/120', '::192.168.100.0/128']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);","fileName":"../ClickHouse/tests/queries/0_stateless/01774_ip_address_in_range.sql","errors":[]},{"query":"WITH arrayJoin(['192.168.100.1', '192.168.103.255']) as addr, arrayJoin(['192.168.100.0/22', '192.168.100.0/24']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);","fileName":"../ClickHouse/tests/queries/0_stateless/01774_ip_address_in_range.sql","errors":[]},{"query":"WITH arrayJoin(['::192.168.100.1', '::192.168.103.255']) as addr, arrayJoin(['::192.168.100.0/118', '::192.168.100.0/120']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);","fileName":"../ClickHouse/tests/queries/0_stateless/01774_ip_address_in_range.sql","errors":[]},{"query":"with (select currentDatabase()) as id_no select *, ignore(id_no) from dist_01756 where dummy in (0, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql","errors":[]},{"query":"with (select currentDatabase()) as id_02 select *, ignore(id_02) from dist_01756 where dummy in (0, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql","errors":[]},{"query":"with (select currentDatabase()) as id_2 select *, ignore(id_2) from dist_01756 where dummy in (2);","fileName":"../ClickHouse/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql","errors":[]},{"query":"with (select currentDatabase()) as id_00 select *, ignore(id_00) from dist_01756 where dummy in (0);","fileName":"../ClickHouse/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql","errors":[]},{"query":"with (select currentDatabase()) as key_signed select *, ignore(key_signed) from cluster(test_cluster_two_shards, currentDatabase(), data_01756_signed, key) where key in (-1, -2);","fileName":"../ClickHouse/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql","errors":[]},{"query":"WITH (SELECT count(distinct colU) from tabA) AS withA, (SELECT count(distinct colU) from tabA) AS withB SELECT withA / withB AS ratio FROM (SELECT date AS period, colX FROM (SELECT date, if(colA IN (SELECT colB FROM tabC), 0, colA) AS colX FROM tabB) AS tempB GROUP BY period, colX) AS main; -- {serverError UNKNOWN_TABLE} ","fileName":"../ClickHouse/tests/queries/0_stateless/01717_global_with_subquery_fix.sql","errors":[]},{"query":"WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM normal WHERE ts > '2021-12-06 22:00:00' GROUP BY a ORDER BY v LIMIT 5;","fileName":"../ClickHouse/tests/queries/0_stateless/01710_projection_aggregation_in_order.sql","errors":[]},{"query":"WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM normal WHERE ts > '2021-12-06 22:00:00' GROUP BY toStartOfHour(ts), a ORDER BY v LIMIT 5;","fileName":"../ClickHouse/tests/queries/0_stateless/01710_projection_aggregation_in_order.sql","errors":[]},{"query":"WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM agg WHERE ts > '2021-12-06 22:00:00' GROUP BY a ORDER BY v LIMIT 5;","fileName":"../ClickHouse/tests/queries/0_stateless/01710_projection_aggregation_in_order.sql","errors":[]},{"query":"WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM agg WHERE ts > '2021-12-06 22:00:00' GROUP BY toStartOfHour(ts), a ORDER BY v LIMIT 5;","fileName":"../ClickHouse/tests/queries/0_stateless/01710_projection_aggregation_in_order.sql","errors":[]},{"query":"WITH '{ \"v\":1.1}' AS raw SELECT\nJSONExtract(raw, 'v', 'float') AS float32_1,\nJSONExtract(raw, 'v', 'Float32') AS float32_2,\nJSONExtractFloat(raw, 'v') AS float64_1,\nJSONExtract(raw, 'v', 'double') AS float64_2;","fileName":"../ClickHouse/tests/queries/0_stateless/01685_json_extract_double_as_float.sql","errors":[]},{"query":"WITH '{ \"v\":1E-2}' AS raw SELECT\nJSONExtract(raw, 'v', 'float') AS float32_1,\nJSONExtract(raw, 'v', 'Float32') AS float32_2,\nJSONExtractFloat(raw, 'v') AS float64_1,\nJSONExtract(raw, 'v', 'double') AS float64_2;","fileName":"../ClickHouse/tests/queries/0_stateless/01685_json_extract_double_as_float.sql","errors":[]},{"query":"WITH concat(addressToLine(arrayJoin(trace) AS addr), '#') AS symbol SELECT count() > 7\nFROM trace_log AS t\nWHERE (query_id =\n(\nSELECT\n[NULL, NULL, NULL, NULL, 0.00009999999747378752, NULL, NULL, NULL, NULL, NULL],\nquery_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (query LIKE '%test cpu time query profiler%') AND (query NOT LIKE '%system%')\nORDER BY event_time DESC\nLIMIT 1\n)) AND (symbol LIKE '%Source%'); -- { serverError INCORRECT_RESULT_OF_SCALAR_SUBQUERY }\nWITH addressToSymbol(arrayJoin(trace)) AS symbol\nSELECT count() > 0\nFROM trace_log AS t\nWHERE greaterOrEquals(event_date, ignore(ignore(ignore(NULL, '')), 256), yesterday()) AND (trace_type = 'Memory') AND (query_id =\n(\nSELECT\nignore(ignore(ignore(ignore(65536)), ignore(65537), ignore(2)), ''),\nquery_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (event_date >= yesterday()) AND (query LIKE '%test memory profiler%')\nORDER BY event_time DESC\nLIMIT 1\n)); -- { serverError INCORRECT_RESULT_OF_SCALAR_SUBQUERY, 42 }\nDROP TABLE IF EXISTS trace_log;","fileName":"../ClickHouse/tests/queries/0_stateless/01651_bugs_from_15889.sql","errors":[{"message":"no viable alternative at input 'WITH concat(addressToLine(arrayJoin(trace) AS addr), '#') AS symbol SELECT count() > 7\\nFROM trace_log AS t\\nWHERE (query_id =\\n(\\nSELECT\\n[NULL, NULL, NULL, NULL, 0.00009999999747378752, NULL, NULL, NULL, NULL, NULL],\\nquery_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND (query'","startColumn":48,"startLine":9,"endColumn":53,"endLine":9}]},{"query":"WITH ( (\nSELECT query_start_time_microseconds\nFROM system.query_log\nWHERE current_database = currentDatabase()\nORDER BY query_start_time DESC\nLIMIT 1\n) AS time_with_microseconds,\n(\nSELECT\ninf,\nquery_start_time\nFROM system.query_log\nWHERE current_database = currentDatabase()\nORDER BY query_start_time DESC\nLIMIT 1\n) AS t)\nSELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(t)) = -9223372036854775808, 'ok', ''); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nWITH (\n(\nSELECT query_start_time_microseconds\nFROM system.query_log\nWHERE current_database = currentDatabase()\nORDER BY query_start_time DESC\nLIMIT 1\n) AS time_with_microseconds,\n(\nSELECT query_start_time\nFROM system.query_log\nWHERE current_database = currentDatabase()\nORDER BY query_start_time DESC\nLIMIT 1\n) AS t)\nSELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(t)) = -9223372036854775808, 'ok', '');","fileName":"../ClickHouse/tests/queries/0_stateless/01651_bugs_from_15889.sql","errors":[]},{"query":"with i as k select * from alias_key_condition where k = (select i from alias_key_condition where i = 3);","fileName":"../ClickHouse/tests/queries/0_stateless/01649_with_alias_key_condition.sql","errors":[]},{"query":"WITH  sum(if((a >= 0) AND (b != 100) AND (c = 0), 1, 0)) AS r1, \nsum(if((a >= 0) AND (b != 100) AND (c > 220), 1, 0)) AS r2 \nSELECT \n(intDiv(toUInt32(rtime), 20) * 20) * 1000 AS t, \n(r1 * 100) / (r1 + r2) AS m\nFROM cluster('test_cluster_two_shards', currentDatabase(), test_alias)\nWHERE day = '2022-01-01'\nGROUP BY t\nORDER BY t ASC;","fileName":"../ClickHouse/tests/queries/0_stateless/01646_rewrite_sum_if_bug.sql","errors":[]},{"query":"WITH ['2023-04-05 00:25:23', '2023-04-05 00:25:24']::Array(DateTime) AS dt SELECT arrayMax(dt), arrayMin(dt), arrayDifference(dt);","fileName":"../ClickHouse/tests/queries/0_stateless/01602_array_aggregation.sql","errors":[{"message":"no viable alternative at input 'WITH ['2023-04-05 00:25:23', '2023-04-05 00:25:24']:'","startColumn":51,"startLine":1,"endColumn":52,"endLine":1}]},{"query":"WITH ['2023-04-05 00:25:23.123', '2023-04-05 00:25:24.124']::Array(DateTime64(3)) AS dt SELECT arrayMax(dt), arrayMin(dt), arrayDifference(dt);","fileName":"../ClickHouse/tests/queries/0_stateless/01602_array_aggregation.sql","errors":[{"message":"no viable alternative at input 'WITH ['2023-04-05 00:25:23.123', '2023-04-05 00:25:24.124']:'","startColumn":59,"startLine":1,"endColumn":60,"endLine":1}]},{"query":"WITH ['2023-04-05', '2023-04-06']::Array(Date) AS d SELECT arrayMax(d), arrayMin(d), arrayDifference(d);","fileName":"../ClickHouse/tests/queries/0_stateless/01602_array_aggregation.sql","errors":[{"message":"no viable alternative at input 'WITH ['2023-04-05', '2023-04-06']:'","startColumn":33,"startLine":1,"endColumn":34,"endLine":1}]},{"query":"WITH ['2023-04-05', '2023-04-06']::Array(Date32) AS d SELECT arrayMax(d), arrayMin(d), arrayDifference(d);","fileName":"../ClickHouse/tests/queries/0_stateless/01602_array_aggregation.sql","errors":[{"message":"no viable alternative at input 'WITH ['2023-04-05', '2023-04-06']:'","startColumn":33,"startLine":1,"endColumn":34,"endLine":1}]},{"query":"with number + 1 as x select intDiv(number, 3) as y, sum(x + y) over (partition by y order by x rows unbounded preceding) from numbers(7);","fileName":"../ClickHouse/tests/queries/0_stateless/01591_window_functions.sql","errors":[]},{"query":"with anySimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with anyLastSimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with minSimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with maxSimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with sumSimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with sumWithOverflowSimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with groupBitAndSimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with groupBitOrSimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with groupBitXorSimpleState(number) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with sumMapSimpleState(([number], [number])) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with minMapSimpleState(([number], [number])) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with maxMapSimpleState(([number], [number])) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with groupArrayArraySimpleState([number]) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"with groupUniqArrayArraySimpleState([number]) as c select toTypeName(c), c from numbers(1);","fileName":"../ClickHouse/tests/queries/0_stateless/01570_aggregator_combinator_simple_state.sql","errors":[]},{"query":"WITH arrayJoin(range(2)) AS delta SELECT\ntoDate(time) + toIntervalDay(delta) AS dt\nFROM\n(\nSELECT toDateTime('2020.11.12 19:02:04') AS time\n)\nORDER BY dt ASC;","fileName":"../ClickHouse/tests/queries/0_stateless/01560_monotonicity_check_multiple_args_bug.sql","errors":[]},{"query":"WITH arrayJoin([0, 1]) AS delta SELECT\ntoDate(time) + toIntervalDay(delta) AS dt\nFROM\n(\nSELECT toDateTime('2020.11.12 19:02:04') AS time\n)\nORDER BY dt ASC;","fileName":"../ClickHouse/tests/queries/0_stateless/01560_monotonicity_check_multiple_args_bug.sql","errors":[]},{"query":"WITH mannWhitneyUTest(left, right) AS pair SELECT roundBankers(pair.1, 16) as t_stat, roundBankers(pair.2, 16) as p_value from mann_whitney_test;","fileName":"../ClickHouse/tests/queries/0_stateless/01560_mann_whitney.sql","errors":[]},{"query":"WITH mannWhitneyUTest('two-sided', 1)(left, right) as pair SELECT roundBankers(pair.1, 16) as t_stat, roundBankers(pair.2, 16) as p_value from mann_whitney_test;","fileName":"../ClickHouse/tests/queries/0_stateless/01560_mann_whitney.sql","errors":[]},{"query":"WITH mannWhitneyUTest('two-sided')(left, right) as pair SELECT roundBankers(pair.1, 16) as t_stat, roundBankers(pair.2, 16) as p_value from mann_whitney_test;","fileName":"../ClickHouse/tests/queries/0_stateless/01560_mann_whitney.sql","errors":[]},{"query":"WITH mannWhitneyUTest('two-sided')(1, right) AS pair SELECT roundBankers(pair.1, 16) AS t_stat, roundBankers(pair.2, 16) AS p_value FROM mann_whitney_test; --{serverError BAD_ARGUMENTS} DROP TABLE IF EXISTS mann_whitney_test;","fileName":"../ClickHouse/tests/queries/0_stateless/01560_mann_whitney.sql","errors":[]},{"query":"with 1 as x select x;","fileName":"../ClickHouse/tests/queries/0_stateless/01515_with_global_and_with_propagation.sql","errors":[]},{"query":"with 1 as x select * from (select x);","fileName":"../ClickHouse/tests/queries/0_stateless/01515_with_global_and_with_propagation.sql","errors":[]},{"query":"with 1 as x select *, x from (with 2 as x select x as y);","fileName":"../ClickHouse/tests/queries/0_stateless/01515_with_global_and_with_propagation.sql","errors":[]},{"query":"with 1 as x select x union all select x;","fileName":"../ClickHouse/tests/queries/0_stateless/01515_with_global_and_with_propagation.sql","errors":[]},{"query":"with 5 as q1, x as (select number+100 as b, number as a from numbers(10) where number > q1) select * from x;","fileName":"../ClickHouse/tests/queries/0_stateless/01515_with_global_and_with_propagation.sql","errors":[{"message":"no viable alternative at input 'with 5 as q1, x as ('","startColumn":19,"startLine":1,"endColumn":20,"endLine":1}]},{"query":"with it as ( select * from numbers(1) ) select it.number, i.number from it as i;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_4.sql","errors":[]},{"query":"WITH x AS (SELECT * FROM cte1),\ny AS (SELECT * FROM cte2),\nz AS (SELECT * FROM x WHERE a % 2 = 1),\nw AS (SELECT * FROM y WHERE a > 333)\nSELECT max(a) \nFROM x JOIN y USING (a) \nWHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w);","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_3.sql","errors":[]},{"query":"WITH x AS (SELECT * FROM cte1),\ny AS (SELECT * FROM cte2),\nz AS (SELECT * FROM x WHERE a % 3 = 1),\nw AS (SELECT * FROM y WHERE a > 333 AND a < 1000)\nSELECT count(a) \nFROM x left JOIN y USING (a) \nWHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w);","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_3.sql","errors":[]},{"query":"WITH x AS (SELECT * FROM cte1),\ny AS (SELECT * FROM cte2),\nz AS (SELECT * FROM x WHERE a % 3 = 1),\nw AS (SELECT * FROM y WHERE a > 333 AND a < 1000)\nSELECT count(a) \nFROM x left JOIN y USING (a) \nWHERE a in (SELECT * FROM z);","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_3.sql","errors":[]},{"query":"WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700),\ny AS (SELECT * FROM cte2),\nz AS (SELECT * FROM x WHERE a % 3 = 1),\nw AS (SELECT * FROM y WHERE a > 333 AND a < 1000)\nSELECT count(*) \nFROM x left JOIN y USING (a) \nWHERE a in (SELECT * FROM z);","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_3.sql","errors":[]},{"query":"WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700),\ny AS (SELECT * FROM cte2),\nz AS (SELECT * FROM x WHERE a % 3 = 1),\nw AS (SELECT * FROM y WHERE a > 333 AND a < 1000)\nSELECT max(a), min(a), count(*) \nFROM x\nWHERE a in (SELECT * FROM z) AND a <100;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_3.sql","errors":[]},{"query":"WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700),\ny AS (SELECT * FROM cte2),\nz AS (SELECT * FROM x WHERE a % 3 = 1),\nw AS (SELECT * FROM y WHERE a > 333 AND a < 1000)\nSELECT max(a), min(a), count(*) FROM x\nWHERE  a <100;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_3.sql","errors":[]},{"query":"WITH x AS (SELECT a-4000 a FROM cte1 AS t WHERE cte1.a >700),\ny AS (SELECT * FROM cte2),\nz AS (SELECT * FROM x WHERE a % 3 = 1),\nw AS (SELECT * FROM y WHERE a > 333 AND a < 1000)\nSELECT max(a), min(a), count(*) \nFROM y\nWHERE  a <100;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_3.sql","errors":[]},{"query":"WITH x AS (SELECT a-4000 a FROM cte1 t WHERE t.a >700),\ny AS (SELECT x.a a FROM x left JOIN cte1 USING (a)),\nz AS (SELECT * FROM x WHERE a % 3 = 1),\nw AS (SELECT * FROM y WHERE a > 333 AND a < 1000)\nSELECT max(a), min(a), count(*) \nFROM y\nWHERE a <100;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_3.sql","errors":[]},{"query":"WITH x AS (SELECT number AS a FROM numbers(10)),\ny AS (SELECT number AS a FROM numbers(5))\nSELECT * FROM x WHERE a in (SELECT a FROM y)\nORDER BY a;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_2.sql","errors":[]},{"query":"WITH x AS (SELECT number AS a FROM numbers(10)),\ny AS (SELECT number AS a FROM numbers(5))\nSELECT * FROM x left JOIN y USING a\nORDER BY a;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_2.sql","errors":[]},{"query":"WITH x AS (SELECT number AS a FROM numbers(10)),\ny AS (SELECT number AS a FROM numbers(5))\nSELECT * FROM x JOIN y USING a\nORDER BY x.a;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_2.sql","errors":[]},{"query":"WITH x AS (SELECT number AS a FROM numbers(10)),\ny AS (SELECT number AS a FROM numbers(5)),\nz AS (SELECT toUInt64(1) b)\nSELECT * FROM x JOIN y USING a WHERE a in (SELECT * FROM z);","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_2.sql","errors":[]},{"query":"WITH x AS (SELECT number AS a FROM numbers(10)),\ny AS (SELECT number AS a FROM numbers(5)),\nz AS (SELECT * FROM x WHERE a % 2),\nw AS (SELECT * FROM y WHERE a > 0)\nSELECT * FROM x JOIN y USING a WHERE a in (SELECT * FROM z)\nORDER BY x.a;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_2.sql","errors":[]},{"query":"WITH x AS (SELECT number AS a FROM numbers(10)),\ny AS (SELECT number AS a FROM numbers(5)),\nz AS (SELECT * FROM x WHERE a % 2),\nw AS (SELECT * FROM y WHERE a > 0)\nSELECT max(a) FROM x JOIN y USING a WHERE a in (SELECT * FROM z) AND a > (SELECT min(a) FROM w);","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_2.sql","errors":[]},{"query":"WITH x AS (SELECT number AS a FROM numbers(10)),\ny AS (SELECT number AS a FROM numbers(5)),\nz AS (SELECT * FROM x WHERE a % 2),\nw AS (SELECT * FROM y WHERE a > 0)\nSELECT a FROM x JOIN y USING a WHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w)\nORDER BY x.a;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement_2.sql","errors":[]},{"query":"WITH test1 AS (SELECT * FROM numbers(5)) SELECT * FROM test1;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT * FROM test1;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT * FROM (SELECT * FROM test1);","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT toInt64(4) i, toInt64(5) j FROM numbers(3) WHERE (i, j) IN test1;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT number-1 as n FROM numbers(42))  SELECT max(n+1)+1 z FROM test1;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT number-1 as n FROM numbers(42))  SELECT max(n+1)+1 z FROM test1 join test1 x using n having z - 1 = (select min(n-1)+41 from test1) + 2;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT number-1 as n FROM numbers(4442) order by n limit 100) SELECT max(n) FROM test1 where n=422;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT number-1 as n FROM numbers(4442) order by n limit 100) SELECT max(n) FROM test1 where n=42;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n FROM with_test where n <= 40)  SELECT max(n+1)+1 z FROM test1 join test1 x using (n) having max(n+1)+1 - 1 = (select min(n-1)+41 from test1) + 2;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n FROM with_test where n <= 40)  SELECT max(n+1)+1 z FROM test1 join test1 x using (n) having z - 1 = (select min(n-1)+41 from test1) + 2;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT  n FROM with_test order by n limit 100) SELECT max(n) FROM test1 where n=422;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n FROM with_test order by n limit 100) SELECT max(n) FROM test1 where n=42;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n FROM with_test where n = 42  order by n limit 100) SELECT max(n) FROM test1 where n=42;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n FROM with_test where n = 42 or 1=1 order by n limit 100) SELECT max(n) FROM test1 where n=42;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n, null as b FROM with_test where n = 42 or b is null order by n limit 100) SELECT max(n) FROM test1 where n=42;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n, null b FROM with_test where b is null) SELECT max(n) FROM test1 where n=42;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n, null b FROM with_test where b is null or 1=1) SELECT max(n) FROM test1 where n=45;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n, null b FROM with_test where b is null and n = 42) SELECT max(n) FROM test1 where n=45;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n, null b FROM with_test where 1=1 and n = 42 order by n) SELECT max(n) FROM test1 where n=45;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n, null b, n+1 m FROM with_test where 1=0 or n = 42 order by n limit 4) SELECT max(n) m FROM test1 where test1.m=43 having max(n)=42;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH test1 AS (SELECT n, null b, n+1 m FROM with_test where  n = 42 order by n limit 4) SELECT max(n) m FROM test1 where b is null and test1.m=43 having m=42 limit 4;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"with test1 as (select n, null b, n+1 m from with_test where  n = 42 order by n limit 4),\ntest2 as (select n + 1 as x, n - 1 as y from test1),\ntest3 as (select x * y as z from test2)\nselect z + 1 as q from test3;","fileName":"../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql","errors":[]},{"query":"WITH round(exp(number), 6) AS x, toUInt64(x) AS y, toInt32(min2(x, 2147483647)) AS z SELECT formatReadableQuantity(x), formatReadableQuantity(y), formatReadableQuantity(z)\nFROM system.numbers\nLIMIT 45;","fileName":"../ClickHouse/tests/queries/0_stateless/01492_format_readable_quantity.sql","errors":[]},{"query":"WITH ( SELECT event_time_microseconds, event_time\nFROM system.metric_log\nORDER BY event_time DESC\nLIMIT 1\n) AS time\nSELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));","fileName":"../ClickHouse/tests/queries/0_stateless/01473_event_time_microseconds.sql","errors":[]},{"query":"WITH ( SELECT event_time_microseconds, event_time\nFROM system.trace_log\nORDER BY event_time DESC\nLIMIT 1\n) AS time\nSELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));","fileName":"../ClickHouse/tests/queries/0_stateless/01473_event_time_microseconds.sql","errors":[]},{"query":"WITH ( SELECT event_time_microseconds, event_time\nFROM system.query_log\nWHERE current_database = currentDatabase()\nORDER BY event_time DESC\nLIMIT 1\n) AS time\nSELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));","fileName":"../ClickHouse/tests/queries/0_stateless/01473_event_time_microseconds.sql","errors":[]},{"query":"WITH ( SELECT event_time_microseconds, event_time\nFROM system.query_thread_log\nWHERE current_database = currentDatabase()\nORDER BY event_time DESC\nLIMIT 1\n) AS time\nSELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));","fileName":"../ClickHouse/tests/queries/0_stateless/01473_event_time_microseconds.sql","errors":[]},{"query":"WITH ( SELECT event_time_microseconds, event_time\nFROM system.query_thread_log\nWHERE current_database = currentDatabase()\nORDER BY event_time DESC\nLIMIT 1\n) AS time\nSELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));","fileName":"../ClickHouse/tests/queries/0_stateless/01473_event_time_microseconds.sql","errors":[]},{"query":"WITH ( (\nSELECT query_start_time_microseconds\nFROM system.query_log\nWHERE current_database = currentDatabase()\nAND query like 'SELECT \\\\'01461_query%'\nAND event_date >= yesterday()\nORDER BY query_start_time DESC\nLIMIT 1\n) AS time_with_microseconds,\n(\nSELECT query_start_time\nFROM system.query_log\nWHERE current_database = currentDatabase()\nAND query like 'SELECT \\\\'01461_query%'\nAND event_date >= yesterday()\nORDER BY query_start_time DESC\nLIMIT 1\n) AS t)\nSELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(t)) = 0, 'ok', 'fail'); --\nSET log_query_threads = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/01461_query_start_time_microseconds.sql","errors":[{"message":"no viable alternative at input 'WITH ( (\\nSELECT query_start_time_microseconds\\nFROM system.query_log\\nWHERE current_database = currentDatabase()\\nAND query'","startColumn":4,"startLine":5,"endColumn":9,"endLine":5}]},{"query":"WITH number * 2 AS square_number SELECT number, square_number FROM numbers_indexed WHERE number = 999;","fileName":"../ClickHouse/tests/queries/0_stateless/01414_push_predicate_when_contains_with_clause.sql","errors":[]},{"query":"WITH 8.5 AS a, 2.5 AS b SELECT a % b, -a % b, a % -b, -a % -b;","fileName":"../ClickHouse/tests/queries/0_stateless/01412_mod_float.sql","errors":[]},{"query":"WITH 10.125 AS a, 2.5 AS b SELECT a % b, -a % b, a % -b, -a % -b;","fileName":"../ClickHouse/tests/queries/0_stateless/01412_mod_float.sql","errors":[]},{"query":"WITH 8.5 AS a, 2.5 AS b SELECT mod(a, b), MOD(-a, b), modulo(a, -b), moduloOrZero(-a, -b);","fileName":"../ClickHouse/tests/queries/0_stateless/01412_mod_float.sql","errors":[]},{"query":"WITH 8.5 AS a, 2.5 AS b SELECT a MOD b, -a MOD b, a MOD -b, -a MOD -b;","fileName":"../ClickHouse/tests/queries/0_stateless/01412_mod_float.sql","errors":[]},{"query":"WITH 10.125 AS a, 2.5 AS b SELECT a MOD b, -a MOD b, a MOD -b, -a MOD -b;","fileName":"../ClickHouse/tests/queries/0_stateless/01412_mod_float.sql","errors":[]},{"query":"WITH CAST(round(sqrt(number)) % 4 AS Enum('' = 0, 'hello' = 1, 'world' = 2, 'test' = 3)) AS x SELECT topK(10)(x) FROM numbers(1000);","fileName":"../ClickHouse/tests/queries/0_stateless/01353_topk_enum.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:12.3456789102019-09-16 19:20:12.345678910', 0) AS dt64 SELECT dt64; -- { serverError CANNOT_PARSE_TEXT } SELECT toDateTime64('2011-11-11 11:11:11.1234567890123456789', 0);","fileName":"../ClickHouse/tests/queries/0_stateless/01340_datetime64_fpe.sql","errors":[]},{"query":"WITH materialize(CAST(NULL, 'Nullable(Float64)')) AS test SELECT test, toTypeName(test), IF(test = 0, 1, 0);","fileName":"../ClickHouse/tests/queries/0_stateless/01323_if_with_nulls.sql","errors":[]},{"query":"WITH (SELECT [0, 1, 2, 3]) AS arr1\nSELECT arraySort(arrayIntersect(argMax(seqs, create_time), arr1)) AS common, id\nFROM tags\nWHERE id LIKE 'id%'\nGROUP BY id\nORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/01323_add_scalars_in_time.sql","errors":[]},{"query":"with (select groupArray(id) from bbb) as ids select *\nfrom aaa\nwhere has(ids, id)\norder by id;","fileName":"../ClickHouse/tests/queries/0_stateless/01323_add_scalars_in_time.sql","errors":[]},{"query":"WITH CAST(NULL as Nullable(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32,iv)) FROM encryption_test LIMIT 1;","fileName":"../ClickHouse/tests/queries/0_stateless/01318_encrypt.sql","errors":[]},{"query":"WITH CAST('text' as Nullable(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test LIMIT 1;","fileName":"../ClickHouse/tests/queries/0_stateless/01318_encrypt.sql","errors":[]},{"query":"WITH CAST('text' as LowCardinality(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test LIMIT 1;","fileName":"../ClickHouse/tests/queries/0_stateless/01318_encrypt.sql","errors":[]},{"query":"WITH unhex('eebc1f57487f51921c0465665f8ae6d1658bb26de6f8a069a3520293a572078f') as key,\nunhex('67ba0510262ae487d737ee6298f77e0c') as tag,\nunhex('99aa3e68ed8173a0eed06684') as iv,\nunhex('f56e87055bc32d0eeb31b2eacc2bf2a5') as plaintext,\nunhex('4d23c3cec334b49bdb370c437fec78de') as aad,\nunhex('f7264413a84c0e7cd536867eb9f21736') as ciphertext\nSELECT\nhex(encrypt('aes-256-gcm', plaintext, key, iv, aad)) as ciphertext_actual,\nciphertext_actual = concat(hex(ciphertext), hex(tag));","fileName":"../ClickHouse/tests/queries/0_stateless/01318_encrypt.sql","errors":[]},{"query":"WITH unhex('eebc1f57487f51921c0465665f8ae6d1658bb26de6f8a069a3520293a572078f') as key,\nunhex('67ba0510262ae487d737ee6298f77e0c') as tag,\nunhex('99aa3e68ed8173a0eed06684') as iv,\nunhex('f56e87055bc32d0eeb31b2eacc2bf2a5') as plaintext,\nunhex('4d23c3cec334b49bdb370c437fec78de') as aad,\nunhex('f7264413a84c0e7cd536867eb9f21736') as ciphertext\nSELECT\nhex(decrypt('aes-256-gcm', concat(ciphertext, tag), key, iv, aad)) as plaintext_actual,\nplaintext_actual = hex(plaintext);","fileName":"../ClickHouse/tests/queries/0_stateless/01318_decrypt.sql","errors":[]},{"query":"WITH \ttoDateTime64('2019-09-16 19:20:12.345678910', 3) AS dt64\nSELECT\n\tdt64,\n\tfromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64)),\n\tfromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64)),\n\tfromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64));","fileName":"../ClickHouse/tests/queries/0_stateless/01277_unixTimestamp64_compatibility.sql","errors":[]},{"query":"WITH \ttoDateTime64('2019-09-16 19:20:12.345678910', 6) AS dt64\nSELECT\n\tdt64,\n\tfromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64)),\n\tfromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64)),\n\tfromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64));","fileName":"../ClickHouse/tests/queries/0_stateless/01277_unixTimestamp64_compatibility.sql","errors":[]},{"query":"WITH \ttoDateTime64('2019-09-16 19:20:12.345678910', 9) AS dt64\nSELECT\n\tdt64,\n\tfromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64)),\n\tfromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64)),\n\tfromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64));","fileName":"../ClickHouse/tests/queries/0_stateless/01277_unixTimestamp64_compatibility.sql","errors":[]},{"query":"WITH \t'UTC' as timezone,\n\ttoDateTime64('2019-09-16 19:20:12.345678910', 3, timezone) AS dt64\nSELECT\n\tdt64,\n\tfromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64), timezone),\n\tfromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64), timezone),\n\tfromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64), timezone) AS v,\n\ttoTypeName(v);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_unixTimestamp64_compatibility.sql","errors":[]},{"query":"WITH \t'Asia/Makassar' as timezone,\n\ttoDateTime64('2019-09-16 19:20:12.345678910', 3, timezone) AS dt64\nSELECT\n\tdt64,\n\tfromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64), timezone),\n\tfromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64), timezone),\n\tfromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64), timezone) AS v,\n\ttoTypeName(v);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_unixTimestamp64_compatibility.sql","errors":[]},{"query":"WITH \tCAST(1234567891011 AS Int64) AS val\nSELECT\n\tval,\n\ttoUnixTimestamp64Milli(fromUnixTimestamp64Milli(val)),\n\ttoUnixTimestamp64Micro(fromUnixTimestamp64Micro(val)),\n\ttoUnixTimestamp64Nano(fromUnixTimestamp64Nano(val));","fileName":"../ClickHouse/tests/queries/0_stateless/01277_unixTimestamp64_compatibility.sql","errors":[]},{"query":"WITH \t'UTC' as timezone,\n\tCAST(1234567891011 AS Int64) AS val\nSELECT\n\tval,\n\ttoUnixTimestamp64Milli(fromUnixTimestamp64Milli(val, timezone)),\n\ttoUnixTimestamp64Micro(fromUnixTimestamp64Micro(val, timezone)),\n\ttoUnixTimestamp64Nano(fromUnixTimestamp64Nano(val, timezone)) AS v,\n\ttoTypeName(v);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_unixTimestamp64_compatibility.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:12.345678910', 3, 'Asia/Istanbul') AS dt64 SELECT dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_toUnixTimestamp64.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:12.345678910', 6, 'Asia/Istanbul') AS dt64 SELECT dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_toUnixTimestamp64.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:12.345678910', 9, 'Asia/Istanbul') AS dt64 SELECT dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_toUnixTimestamp64.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:12.345678910', 3, 'Asia/Istanbul') AS x SELECT materialize(x) as dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_toUnixTimestamp64.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:12.345678910', 6, 'Asia/Istanbul') AS x SELECT materialize(x) as dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_toUnixTimestamp64.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:12.345678910', 9, 'Asia/Istanbul') AS x SELECT materialize(x) as dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_toUnixTimestamp64.sql","errors":[]},{"query":"WITH (\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,\n101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,\n301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400,\n401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500,\n501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600,\n601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700,\n701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800,\n801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900,\n901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000\n) AS tuple\nSELECT\ntuple.1,\ntuple.300,\ntuple.500,\ntuple.700,\ntuple.1000;","fileName":"../ClickHouse/tests/queries/0_stateless/01277_large_tuples.sql","errors":[]},{"query":"WITH \tCAST(1234567891011 AS Int64) AS i64,\n\t'UTC' AS tz\nSELECT\n\ttz,\n\ti64,\n\tfromUnixTimestamp64Milli(i64, tz),\n\tfromUnixTimestamp64Micro(i64, tz),\n\tfromUnixTimestamp64Nano(i64, tz) as dt64,\n\ttoTypeName(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql","errors":[]},{"query":"WITH \tCAST(1234567891011 AS Int64) AS i64,\n\t'Asia/Makassar' AS tz\nSELECT\n\ttz,\n\ti64,\n\tfromUnixTimestamp64Milli(i64, tz),\n\tfromUnixTimestamp64Micro(i64, tz),\n\tfromUnixTimestamp64Nano(i64, tz) as dt64,\n\ttoTypeName(dt64);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql","errors":[]},{"query":"WITH \tCAST(1234567891011 AS Int64) AS i64,\n\t'UTC' AS tz\nSELECT\n\ti64,\n\tfromUnixTimestamp64Milli(i64, tz),\n\tfromUnixTimestamp64Micro(i64, tz),\n\tfromUnixTimestamp64Nano(i64, tz) as dt64;","fileName":"../ClickHouse/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql","errors":[]},{"query":"WITH 10413688942 AS timestamp,\nCAST(10413688942123 AS Int64) AS milli,\nCAST(10413688942123456 AS Int64) AS micro,\nCAST(10413688942123456789 AS Int64) AS nano,\n'UTC' AS tz\nSELECT\ntimestamp,\nfromUnixTimestamp64Milli(milli, tz),\nfromUnixTimestamp64Micro(micro, tz),\nfromUnixTimestamp64Nano(nano, tz);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql","errors":[]},{"query":"WITH -2208985199 AS timestamp,\nCAST(-2208985199123 AS Int64) AS milli,\nCAST(-2208985199123456 AS Int64) AS micro,\nCAST(-2208985199123456789 AS Int64) AS nano,\n'UTC' AS tz\nSELECT\ntimestamp,\nfromUnixTimestamp64Milli(milli, tz),\nfromUnixTimestamp64Micro(micro, tz),\nfromUnixTimestamp64Nano(nano, tz);","fileName":"../ClickHouse/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:11', 0, 'UTC') AS dt64 SELECT toStartOfSecond(dt64) AS res, toTypeName(res);","fileName":"../ClickHouse/tests/queries/0_stateless/01269_toStartOfSecond.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:11.123', 3, 'UTC') AS dt64 SELECT toStartOfSecond(dt64) AS res, toTypeName(res);","fileName":"../ClickHouse/tests/queries/0_stateless/01269_toStartOfSecond.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:11.123', 9, 'UTC') AS dt64 SELECT toStartOfSecond(dt64) AS res, toTypeName(res);","fileName":"../ClickHouse/tests/queries/0_stateless/01269_toStartOfSecond.sql","errors":[]},{"query":"WITH toDateTime64('2019-09-16 19:20:11.123', 3, 'UTC') AS dt64 SELECT toStartOfSecond(materialize(dt64)) AS res, toTypeName(res);","fileName":"../ClickHouse/tests/queries/0_stateless/01269_toStartOfSecond.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT DT64 = materialize(S); -- {serverError ILLEGAL_TYPE_OF_ARGUMENT} WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT materialize(S) = toDateTime64(S, 3); -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 = materialize(S); -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE materialize(S) = DT64; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT * WHERE toDateTime64(123.345, 3) == 'ABCD'; -- {serverError CANNOT_PARSE_DATETIME} -- invalid DateTime64 string\nSELECT * WHERE toDateTime64(123.345, 3) == '2020-02-05 14:34:12.33333333333333333333333333333333333333333333333333333333';","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT DT64 = S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT S = DT64;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT materialize(DT64) = S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT S = materialize(DT64);","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 = S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S = DT64;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE materialize(DT64) = S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S = materialize(DT64);","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 <= S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 >= S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S <= DT64;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S >= DT64;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 < S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 > S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 != S;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S < DT64;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S > DT64;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S != DT64;","fileName":"../ClickHouse/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql","errors":[]},{"query":"WITH 'abb' AS b, 'abc' AS c, 'abd' AS d, toFixedString(b, 5) AS bf, toFixedString(c, 5) AS cf, toFixedString(d, 5) AS df SELECT\nb = b, b > b, b < b,\nb = c, b > c, b < c,\nb = d, b > d, b < d,\nb = bf, b > bf, b < bf,\nb = cf, b > cf, b < cf,\nb = df, b > df, b < df,\nc = b, c > b, c < b,\nc = c, c > c, c < c,\nc = d, c > d, c < d,\nc = bf, c > bf, c < bf,\nc = cf, c > cf, c < cf,\nc = df, c > df, c < df,\nd = b, d > b, d < b,\nd = c, d > c, d < c,\nd = d, d > d, d < d,\nd = bf, d > bf, d < bf,\nd = cf, d > cf, d < cf,\nd = df, d > df, d < df,\nbf = b, bf > b, bf < b,\nbf = c, bf > c, bf < c,\nbf = d, bf > d, bf < d,\nbf = bf, bf > bf, bf < bf,\nbf = cf, bf > cf, bf < cf,\nbf = df, bf > df, bf < df,\ncf = b, cf > b, cf < b,\ncf = c, cf > c, cf < c,\ncf = d, cf > d, cf < d,\ncf = bf, cf > bf, cf < bf,\ncf = cf, cf > cf, cf < cf,\ncf = df, cf > df, cf < df,\ndf = b, df > b, df < b,\ndf = c, df > c, df < c,\ndf = d, df > d, df < d,\ndf = bf, df > bf, df < bf,\ndf = cf, df > cf, df < cf,\ndf = df, df > df, df < df\nFORMAT Vertical;","fileName":"../ClickHouse/tests/queries/0_stateless/01250_fixed_string_comparison.sql","errors":[]},{"query":"WITH A as (SELECT rowNumberInAllBlocks() R, addDays(toDate('2017-04-01'), R) TVV from numbers(5)),\nB as (SELECT rowNumberInAllBlocks() R, toDateTime(NULL) TVV from numbers(1))\nSELECT\njoinGetOrNull('test', 'y', toDate(A.TVV) ) TV1\nfrom A LEFT JOIN B USING (R) order by TV1;","fileName":"../ClickHouse/tests/queries/0_stateless/01240_join_get_or_null.sql","errors":[]},{"query":"with [ 'Seconds',\n'Bool',\n'Int64',\n'String',\n'Char',\n'LogsLevel',\n'URI',\n'Float',\n'UInt64',\n'MaxThreads',\n'Milliseconds',\n'JoinStrictness',\n'JoinAlgorithm',\n'OverflowMode',\n'TotalsMode',\n'LoadBalancing',\n'OverflowModeGroupBy',\n'DateTimeInputFormat',\n'DistributedProductMode'\n] as types select hasAll(arrayDistinct(groupArray(type)), types) from system.settings;","fileName":"../ClickHouse/tests/queries/0_stateless/01221_system_settings.sql","errors":[]},{"query":"with [ 'Seconds',\n'Bool',\n'Int64',\n'String',\n'Float',\n'UInt64',\n'MaxThreads'\n] as types select hasAll(arrayDistinct(groupArray(type)), types) from system.merge_tree_settings;","fileName":"../ClickHouse/tests/queries/0_stateless/01221_system_settings.sql","errors":[]},{"query":"WITH [(39.82535, 21.26649), (39.63179, 21.4366), (39.94803, 21.56766)] AS outer,\n[(39.84994, 21.44025), (39.82728, 21.4666), (39.82667, 21.46592)] AS inner,\n(39.840202, 21.451471) AS point\nSELECT\npointInPolygon(point, inner) AS inside_inner,\npointInPolygon(point, outer, inner) AS inside_outer;","fileName":"../ClickHouse/tests/queries/0_stateless/01214_point_in_Mecca.sql","errors":[]},{"query":"WITH toDateTime('2020-06-16 03:00:00') AS date_time SELECT date_time ORDER BY date_time ASC\nWITH FILL\nFROM toDateTime('2020-06-16 00:00:00')\nTO toDateTime('2020-06-16 10:00:00')\nSTEP 1800;","fileName":"../ClickHouse/tests/queries/0_stateless/01145_with_fill_const.sql","errors":[{"message":"mismatched input 'WITH' expecting <EOF>","startColumn":0,"startLine":2,"endColumn":4,"endLine":2}]},{"query":"with 3 as \"1\" select 1, \"1\"; -- { serverError AMBIGUOUS_COLUMN_NAME } select 1, * from (select 2 x) a left join (select 1, 3 y) b on y = x;","fileName":"../ClickHouse/tests/queries/0_stateless/01101_literal_column_clash.sql","errors":[]},{"query":"WITH arrayMap(x -> x + 1, range(50)) as data\nSELECT\narrayReduceInRanges('groupArray', [(a, c), (b, d)], data) =\n[arraySlice(data, a, c), arraySlice(data, b, d)]\nFROM (\nSELECT\ncityHash64(number + 100) % 40 as a,\ncityHash64(number + 200) % 60 as b,\ncityHash64(number + 300) % 20 as c,\ncityHash64(number + 400) % 30 as d\nFROM numbers(20)\n);","fileName":"../ClickHouse/tests/queries/0_stateless/01096_array_reduce_in_ranges.sql","errors":[]},{"query":"WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'Memory' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);","fileName":"../ClickHouse/tests/queries/0_stateless/01092_memory_profiler.sql","errors":[{"message":"no viable alternative at input 'WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'Memory' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query'","startColumn":281,"startLine":1,"endColumn":286,"endLine":1}]},{"query":"WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemoryPeak' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);","fileName":"../ClickHouse/tests/queries/0_stateless/01092_memory_profiler.sql","errors":[{"message":"no viable alternative at input 'WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemoryPeak' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query'","startColumn":285,"startLine":1,"endColumn":290,"endLine":1}]},{"query":"WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemorySample' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);","fileName":"../ClickHouse/tests/queries/0_stateless/01092_memory_profiler.sql","errors":[{"message":"no viable alternative at input 'WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemorySample' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query'","startColumn":287,"startLine":1,"endColumn":292,"endLine":1}]},{"query":"WITH 01091 AS id SELECT 1;","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","errors":[]},{"query":"WITH (\nSELECT query_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (normalizeQuery(query) like normalizeQuery('WITH 01091 AS id SELECT 1;')) AND (event_date >= (today() - 1))\nORDER BY event_time DESC\nLIMIT 1\n) AS id\nSELECT uniqExact(thread_id)\nFROM system.query_thread_log\nWHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","errors":[{"message":"no viable alternative at input 'WITH (\\nSELECT query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND (normalizeQuery(query'","startColumn":63,"startLine":4,"endColumn":68,"endLine":4}]},{"query":"with 01091 as id select sum(number) from numbers(1000000);","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","errors":[]},{"query":"WITH (\nSELECT query_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (normalizeQuery(query) = normalizeQuery('with 01091 as id select sum(number) from numbers(1000000);')) AND (event_date >= (today() - 1))\nORDER BY event_time DESC\nLIMIT 1\n) AS id\nSELECT uniqExact(thread_id) > 2\nFROM system.query_thread_log\nWHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","errors":[{"message":"no viable alternative at input 'WITH (\\nSELECT query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND (normalizeQuery(query'","startColumn":63,"startLine":4,"endColumn":68,"endLine":4}]},{"query":"with 01091 as id select sum(number) from numbers_mt(1000000);","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","errors":[]},{"query":"WITH (\nSELECT query_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (normalizeQuery(query) = normalizeQuery('with 01091 as id select sum(number) from numbers_mt(1000000);')) AND (event_date >= (today() - 1))\nORDER BY event_time DESC\nLIMIT 1\n) AS id\nSELECT uniqExact(thread_id) > 2\nFROM system.query_thread_log\nWHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","errors":[{"message":"no viable alternative at input 'WITH (\\nSELECT query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND (normalizeQuery(query'","startColumn":63,"startLine":4,"endColumn":68,"endLine":4}]},{"query":"WITH '{\"a\": \"hello\", \"b\": 12345678901234567890}' AS json SELECT JSONExtractRaw(json, 'a');","fileName":"../ClickHouse/tests/queries/0_stateless/01085_simdjson_uint64.sql","errors":[]},{"query":"WITH number - 90 AS lat SELECT DISTINCT greatCircleAngle(0, 0, 0, lat) = abs(lat) FROM numbers(180);","fileName":"../ClickHouse/tests/queries/0_stateless/01044_great_circle_angle.sql","errors":[]},{"query":"WITH number - 180 AS lon SELECT lon, round(greatCircleAngle(0, 0, lon, 0) - abs(lon) AS err, 2) FROM numbers(360) WHERE abs(err) > 0.01;","fileName":"../ClickHouse/tests/queries/0_stateless/01044_great_circle_angle.sql","errors":[]},{"query":"WITH '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' AS x,\nreplaceRegexpAll(x, '.', ' ') AS spaces,\nconcat(substring(spaces, 1, rand(1) % 62), substring(x, 1, rand(2) % 62), substring(spaces, 1, rand(3) % 62)) AS s,\ntrimLeft(s) AS sl,\ntrimRight(s) AS sr,\ntrimBoth(s) AS t,\nreplaceRegexpOne(s, '^ +', '') AS slr,\nreplaceRegexpOne(s, ' +\\$', '') AS srr,\nreplaceRegexpOne(s, '^ *(.*?) *\\$', '\\\\\\\\1') AS tr\nSELECT\nreplaceAll(s, ' ', '_'),\nreplaceAll(sl, ' ', '_'),\nreplaceAll(slr, ' ', '_'),\nreplaceAll(sr, ' ', '_'),\nreplaceAll(srr, ' ', '_'),\nreplaceAll(t, ' ', '_'),\nreplaceAll(tr, ' ', '_')\nFROM numbers(100000)\nWHERE NOT ((sl = slr) AND (sr = srr) AND (t = tr))\n","fileName":"../ClickHouse/tests/queries/0_stateless/00997_trim.sql","errors":[]},{"query":"WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%test real time query profiler%' AND query NOT LIKE '%system%' ORDER BY event_time DESC LIMIT 1) AND symbol LIKE '%FunctionSleep%';","fileName":"../ClickHouse/tests/queries/0_stateless/00974_query_profiler.sql","errors":[{"message":"no viable alternative at input 'WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query'","startColumn":243,"startLine":1,"endColumn":248,"endLine":1}]},{"query":"WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%test cpu time query profiler%' AND query NOT LIKE '%system%' ORDER BY event_time DESC LIMIT 1) AND symbol LIKE '%Source%';","fileName":"../ClickHouse/tests/queries/0_stateless/00974_query_profiler.sql","errors":[{"message":"no viable alternative at input 'WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query'","startColumn":243,"startLine":1,"endColumn":248,"endLine":1}]},{"query":"WITH (SELECT stochasticLinearRegressionState(1, 2, 3)) AS model SELECT evalMLMethod(model, toFloat64(1), toFloat64(1));","fileName":"../ClickHouse/tests/queries/0_stateless/00960_eval_ml_method_const.sql","errors":[]},{"query":"with (select state from model) as model select round(evalMLMethod(model, predict1, predict2, predict3, predict4, predict5, predict6, predict7), 12) from defaults;","fileName":"../ClickHouse/tests/queries/0_stateless/00946_ml_test.sql","errors":[]},{"query":"WITH (1, 2) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE i32 IN liter_prepared_set SETTINGS max_rows_to_read = 6;","fileName":"../ClickHouse/tests/queries/0_stateless/00945_bloom_filter_index.sql","errors":[]},{"query":"WITH ((1, 2), (2, 3)) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) IN liter_prepared_set SETTINGS max_rows_to_read = 6;","fileName":"../ClickHouse/tests/queries/0_stateless/00945_bloom_filter_index.sql","errors":[]},{"query":"WITH ((1, 1), (2, 2)) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) IN liter_prepared_set SETTINGS max_rows_to_read = 6;","fileName":"../ClickHouse/tests/queries/0_stateless/00945_bloom_filter_index.sql","errors":[]},{"query":"WITH ((1, (1, 1)), (2, (2, 2))) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE (i64, (i64, i32)) IN liter_prepared_set SETTINGS max_rows_to_read = 6;","fileName":"../ClickHouse/tests/queries/0_stateless/00945_bloom_filter_index.sql","errors":[]},{"query":"WITH toDate('2018-12-25') + number AS d,\ntoDate32(d) AS d32,\ntoDateTime(d) AS dt,\ntoDateTime64(d, 0) AS dt64\nSELECT\ndt64,\ntoStartOfWeek(d) AS wd_sun,\ntoStartOfWeek(d32) AS wd32_sun,\ntoStartOfWeek(dt) AS wdt_sun,\ntoStartOfWeek(dt64) AS wdt64_sun,\ntoStartOfWeek(d, 1) AS wd_mon,\ntoStartOfWeek(d32, 1) AS wd32_mon,\ntoStartOfWeek(dt, 1) AS wdt_mon,\ntoStartOfWeek(dt64, 1) AS wdt64_mon\nFROM numbers(10);","fileName":"../ClickHouse/tests/queries/0_stateless/00941_to_custom_week.sql","errors":[]},{"query":"WITH toDate('2018-12-25') + number AS d,\ntoDate32(d) AS d32,\ntoDateTime(d) AS dt,\ntoDateTime64(d, 0) AS dt64\nSELECT\ndt64,\ntoLastDayOfWeek(d) AS wd_sun,\ntoLastDayOfWeek(d32) AS wd32_sun,\ntoLastDayOfWeek(dt) AS wdt_sun,\ntoLastDayOfWeek(dt64) AS wdt64_sun,\ntoLastDayOfWeek(d, 1) AS wd_mon,\ntoLastDayOfWeek(d32, 1) AS wd32_mon,\ntoLastDayOfWeek(dt, 1) AS wdt_mon,\ntoLastDayOfWeek(dt64, 1) AS wdt64_mon\nFROM numbers(10);","fileName":"../ClickHouse/tests/queries/0_stateless/00941_to_custom_week.sql","errors":[]},{"query":"WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00938_ipv6_cidr_range.sql","errors":[]},{"query":"WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 25) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00938_ipv6_cidr_range.sql","errors":[]},{"query":"WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 26) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00938_ipv6_cidr_range.sql","errors":[]},{"query":"WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 64) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00938_ipv6_cidr_range.sql","errors":[]},{"query":"WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 0) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00938_ipv6_cidr_range.sql","errors":[]},{"query":"WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 8) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00937_ipv4_cidr_range.sql","errors":[]},{"query":"WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 13) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00937_ipv4_cidr_range.sql","errors":[]},{"query":"WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 16) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00937_ipv4_cidr_range.sql","errors":[]},{"query":"WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 0) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00937_ipv4_cidr_range.sql","errors":[]},{"query":"WITH IPv4CIDRToRange(ip, cidr) as ip_range SELECT ip, cidr, IPv4NumToString(tupleElement(ip_range, 1)), ip_range FROM ipv4_range;","fileName":"../ClickHouse/tests/queries/0_stateless/00937_ipv4_cidr_range.sql","errors":[]},{"query":"WITH 'Europe/Minsk' as timezone SELECT timezone, timeZoneOf(now64(3, timezone)) == timezone;","fileName":"../ClickHouse/tests/queries/0_stateless/00921_datetime64_basic.sql","errors":[]},{"query":"WITH arrayJoin(finalizeAggregation((SELECT histogramState(3)(number) FROM numbers(10, 190)) + (SELECT histogramState(3)(number) FROM numbers(0, 100)))) AS hist SELECT round(hist.1) AS l, round(hist.2) AS r, round(hist.3) AS cnt;","fileName":"../ClickHouse/tests/queries/0_stateless/00919_histogram_merge.sql","errors":[]},{"query":"WITH arrayJoin(finalizeAggregation((SELECT histogramState(3)(number) FROM numbers(0, 100)) + (SELECT histogramState(3)(number) FROM numbers(10, 190)))) AS hist SELECT round(hist.1) AS l, round(hist.2) AS r, round(hist.3) AS cnt;","fileName":"../ClickHouse/tests/queries/0_stateless/00919_histogram_merge.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' AS a, prefix || 'y' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'y' AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'y' || prefix AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'y' || prefix AS a, prefix || 'x' || prefix AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'x' || prefix AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'y' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'y' || prefix AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH arrayJoin(['aaa', 'bbb']) AS a, 'aaa\\\\0bbb' AS b SELECT a = b, a < b, a > b, a <= b, a >= b;","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH arrayJoin(['aaa', 'zzz']) AS a, 'aaa\\\\0bbb' AS b SELECT a = b, a < b, a > b, a <= b, a >= b;","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH arrayJoin(['aaa', 'bbb']) AS a, materialize('aaa\\\\0bbb') AS b SELECT a = b, a < b, a > b, a <= b, a >= b;","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"WITH arrayJoin(['aaa', 'zzz']) AS a, materialize('aaa\\\\0bbb') AS b SELECT a = b, a < b, a > b, a <= b, a >= b;","fileName":"../ClickHouse/tests/queries/0_stateless/00912_string_comparison.sql","errors":[]},{"query":"with (select sumState(1)) as s select sumMerge(s);","fileName":"../ClickHouse/tests/queries/0_stateless/00905_field_with_aggregate_function_state.sql","errors":[]},{"query":"with (select sumState(number) from (select * from system.numbers limit 10)) as s select sumMerge(s);","fileName":"../ClickHouse/tests/queries/0_stateless/00905_field_with_aggregate_function_state.sql","errors":[]},{"query":"with (select quantileState(0.5)(number) from (select * from system.numbers limit 10)) as s select quantileMerge(s);","fileName":"../ClickHouse/tests/queries/0_stateless/00905_field_with_aggregate_function_state.sql","errors":[]},{"query":"WITH number AS k SELECT k FROM system.numbers LIMIT 10;","fileName":"../ClickHouse/tests/queries/0_stateless/00817_with_simple.sql","errors":[]},{"query":"WITH (\nSELECT arrayCumSum(groupArray(amount))\nFROM\n(\nSELECT\namount\nFROM bm\nORDER BY business_dttm\n)\n) AS arr,\n1 + rowNumberInAllBlocks() AS id,\n3 AS window_size\nSELECT\namount,\nbusiness_dttm,\nif(id < window_size, NULL, round(arr[id] - arr[id - window_size], 4)) AS moving_sum\nFROM\n(\nSELECT\namount,\nbusiness_dttm\nFROM bm\nORDER BY business_dttm\n) ORDER BY business_dttm;","fileName":"../ClickHouse/tests/queries/0_stateless/00799_function_dry_run.sql","errors":[]},{"query":"WITH dummy AS myName SELECT myName FROM system.one;","fileName":"../ClickHouse/tests/queries/0_stateless/00753_with_with_single_alias.sql","errors":[]},{"query":"WITH dummy AS myName SELECT myName + 1 FROM system.one;","fileName":"../ClickHouse/tests/queries/0_stateless/00753_with_with_single_alias.sql","errors":[]},{"query":"WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F %T') != toString(t);","fileName":"../ClickHouse/tests/queries/0_stateless/00719_format_datetime_rand.sql","errors":[]},{"query":"WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %H:%i:%S') != toString(t);","fileName":"../ClickHouse/tests/queries/0_stateless/00719_format_datetime_rand.sql","errors":[]},{"query":"WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %R:%S') != toString(t);","fileName":"../ClickHouse/tests/queries/0_stateless/00719_format_datetime_rand.sql","errors":[]},{"query":"WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F %R:%S') != toString(t);","fileName":"../ClickHouse/tests/queries/0_stateless/00719_format_datetime_rand.sql","errors":[]},{"query":"WITH toDate(today() + rand() % 4096) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F') != toString(t);","fileName":"../ClickHouse/tests/queries/0_stateless/00719_format_datetime_rand.sql","errors":[]},{"query":"WITH toDate(today() + rand() % 4096) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F %T', 'Asia/Istanbul') != toString(toDateTime(t, 'Asia/Istanbul'));","fileName":"../ClickHouse/tests/queries/0_stateless/00719_format_datetime_rand.sql","errors":[]},{"query":"WITH toDateTime(1000000000 + rand64() % 1000000000) AS time SELECT max(abs(toYear(time) - toISOYear(time))) <= 1 FROM numbers(10000);","fileName":"../ClickHouse/tests/queries/0_stateless/00706_iso_week_and_day_of_year.sql","errors":[]},{"query":"WITH toDateTime(1000000000 + rand64() % 1000000000) AS time SELECT DISTINCT toISOWeek(time) BETWEEN 1 AND 53 FROM numbers(1000000);","fileName":"../ClickHouse/tests/queries/0_stateless/00706_iso_week_and_day_of_year.sql","errors":[]},{"query":"WITH arrayJoin(['hello', 'world']) AS s SELECT count(), arraySort(groupUniqArray(s)), anyHeavy(s) FROM remote('127.0.0.{2,3}', system.one);","fileName":"../ClickHouse/tests/queries/0_stateless/00677_shard_any_heavy_merge.sql","errors":[]},{"query":"WITH arrayJoin(histogram(3)(sin(number))) AS res select round(res.1, 2), round(res.2, 2), round(res.3, 2) from (select * from system.numbers limit 10);","fileName":"../ClickHouse/tests/queries/0_stateless/00647_histogram.sql","errors":[]},{"query":"WITH arrayJoin(histogram(1)(sin(number-40))) AS res SELECT round(res.1, 2), round(res.2, 2), round(res.3, 2) from (select * from system.numbers limit 80);","fileName":"../ClickHouse/tests/queries/0_stateless/00647_histogram.sql","errors":[]},{"query":"WITH toDate('2000-01-01') + rand() % (30000) AS EventDate SELECT * FROM numbers(1000000) WHERE EventDate != toDate(concat(toString(toYear(EventDate)), '-', toString(toMonth(EventDate)), '-', toString(toDayOfMonth(EventDate))));","fileName":"../ClickHouse/tests/queries/0_stateless/00517_date_parsing.sql","errors":[]},{"query":"WITH toDateTime(1509138000) + number * 300 AS t SELECT toHour(t, 'Asia/Kolkata') AS h, toString(toStartOfHour(t, 'Asia/Kolkata'), 'Asia/Kolkata') AS h_start FROM system.numbers LIMIT 12;","fileName":"../ClickHouse/tests/queries/0_stateless/00513_fractional_time_zones.sql","errors":[]},{"query":"with pow(2,2) as four select pow(four, 2), 2 as two, pow(two, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00490_with_select.sql","errors":[]},{"query":"with (select pow(two,2)) as four select pow(four, 2), 2 as two, pow(two, 2);","fileName":"../ClickHouse/tests/queries/0_stateless/00490_with_select.sql","errors":[]},{"query":"with 'string' as str select str || '_abc';","fileName":"../ClickHouse/tests/queries/0_stateless/00490_with_select.sql","errors":[]},{"query":"with generateUUIDv4() as uuid, identity(lower(hex(reverse(reinterpretAsString(uuid))))) as str,\nreinterpretAsUUID(reverse(unhex(str))) as uuid2\nselect uuid = uuid2;","fileName":"../ClickHouse/tests/queries/0_stateless/00396_uuid.sql","errors":[]},{"query":"WITH round(exp(number), 6) AS x, x > 0xFFFFFFFFFFFFFFFF ? 0xFFFFFFFFFFFFFFFF : toUInt64(x) AS y, x > 0x7FFFFFFF ? 0x7FFFFFFF : toInt32(x) AS z SELECT FORMAT_BYTES(x), format_bytes(y), formatReadableSize(z)\nFROM system.numbers\nLIMIT 70;","fileName":"../ClickHouse/tests/queries/0_stateless/00232_format_readable_size.sql","errors":[]},{"query":"WITH round(exp(number), 6) AS x, x > 0xFFFFFFFFFFFFFFFF ? 0xFFFFFFFFFFFFFFFF : toUInt64(x) AS y, x > 0x7FFFFFFF ? 0x7FFFFFFF : toInt32(x) AS z SELECT formatReadableDecimalSize(x), formatReadableDecimalSize(y), formatReadableDecimalSize(z)\nFROM system.numbers\nLIMIT 70;","fileName":"../ClickHouse/tests/queries/0_stateless/00232_format_readable_decimal_size.sql","errors":[]},{"query":"WITH a AS (select (select 1 WHERE 0) as b) select 1\nfrom system.one\ncross join a\nwhere a.b = 0;","fileName":"../ClickHouse/tests/queries/0_stateless/00205_emptyscalar_subquery_type_mismatch_bug.sql","errors":[]},{"query":"WITH cte_0 AS (select\nsubq_0.c6 as c2,\ncase when 0<>0 then ((select c_zeij from t_q1ht4gq_5 order by c_zeij limit 1 offset 1)\n+ subq_0.c4) else ((select c_zeij from t_q1ht4gq_5 order by c_zeij limit 1 offset 1)\n+ subq_0.c4) end as c4\nfrom\n(select\nref_0.c_nkt as c4,\nref_0.c_nkt as c6\nfrom\nt_q1ht4gq_5 as ref_0\n) as subq_0\n)\nselect\nref_12.c_zeij as c3\nfrom\nt_q1ht4gq_5 as ref_12\nwhere (ref_12.c_jz not in (\nselect\nref_14.c_mc2 as c0\nfrom\nt_q1ht4gq_5 as ref_14\ncross join cte_0 as ref_15\nwhere ref_15.c4 > ref_15.c2));","fileName":"../ClickHouse/tests/queries/0_stateless/00205_emptyscalar_subquery_type_mismatch_bug.sql","errors":[]},{"query":"WITH (1, 2) AS a SELECT 1 IN a, 3 IN a;","fileName":"../ClickHouse/tests/queries/0_stateless/00172_constexprs_in_set.sql","errors":[]},{"query":"WITH 0.001 AS threshold SELECT\n'runtime messages',\ngreatest(coalesce(sum(length(message_format_string) = 0) / countOrNull(), 0) as v, threshold),\nv <= threshold ? [] :\n(SELECT groupArray((message, c)) FROM (\nSELECT message, count() as c FROM logs\nWHERE\nlength(message_format_string) = 0\nAND message not like '% Received from %clickhouse-staging.com:9440%'\nAND source_file not like '%/AWSLogger.cpp%'\nAND source_file not like '%/BaseDaemon.cpp%'\nAND logger_name not in ('RaftInstance')\nGROUP BY message ORDER BY c LIMIT 10\n))\nFROM logs\nWHERE\nmessage NOT LIKE '% Received from %clickhouse-staging.com:9440%'\nAND source_file not like '%/AWSLogger.cpp%';","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 0.05 AS threshold SELECT\n'runtime exceptions',\ngreatest(coalesce(sum(length(message_format_string) = 0) / countOrNull(), 0) as v, threshold),\nv <= threshold ? [] :\n(SELECT groupArray((message, c)) FROM (\nSELECT message, count() as c FROM logs\nWHERE\nlength(message_format_string) = 0\nAND (message like '%DB::Exception%' or message like '%Coordination::Exception%')\nAND message not like '% Received from %clickhouse-staging.com:9440%'\nGROUP BY message ORDER BY c LIMIT 10\n))\nFROM logs\nWHERE\nmessage NOT LIKE '% Received from %clickhouse-staging.com:9440%'\nAND (message like '%DB::Exception%' or message like '%Coordination::Exception%');","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 0.01 AS threshold SELECT\n'unknown runtime exceptions',\ngreatest(coalesce(sum(length(message_format_string) = 0) / countOrNull(), 0) as v, threshold),\nv <= threshold ? [] :\n(SELECT groupArray((message, c)) FROM (\nSELECT message, count() as c FROM logs\nWHERE\nlength(message_format_string) = 0\nAND (message like '%DB::Exception%' or message like '%Coordination::Exception%')\nAND message not like '% Received from %' and message not like '%(SYNTAX_ERROR)%' and message not like '%Fault injection%'\nGROUP BY message ORDER BY c LIMIT 10\n))\nFROM logs\nWHERE\n(message like '%DB::Exception%' or message like '%Coordination::Exception%')\nAND message not like '% Received from %' and message not like '%(SYNTAX_ERROR)%' and message not like '%Fault injection%';","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 1 AS max_messages select 'messages shorter than 10',\n(uniqExact(message_format_string) as c) <= max_messages,\nc <= max_messages ? [] : groupUniqArray(message_format_string)\nfrom logs\nwhere length(message_format_string) < 10 and message_format_string not in known_short_messages;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 3 AS max_messages select 'messages shorter than 16',\n(uniqExact(message_format_string) as c) <= max_messages,\nc <= max_messages ? [] : groupUniqArray(message_format_string)\nfrom logs\nwhere length(message_format_string) < 16 and message_format_string not in known_short_messages;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 3 AS max_messages select 'exceptions shorter than 30',\n(uniqExact(message_format_string) as c) <= max_messages,\nc <= max_messages ? [] : groupUniqArray(message_format_string)\nfrom logs\nwhere message ilike '%DB::Exception%' and if(length(extract(toValidUTF8(message), '(.*)\\\\\\\\([A-Z0-9_]+\\\\\\\\)')) as pref > 0, pref, length(toValidUTF8(message))) < 30 + 26 and message_format_string not in known_short_messages;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 0.30 as threshold select\n'noisy messages',\ngreatest(coalesce(((select message_format_string, count() from logs group by message_format_string order by count() desc limit 1) as top_message).2, 0) / (select count() from logs), threshold) as r,\nr <= threshold ? '' : top_message.1;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"with 0.16 as threshold select\n'noisy Trace messages',\ngreatest(coalesce(((select message_format_string, count() from logs where level = 'Trace' and message_format_string not in ('Access granted: {}{}', '{} -> {}', 'Query to stage {}{}', 'Query from stage {} to stage {}{}')\ngroup by message_format_string order by count() desc limit 1) as top_message).2, 0) / (select count() from logs), threshold) as r,\nr <= threshold ? '' : top_message.1;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 0.09 as threshold select 'noisy Debug messages',\ngreatest(coalesce(((select message_format_string, count() from logs where level = 'Debug' group by message_format_string order by count() desc limit 1) as top_message).2, 0) / (select count() from logs), threshold) as r,\nr <= threshold ? '' : top_message.1;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 0.05 as threshold select 'noisy Info messages',\ngreatest(coalesce(((select message_format_string, count() from logs\nwhere level = 'Information'\nand message_format_string not in ('Sorting and writing part of data into temporary file {}', 'Done writing part of data into temporary file {}, compressed {}, uncompressed {}')\ngroup by message_format_string order by count() desc limit 1) as top_message).2, 0) / (select count() from logs), threshold) as r,\nr <= threshold ? '' : top_message.1;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"with 0.01 as threshold select\n'noisy Warning messages',\ngreatest(coalesce(((select message_format_string, count() from logs where level = 'Warning' and message_format_string not in ('Not enabled four letter command {}')\ngroup by message_format_string order by count() desc limit 1) as top_message).2, 0) / (select count() from logs), threshold) as r,\nr <= threshold ? '' : top_message.1;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]},{"query":"WITH 0.03 as threshold select 'noisy Error messages',\ngreatest(coalesce(((select message_format_string, count() from logs where level = 'Error' group by message_format_string order by count() desc limit 1) as top_message).2, 0) / (select count() from logs), threshold) as r,\nr <= threshold ? '' : top_message.1;","fileName":"../ClickHouse/tests/queries/0_stateless/00002_log_and_exception_messages_formatting.sql","errors":[]}]}