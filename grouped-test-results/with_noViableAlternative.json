[{"query":"WITH (SELECT groupConcat(',')(st) FROM t) AS a, (SELECT groupConcat(',')(st :: String) FROM t) AS b\nSELECT equals(a, b);","fileName":"../ClickHouse/tests/queries/0_stateless/03235_groupArray_string_consistency.sql","error":"no viable alternative at input 'WITH (SELECT groupConcat(',')(st) FROM t) AS a, (SELECT groupConcat(',')(st :'"},{"query":"WITH (num > 1) AND (arraySum(arrayMap(y -> ((y > 1) AND (y < num) AND ((num % y) = 0)), range(toUInt64(sqrt(num)) + 1))) = 0) AS is_prime_slow\nSELECT\nnum,\nds,\nFROM\n(\nWITH\narraySum(arrayMap(y -> toUInt8(y), splitByString('', toString(num)))) AS digits_sum\nSELECT\n1 + (number * 2) AS num,\ndigits_sum AS ds\nFROM numbers_mt(10000)\nWHERE ds IN (\nWITH\n(number > 1) AND (arraySum(arrayMap(y -> ((y > 1) AND (y < number) AND ((number % y) = 0)), range(toUInt64(sqrt(number)) + 1))) = 0) AS is_prime_slow\nSELECT number\nFROM numbers(180 + 1)\nWHERE is_prime_slow\n)\n)\nWHERE is_prime_slow\nORDER BY num ASC\nLIMIT 998, 1\nSETTINGS max_block_size = 64, max_threads=16;","fileName":"../ClickHouse/tests/queries/0_stateless/03203_system_numbers_limit_and_offset_complex.sql","error":"no viable alternative at input 'WITH (num > 1) AND (arraySum(arrayMap(y -> ((y > 1) AND (y < num) AND ((num % y) = 0)), range(toUInt64(sqrt(num)) + 1))) = 0) AS is_prime_slow\\nSELECT\\nnum,\\nds,\\nFROM\\n(\\nWITH\\narraySum('"},{"query":"WITH 4096 AS w, 4096 AS h, w * h AS pixels,\narrayJoin(coverage) AS num,\nnum DIV (32768 * 32768 DIV pixels) AS idx,\nmortonDecode(2, idx) AS coord,\n255 AS b,\nleast(255, uniq(test_name)) AS r,\n255 * uniq(test_name) / (max(uniq(test_name)) OVER ()) AS g\nSELECT r::UInt8, g::UInt8, b::UInt8\nFROM test\nGROUP BY coord\nORDER BY coord.2 * w + coord.1\nWITH FILL FROM 0 TO 10;","fileName":"../ClickHouse/tests/queries/0_stateless/03199_queries_with_new_analyzer.sql","error":"no viable alternative at input 'WITH 4096 AS w, 4096 AS h, w * h AS pixels,\\narrayJoin(coverage) AS num,\\nnum DIV ('"},{"query":"WITH (Select min(number), max(number) from seq) as range Select * from numbers(range.1, range.2);","fileName":"../ClickHouse/tests/queries/0_stateless/03199_queries_with_new_analyzer.sql","error":"no viable alternative at input 'WITH (Select min(number), max(number) from seq) as range Select * from numbers(range.1'"},{"query":"WITH 'OK' AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","error":"no viable alternative at input 'WITH 'OK' AS s SELECT * FROM param_test(test_str='"},{"query":"WITH (SELECT 123) AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","error":"no viable alternative at input 'WITH (SELECT 123) AS s SELECT * FROM param_test(test_str='"},{"query":"WITH (SELECT 100 + 20 + 3) AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","error":"no viable alternative at input 'WITH (SELECT 100 + 20 + 3) AS s SELECT * FROM param_test(test_str='"},{"query":"WITH (SELECT number FROM numbers(123, 1)) AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","error":"no viable alternative at input 'WITH (SELECT number FROM numbers(123, 1)) AS s SELECT * FROM param_test(test_str='"},{"query":"WITH CAST(123, 'String') AS s SELECT * FROM param_test(test_str=s);","fileName":"../ClickHouse/tests/queries/0_stateless/03167_parametrized_view_with_cte.sql","error":"no viable alternative at input 'WITH CAST(123, 'String') AS s SELECT * FROM param_test(test_str='"},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, parent_id, [parent_id] AS path, toUInt64(0) AS depth\nFROM test_table\nUNION ALL\nSELECT t.id, t.parent_id, arrayConcat(path, [t.id]) as path, depth + 1\nFROM test_table t, search_tree st\nWHERE t.parent_id = st.id)\nSELECT * FROM search_tree ORDER BY depth, id, parent_id;","fileName":"../ClickHouse/tests/queries/0_stateless/03154_recursive_cte_distributed.sql","error":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('"},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, parent_id, [parent_id] AS path, toUInt64(0) AS depth\nFROM remote('127.0.0.1', currentDatabase(), test_table)\nUNION ALL\nSELECT t.id, t.parent_id, arrayConcat(path, [t.id]) as path, depth + 1\nFROM remote('127.0.0.1', currentDatabase(), test_table) t, search_tree st\nWHERE t.parent_id = st.id)\nSELECT * FROM search_tree ORDER BY depth, id, parent_id;","fileName":"../ClickHouse/tests/queries/0_stateless/03154_recursive_cte_distributed.sql","error":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('"},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, parent_id, [parent_id] AS path, toUInt64(0) AS depth\nFROM remote('127.0.0.{1,2}', currentDatabase(), test_table)\nUNION ALL\nSELECT t.id, t.parent_id, arrayConcat(path, [t.id]) as path, depth + 1\nFROM remote('127.0.0.{1,2}', currentDatabase(), test_table) t, search_tree st\nWHERE t.parent_id = st.id)\nSELECT * FROM search_tree ORDER BY depth, id, parent_id;;","fileName":"../ClickHouse/tests/queries/0_stateless/03154_recursive_cte_distributed.sql","error":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('"},{"query":"WITH {test_a:UInt32} as column SELECT column as number FROM numbers(2) FORMAT TSVWithNames;","fileName":"../ClickHouse/tests/queries/0_stateless/03120_analyzer_param_in_CTE_alias.sql","error":"no viable alternative at input 'WITH {'"},{"query":"WITH {test_a:UInt32} as column SELECT {test_a:UInt32} as number FROM numbers(2) FORMAT TSVWithNames;","fileName":"../ClickHouse/tests/queries/0_stateless/03120_analyzer_param_in_CTE_alias.sql","error":"no viable alternative at input 'WITH {'"},{"query":"WITH {test_a:UInt32} as column SELECT column FROM numbers(2) FORMAT TSVWithNames;","fileName":"../ClickHouse/tests/queries/0_stateless/03120_analyzer_param_in_CTE_alias.sql","error":"no viable alternative at input 'WITH {'"},{"query":"WITH data AS (\nSELECT\nrand64() AS val1,\nrand64() AS val2,\nrand64() AS val3,\nrand64() AS val4,\nrand64() AS val5,\nrand64() AS val6,\nrand64() AS val7,\nrand64() AS val8,\nrand64() AS val9,\nrand64() AS val10,\nrand64() AS val11,\nrand64() AS val12,\nrand64() AS val13,\nrand64() AS val14\nFROM numbers(10)\n),\n(SELECT avg(val1) FROM data) AS value1,\n(SELECT avg(val2) FROM data) AS value2,\n(SELECT avg(val3) FROM data) AS value3,\n(SELECT avg(val4) FROM data) AS value4,\n(SELECT avg(val5) FROM data) AS value5,\n(SELECT avg(val6) FROM data) AS value6,\n(SELECT avg(val7) FROM data) AS value7,\n(SELECT avg(val8) FROM data) AS value8,\n(SELECT avg(val9) FROM data) AS value9,\n(SELECT avg(val10) FROM data) AS value10,\n(SELECT avg(val11) FROM data) AS value11,\n(SELECT avg(val12) FROM data) AS value12,\n(SELECT avg(val13) FROM data) AS value13,\n(SELECT avg(val14) FROM data) AS value14\nSELECT\nvalue1 AS v1,\nvalue2 AS v2,\nvalue3 AS v3,\nvalue4 AS v4,\nvalue5 AS v5,\nvalue6 AS v6,\nvalue7 AS v7,\nvalue8 AS v8,\nvalue9 AS v9,\nvalue10 AS v10,\nvalue11 AS v11,\nvalue12 AS v12,\nvalue13 AS v13,\nvalue14 AS v14\nFORMAT Null;","fileName":"../ClickHouse/tests/queries/0_stateless/03109_ast_too_big.sql","error":"no viable alternative at input 'WITH data AS (\\nSELECT\\nrand64() AS val1,\\nrand64() AS val2,\\nrand64() AS val3,\\nrand64() AS val4,\\nrand64() AS val5,\\nrand64() AS val6,\\nrand64() AS val7,\\nrand64() AS val8,\\nrand64() AS val9,\\nrand64() AS val10,\\nrand64() AS val11,\\nrand64() AS val12,\\nrand64() AS val13,\\nrand64() AS val14\\nFROM numbers(10)\\n),\\n('"},{"query":"with d as (select 'key'::Varchar(255) c, 'x'::Varchar(255) s) SELECT r1, c as r2\nFROM (\nSELECT t as s, c as r1\nFROM ( SELECT 'y'::Varchar(255) as t, 'x'::Varchar(255) as s) t1\nLEFT JOIN d USING (s)\n) t2\nLEFT JOIN d using (s)\nSETTINGS join_use_nulls=1;","fileName":"../ClickHouse/tests/queries/0_stateless/03067_analyzer_complex_alias_join.sql","error":"no viable alternative at input 'with d as (select 'key':'"},{"query":"WITH RECURSIVE foo AS (SELECT 1 AS i\nUNION ALL\n(SELECT i+1 FROM foo WHERE i < 10\nUNION ALL\nSELECT i+1 FROM foo WHERE i < 5)\n) SELECT * FROM foo;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","error":"no viable alternative at input 'WITH RECURSIVE foo AS ('"},{"query":"WITH RECURSIVE foo AS (SELECT 1 AS i\nUNION ALL\nSELECT * FROM\n(SELECT i+1 FROM foo WHERE i < 10\nUNION ALL\nSELECT i+1 FROM foo WHERE i < 5) AS t\n) SELECT * FROM foo;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","error":"no viable alternative at input 'WITH RECURSIVE foo AS ('"},{"query":"WITH RECURSIVE foo AS (SELECT 1 AS i\nUNION ALL\n(SELECT i+1 FROM foo WHERE i < 10\nEXCEPT\nSELECT i+1 FROM foo WHERE i < 5)\n) SELECT * FROM foo;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","error":"no viable alternative at input 'WITH RECURSIVE foo AS ('"},{"query":"WITH RECURSIVE foo AS (SELECT 1 AS i\nUNION ALL\n(SELECT i+1 FROM foo WHERE i < 10\nINTERSECT\nSELECT i+1 FROM foo WHERE i < 5)\n) SELECT * FROM foo;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","error":"no viable alternative at input 'WITH RECURSIVE foo AS ('"},{"query":"WITH RECURSIVE t AS ( WITH RECURSIVE s AS (\nSELECT toUInt64(1) AS i\nUNION ALL\nSELECT i+1 FROM s WHERE i < 10\n)\nSELECT i AS j FROM s\nUNION ALL\nSELECT j+1 FROM t WHERE j < 10\n)\nSELECT * FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE tab AS (SELECT * FROM values('id_key UInt64, link UInt64', (1,17), (2,17), (3,17), (4,17), (6,17), (5,17))),\niter AS (\nSELECT 0 AS id_key, 'base' AS row_type, 17 AS link\nUNION ALL (\nWITH remaining AS (\nSELECT tab.id_key AS id_key, 'true'::text AS row_type, iter.link AS link, MIN(tab.id_key) OVER () AS min\nFROM tab INNER JOIN iter USING (link)\nWHERE tab.id_key > iter.id_key\n),\nfirst_remaining AS (\nSELECT id_key, row_type, link\nFROM remaining\nWHERE id_key=min\n),\neffect AS (\nSELECT tab.id_key AS id_key, 'new'::text AS row_type, tab.link AS link\nFROM first_remaining e INNER JOIN tab ON e.id_key=tab.id_key\nWHERE e.row_type = 'false'\n)\nSELECT * FROM first_remaining\nUNION ALL SELECT * FROM effect\n)\n)\nSELECT * FROM iter;","fileName":"../ClickHouse/tests/queries/0_stateless/03041_recursive_cte_postgres_7.sql","error":"no viable alternative at input 'WITH RECURSIVE tab AS ('"},{"query":"WITH RECURSIVE x AS (SELECT 1 AS n INTERSECT SELECT n+1 FROM x) SELECT * FROM x; -- {serverError UNSUPPORTED_METHOD}\nWITH RECURSIVE x AS (SELECT 1 AS n INTERSECT ALL SELECT n+1 FROM x)\nSELECT * FROM x; -- {serverError UNSUPPORTED_METHOD}\nWITH RECURSIVE x AS (SELECT 1 AS n EXCEPT SELECT n+1 FROM x)\nSELECT * FROM x; -- {serverError UNSUPPORTED_METHOD}\nWITH RECURSIVE x AS (SELECT 1 AS n EXCEPT ALL SELECT n+1 FROM x)\nSELECT * FROM x; -- {serverError UNSUPPORTED_METHOD}\nWITH RECURSIVE x AS (SELECT n FROM x)\nSELECT * FROM x; -- {serverError UNKNOWN_TABLE}\nWITH RECURSIVE x AS (SELECT n FROM x UNION ALL SELECT 1 AS n)\nSELECT * FROM x; -- {serverError UNKNOWN_TABLE}\nDROP TABLE IF EXISTS y;","fileName":"../ClickHouse/tests/queries/0_stateless/03040_recursive_cte_postgres_6.sql","error":"no viable alternative at input 'WITH RECURSIVE x AS ('"},{"query":"WITH RECURSIVE y AS (SELECT 1 AS id),\nx AS (SELECT * FROM y UNION ALL SELECT id+1 FROM x WHERE id < 5)\nSELECT * FROM x ORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","error":"no viable alternative at input 'WITH RECURSIVE y AS ('"},{"query":"WITH RECURSIVE x AS (SELECT * FROM y UNION ALL SELECT id+1 FROM x WHERE id < 5),\ny AS (SELECT 1 AS id)\nSELECT * FROM x ORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","error":"no viable alternative at input 'WITH RECURSIVE x AS ('"},{"query":"WITH RECURSIVE x AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 5),\ny AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM y WHERE id < 10)\nSELECT y.*, x.* FROM y LEFT JOIN x USING (id) ORDER BY y.id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","error":"no viable alternative at input 'WITH RECURSIVE x AS\\n('"},{"query":"WITH RECURSIVE x AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 5),\ny AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 10)\nSELECT y.*, x.* FROM y LEFT JOIN x USING (id) ORDER BY y.id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","error":"no viable alternative at input 'WITH RECURSIVE x AS\\n('"},{"query":"WITH RECURSIVE x AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 3 ),\ny AS\n(SELECT * FROM x UNION ALL SELECT * FROM x),\nz AS\n(SELECT * FROM x UNION ALL SELECT id+1 FROM z WHERE id < 10)\nSELECT * FROM z ORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","error":"no viable alternative at input 'WITH RECURSIVE x AS\\n('"},{"query":"WITH RECURSIVE x AS\n(SELECT 1 AS id UNION ALL SELECT id+1 FROM x WHERE id < 3 ),\ny AS\n(SELECT * FROM x UNION ALL SELECT * FROM x),\nz AS\n(SELECT * FROM y UNION ALL SELECT id+1 FROM z WHERE id < 10)\nSELECT * FROM z ORDER BY id;","fileName":"../ClickHouse/tests/queries/0_stateless/03039_recursive_cte_postgres_5.sql","error":"no viable alternative at input 'WITH RECURSIVE x AS\\n('"},{"query":"WITH RECURSIVE search_graph AS ( \tSELECT *, false AS is_cycle, [tuple(g.f, g.t)] AS path FROM graph g\n\tUNION ALL\n\tSELECT g.*, has(path, tuple(g.f, g.t)), arrayConcat(sg.path, [tuple(g.f, g.t)])\n\tFROM graph g, search_graph sg\n\tWHERE g.f = sg.t AND NOT is_cycle\n)\nSELECT * FROM search_graph;","fileName":"../ClickHouse/tests/queries/0_stateless/03038_recursive_cte_postgres_4.sql","error":"no viable alternative at input 'WITH RECURSIVE search_graph AS ('"},{"query":"WITH RECURSIVE search_graph AS ( \tSELECT *, false AS is_cycle, [tuple(g.f, g.t)] AS path FROM graph g\n\tUNION ALL\n\tSELECT g.*, has(path, tuple(g.f, g.t)), arrayConcat(sg.path, [tuple(g.f, g.t)])\n\tFROM graph g, search_graph sg\n\tWHERE g.f = sg.t AND NOT is_cycle\n)\nSELECT * FROM search_graph ORDER BY path;","fileName":"../ClickHouse/tests/queries/0_stateless/03038_recursive_cte_postgres_4.sql","error":"no viable alternative at input 'WITH RECURSIVE search_graph AS ('"},{"query":"WITH subquery AS ( SELECT\ntoUInt64(time) AS time,\ntoHour(03038_table.time)\nFROM 03038_table\n)\nSELECT *\nFROM subquery\nORDER BY subquery.time ASC;","fileName":"../ClickHouse/tests/queries/0_stateless/03038_ambiguous_column.sql","error":"no viable alternative at input 'WITH subquery AS ( SELECT\\ntoUInt64(time) AS time,\\ntoHour(03038_table.time'"},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS id, []::Array(UInt64) AS path\nUNION ALL\nSELECT tree.id, arrayConcat(t.path, [tree.id])\nFROM tree JOIN t ON (tree.parent_id = t.id)\n)\nSELECT t1.*, t2.* FROM t AS t1 JOIN t AS t2 ON\n(t1.path[1] = t2.path[1] AND\nlength(t1.path) = 1 AND\nlength(t2.path) > 1)\nORDER BY t1.id, t2.id;","fileName":"../ClickHouse/tests/queries/0_stateless/03037_recursive_cte_postgres_3.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS id, []::Array(UInt64) AS path\nUNION ALL\nSELECT tree.id, arrayConcat(t.path, [tree.id])\nFROM tree JOIN t ON (tree.parent_id = t.id)\n)\nSELECT t1.id, count(t2.path) FROM t AS t1 JOIN t AS t2 ON\n(t1.path[1] = t2.path[1] AND\nlength(t1.path) = 1 AND\nlength(t2.path) > 1)\nGROUP BY t1.id\nORDER BY t1.id;","fileName":"../ClickHouse/tests/queries/0_stateless/03037_recursive_cte_postgres_3.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS id, []::Array(UInt64) AS path\nUNION ALL\nSELECT tree.id, arrayConcat(t.path, [tree.id])\nFROM tree JOIN t ON (tree.parent_id = t.id)\n)\nSELECT t1.id, t2.path, tuple(t2.*) FROM t AS t1 JOIN t AS t2 ON\n(t1.id=t2.id);","fileName":"../ClickHouse/tests/queries/0_stateless/03037_recursive_cte_postgres_3.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT name as root_name, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.root_name, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","error":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('"},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT 1 AS level, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","error":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('"},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT 1 AS level, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment WHERE level >= 2 ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","error":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('"},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT * FROM department WHERE name = 'A'\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","error":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('"},{"query":"WITH RECURSIVE q AS ( SELECT * FROM department\nUNION ALL\n(WITH x AS (SELECT * FROM q)\nSELECT * FROM x)\n)\nSELECT * FROM q LIMIT 24;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","error":"no viable alternative at input 'WITH RECURSIVE q AS ('"},{"query":"WITH RECURSIVE q AS ( SELECT * FROM department\nUNION ALL\n(WITH RECURSIVE x AS (\nSELECT * FROM department\nUNION ALL\n(SELECT * FROM q UNION ALL SELECT * FROM x)\n)\nSELECT * FROM x)\n)\nSELECT * FROM q LIMIT 32;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","error":"no viable alternative at input 'WITH RECURSIVE q AS ('"},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS i, 2 AS j\nUNION ALL\nSELECT t2.i, t.j+1 FROM\n(SELECT 2 AS i UNION ALL SELECT 3 AS i) AS t2\nJOIN t ON (t2.i = t.i+1))\nSELECT * FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS n\nUNION ALL\nSELECT n+1 FROM t WHERE n < 100\n)\nSELECT sum(n) FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS n\nUNION ALL\nSELECT n+1 FROM t WHERE n < 5\n)\nSELECT * FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE t AS ( SELECT 1 AS n\nUNION ALL\nSELECT n+1 FROM t)\nSELECT * FROM t LIMIT 10;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE t AS ( SELECT 'foo' AS n\nUNION ALL\nSELECT n || ' bar' FROM t WHERE length(n) < 20\n)\nSELECT n, toTypeName(n) FROM t;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE t AS ( SELECT '7' AS n\nUNION ALL\nSELECT n+1 FROM t WHERE n < 10\n)\nSELECT n, toTypeName(n) FROM t; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nWITH RECURSIVE w1 AS\n(WITH w2 AS\n(WITH w3 AS\n(WITH w4 AS\n(WITH w5 AS\n(WITH RECURSIVE w6 AS\n(WITH w7 AS\n(WITH w8 AS\n(SELECT 1)\nSELECT * FROM w8)\nSELECT * FROM w7)\nSELECT * FROM w6)\nSELECT * FROM w5)\nSELECT * FROM w4)\nSELECT * FROM w3)\nSELECT * FROM w2)\nSELECT * FROM w1;","fileName":"../ClickHouse/tests/queries/0_stateless/03035_recursive_cte_postgres_1.sql","error":"no viable alternative at input 'WITH RECURSIVE t AS ('"},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, link, data\nFROM tree t\nWHERE t.id = 0\nUNION ALL\nSELECT t.id, t.link, t.data\nFROM tree t, search_tree st\nWHERE t.link = st.id\n)\nSELECT * FROM search_tree;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","error":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('"},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, link, data, [t.id] AS path\nFROM tree t\nWHERE t.id = 0\nUNION ALL\nSELECT t.id, t.link, t.data, arrayConcat(path, [t.id])\nFROM tree t, search_tree st\nWHERE t.link = st.id\n)\nSELECT * FROM search_tree;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","error":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('"},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT name as root_name, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.root_name, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","error":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('"},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT 1 AS level, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","error":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('"},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT 1 AS level, * FROM department WHERE name = 'A'\nUNION ALL\nSELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\nWHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment WHERE level >= 2 ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","error":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('"},{"query":"WITH RECURSIVE subdepartment AS (\nSELECT * FROM department WHERE name = 'A'\n)\nSELECT * FROM subdepartment ORDER BY name;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql","error":"no viable alternative at input 'WITH RECURSIVE subdepartment AS ('"},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, link, data\nFROM tree t\nWHERE t.id = 0\nUNION ALL\nSELECT t.id, t.link, t.data\nFROM tree t, search_tree st\nWHERE t.link = st.id\n)\nSELECT * FROM search_tree;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree.sql","error":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('"},{"query":"WITH RECURSIVE search_tree AS ( SELECT id, link, data, [t.id] AS path\nFROM tree t\nWHERE t.id = 0\nUNION ALL\nSELECT t.id, t.link, t.data, arrayConcat(path, [t.id])\nFROM tree t, search_tree st\nWHERE t.link = st.id\n)\nSELECT * FROM search_tree;","fileName":"../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree.sql","error":"no viable alternative at input 'WITH RECURSIVE search_tree AS ('"},{"query":"WITH helper AS (\nSELECT\n*\nFROM\n03033_example_table\nORDER BY\nColumnA WITH FILL INTERPOLATE (\nColumnB AS ColumnC,\nColumnC AS ColumnA\n)\n)\nSELECT ColumnB FROM helper;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_with_fill_interpolate.sql","error":"no viable alternative at input 'WITH helper AS (\\nSELECT\\n*\\nFROM\\n03033'"},{"query":"WITH RECURSIVE recursive_cte AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","error":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('"},{"query":"WITH RECURSIVE recursive_cte AS (SELECT toUInt8(1) AS n UNION ALL SELECT toUInt8(n + 1) FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","error":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('"},{"query":"WITH RECURSIVE recursive_cte AS (SELECT toUInt16(1) AS n UNION ALL SELECT toUInt8(n + 1) FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","error":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('"},{"query":"WITH RECURSIVE recursive_cte AS (SELECT materialize(toUInt16(1)) AS n UNION ALL SELECT toUInt8(n + 1) FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","error":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('"},{"query":"WITH RECURSIVE recursive_cte AS (SELECT toUInt16(1) AS n UNION ALL SELECT materialize(toUInt8(n + 1)) FROM recursive_cte WHERE n < 10) SELECT n FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","error":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('"},{"query":"WITH RECURSIVE recursive_cte AS (SELECT toUInt16(1) AS n, '1' AS concat UNION ALL SELECT materialize(toUInt8(n + 1)), concat || toString(n + 1) FROM recursive_cte WHERE n < 10) SELECT n, concat FROM recursive_cte;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","error":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('"},{"query":"WITH RECURSIVE recursive_cte AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM recursive_cte) SELECT n FROM recursive_cte LIMIT 5;","fileName":"../ClickHouse/tests/queries/0_stateless/03033_recursive_cte_basic.sql","error":"no viable alternative at input 'WITH RECURSIVE recursive_cte AS ('"},{"query":"WITH 'Hello'::Enum8('Hello', 'World') AS enum1, 'test'::Enum8('test', 'best') AS enum2 SELECT [enum1, 'Goodbye', enum2];","fileName":"../ClickHouse/tests/queries/0_stateless/03003_enum_and_string_compatible.sql","error":"no viable alternative at input 'WITH 'Hello':'"},{"query":"WITH arrayJoin(['Hello', 'world'])::Enum('Hello', 'world') AS x SELECT x, transform(x, ['Hello', 'world'], [123, 456], 0);","fileName":"../ClickHouse/tests/queries/0_stateless/02958_transform_enum.sql","error":"no viable alternative at input 'WITH arrayJoin(['Hello', 'world']):'"},{"query":"WITH arrayJoin(['Hello', 'world'])::Enum('Hello', 'world') AS x SELECT x, transform(x, ['Hello', 'world', 'goodbye'], [123, 456], 0); -- { serverError UNKNOWN_ELEMENT_OF_ENUM } WITH arrayJoin(['Hello', 'world'])::Enum('Hello', 'world') AS x SELECT x, transform(x, ['Hello', 'world'], ['test', 'best']::Array(Enum('test' = 123, 'best' = 456, '' = 0)), ''::Enum('test' = 123, 'best' = 456, '' = 0)) AS y;","fileName":"../ClickHouse/tests/queries/0_stateless/02958_transform_enum.sql","error":"no viable alternative at input 'WITH arrayJoin(['Hello', 'world']):'"},{"query":"WITH (SELECT '111111111111111111111111111111111111111'::UInt128) AS v SELECT sum(x), max(v) FROM test;","fileName":"../ClickHouse/tests/queries/0_stateless/02949_parallel_replicas_scalar_subquery_big_integer.sql","error":"no viable alternative at input 'WITH (SELECT '111111111111111111111111111111111111111':'"},{"query":"WITH 1::Nullable(UInt64) as my_literal Select sum(number + my_literal) from numbers(0);","fileName":"../ClickHouse/tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.sql","error":"no viable alternative at input 'WITH 1:'"},{"query":"WITH 1::Nullable(UInt64) as my_literal Select sum(number) + my_literal * count() from numbers(0);","fileName":"../ClickHouse/tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.sql","error":"no viable alternative at input 'WITH 1:'"},{"query":"WITH 1::Nullable(UInt64) as my_literal Select sum(number + my_literal) from numbers(0);","fileName":"../ClickHouse/tests/queries/0_stateless/02931_rewrite_sum_column_and_constant.sql","error":"no viable alternative at input 'WITH 1:'"},{"query":"WITH 1::Nullable(UInt64) as my_literal Select sum(number) + my_literal * count() from numbers(0);","fileName":"../ClickHouse/tests/queries/0_stateless/02931_rewrite_sum_column_and_constant.sql","error":"no viable alternative at input 'WITH 1:'"},{"query":"WITH 44100 AS sample_frequency\n, number AS tick\n, tick / sample_frequency AS time\n, (time, wave, delay_, decay, count) -> arraySum(n1 -> wave(time - delay_ * n1), range(count)) AS delay\n, delay(time, (time -> 0.5), 0.2, 0.5, 5) AS kick\nSELECT\nkick\nFROM system.numbers\nLIMIT 5;","fileName":"../ClickHouse/tests/queries/0_stateless/02841_with_clause_resolve.sql","error":"no viable alternative at input 'WITH 44100 AS sample_frequency\\n, number AS tick\\n, tick / sample_frequency AS time\\n, (time, wave, delay_, decay, count) ->'"},{"query":"WITH 44100 AS sample_frequency\n, number AS tick\n, tick / sample_frequency AS time\n, 1 AS master_volume\n, level -> least(1.0, greatest(-1.0, level)) AS clamp\n, level -> (clamp(level) * 0x7FFF * master_volume)::Int16 AS output\n, x -> (x, x) AS mono\n, time -> sin(time * 2 * pi()) AS sine_wave\n, time -> time::UInt64 % 2 * 2 - 1 AS square_wave\n, time -> (time - floor(time)) * 2 - 1 AS sawtooth_wave\n, time -> abs(sawtooth_wave(time)) * 2 - 1 AS triangle_wave\n, (from, to, wave, time) -> from + ((wave(time) + 1) / 2) * (to - from) AS lfo\n, (from, to, steps, time) -> from + floor((time - floor(time)) * steps) / steps * (to - from) AS step_lfo\n, (from, to, steps, time) -> exp(step_lfo(log(from), log(to), steps, time)) AS exp_step_lfo\n, time -> cityHash64(time) / 0xFFFFFFFFFFFFFFFF AS uniform_noise\n, time -> erf(uniform_noise(time)) AS white_noise\n, time -> cityHash64(time) % 2 ? 1 : -1 AS bernoulli_noise\n, (x, amount) -> clamp(x * amount) AS clipping\n, (x, amount) -> clamp(x > 0 ? pow(x, amount) : -pow(-x, amount)) AS power_distortion\n, (x, amount) -> round(x * exp2(amount)) / exp2(amount) AS bitcrush\n, (time, sample_frequency) -> round(time * sample_frequency) / sample_frequency AS desample\n, (time, wave, amount) -> (time - floor(time) < (1 - amount)) ? wave(time * (1 - amount)) : 0 AS thin\n, (time, wave, amount) -> wave(floor(time) + pow(time - floor(time), amount)) AS skew\n, (a, b, weight) -> a * (1 - weight) + b * weight AS combine\n, (time, offset, attack, hold, release) ->\ntime < offset ? 0\n: (time < offset + attack                  ? ((time - offset) / attack)\n: (time < offset + attack + hold           ? 1\n: (time < offset + attack + hold + release ? (offset + attack + hold + release - time) / release\n: 0))) AS envelope\n, (bpm, time, offset, attack, hold, release) ->\nenvelope(\ntime * (bpm / 60) - floor(time * (bpm / 60)),\noffset,\nattack,\nhold,\nrelease) AS running_envelope\n, (sequence, time) -> sequence[1 + time::UInt64 % length(sequence)] AS sequencer\n, (time, wave, delay, decay, count) -> arraySum(n -> wave(time - delay * n) * pow(decay, n), range(count)) AS delay\n, delay(time, (time -> power_distortion(sine_wave(time * 80 + sine_wave(time * 2)), lfo(0.5, 1, sine_wave, time / 16))\n* running_envelope(60, time, 0, 0.0, 0.01, 0.1)),\n0.2, 0.5, 5) AS kick\nSELECT\n(output(\nkick +\ndelay(time, (time ->\npower_distortion(\nsine_wave(time * 50 + 1 * sine_wave(time * 100 + 1/4))\n* running_envelope(60, time, 0, 0.01, 0.01, 0.1),\nlfo(1, 0.75, triangle_wave, time / 8))),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, time / 7)\n+ delay(time, (time ->\npower_distortion(\nsine_wave(time * sequencer([50, 100, 200, 400], time / 2) + 1 * sine_wave(time * sequencer([50, 100, 200], time / 4) + 1/4))\n* running_envelope(60, time, 0.5, 0.01, 0.01, 0.1),\nlfo(1, 0.75, triangle_wave, time / 8))),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, 16 + time / 11)\n+ delay(time, (time ->\nwhite_noise(time) * running_envelope(60, time, 0.75, 0.01, 0.01, 0.1)),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, 24 + time / 13)\n+ sine_wave(time * 100 + 1 * sine_wave(time * 10 + 1/4))\n* running_envelope(120, time, 0, 0.01, 0.01, 0.1)\n),\noutput(\nkick +\ndelay(time + 0.01, (time ->\npower_distortion(\nsine_wave(time * 50 + 1 * sine_wave(time * 100 + 1/4))\n* running_envelope(60, time, 0, 0.01, 0.01, 0.1),\nlfo(1, 0.75, triangle_wave, time / 8))),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, time / 7)\n+ delay(time - 0.01, (time ->\npower_distortion(\nsine_wave(time * sequencer([50, 100, 200, 400], time / 2) + 1 * sine_wave(time * sequencer([50, 100, 200], time / 4) + 1/4))\n* running_envelope(60, time, 0.5, 0.01, 0.01, 0.1),\nlfo(1, 0.75, triangle_wave, time / 8))),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, 16 + time / 11)\n+ delay(time + 0.005, (time ->\nwhite_noise(time) * running_envelope(60, time, 0.75, 0.01, 0.01, 0.1)),\n0.2, 0.5, 10)\n* lfo(0.5, 1, triangle_wave, 24 + time / 13)\n))\nFROM system.numbers\nLIMIT 10;","fileName":"../ClickHouse/tests/queries/0_stateless/02841_with_clause_resolve.sql","error":"no viable alternative at input 'WITH 44100 AS sample_frequency\\n, number AS tick\\n, tick / sample_frequency AS time\\n, 1 AS master_volume\\n, level ->'"},{"query":"WITH subquery AS (SELECT []) SELECT t.* FROM 02834_t AS t JOIN subquery ON arrayExists(x -> x = 1, t.arr); -- { serverError INVALID_JOIN_ON_EXPRESSION } DROP TABLE 02834_t;","fileName":"../ClickHouse/tests/queries/0_stateless/02834_array_exists_segfault.sql","error":"no viable alternative at input 'WITH subquery AS (SELECT []) SELECT t.* FROM 02834'"},{"query":"WITH (1,2,3) || ('a','b','c') || ('2020-10-08'::Date, '2020-11-08'::Date) AS t SELECT t, t.1, t.2, t.3, t.4, t.5, t.6, t.7, t.8;","fileName":"../ClickHouse/tests/queries/0_stateless/02833_tuple_concat.sql","error":"no viable alternative at input 'WITH (1,2,3) || ('a','b','c') || ('2020-10-08':'"},{"query":"with (select count() > 0 from remote('127.2', view(select count() from remote('127.2', system.settings)))) as s select s;","fileName":"../ClickHouse/tests/queries/0_stateless/02768_cse_nested_distributed.sql","error":"no viable alternative at input 'with (select count() > 0 from remote('127.2', view(select count'"},{"query":"WITH ('a', 'b')::Tuple(c1 String, c2 String) AS t SELECT t.c1, t.c2;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH ('a', 'b'):'"},{"query":"WITH materialize(('a', 'b')::Tuple(c1 String, c2 String)) AS t SELECT t.c1, t.c2;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH materialize(('a', 'b'):'"},{"query":"WITH (1, ('a', 'b'))::Tuple(c1 UInt64, t1 Tuple(c1 String, c2 String)) AS t SELECT t.c1, t.t1.c1, t.t1.c2;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH (1, ('a', 'b')):'"},{"query":"WITH materialize((1, ('a', 'b'))::Tuple(c1 UInt64, t1 Tuple(c1 String, c2 String))) AS t SELECT t.c1, t.t1.c1, t.t1.c2;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH materialize((1, ('a', 'b')):'"},{"query":"WITH [1, 2, NULL] AS arr SELECT arr.null;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH [1, 2, NULL] AS arr SELECT arr.null'"},{"query":"WITH materialize([1, 2, NULL]) AS arr SELECT arr.null;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH materialize([1, 2, NULL]) AS arr SELECT arr.null'"},{"query":"WITH map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64)) AS m SELECT m.keys, m.values, m.values.a, m.values.b;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH map('foo', (1, 2), 'bar', (3, 4)):'"},{"query":"WITH materialize(map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64))) AS m SELECT m.keys, m.values, m.values.a, m.values.b;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH materialize(map('foo', (1, 2), 'bar', (3, 4)):'"},{"query":"WITH map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64)) AS m SELECT m.keys, m.values, m.values.*;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH map('foo', (1, 2), 'bar', (3, 4)):'"},{"query":"WITH materialize(map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64))) AS m SELECT m.keys, m.values, m.values.*;","fileName":"../ClickHouse/tests/queries/0_stateless/02677_analyzer_compound_expressions.sql","error":"no viable alternative at input 'WITH materialize(map('foo', (1, 2), 'bar', (3, 4)):'"},{"query":"WITH (SELECT pow(two, 1) GROUP BY GROUPING SETS ((pow(1, 9)))) AS four SELECT 2 AS two GROUP BY pow(1, two);","fileName":"../ClickHouse/tests/queries/0_stateless/02541_analyzer_grouping_sets_crash_fix.sql","error":"no viable alternative at input 'WITH (SELECT pow(two, 1) GROUP BY GROUPING SETS ('"},{"query":"WITH splitByChar('_', part_name) AS name_parts, name_parts[2]::UInt64 AS min_block,\nname_parts[3]::UInt64 AS max_block\nSELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log\nWHERE\ndatabase = currentDatabase() AND\ntable = 't_compact_vertical_merge' AND\nmin_block = 1 AND max_block = 2;","fileName":"../ClickHouse/tests/queries/0_stateless/02539_vertical_merge_compact_parts.sql","error":"no viable alternative at input 'WITH splitByChar('_', part_name) AS name_parts, name_parts[2]:'"},{"query":"WITH splitByChar('_', part_name) AS name_parts, name_parts[2]::UInt64 AS min_block,\nname_parts[3]::UInt64 AS max_block\nSELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log\nWHERE\ndatabase = currentDatabase() AND\ntable = 't_compact_vertical_merge' AND\nmin_block = 1 AND max_block = 3;","fileName":"../ClickHouse/tests/queries/0_stateless/02539_vertical_merge_compact_parts.sql","error":"no viable alternative at input 'WITH splitByChar('_', part_name) AS name_parts, name_parts[2]:'"},{"query":"WITH extractKeyValuePairs('name:\\\\'neymar\\\\';\\\\'age\\\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","error":"no viable alternative at input 'WITH extractKeyValuePairs('name:\\\\'neymar\\'"},{"query":"WITH extractKeyValuePairs('name:\\\\'neymar\\\\';\\\\'age\\\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","error":"no viable alternative at input 'WITH extractKeyValuePairs('name:\\\\'neymar\\'"},{"query":"WITH extractKeyValuePairs('not_important', ':', ',:', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError BAD_ARGUMENTS}\nWITH\nextractKeyValuePairs('not_important', ':', ',', '\\\\':') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError BAD_ARGUMENTS}\nWITH\nextractKeyValuePairs('not_important', ':', ',', ',') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError BAD_ARGUMENTS}\nWITH\nextractKeyValuePairs([1, 2]) AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH\nextractKeyValuePairs('', [1, 2]) AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH\nextractKeyValuePairs('', ':', [1, 2]) AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH\nextractKeyValuePairs('', ':', ' ', [1, 2]) AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nWITH\nextractKeyValuePairs('not_important', ':', '123456789', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError BAD_ARGUMENTS}\nWITH\nextractKeyValuePairs() AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nWITH\nextractKeyValuePairs('a', ':', ',', '\"', '') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx; -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nSET extract_key_value_pairs_max_pairs_per_row = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","error":"no viable alternative at input 'WITH extractKeyValuePairs('not_important', ':', ',:', '\\\\'') AS s_map,\\nCAST(\\narrayMap(\\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\\n),\\n'Map('"},{"query":"WITH extractKeyValuePairs('not_important', ':', '12345678', '\\\\'') AS s_map,\nCAST(\narrayMap(\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n),\n'Map(String,String)'\n) AS x\nSELECT\nx;","fileName":"../ClickHouse/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql","error":"no viable alternative at input 'WITH extractKeyValuePairs('not_important', ':', '12345678', '\\\\'') AS s_map,\\nCAST(\\narrayMap(\\n(x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\\n),\\n'Map('"},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'\\\\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\\\\'\\\\'DDD'), formatDateTimeInJodaSyntax(date, 'G\\\\'\\\\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\\\\'\\\\'DDD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","error":"no viable alternative at input 'with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'\\'"},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'aaa\\\\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\\\\'aaa\\\\'DDD'), formatDateTimeInJodaSyntax(date, 'G\\\\'aaa\\\\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\\\\'aaa\\\\'DDD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","error":"no viable alternative at input 'with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'aaa\\'"},{"query":"with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'a\\\\'\\\\'aa\\\\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\\\\'a\\\\'\\\\'aa\\\\'DDD'), formatDateTimeInJodaSyntax(date, 'G\\\\'a\\\\'\\\\'aa\\\\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\\\\'a\\\\'\\\\'aa\\\\'DDD');","fileName":"../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql","error":"no viable alternative at input 'with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\\\\'a\\'"},{"query":"WITH splitByChar('_', _file)[3]::UInt64 AS num SELECT count(), min(num), max(num)\nFROM  s3(s3_conn, filename = 'test_02495_*', format = Parquet)\nWHERE num >= 5;","fileName":"../ClickHouse/tests/queries/0_stateless/02495_s3_filter_by_file.sql","error":"no viable alternative at input 'WITH splitByChar('_', _file)[3]:'"},{"query":"WITH '2022-01-30'::Date + INTERVAL 1 MONTH + INTERVAL 1 DAY AS e1, '2022-01-30'::Date + (INTERVAL 1 MONTH + INTERVAL 1 DAY) AS e2,\n'2022-01-30'::Date + (INTERVAL 1 MONTH, INTERVAL 1 DAY) AS e3,\n'2022-01-30'::Date + INTERVAL '1 MONTH 1 DAY' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","error":"no viable alternative at input 'WITH '2022-01-30':'"},{"query":"WITH '2022-01-30'::Date + INTERVAL 1 DAY + INTERVAL 1 MONTH AS e1, '2022-01-30'::Date + (INTERVAL 1 DAY + INTERVAL 1 MONTH) AS e2,\n'2022-01-30'::Date + (INTERVAL 1 DAY, INTERVAL 1 MONTH) AS e3,\n'2022-01-30'::Date + INTERVAL '1 DAY 1 MONTH' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","error":"no viable alternative at input 'WITH '2022-01-30':'"},{"query":"WITH '2022-10-11'::Date + INTERVAL -1 SECOND + INTERVAL 2 MINUTE + INTERVAL -3 MONTH + INTERVAL 1 YEAR AS e1, '2022-10-11'::Date + (INTERVAL -1 SECOND + INTERVAL 2 MINUTE + INTERVAL -3 MONTH + INTERVAL 1 YEAR) AS e2,\n'2022-10-11'::Date + (INTERVAL -1 SECOND, INTERVAL 2 MINUTE, INTERVAL -3 MONTH, INTERVAL 1 YEAR) AS e3,\n'2022-10-11'::Date + INTERVAL '-1 SECOND 2 MINUTE -3 MONTH 1 YEAR' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","error":"no viable alternative at input 'WITH '2022-10-11':'"},{"query":"WITH '2022-10-11'::DateTime - INTERVAL 1 QUARTER - INTERVAL -3 WEEK - INTERVAL 1 YEAR - INTERVAL 1 HOUR AS e1, '2022-10-11'::DateTime + (- INTERVAL 1 QUARTER - INTERVAL -3 WEEK - INTERVAL 1 YEAR - INTERVAL 1 HOUR) AS e2,\n'2022-10-11'::DateTime - (INTERVAL 1 QUARTER, INTERVAL -3 WEEK, INTERVAL 1 YEAR, INTERVAL 1 HOUR) AS e3,\n'2022-10-11'::DateTime - INTERVAL '1 QUARTER -3 WEEK 1 YEAR 1 HOUR' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","error":"no viable alternative at input 'WITH '2022-10-11':'"},{"query":"WITH '2022-10-11'::DateTime64 - INTERVAL 1 YEAR - INTERVAL 4 MONTH - INTERVAL 1 SECOND AS e1, '2022-10-11'::DateTime64 + (- INTERVAL 1 YEAR - INTERVAL 4 MONTH - INTERVAL 1 SECOND) AS e2,\n'2022-10-11'::DateTime64 - (INTERVAL 1 YEAR, INTERVAL 4 MONTH, INTERVAL 1 SECOND) AS e3,\n'2022-10-11'::DateTime64 - INTERVAL '1 YEAR 4 MONTH 1 SECOND' AS e4\nSELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;","fileName":"../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql","error":"no viable alternative at input 'WITH '2022-10-11':'"},{"query":"WITH 1 as n FROM numbers(1) SELECT number * n;","fileName":"../ClickHouse/tests/queries/0_stateless/02417_from_select_syntax.sql","error":"no viable alternative at input 'WITH 1 as n FROM'"},{"query":"WITH x -> toString(x) AS lambda SELECT arrayMap(x -> lambda(x), [1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> toString(x) AS lambda SELECT arrayMap(x -> arrayMap(y -> concat(lambda(x), '_', lambda(y)), [1,2,3]), [1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> toString(id) AS lambda SELECT arrayMap(x -> lambda(x), [1,2,3]) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> toString(id) AS lambda SELECT arrayMap(x -> arrayMap(y -> lambda(y), [1,2,3]), [1,2,3]) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> toString(id) AS lambda SELECT arrayMap(x -> arrayMap(y -> concat(lambda(x), '_', lambda(y)), [1,2,3]), [1,2,3]) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> plus(lambda(1), x) AS lambda SELECT lambda(1048576); -- { serverError UNSUPPORTED_METHOD };","fileName":"../ClickHouse/tests/queries/0_stateless/02388_analyzer_recursive_lambda.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH lambda(lambda(plus(x, x, -1)), tuple(x), x + 2147483646) AS lambda, x -> plus(lambda(1), x, 2) AS lambda SELECT 1048576, lambda(1048576); -- { serverError UNSUPPORTED_METHOD };","fileName":"../ClickHouse/tests/queries/0_stateless/02388_analyzer_recursive_lambda.sql","error":"no viable alternative at input 'WITH lambda(lambda(plus(x, x, -1)), tuple(x), x + 2147483646) AS lambda, x ->'"},{"query":"WITH cte_subquery AS (SELECT 1 UNION DISTINCT SELECT 1) SELECT * FROM cte_subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02387_analyzer_cte.sql","error":"no viable alternative at input 'WITH cte_subquery AS (SELECT 1 UNION DISTINCT'"},{"query":"WITH cte_subquery AS (SELECT * FROM test_table UNION DISTINCT SELECT * FROM test_table) SELECT * FROM cte_subquery;","fileName":"../ClickHouse/tests/queries/0_stateless/02387_analyzer_cte.sql","error":"no viable alternative at input 'WITH cte_subquery AS (SELECT * FROM test_table UNION DISTINCT'"},{"query":"WITH (x -> x + 1) AS lambda SELECT lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql","error":"no viable alternative at input 'WITH (x ->'"},{"query":"WITH (x -> x + 1) AS lambda SELECT lambda.nested(1); -- { serverError BAD_ARGUMENTS } SELECT '--';","fileName":"../ClickHouse/tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql","error":"no viable alternative at input 'WITH (x ->'"},{"query":"WITH groupArray((table, bytes))::Map(String, UInt64) AS stats SELECT\nlength(stats), stats['t_modify_from_lc_1'] < stats['t_modify_from_lc_2']\nFROM\n(\nSELECT table, sum(bytes_on_disk) AS bytes FROM system.parts\nWHERE database = currentDatabase() AND table LIKE 't_modify_from_lc%' AND active\nGROUP BY table\n);","fileName":"../ClickHouse/tests/queries/0_stateless/02377_modify_column_from_lc.sql","error":"no viable alternative at input 'WITH groupArray((table, bytes)):'"},{"query":"WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN (SELECT id FROM cte_test_table_for_in UNION DISTINCT SELECT id FROM cte_test_table_for_in);","fileName":"../ClickHouse/tests/queries/0_stateless/02376_analyzer_in_function_subquery.sql","error":"no viable alternative at input 'WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN (SELECT id FROM cte_test_table_for_in UNION DISTINCT'"},{"query":"WITH 'CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"' AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02368_analyzer_table_functions.sql","error":"no viable alternative at input 'WITH 'CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc\\'"},{"query":"WITH concat('1,2,\"[1,2,3]\",','\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"') AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);","fileName":"../ClickHouse/tests/queries/0_stateless/02368_analyzer_table_functions.sql","error":"no viable alternative at input 'WITH concat('1,2,\"[1,2,3]\",','\"[[\\\\'abc\\'"},{"query":"WITH x -> x + 1 AS lambda, x -> x + 1 AS lambda SELECT lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02344_analyzer_multiple_aliases_for_expression.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> x + 1 AS lambda SELECT lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> toString(x) AS lambda SELECT lambda(1), lambda(NULL), lambda([1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> toString(x) AS lambda_1, lambda_1 AS lambda_2, lambda_2 AS lambda_3 SELECT lambda_1(1), lambda_2(NULL), lambda_3([1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> x + 1 AS lambda SELECT lambda(id) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> toString(x) AS lambda SELECT lambda(id), lambda(value) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> x + 1 AS lambda SELECT arrayMap(lambda, [1,2,3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> toString(x) AS lambda_1 SELECT arrayMap(lambda_1 AS lambda_2, [1,2,3]), arrayMap(lambda_2, ['1', '2', '3']);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> concat(concat(toString(x.id), '_'), x.value) AS lambda SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, lambda(value);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> concat(concat(x.value_0_level_0, '_'), x.value_1_level_0) AS lambda SELECT lambda(value) FROM test_table_tuple;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> * AS lambda SELECT lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> * AS lambda SELECT lambda(1) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH x -> untuple(x) AS lambda SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, lambda(value);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH (functor, x) -> functor(x) AS lambda, x -> x + 1 AS functor_1, x -> toString(x) AS functor_2 SELECT lambda(functor_1, 1), lambda(functor_2, 1);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH (functor, x) ->'"},{"query":"WITH (functor, x) -> functor(x) AS lambda, x -> x + 1 AS functor_1, x -> toString(x) AS functor_2 SELECT lambda(functor_1, id), lambda(functor_2, id) FROM test_table;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH (functor, x) ->'"},{"query":"WITH 222 AS lambda SELECT arrayMap(lambda((x, ), x + 1), [1, 2, 3]);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH 222 AS lambda SELECT arrayMap(lambda((x, )'"},{"query":"WITH x -> x + 1 AS lambda SELECT arrayMap(lambda(tuple(x), x + 1), [1, 2, 3]), lambda(1);","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH x ->'"},{"query":"WITH (x, y) -> y AS lambda SELECT arrayMap(lambda(tuple(x), x + 1), [1, 2, 3]), lambda(tuple(x), x + 1), 1 AS x; -- { serverError BAD_ARGUMENTS }\nWITH (x, y) -> y AS lambda2\nSELECT arrayMap(lambda(tuple(x), x + 1), [1, 2, 3]), lambda2(tuple(x), x + 1), 1 AS x;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql","error":"no viable alternative at input 'WITH (x, y) ->'"},{"query":"with rhs as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs using (d1) order by rhs.d2 settings enable_analyzer=0; -- { serverError ALIAS_REQUIRED } with rhs as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs using (d1) order by rhs.d2 settings enable_analyzer=1; -- It works with analyzer; rhs is an alias itself.\nwith rhs as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs using (d1) order by rhs.d2 settings joined_subquery_requires_alias=0;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_global_join_cte.sql","error":"no viable alternative at input 'with rhs as (select * from remote('127.{1,2}', view(select dummy'"},{"query":"with rhs_ as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs_ rhs using (d1) order by rhs.d2 settings joined_subquery_requires_alias=0;","fileName":"../ClickHouse/tests/queries/0_stateless/02341_global_join_cte.sql","error":"no viable alternative at input 'with rhs_ as (select * from remote('127.{1,2}', view(select dummy'"},{"query":"WITH toDateTime64('1959-09-16 19:20:12.999999998', 9, 'UTC') AS dt1,\ntoDateTime64('1959-09-16 19:20:12.999999999', 9, 'UTC') AS dt2\nSELECT\ndt1 < dt2,\n(dt1 + INTERVAL 1 NANOSECOND) = dt2,\n(dt1 + INTERVAL 2 NANOSECOND) > dt2,\n(dt1 + INTERVAL 3 NANOSECOND) > dt2;","fileName":"../ClickHouse/tests/queries/0_stateless/02313_negative_datetime64.sql","error":"no viable alternative at input 'WITH toDateTime64('1959-09-16 19:20:12.999999998', 9, 'UTC') AS dt1,\\ntoDateTime64('1959-09-16 19:20:12.999999999', 9, 'UTC') AS dt2\\nSELECT\\ndt1 < dt2,\\n(dt1 + INTERVAL 1 NANOSECOND)'"},{"query":"WITH toDateTime64('1969-12-31 23:59:59.999999998', 9, 'UTC') AS dt1,\ntoDateTime64('1969-12-31 23:59:59.999999999', 9, 'UTC') AS dt2\nSELECT\ndt1 < dt2,\n(dt1 + INTERVAL 1 NANOSECOND) = dt2,\n(dt1 + INTERVAL 2 NANOSECOND) > dt2,\n(dt1 + INTERVAL 3 NANOSECOND) > dt2;","fileName":"../ClickHouse/tests/queries/0_stateless/02313_negative_datetime64.sql","error":"no viable alternative at input 'WITH toDateTime64('1969-12-31 23:59:59.999999998', 9, 'UTC') AS dt1,\\ntoDateTime64('1969-12-31 23:59:59.999999999', 9, 'UTC') AS dt2\\nSELECT\\ndt1 < dt2,\\n(dt1 + INTERVAL 1 NANOSECOND)'"},{"query":"WITH toDateTime64('2001-12-31 23:59:59.999999998', 9, 'UTC') AS dt1,\ntoDateTime64('2001-12-31 23:59:59.999999999', 9, 'UTC') AS dt2\nSELECT\ndt1 < dt2,\n(dt1 + INTERVAL 1 NANOSECOND) = dt2,\n(dt1 + INTERVAL 2 NANOSECOND) > dt2,\n(dt1 + INTERVAL 3 NANOSECOND) > dt2;","fileName":"../ClickHouse/tests/queries/0_stateless/02313_negative_datetime64.sql","error":"no viable alternative at input 'WITH toDateTime64('2001-12-31 23:59:59.999999998', 9, 'UTC') AS dt1,\\ntoDateTime64('2001-12-31 23:59:59.999999999', 9, 'UTC') AS dt2\\nSELECT\\ndt1 < dt2,\\n(dt1 + INTERVAL 1 NANOSECOND)'"},{"query":"WITH toDateTime64('2282-12-31 23:59:59.999998', 6, 'UTC') AS dt1,\ntoDateTime64('2282-12-31 23:59:59.999999', 6, 'UTC') AS dt2\nSELECT\ndt1 < dt2,\n(dt1 + INTERVAL 1 MICROSECOND) = dt2,\n(dt1 + INTERVAL 2 MICROSECOND) > dt2,\n(dt1 + INTERVAL 3 MICROSECOND) > dt2;","fileName":"../ClickHouse/tests/queries/0_stateless/02313_negative_datetime64.sql","error":"no viable alternative at input 'WITH toDateTime64('2282-12-31 23:59:59.999998', 6, 'UTC') AS dt1,\\ntoDateTime64('2282-12-31 23:59:59.999999', 6, 'UTC') AS dt2\\nSELECT\\ndt1 < dt2,\\n(dt1 + INTERVAL 1 MICROSECOND)'"},{"query":"with top_repos as ( select repo_name from github_events where event_type = 'WatchEvent' and toDate(created_at) = today() - 1 group by repo_name order by count() desc limit 100 union distinct select repo_name from github_events where event_type = 'WatchEvent' and toMonday(created_at) = toMonday(today() - interval 1 week) group by repo_name order by count() desc limit 100 union distinct select repo_name from github_events where event_type = 'WatchEvent' and toStartOfMonth(created_at) = toStartOfMonth(today()) - interval 1 month group by repo_name order by count() desc limit 100 union distinct select repo_name from github_events where event_type = 'WatchEvent' and toYear(created_at) = toYear(today()) - 1 group by repo_name order by count() desc limit 100 ),\nlast_day as ( select repo_name, count() as count_last_day, rowNumberInAllBlocks() + 1 as position_last_day from github_events where repo_name in (select repo_name from top_repos) and toDate(created_at) = today() - 1 group by repo_name order by count_last_day desc ),\nlast_week as ( select repo_name, count() as count_last_week, rowNumberInAllBlocks() + 1 as position_last_week from github_events where repo_name in (select repo_name from top_repos) and toMonday(created_at) = toMonday(today()) - interval 1 week group by repo_name order by count_last_week desc ),\nlast_month as ( select repo_name, count() as count_last_month, rowNumberInAllBlocks() + 1 as position_last_month from github_events where repo_name in (select repo_name from top_repos) and toStartOfMonth(created_at) = toStartOfMonth(today()) - interval 1 month group by repo_name order by count_last_month desc )\nselect d.repo_name, columns('count') from last_day d join last_week w on d.repo_name = w.repo_name join last_month m on d.repo_name = m.repo_name;","fileName":"../ClickHouse/tests/queries/0_stateless/02271_fix_column_matcher_and_column_transformer.sql","error":"no viable alternative at input 'with top_repos as ( select repo_name from github_events where event_type = 'WatchEvent' and toDate(created_at) = today() - 1 group by repo_name order by count() desc limit 100 union distinct'"},{"query":"WITH toDate('1970-01-01') AS date_value,\ntoDateTime('1970-01-01 11:22:33') AS date_time_value,\ntoDateTime64('1900-01-01 11:22:33', 3) AS date_time_64_value\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value)\nSETTINGS enable_extended_results_for_datetime_functions = true;","fileName":"../ClickHouse/tests/queries/0_stateless/02251_last_day_of_month.sql","error":"no viable alternative at input 'WITH toDate('1970-01-01') AS date_value,\\ntoDateTime('1970-01-01 11:22:33') AS date_time_value,\\ntoDateTime64('1900-01-01 11:22:33', 3) AS date_time_64_value\\nSELECT toLastDayOfMonth(date_value), toLastDayOfMonth(date_time_value), toLastDayOfMonth(date_time_64_value)\\nSETTINGS enable_extended_results_for_datetime_functions = true'"},{"query":"WITH (\nSELECT initial_query_id\nFROM system.query_log\nWHERE\ncurrent_database = currentDatabase()\nAND event_date >= yesterday()\nAND query LIKE '-- INSERT USING VALUES%'\nLIMIT 1\n) AS q_id\nSELECT 'VALUES', view_duration_ms >= 50\nFROM system.query_views_log\nWHERE initial_query_id = q_id;","fileName":"../ClickHouse/tests/queries/0_stateless/02187_insert_values_with_mv.sql","error":"no viable alternative at input 'WITH (\\nSELECT initial_query_id\\nFROM system.query_log\\nWHERE\\ncurrent_database = currentDatabase()\\nAND event_date >= yesterday()\\nAND query'"},{"query":"WITH (\nSELECT initial_query_id\nFROM system.query_log\nWHERE\ncurrent_database = currentDatabase()\nAND event_date >= yesterday()\nAND query LIKE '-- INSERT USING TABLE%'\nLIMIT 1\n) AS q_id\nSELECT 'TABLE', view_duration_ms >= 50\nFROM system.query_views_log\nWHERE initial_query_id = q_id;","fileName":"../ClickHouse/tests/queries/0_stateless/02187_insert_values_with_mv.sql","error":"no viable alternative at input 'WITH (\\nSELECT initial_query_id\\nFROM system.query_log\\nWHERE\\ncurrent_database = currentDatabase()\\nAND event_date >= yesterday()\\nAND query'"},{"query":"WITH (range(0, number % 10), range(0, number % 10))::Map(UInt64, UInt64) AS m1, (range(0, number % 10, 2), arrayMap(x -> x * x, range(0, number % 10, 2)))::Map(UInt64, UInt64) AS m2\nSELECT DISTINCT mapUpdate(m1, m2) FROM numbers (100000);","fileName":"../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql","error":"no viable alternative at input 'WITH (range(0, number % 10), range(0, number % 10)):'"},{"query":"WITH 2 AS \\`b.c\\`, [4, 5] AS a, 6 AS u, 3 AS v, 2 AS d, TRUE AS e, 1 AS f, 0 AS g, 2 AS h, 'Hello' AS i, 'World' AS j, 'hi' AS w, NULL AS k, (1, 2) AS l, 2 AS m, 3 AS n, [] AS o, [1] AS p, 1 AS q, q AS r, 1 AS s, 1 AS t SELECT INTERVAL CASE CASE WHEN NOT -a[\\`b.c\\`] * u DIV v + d IS NOT NULL AND e OR f BETWEEN g AND h THEN i ELSE j END WHEN w THEN k END || [l, (m, n)] MINUTE IS NULL OR NOT o::Array(INT) = p <> q < r > s != t AS upyachka;","fileName":"../ClickHouse/tests/queries/0_stateless/02163_operators.sql","error":"no viable alternative at input 'WITH 2 AS \\'"},{"query":"WITH * APPLY lambda(e); -- { clientError SYNTAX_ERROR } SELECT * APPLY lambda(); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(1); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(x); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(range(1)); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(range(x)); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(1, 2); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(x, y); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda((x, y), 2); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda((x, y), x + y); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(tuple(1), 1); -- { clientError SYNTAX_ERROR }\nSELECT * APPLY lambda(tuple(x), 1) FROM numbers(5);","fileName":"../ClickHouse/tests/queries/0_stateless/02128_apply_lambda_parsing.sql","error":"no viable alternative at input 'WITH * APPLY lambda('"},{"query":"WITH (\nSELECT initial_query_id\nFROM system.query_log\nWHERE current_database = currentDatabase()\nAND event_date >= yesterday()\nAND query LIKE '-- INSERT INTO wv%'\nLIMIT 1\n) AS q_id\nSELECT view_name, view_type, view_query, read_rows, read_bytes, written_rows, written_bytes\nFROM system.query_views_log\nWHERE initial_query_id = q_id FORMAT Vertical;","fileName":"../ClickHouse/tests/queries/0_stateless/02125_query_views_log_window_function.sql","error":"no viable alternative at input 'WITH (\\nSELECT initial_query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase()\\nAND event_date >= yesterday()\\nAND query'"},{"query":"WITH (\nSELECT initial_query_id\nFROM system.query_log\nWHERE current_database = currentDatabase()\nAND event_date >= yesterday()\nAND query LIKE '-- INSERT INTO wv%'\nLIMIT 1\n) AS q_id\nSELECT views\nFROM system.query_log\nWHERE initial_query_id = q_id\nAND type = 'QueryFinish'\nFORMAT Vertical;","fileName":"../ClickHouse/tests/queries/0_stateless/02125_query_views_log_window_function.sql","error":"no viable alternative at input 'WITH (\\nSELECT initial_query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase()\\nAND event_date >= yesterday()\\nAND query'"},{"query":"WITH (1, 2)::Tuple(a UInt32, b UInt32) AS t SELECT t.1, tupleElement(t, 'b');","fileName":"../ClickHouse/tests/queries/0_stateless/02116_tuple_element_analyzer.sql","error":"no viable alternative at input 'WITH (1, 2):'"},{"query":"WITH number DIV 50 AS k, toUInt32(number % 50) AS value SELECT k, sparkbar(50, 0, 99)(number, value) FROM numbers(100) GROUP BY k ORDER BY k;","fileName":"../ClickHouse/tests/queries/0_stateless/02016_aggregation_spark_bar.sql","error":"no viable alternative at input 'WITH number DIV 50'"},{"query":"with (select count() from (select * from test union distinct select * from test except select * from test where toUInt8(name) > 3)) as max select count() from (select * from test union all select * from test where toUInt8(name) < max);","fileName":"../ClickHouse/tests/queries/0_stateless/02008_test_union_distinct_in_subquery.sql","error":"no viable alternative at input 'with (select count() from (select * from test union distinct'"},{"query":"with (select count() from (select * from test union distinct select * from test except select * from test where toUInt8(name) > 3)) as max select count() from (select * from test except select * from test where toUInt8(name) < max);","fileName":"../ClickHouse/tests/queries/0_stateless/02008_test_union_distinct_in_subquery.sql","error":"no viable alternative at input 'with (select count() from (select * from test union distinct'"},{"query":"with (select number from numbers(10) intersect select 5) as a select a * 10;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","error":"no viable alternative at input 'with (select number from numbers(10) intersect select'"},{"query":"with (select 5 except select 1) as a select a except select 5;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","error":"no viable alternative at input 'with (select 5 except select'"},{"query":"with (select number from numbers(10) intersect select 5) as a select a intersect select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","error":"no viable alternative at input 'with (select number from numbers(10) intersect select'"},{"query":"with (select number from numbers(10) intersect select 5) as a select a except select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","error":"no viable alternative at input 'with (select number from numbers(10) intersect select'"},{"query":"with (select count() from (select 1 union distinct select 2 except select 1)) as max select count() from (select 1 union all select max) limit 100;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql","error":"no viable alternative at input 'with (select count() from (select 1 union distinct'"},{"query":"with (select number from numbers(10) intersect select 5) as a select a * 10;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","error":"no viable alternative at input 'with (select number from numbers(10) intersect select'"},{"query":"with (select 5 except select 1) as a select a except select 5;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","error":"no viable alternative at input 'with (select 5 except select'"},{"query":"with (select number from numbers(10) intersect select 5) as a select a intersect select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","error":"no viable alternative at input 'with (select number from numbers(10) intersect select'"},{"query":"with (select number from numbers(10) intersect select 5) as a select a except select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","error":"no viable alternative at input 'with (select number from numbers(10) intersect select'"},{"query":"with (select count() from (select 1 union distinct select 2 except select 1)) as max select count() from (select 1 union all select max) limit 100;","fileName":"../ClickHouse/tests/queries/0_stateless/02004_intersect_except_distinct_operators.sql","error":"no viable alternative at input 'with (select count() from (select 1 union distinct'"},{"query":"WITH concat(addressToLine(arrayJoin(trace) AS addr), '#') AS symbol SELECT count() > 7\nFROM trace_log AS t\nWHERE (query_id =\n(\nSELECT\n[NULL, NULL, NULL, NULL, 0.00009999999747378752, NULL, NULL, NULL, NULL, NULL],\nquery_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (query LIKE '%test cpu time query profiler%') AND (query NOT LIKE '%system%')\nORDER BY event_time DESC\nLIMIT 1\n)) AND (symbol LIKE '%Source%'); -- { serverError INCORRECT_RESULT_OF_SCALAR_SUBQUERY }\nWITH addressToSymbol(arrayJoin(trace)) AS symbol\nSELECT count() > 0\nFROM trace_log AS t\nWHERE greaterOrEquals(event_date, ignore(ignore(ignore(NULL, '')), 256), yesterday()) AND (trace_type = 'Memory') AND (query_id =\n(\nSELECT\nignore(ignore(ignore(ignore(65536)), ignore(65537), ignore(2)), ''),\nquery_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (event_date >= yesterday()) AND (query LIKE '%test memory profiler%')\nORDER BY event_time DESC\nLIMIT 1\n)); -- { serverError INCORRECT_RESULT_OF_SCALAR_SUBQUERY, 42 }\nDROP TABLE IF EXISTS trace_log;","fileName":"../ClickHouse/tests/queries/0_stateless/01651_bugs_from_15889.sql","error":"no viable alternative at input 'WITH concat(addressToLine(arrayJoin(trace) AS addr), '#') AS symbol SELECT count() > 7\\nFROM trace_log AS t\\nWHERE (query_id =\\n(\\nSELECT\\n[NULL, NULL, NULL, NULL, 0.00009999999747378752, NULL, NULL, NULL, NULL, NULL],\\nquery_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND (query'"},{"query":"WITH ['2023-04-05 00:25:23', '2023-04-05 00:25:24']::Array(DateTime) AS dt SELECT arrayMax(dt), arrayMin(dt), arrayDifference(dt);","fileName":"../ClickHouse/tests/queries/0_stateless/01602_array_aggregation.sql","error":"no viable alternative at input 'WITH ['2023-04-05 00:25:23', '2023-04-05 00:25:24']:'"},{"query":"WITH ['2023-04-05 00:25:23.123', '2023-04-05 00:25:24.124']::Array(DateTime64(3)) AS dt SELECT arrayMax(dt), arrayMin(dt), arrayDifference(dt);","fileName":"../ClickHouse/tests/queries/0_stateless/01602_array_aggregation.sql","error":"no viable alternative at input 'WITH ['2023-04-05 00:25:23.123', '2023-04-05 00:25:24.124']:'"},{"query":"WITH ['2023-04-05', '2023-04-06']::Array(Date) AS d SELECT arrayMax(d), arrayMin(d), arrayDifference(d);","fileName":"../ClickHouse/tests/queries/0_stateless/01602_array_aggregation.sql","error":"no viable alternative at input 'WITH ['2023-04-05', '2023-04-06']:'"},{"query":"WITH ['2023-04-05', '2023-04-06']::Array(Date32) AS d SELECT arrayMax(d), arrayMin(d), arrayDifference(d);","fileName":"../ClickHouse/tests/queries/0_stateless/01602_array_aggregation.sql","error":"no viable alternative at input 'WITH ['2023-04-05', '2023-04-06']:'"},{"query":"with 5 as q1, x as (select number+100 as b, number as a from numbers(10) where number > q1) select * from x;","fileName":"../ClickHouse/tests/queries/0_stateless/01515_with_global_and_with_propagation.sql","error":"no viable alternative at input 'with 5 as q1, x as ('"},{"query":"WITH ( (\nSELECT query_start_time_microseconds\nFROM system.query_log\nWHERE current_database = currentDatabase()\nAND query like 'SELECT \\\\'01461_query%'\nAND event_date >= yesterday()\nORDER BY query_start_time DESC\nLIMIT 1\n) AS time_with_microseconds,\n(\nSELECT query_start_time\nFROM system.query_log\nWHERE current_database = currentDatabase()\nAND query like 'SELECT \\\\'01461_query%'\nAND event_date >= yesterday()\nORDER BY query_start_time DESC\nLIMIT 1\n) AS t)\nSELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(t)) = 0, 'ok', 'fail'); --\nSET log_query_threads = 1;","fileName":"../ClickHouse/tests/queries/0_stateless/01461_query_start_time_microseconds.sql","error":"no viable alternative at input 'WITH ( (\\nSELECT query_start_time_microseconds\\nFROM system.query_log\\nWHERE current_database = currentDatabase()\\nAND query'"},{"query":"WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'Memory' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);","fileName":"../ClickHouse/tests/queries/0_stateless/01092_memory_profiler.sql","error":"no viable alternative at input 'WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'Memory' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query'"},{"query":"WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemoryPeak' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);","fileName":"../ClickHouse/tests/queries/0_stateless/01092_memory_profiler.sql","error":"no viable alternative at input 'WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemoryPeak' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query'"},{"query":"WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemorySample' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);","fileName":"../ClickHouse/tests/queries/0_stateless/01092_memory_profiler.sql","error":"no viable alternative at input 'WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemorySample' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query'"},{"query":"WITH (\nSELECT query_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (normalizeQuery(query) like normalizeQuery('WITH 01091 AS id SELECT 1;')) AND (event_date >= (today() - 1))\nORDER BY event_time DESC\nLIMIT 1\n) AS id\nSELECT uniqExact(thread_id)\nFROM system.query_thread_log\nWHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","error":"no viable alternative at input 'WITH (\\nSELECT query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND (normalizeQuery(query'"},{"query":"WITH (\nSELECT query_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (normalizeQuery(query) = normalizeQuery('with 01091 as id select sum(number) from numbers(1000000);')) AND (event_date >= (today() - 1))\nORDER BY event_time DESC\nLIMIT 1\n) AS id\nSELECT uniqExact(thread_id) > 2\nFROM system.query_thread_log\nWHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","error":"no viable alternative at input 'WITH (\\nSELECT query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND (normalizeQuery(query'"},{"query":"WITH (\nSELECT query_id\nFROM system.query_log\nWHERE current_database = currentDatabase() AND (normalizeQuery(query) = normalizeQuery('with 01091 as id select sum(number) from numbers_mt(1000000);')) AND (event_date >= (today() - 1))\nORDER BY event_time DESC\nLIMIT 1\n) AS id\nSELECT uniqExact(thread_id) > 2\nFROM system.query_thread_log\nWHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);","fileName":"../ClickHouse/tests/queries/0_stateless/01091_num_threads.sql","error":"no viable alternative at input 'WITH (\\nSELECT query_id\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND (normalizeQuery(query'"},{"query":"WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%test real time query profiler%' AND query NOT LIKE '%system%' ORDER BY event_time DESC LIMIT 1) AND symbol LIKE '%FunctionSleep%';","fileName":"../ClickHouse/tests/queries/0_stateless/00974_query_profiler.sql","error":"no viable alternative at input 'WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query'"},{"query":"WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%test cpu time query profiler%' AND query NOT LIKE '%system%' ORDER BY event_time DESC LIMIT 1) AND symbol LIKE '%Source%';","fileName":"../ClickHouse/tests/queries/0_stateless/00974_query_profiler.sql","error":"no viable alternative at input 'WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query'"}]