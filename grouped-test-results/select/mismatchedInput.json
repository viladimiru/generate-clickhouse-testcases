[
  {
    "query": "SELECT '2'; -- median is close to 0 SELECT round(quantileDD(0.01, 0.5)(number), 2)\nFROM\n(\nSELECT arrayJoin([toInt64(number), number - 10]) AS number\nFROM numbers(0, 10)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02919_ddsketch_quantile.sql",
    "error": "mismatched input 'FROM' expecting <EOF>"
  },
  {
    "query": "SELECT '4'; -- min and max values of integer types (-2^63, 2^63-1) SELECT round(quantileDD(0.01, 0.5)(number), 2)\nFROM\n(\nSELECT arrayJoin([toInt64(number), number - 9223372036854775808, toInt64(number + 9223372036854775798)]) AS number\nFROM numbers(0, 10)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02919_ddsketch_quantile.sql",
    "error": "mismatched input 'FROM' expecting <EOF>"
  },
  {
    "query": "SELECT '5'; -- min and max values of floating point types SELECT round(quantileDD(0.01, 0.42)(number), 2)\nFROM\n(\nSELECT arrayJoin([toFloat32(number), number - 3.4028235e+38, toFloat32(number + 3.4028235e+38)]) AS number\nFROM numbers(0, 10)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02919_ddsketch_quantile.sql",
    "error": "mismatched input 'FROM' expecting <EOF>"
  },
  {
    "query": "SELECT '6'; -- denormalized floats SELECT round(quantileDD(0.01, 0.69)(number), 2)\nFROM\n(\nSELECT arrayJoin([toFloat32(number), number - 1.1754944e-38, toFloat32(number + 1.1754944e-38)]) AS number\nFROM numbers(0, 10)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02919_ddsketch_quantile.sql",
    "error": "mismatched input 'FROM' expecting <EOF>"
  },
  {
    "query": "SELECT '7'; -- NaNs SELECT round(quantileDD(0.01, 0.5)(number), 2)\nFROM\n(\nSELECT arrayJoin([toFloat32(number), NaN * number]) AS number\nFROM numbers(0, 10)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02919_ddsketch_quantile.sql",
    "error": "mismatched input 'FROM' expecting <EOF>"
  },
  {
    "query": "SELECT '8'; -- sparse sketch SELECT round(quantileDD(0.01, 0.75)(number), 2)\nFROM\n(\nSELECT number * 1e7 AS number\nFROM numbers(20)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02919_ddsketch_quantile.sql",
    "error": "mismatched input 'FROM' expecting <EOF>"
  },
  {
    "query": "SELECT '\\\\\\\\''\\\\'' FORMAT Pretty;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00476_pretty_formats_and_widths.sql",
    "error": "mismatched input ''' expecting <EOF>"
  },
  {
    "query": "SELECT '\\\\\\\\''\\\\'', 1 FORMAT Vertical;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00476_pretty_formats_and_widths.sql",
    "error": "mismatched input ''' expecting <EOF>"
  },
  {
    "query": "SELECT '\\\\x01\\\\x00'::AggregateFunction(groupBitmap, UInt32); -- { serverError INCORRECT_DATA } SELECT '\\\\x01\\\\x01\\\\x01'::AggregateFunction(groupBitmap, UInt64); -- { serverError STD_EXCEPTION }\nSELECT '\\\\x02\\\\x00\\\\x0d'::AggregateFunction(topK, UInt256); -- { serverError CANNOT_READ_ALL_DATA }\nSELECT unhex('bebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebe0c0c3131313131313131313131313173290aee00b300')::AggregateFunction(minDistinct, Int8); -- { serverError TOO_LARGE_ARRAY_SIZE }\nSELECT unhex('01000b0b0b0d0d0d0d7175616e74696c6554696d696e672c20496e743332000300')::AggregateFunction(quantileTiming, Int32); -- { serverError INCORRECT_DATA }\nSELECT unhex('010001')::AggregateFunction(quantileTiming, Int32); -- { serverError INCORRECT_DATA }\nSELECT unhex('0a00797979797979797979790a0a6e')::AggregateFunction(minForEach, Ring); -- { serverError TOO_LARGE_ARRAY_SIZE }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02688_aggregate_states.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT 'ab' REGEXP 'a.*b';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02700_regexp_operator.sql",
    "error": "mismatched input 'REGEXP' expecting <EOF>"
  },
  {
    "query": "SELECT 'C\"' AS s,\nnormalizeUTF8NFC(s) s1,\nnormalizeUTF8NFD(s) s2,\nnormalizeUTF8NFKC(s) s3,\nnormalizeUTF8NFKD(s) s4,\nhex(s),\nhex(s1),\nhex(s2),\nhex(s3),\nhex(s4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02311_normalize_utf8_constant.sql",
    "error": "mismatched input 's3' expecting <EOF>"
  },
  {
    "query": "select 'foo\\\\'\\\\'bar' format Values;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02993_values_escape_quote.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "select 'foo\\\\'bar' format Values;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02993_values_escape_quote.sql",
    "error": "mismatched input ''' expecting <EOF>"
  },
  {
    "query": "SELECT 'Looking_at_transaction_id_False' FORMAT Null SETTINGS implicit_transaction=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02345_implicit_transaction.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT 'Looking_at_transaction_id_True' FORMAT Null SETTINGS implicit_transaction=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02345_implicit_transaction.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT 'The results of query: SELECT id, mapExtractKeyLike(map, \\\\'5-K1\\\\') FROM map_extractKeyLike_test ORDER BY id;';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql",
    "error": "mismatched input '5' expecting <EOF>"
  },
  {
    "query": "SELECT 'w\\\\0\\\\0ldworldwo\\\\0l\\\\0world' FROM grouping_sets\nGROUP BY\nGROUPING SETS (\n( fact_4_id),\n( NULL),\n( fact_3_id, fact_4_id))\nORDER BY\nNULL ASC,\nNULL DESC NULLS FIRST,\nfact_3_id ASC,\nfact_3_id ASC NULLS LAST,\n'wo\\\\0ldworldwo\\\\0ldworld' ASC NULLS LAST,\n'w\\\\0\\\\0ldworldwo\\\\0l\\\\0world' DESC NULLS FIRST,\n'wo\\\\0ldworldwo\\\\0ldworld' ASC,\nNULL ASC NULLS FIRST,\nfact_4_id DESC NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT '{\"a\": \\\\'\\\\x41\\\\'}'::String;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03227_proper_parsing_of_cast_operator.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT ((1, 2), (2, 3), (3, 4)) FORMAT TSVWithNames SETTINGS legacy_column_name_of_tuple_literal = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01913_names_of_tuple_literal.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT (0 + 1 + 2 + 3 + 4)::Date AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (0.1, 0.2)::Tuple(Decimal(75, 70), Decimal(75, 70));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_2.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (0.1::Decimal(4, 4) * 5)::Float64 AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (0.1::Decimal(4, 4) + 0.2::Decimal(4, 4) + 0.3::Decimal(4, 4))::Decimal(4, 4) AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (1 + 2)::UInt32 AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (1, 'foo')::Tuple(a Int, b String,);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_trailing_commas.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (1, 'foo')::Tuple(a Int, b String,,); -- { clientError SYNTAX_ERROR } SELECT (1, 'foo')::Tuple(Int, String,);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_trailing_commas.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (1, (2,'foo'))::Tuple(Int, Tuple(Int, String,),);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_trailing_commas.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select (number % 2 ? NULL : number)::Dynamic as d, dynamicType(d) from numbers(3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_dynamic_conversions.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (number * 2)::Int128 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM -3 TO 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_with_fill_int256_int.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (number * 2)::Int128 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM 3 TO 8;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_with_fill_int256_int.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (number * 2)::Int256 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM -3 TO 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_with_fill_int256_int.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (number * 2)::Int256 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM 3 TO 8;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_with_fill_int256_int.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (number * 2)::UInt128 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM 3 TO 8;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_with_fill_int256_int.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (number * 2)::UInt256 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM 3 TO 8;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_with_fill_int256_int.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT (number IS NULL)::Boolean, now() FROM numbers(2) GROUP BY (number IS NULL)::Boolean, now() FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03206_is_null_constant_result_old_analyzer_bug.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT * APPLY (x -> toString(x)) APPLY (x -> length(x)) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT * APPLY (x -> toString(x)) APPLY length FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT * APPLY (x -> toString(x)) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT * APPLY lambda(tuple(x), x + 1) FROM numbers(5);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02128_apply_lambda_parsing.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT * APPLY x->argMax(x, number) FROM numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers2.sql",
    "error": "mismatched input '->' expecting <EOF>"
  },
  {
    "query": "SELECT * APPLY(sum) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT * EXCEPT id REPLACE (5 AS id, 6 as value) APPLY toString FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT * EXCEPT STRICT (i, j) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT * EXCEPT STRICT (id, value1) FROM test_table; -- { serverError BAD_ARGUMENTS } SELECT * REPLACE STRICT (1 AS id, 2 AS value) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02343_analyzer_column_transformers_strict.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT * EXCEPT STRICT i, j1 from columns_transformers; -- { serverError UNKNOWN_IDENTIFIER } SELECT * EXCEPT STRICT(i, j1) from columns_transformers; -- { serverError NO_SUCH_COLUMN_IN_TABLE , BAD_ARGUMENTS }\nSELECT * REPLACE STRICT i + 1 AS i from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM ( SELECT [dummy, dummy] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN system.one AS y ON x.dummy + 1 == y.dummy + 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'JOIN' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM ( SELECT [dummy, dummy] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN system.one AS y ON x.dummy == y.dummy;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'JOIN' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM ( SELECT [dummy, dummy] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN system.one AS y USING dummy;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'JOIN' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM ( SELECT [toUInt32(dummy), toUInt32(dummy)] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN (select toInt32(dummy) as dummy from system.one ) AS y USING dummy;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'JOIN' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM ( SELECT number AS key, number * 10 AS key2 FROM numbers_mt(10) ) AS t1 JOIN ( SELECT k AS key, k + 100 AS key2 FROM t2 ) AS t2 ON t1.key = t2.key OR t1.key2 = t2.key2; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM ( SELECT number AS key, number * 10 AS key2 FROM numbers_mt(10) ) AS t1\nCROSS JOIN ( SELECT k AS key, k + 100 AS key2 FROM t2 ) AS t2 FORMAT Null\nSETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02815_join_algorithm_setting.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [0] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 0 AS id) AS subquery_2 USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [0] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [0] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [1] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 0 AS id) AS subquery_2 USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [1] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [1] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [5] AS id) AS subquery_1 ARRAY JOIN [1,2,3] AS id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [5] AS id_array) AS subquery ARRAY JOIN id_array, [0] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [[0]] AS id) AS subquery ARRAY JOIN id AS id_nested_array ARRAY JOIN id_nested_array AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'ARRAY' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM (SELECT [dummy, dummy] AS dummy FROM system.one) AS subquery ARRAY JOIN dummy INNER JOIN system.one USING (dummy);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM data WHERE v1 >= now() - INTERVAL 180 DAY FORMAT Null SETTINGS max_threads=1, max_final_threads=1, force_data_skipping_indices='v1_index', merge_tree_min_rows_for_seek=0, max_rows_to_read=1999999;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02781_data_skipping_index_merge_tree_min_for_seek.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select * from dist_01757 where dummy in (0, 1) format Null settings optimize_skip_unused_shards_limit=2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01757_optimize_skip_unused_shards_limit.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select * from dist_01757 where dummy in (0, 1) settings optimize_skip_unused_shards_limit=1; -- { serverError UNABLE_TO_SKIP_UNUSED_SHARDS } select * from dist_01757 where dummy = 0 or dummy = 1 settings optimize_skip_unused_shards_limit=1; -- { serverError UNABLE_TO_SKIP_UNUSED_SHARDS }\nselect * from dist_01757 where dummy = 0 or dummy = 1 format Null settings optimize_skip_unused_shards_limit=2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01757_optimize_skip_unused_shards_limit.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select * from lc_null_int8_defnull values;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00688_low_cardinality_nullable_cast.sql",
    "error": "mismatched input 'values' expecting <EOF>"
  },
  {
    "query": "select * from m; -- { serverError NOT_IMPLEMENTED } commit; -- { serverError INVALID_TRANSACTION } -- after 48\nrollback;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01173_transaction_control_queries.sql",
    "error": "mismatched input 'rollback' expecting <EOF>"
  },
  {
    "query": "select * from named_tuples format JSONEachRow settings output_format_json_named_tuples_as_objects = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01499_json_named_tuples.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select * from numbers(10) FORMAT JSONCompact settings max_result_rows = 10, output_format_write_statistics = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01553_settings_early_apply.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select * from numbers(100) settings max_result_rows = 1; -- { serverError TOO_MANY_ROWS_OR_BYTES } select * from numbers(100) FORMAT JSON settings max_result_rows = 1; -- { serverError TOO_MANY_ROWS_OR_BYTES }\nselect * from numbers(100) FORMAT TSVWithNamesAndTypes settings max_result_rows = 1; -- { serverError TOO_MANY_ROWS_OR_BYTES }\nselect * from numbers(100) FORMAT CSVWithNamesAndTypes settings max_result_rows = 1; -- { serverError TOO_MANY_ROWS_OR_BYTES }\nselect * from numbers(100) FORMAT JSONCompactEachRowWithNamesAndTypes settings max_result_rows = 1; -- { serverError TOO_MANY_ROWS_OR_BYTES }\nselect * from numbers(100) FORMAT XML settings max_result_rows = 1; -- { serverError TOO_MANY_ROWS_OR_BYTES }\nSET max_result_rows = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01553_settings_early_apply.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM sharded_table FORMAT Null SETTINGS log_comment='02985_shard_query_start_time_query_1';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_shard_query_start_time.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM t_v FORMAT JSON SETTINGS extremes = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01660_second_extremes_bug.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM table1 AS t1 ALL LEFT JOIN (SELECT *, '0.10', c, d AS b FROM table2) AS t2 USING (a, b) ORDER BY d, t1.a ASC FORMAT PrettyCompact settings max_rows_in_join = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01671_merge_join_and_constants.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM table_that_do_not_exists; -- { serverError UNKNOWN_TABLE } SELECT current_value - previous_value\nFROM (\nSELECT event, value as current_value FROM system.events WHERE event like 'FailedSelectQuery'\n) AS previous\nALL LEFT  JOIN (\nSELECT event, value as previous_value FROM current_failed_query_metrics\n) AS current\non previous.event = current.event;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01281_unsucceeded_insert_select_queries_counter.sql",
    "error": "mismatched input 'FROM' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM test_01073_crlf_end_of_line FORMAT CSV SETTINGS output_format_csv_crlf_end_of_line = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01073_crlf_end_of_line.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM test_01073_crlf_end_of_line FORMAT CSV SETTINGS output_format_csv_crlf_end_of_line = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01073_crlf_end_of_line.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM test_01073_crlf_end_of_line FORMAT TSV SETTINGS output_format_tsv_crlf_end_of_line = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01073_crlf_end_of_line.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT * FROM test_01073_crlf_end_of_line FORMAT TSV SETTINGS output_format_tsv_crlf_end_of_line = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01073_crlf_end_of_line.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select * from test_02902 format JSONEachRow settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02902_json_skip_null_values.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select * from test_02902 format JSONEachRow settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02902_json_skip_null_values.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select * from v4test_array_joins array join arr_1, arr_2, arr_3, arr_4 where match(arr_4,'a') and id < 100 order by id format Null settings optimize_read_in_order = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02811_read_in_order_and_array_join_bug.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select * from v4test_array_joins array join columns('^arr') where match(arr_4,'a') and id < 100 order by id format Null settings optimize_read_in_order = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02833_array_join_columns.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT * REPLACE (5 AS id) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT * REPLACE (5 AS id, 6 as value) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT * REPLACE STRICT (1 AS id, 2 AS value_1) FROM test_table; -- { serverError BAD_ARGUMENTS } DROP TABLE IF EXISTS test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02343_analyzer_column_transformers_strict.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT * REPLACE STRICT(i + 1 AS col) from columns_transformers; -- { serverError NO_SUCH_COLUMN_IN_TABLE, BAD_ARGUMENTS } SELECT * REPLACE(i + 1 AS i) APPLY(sum) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT * REPLACE substring(license_text, 1, position(license_text, '\\\\n')) AS license_text FROM system.licenses WHERE library_name = 'poco' FORMAT Vertical;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02813_system_licenses_base.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT * replace(2 as x)  FROM (SELECT 1 AS x) t;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03051_many_ctes.sql",
    "error": "mismatched input 'replace' expecting <EOF>"
  },
  {
    "query": "SELECT * REPLACE({test_a:UInt32} as number) FROM numbers(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02579_parameterized_replace.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT *,\n* APPLY (toTypeName)\nFROM\n(\nSELECT\nbl,\nanyIf(n, cond) IGNORE NULLS AS any_ignore,\nanyIf(n, cond) RESPECT NULLS AS any_respect,\nanyLastIf(n, cond) IGNORE NULLS AS last_ignore,\nanyLastIf(n, cond) RESPECT NULLS AS last_respect,\nanyIf(nullable_n, cond) IGNORE NULLS AS any_nullable_ignore,\nanyIf(nullable_n, cond) RESPECT NULLS AS any_nullable_respect,\nanyLastIf(nullable_n, cond) IGNORE NULLS AS last_nullable_ignore,\nanyLastIf(nullable_n, cond) RESPECT NULLS AS last_nullable_respect\nFROM\n(\nSELECT\nnumber AS n,\nrand() > pow(2, 31) as cond,\nif(cond, NULL, n) as nullable_n,\nblockNumber() AS bl\nFROM numbers(10000)\n)\nGROUP BY bl\n)\nWHERE\nany_ignore != any_respect\nOR toTypeName(any_ignore) != toTypeName(any_respect)\nOR last_ignore != last_respect\nOR toTypeName(last_ignore) != toTypeName(last_respect)\nOR any_nullable_ignore != any_nullable_respect\nOR toTypeName(any_nullable_ignore) != toTypeName(any_nullable_respect)\nOR last_nullable_ignore != last_nullable_respect\nOR toTypeName(last_nullable_ignore) != toTypeName(last_nullable_respect);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_Nullable.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [0] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [1] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT *, id FROM (SELECT [[0]] AS id) AS subquery ARRAY JOIN id AS id_nested_array ARRAY JOIN id_nested_array AS id INNER JOIN test_table USING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql",
    "error": "mismatched input 'ARRAY' expecting <EOF>"
  },
  {
    "query": "SELECT *, toTypeName(*) FROM (SELECT * FROM system.numbers LIMIT 10) FORMAT Pretty SETTINGS output_format_pretty_display_footer_column_names_min_rows=9;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03169_display_column_names_in_footer.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT *, toTypeName(*) FROM (SELECT * FROM system.numbers LIMIT 100) FORMAT Pretty SETTINGS output_format_pretty_display_footer_column_names=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03169_display_column_names_in_footer.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT *, toTypeName(*) FROM (SELECT * FROM system.numbers LIMIT 100) FORMAT PrettyCompact SETTINGS output_format_pretty_display_footer_column_names=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03169_display_column_names_in_footer.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT *, toTypeName(*) FROM (SELECT * FROM system.numbers LIMIT 100) FORMAT PrettySpace SETTINGS output_format_pretty_display_footer_column_names=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03169_display_column_names_in_footer.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT -1::UInt64; -- { serverError CANNOT_PARSE_NUMBER } SELECT CAST(-1 AS UInt64); -- conversion with overflow\nSELECT [1.1, 2.3]::Array(Decimal(30, 20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select 0 from test_rows_compact_part limit 1 FORMAT JSONCompact settings exact_rows_before_limit = 0,output_format_write_statistics = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01913_exact_rows_before_limit.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select 0 from test_rows_compact_part limit 1 FORMAT JSONCompact settings exact_rows_before_limit = 1, output_format_write_statistics = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01913_exact_rows_before_limit.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select 0 from test_rows_wide_part limit 1 FORMAT JSONCompact settings exact_rows_before_limit = 0,output_format_write_statistics = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01913_exact_rows_before_limit.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select 0 from test_rows_wide_part limit 1 FORMAT JSONCompact settings exact_rows_before_limit = 1, output_format_write_statistics = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01913_exact_rows_before_limit.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT 02339_db.test_table.COLUMNS('i'), 02339_db.test_table.COLUMNS('v') FROM 02339_db.test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT 02339_db.test_table.COLUMNS(id) FROM 02339_db.test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT 02339_db.test_table.COLUMNS(id), 02339_db.test_table.COLUMNS(value) FROM 02339_db.test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT 1 ') as QUERY_GROUP_ID, count()\nFROM system.query_log\nWHERE current_database = currentDatabase() AND type<>1 and event_date >= yesterday() and QUERY_GROUP_ID<>''\nGROUP BY QUERY_GROUP_ID\nORDER BY QUERY_GROUP_ID;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql",
    "error": "mismatched input '') as QUERY_GROUP_ID, count()\\nFROM system.query_log\\nWHERE current_database = currentDatabase() AND type<>1 and event_date >= yesterday() and QUERY_GROUP_ID<>'' expecting <EOF>"
  },
  {
    "query": "SELECT 1 * 1000.0001,\n(count(1.) = -2147483647) AND (count(a) = 1.1920928955078125e-7) AND (count(val) = 1048577) AND (sum(val) = ((NULL * 1048576) / -9223372036854775807)) AND (sum(a) = ((9223372036854775806 * 10000000000.) / 1048575))\nFROM\n(\nSELECT\na,\nval\nFROM t1\nFULL OUTER JOIN t2 ON (t1.a = t2.key) OR (1 * inf) OR (t1.b = t2.key)\n)\nGROUP BY '65537'\nWITH CUBE\nFORMAT Null\nSETTINGS max_block_size = 100, join_use_nulls = 1, max_execution_time = 1., max_result_rows = 0, max_result_bytes = 0; -- { serverError TIMEOUT_EXCEEDED }\nDROP TABLE t1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_analyzer_with_cube_fuzz.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT 1 \\`array\\`, 2 \"union\";",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02725_alias_with_restricted_keywords.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT 1 AS x ORDERALL SELECT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00466_comments_in_keyword.sql",
    "error": "mismatched input 'SELECT' expecting <EOF>"
  },
  {
    "query": "SELECT 1 DIV \\`MOD\\` \\`DIV\\` FROM (SELECT 1 \\`MOD\\`) FORMAT TSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01638_div_mod_ambiguities.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "select 1 format Template settings format_template_row='01070_nonexistent_file.txt'; -- { clientError FILE_DOESNT_EXIST } select 1 format Template settings format_template_row='/dev/null'; -- { clientError INVALID_TEMPLATE_FORMAT }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01070_template_empty_file.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select 1 union all select 1 intersect select 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "mismatched input 'intersect' expecting <EOF>"
  },
  {
    "query": "select 1 union all select 1 intersect select 2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "mismatched input 'intersect' expecting <EOF>"
  },
  {
    "query": "select 1 union all select 2  except (select 2 except select 1 union all select 1) except select 4;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "mismatched input 'except' expecting <EOF>"
  },
  {
    "query": "SELECT 1, FROM numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_trailing_commas.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT 1.1::Decimal(30, 20), CAST('1.1' AS Decimal(30, 20)), (1+1)::UInt8 FORMAT Vertical;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT 10 AS x FORMAT Vertical SETTINGS use_query_cache = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_bugs.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT 10 FORMAT Vertical SETTINGS use_query_cache = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_bugs.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select 11; -- TODO: remove toDecimal() select\nps_partkey,\nsum(ps_supplycost * ps_availqty) as value\nfrom\npartsupp,\nsupplier,\nnation\nwhere\nps_suppkey = s_suppkey\nand s_nationkey = n_nationkey\nand n_name = 'GERMANY'\ngroup by\nps_partkey having\nsum(ps_supplycost * ps_availqty) > (\nselect\nsum(ps_supplycost * ps_availqty) * toDecimal64('0.0100000000', 2)\nfrom\npartsupp,\nsupplier,\nnation\nwhere\nps_suppkey = s_suppkey\nand s_nationkey = n_nationkey\nand n_name = 'GERMANY'\n)\norder by\nvalue desc;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01095_tpch_like_smoke.sql",
    "error": "mismatched input 'ps_partkey' expecting <EOF>"
  },
  {
    "query": "select 17, 'fail: correlated subquery'; -- TODO: Missing columns: 'p_partkey' select\nsum(l_extendedprice) / 7.0 as avg_yearly\nfrom\nlineitem,\npart\nwhere\np_partkey = l_partkey\nand p_brand = 'Brand#23'\nand p_container = 'MED BOX'\nand l_quantity < (\nselect\n0.2 * avg(l_quantity)\nfrom\nlineitem\nwhere\nl_partkey = p_partkey\n); -- { serverError UNSUPPORTED_METHOD, 47 }\nselect 18;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01095_tpch_like_smoke.sql",
    "error": "mismatched input 'sum' expecting <EOF>"
  },
  {
    "query": "select 1; #! SELECT # hello\n1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02192_comment.sql",
    "error": "mismatched input '#' expecting <EOF>"
  },
  {
    "query": "SELECT 2 AS x,\narrayJoin([NULL, NULL, NULL])\nGROUP BY\nGROUPING SETS (\n(0),\n([NULL, NULL, NULL]))\nORDER BY x ASC WITH FILL FROM 1 TO 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02579_fill_empty_chunk_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select 2, 'fail: correlated subquery'; -- TODO: Missing columns: 'p_partkey' select\ns_acctbal,\ns_name,\nn_name,\np_partkey,\np_mfgr,\ns_address,\ns_phone,\ns_comment\nfrom\npart,\nsupplier,\npartsupp,\nnation,\nregion\nwhere\np_partkey = ps_partkey\nand s_suppkey = ps_suppkey\nand p_size = 15\nand p_type like '%BRASS'\nand s_nationkey = n_nationkey\nand n_regionkey = r_regionkey\nand r_name = 'EUROPE'\nand ps_supplycost = (\nselect\nmin(ps_supplycost)\nfrom\npartsupp,\nsupplier,\nnation,\nregion\nwhere\np_partkey = ps_partkey\nand s_suppkey = ps_suppkey\nand s_nationkey = n_nationkey\nand n_regionkey = r_regionkey\nand r_name = 'EUROPE'\n)\norder by\ns_acctbal desc,\nn_name,\ns_name,\np_partkey\nlimit 100; -- { serverError UNSUPPORTED_METHOD, 47 }\nselect 3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01095_tpch_like_smoke.sql",
    "error": "mismatched input 's_acctbal' expecting <EOF>"
  },
  {
    "query": "select 20, 'fail: correlated subquery'; -- TODO: Missing columns: 'ps_suppkey' 'ps_partkey' select\ns_name,\ns_address\nfrom\nsupplier,\nnation\nwhere\ns_suppkey in (\nselect\nps_suppkey\nfrom\npartsupp\nwhere\nps_partkey in (\nselect\np_partkey\nfrom\npart\nwhere\np_name like 'forest%'\n)\nand ps_availqty > (\nselect\n0.5 * sum(l_quantity)\nfrom\nlineitem\nwhere\nl_partkey = ps_partkey\nand l_suppkey = ps_suppkey\nand l_shipdate >= date '1994-01-01'\nand l_shipdate < date '1994-01-01' + interval '1' year\n)\n)\nand s_nationkey = n_nationkey\nand n_name = 'CANADA'\norder by\ns_name; -- { serverError UNSUPPORTED_METHOD, 47 }\nselect 21, 'fail: exists, not exists'; -- TODO\nselect 22, 'fail: not exists'; -- TODO\nDROP TABLE part;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01095_tpch_like_smoke.sql",
    "error": "mismatched input 's_name' expecting <EOF>"
  },
  {
    "query": "SELECT 3 + 3 from numbers(10) GROUP BY GROUPING SETS (('str'), (3 + 3)) order by all;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03013_group_by_use_nulls_with_materialize_and_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT 3.5 MOD 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01412_mod_float.sql",
    "error": "mismatched input '0' expecting <EOF>"
  },
  {
    "query": "SELECT 36 AS n, toDate('2000-01-01') + n AS d, (n, d) AS tuple FROM system.numbers LIMIT 1 FORMAT RowBinaryWithNamesAndTypes SETTINGS allow_experimental_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00309_formats.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select 42 as num, [42, 42] as arr, [[[42, 42], [42, 42]], [[42, 42]]] as nested_arr, tuple(42, 42)::Tuple(a UInt32, b UInt32) as tuple, tuple(tuple(tuple(42, 42), 42), 42)::Tuple(a Tuple(b Tuple(c UInt32, d UInt32), e UInt32), f UInt32) as nested_tuple, map(42, 42, 24, 24) as map, map(42, map(42, map(42, 42))) as nested_map, [tuple(map(42, 42), [42, 42]), tuple(map(42, 42), [42, 42])]::Array(Tuple(Map(UInt32, UInt32), Array(UInt32))) as nested_types, '{\"a\" : {\"b\" : 1, \"c\" : 2}}'::Object('json') as json_object format PrettyNDJSON;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02717_pretty_json.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select 42424.4242424242::Float64 as x, [42.42::Float64, 42.42::Float64] as arr, tuple(42.42::Float64) as tuple format JSONEachRow settings output_format_json_quote_64bit_floats=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02423_json_quote_float64.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select 42424.4242424242::Float64 as x, [42.42::Float64, 42.42::Float64] as arr, tuple(42.42::Float64) as tuple format JSONEachRow settings output_format_json_quote_64bit_floats=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02423_json_quote_float64.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT ['2010-10-10', '2010-10-10']::Array(Date) AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [(1, 'a'), (3, 'b')]::Nested(u UInt8, s String) AS t, toTypeName(t);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_2.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [-1, -2, -3]::Array(Int16) AS x, [4, 5, 6]::Array(Int16) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [-1, -2, -3]::Array(Int32) AS x, [4, 5, 6]::Array(Int32) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [-1, -2, -3]::Array(Int64) AS x, [4, 5, 6]::Array(Int64) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [-1, -2, -3]::Array(Int8) AS x, [4, 5, 6]::Array(Int8) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [-1, 2, -3]::Array(Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_3.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [-1.1, 2, -3]::Array(Float64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_3.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 1 + 1, 1 + 2]::Array(UInt32) AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 2, 3] :: Array(Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_2.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 2, 3]::Array(Float32) AS x, [4, 5, 6]::Array(Float32) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 2, 3]::Array(Float64) AS x, [4, 5, 6]::Array(Float64) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 2, 3]::Array(UInt16) AS x, [4, 5, 6]::Array(UInt16) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 2, 3]::Array(UInt32) AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 2, 3]::Array(UInt32) AS x, [4, 5, 6]::Array(UInt32) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 2, 3]::Array(UInt64) AS x, [4, 5, 6]::Array(UInt64) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1, 2, 3]::Array(UInt8) AS x, [4, 5, 6]::Array(UInt8) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1,2,3]::Array(UInt64)[[number, number]::Array(UInt8)[number]::UInt64]::UInt8 from numbers(3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_4.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1.1, 2.3 + 0]::Array(Decimal(30, 20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [1::UInt32, 2::UInt32]::Array(UInt64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_2.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [3,4,5]::Array(Int64)[2]::Int8;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_4.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [3,4,5][1]::Int32;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_4.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select [42]::Array(LowCardinality(UInt64)); -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY} select [[[42]]]::Array(Array(Array(LowCardinality(UInt64)))); -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\nselect map('a', 42)::Map(String, LowCardinality(UInt64)); -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\nselect map('a', map('b', [42]))::Map(String, Map(String, Array(LowCardinality(UInt64)))); -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\nselect tuple('a', 42)::Tuple(String, LowCardinality(UInt64)); -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\nselect tuple('a', [map('b', 42)])::Tuple(String, Array(Map(String, LowCardinality(UInt64)))); -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\ncreate table test (x Array(LowCardinality(UInt64))) engine=Memory; -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\ncreate table test (x Array(Array(LowCardinality(UInt64)))) engine=Memory; -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\ncreate table test (x Map(String, LowCardinality(UInt64))) engine=Memory; -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\ncreate table test (x Map(String, Map(String, LowCardinality(UInt64)))) engine=Memory; -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\ncreate table test (x Tuple(String, LowCardinality(UInt64))) engine=Memory; -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\ncreate table test (x Tuple(String, Array(Map(String, LowCardinality(UInt64))))) engine=Memory; -- {serverError SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY}\nselect ['42']::Array(FixedString(1000000)); -- {serverError ILLEGAL_COLUMN}\nselect ['42']::Array(FixedString(1000000)); -- {serverError ILLEGAL_COLUMN}\nselect [[['42']]]::Array(Array(Array(FixedString(1000000)))); -- {serverError ILLEGAL_COLUMN}\nselect map('a', '42')::Map(String, FixedString(1000000)); -- {serverError ILLEGAL_COLUMN}\nselect map('a', map('b', ['42']))::Map(String, Map(String, Array(FixedString(1000000)))); -- {serverError ILLEGAL_COLUMN}\nselect tuple('a', '42')::Tuple(String, FixedString(1000000)); -- {serverError ILLEGAL_COLUMN}\nselect tuple('a', [map('b', '42')])::Tuple(String, Array(Map(String, FixedString(1000000)))); -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Array(FixedString(1000000))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Array(Array(FixedString(1000000)))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Map(String, FixedString(1000000))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Map(String, Map(String, FixedString(1000000)))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Tuple(String, FixedString(1000000))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Tuple(String, Array(Map(String, FixedString(1000000))))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\nselect [42]::Array(Variant(String, UInt64)); -- {serverError ILLEGAL_COLUMN}\nselect [[[42]]]::Array(Array(Array(Variant(String, UInt64)))); -- {serverError ILLEGAL_COLUMN}\nselect map('a', 42)::Map(String, Variant(String, UInt64)); -- {serverError ILLEGAL_COLUMN}\nselect map('a', map('b', [42]))::Map(String, Map(String, Array(Variant(String, UInt64)))); -- {serverError ILLEGAL_COLUMN}\nselect tuple('a', 42)::Tuple(String, Variant(String, UInt64)); -- {serverError ILLEGAL_COLUMN}\nselect tuple('a', [map('b', 42)])::Tuple(String, Array(Map(String, Variant(String, UInt64)))); -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Array(Variant(String, UInt64))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Array(Array(Variant(String, UInt64)))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Map(String, Variant(String, UInt64))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Map(String, Map(String, Variant(String, UInt64)))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Tuple(String, Variant(String, UInt64))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\ncreate table test (x Tuple(String, Array(Map(String, Variant(String, UInt64))))) engine=Memory; -- {serverError ILLEGAL_COLUMN}\nset allow_experimental_variant_type=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02981_nested_bad_types.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [[1, 2, 3], [], [1]]::Array(Array(UInt32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [[1][1]]::Array(UInt32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT [[], []]::Array(Array(UInt32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT []::Array(Float32) AS x, []::Array(Float32) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT []::Array(UInt8) AS x, []::Array(UInt8) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT a \\`test2.a\\` FROM test1 PASTE JOIN test2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT a FROM t_max_rows_to_read ORDER BY a LIMIT 20 FORMAT Null SETTINGS max_rows_to_read = 12; -- { serverError TOO_MANY_ROWS } SELECT a FROM t_max_rows_to_read WHERE a > 10 ORDER BY a LIMIT 5 FORMAT Null SETTINGS max_rows_to_read = 12; -- { serverError TOO_MANY_ROWS }\nSELECT a FROM t_max_rows_to_read WHERE a = 10 OR a = 20 FORMAT Null SETTINGS max_rows_to_read = 4; -- { serverError TOO_MANY_ROWS }\nDROP TABLE t_max_rows_to_read;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select a, b, c, sum(a) as s from remote('127.0.0.{2,3}', currentDatabase(), t_2354_dist_with_external_aggr)\ngroup by a, b, c\nformat Null\nsettings max_memory_usage = '5Gi', max_result_rows = 0, max_result_bytes = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02354_distributed_with_external_aggregation_memory_usage.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT a.* APPLY(toDate) APPLY(any) from columns_transformers a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT a.* APPLY(toDate) EXCEPT(i, j) APPLY(any) from columns_transformers a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT a.* APPLY(toDate) REPLACE STRICT(i + 1 AS i) APPLY(any) from columns_transformers a; -- { serverError NO_SUCH_COLUMN_IN_TABLE, BAD_ARGUMENTS } EXPLAIN SYNTAX SELECT * APPLY(sum) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select accurateCastOrDefault(dynamic, 'UInt32'), multiIf(number % 4 == 0, NULL, number % 4 == 1, number, number % 4 == 2, 'str_' || toString(number), range(number))::Dynamic as dynamic from numbers(8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03212_variant_dynamic_cast_or_default.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select accurateCastOrNull(dynamic, 'UInt32'), multiIf(number % 4 == 0, NULL, number % 4 == 1, number, number % 4 == 2, 'str_' || toString(number), range(number))::Dynamic as dynamic from numbers(8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03212_variant_dynamic_cast_or_default.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT ALL 'a';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01632_select_all_syntax.sql",
    "error": "mismatched input ''a'' expecting <EOF>"
  },
  {
    "query": "SELECT any(number) RESPECT NULLS from (Select if(number < 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT any(number) RESPECT NULLS from (Select if(number > 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT any(number) RESPECT NULLS from (Select NULL::Nullable(UInt8) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT any(number) RESPECT NULLS from numbers(0) SETTINGS aggregate_functions_null_for_empty = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT any(number) RESPECT NULLS from numbers(0);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT any(value) RESPECT NULLS FROM data_sparse_column;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02941_any_RESPECT_NULL_sparse_column.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT anyIf (number, isNull(number)) RESPECT NULLS from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT anyLastIf (number, isNull(number)) RESPECT NULLS from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT anyLastIf(n, cond) RESPECT NULLS,\nanyLastIf(nullable_n, cond) RESPECT NULLS\nFROM\n(\nSELECT\nnumber AS n,\nNULL as cond,\nnumber::Nullable(Int64) as nullable_n\nFROM numbers(10000)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_Nullable.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT anyOrNull(number) RESPECT NULLS from (Select if(number < 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT anyOrNull(number) RESPECT NULLS from (Select if(number > 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT anyOrNull(number) RESPECT NULLS from (Select NULL::Nullable(UInt8) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT anyOrNull(number) RESPECT NULLS from numbers(0);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "Select anyOrNull(tp) FROM (Select (number, number) as tp from numbers(10)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } Select anyOrNull(tp) FROM (Select (number, number) as tp from numbers(10)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT\nany(tp) AS default,\ntoTypeName(default) as default_type,\nany(tp) RESPECT NULLS AS respect,\ntoTypeName(respect) as respect_type\nFROM\n(\nSELECT (toLowCardinality(number), number) AS tp\nFROM numbers(10)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_Nullable.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT argMax(number, number + 1) FILTER(WHERE number != 99) FROM numbers(100) ;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02001_select_with_filter.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT argMax(read_rows, event_time_microseconds) FROM system.query_log WHERE 1 AND current_database = currentDatabase()\nAND query LIKE '%SELECT database, table FROM system.tables WHERE database = \\\\'information_schema\\\\' AND table = \\\\'tables\\\\';'\nAND type = 'QueryFinish';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03217_filtering_in_system_tables.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT argMax(read_rows, event_time_microseconds) FROM system.query_log WHERE 1 AND current_database = currentDatabase()\nAND query LIKE '%SELECT database, table, left(replica_name, 2) FROM system.replicas WHERE database = currentDatabase() AND table = \\\\'test_03217_system_tables_replica_1\\\\' AND replica_name LIKE \\\\'r1\\\\%\\\\';'\nAND type = 'QueryFinish';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03217_filtering_in_system_tables.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem ARRAY JOIN arrayMap(x -> splitByChar(x, elem), ['']) AS unused; -- { serverError ILLEGAL_COLUMN } DROP TABLE test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql",
    "error": "mismatched input 'ARRAY' expecting <EOF>"
  },
  {
    "query": "SELECT arrayFilter(x -> notEmpty(concat(x, 'hello')), ['']) FROM system.one\nARRAY JOIN\n[0] AS elem,\narrayMap(x -> concat(x, ignore(ignore(toLowCardinality('03147_parquet_memory_tracking.parquet'), 37, 37, toUInt128(37), 37, 37, toLowCardinality(37), 37), 8, ignore(ignore(1., 36, 8, 8)), *), 'hello'), ['']) AS unused\nWHERE NOT ignore(elem)\nGROUP BY\nsum(ignore(ignore(ignore(1., 1, 36, 8, 8), ignore(52, 37, 37, '03147_parquet_memory_tracking.parquet', 37, 37, toUInt256(37), 37, 37, toNullable(37), 37, 37), 1., 1, 36, 8, 8), emptyArrayToSingle(arrayMap(x -> toString(x), arrayMap(x -> nullIf(x, 2), arrayJoin([[1]])))))) IGNORE NULLS,\nmodulo(toLowCardinality('03147_parquet_memory_tracking.parquet'), number, toLowCardinality(3)); -- { serverError UNKNOWN_IDENTIFIER }\nDROP TABLE test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02374_analyzer_array_join.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT arrayMap(x -> '.', range(number % 10)) AS k FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY GROUPING SETS ((k)) ORDER BY k settings group_by_use_nulls=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03023_group_by_use_nulls_analyzer_crashes.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT ax, c FROM (SELECT [1,2] ax, 0 c) ARRAY JOIN ax JOIN (SELECT 0 c) USING (c);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'JOIN' expecting <EOF>"
  },
  {
    "query": "select b'';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_parser_string_binary_literal.sql",
    "error": "mismatched input '''' expecting <EOF>"
  },
  {
    "query": "select b'0' == '\\\\0';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_parser_string_binary_literal.sql",
    "error": "mismatched input ''0'' expecting <EOF>"
  },
  {
    "query": "SELECT b'01000001'::String;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03227_proper_parsing_of_cast_operator.sql",
    "error": "mismatched input ''01000001'' expecting <EOF>"
  },
  {
    "query": "SELECT b.name name,\na.a_col a_col,\nb.b_col b_col,\n'N' some_val\nfrom test_a_table a\njoin test_b_table b on a.name = b.name\nwhere b.some_val = 'Y';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03045_analyzer_alias_join_with_if.sql",
    "error": "mismatched input 'name' expecting <EOF>"
  },
  {
    "query": "SELECT b.name name,\na.a_col a_col,\nb.b_col b_col,\nif(1,'N',b.some_val) some_val\nfrom test_a_table a\njoin test_b_table b on a.name = b.name\nwhere b.some_val = 'Y';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03045_analyzer_alias_join_with_if.sql",
    "error": "mismatched input 'name' expecting <EOF>"
  },
  {
    "query": "SELECT bitNot(bitNot(number)) + 3 FROM numbers(10) GROUP BY GROUPING SETS (('str', bitNot(bitNot(number))), ('str')) order by all;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03014_group_by_use_nulls_injective_functions_and_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT c AS x FROM tab FORMAT Vertical SETTINGS use_query_cache = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_bugs.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT c FROM tab FORMAT Vertical SETTINGS use_query_cache = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_bugs.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.COLUMNS('i') APPLY toString;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02342_analyzer_compound_types.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.COLUMNS('v') APPLY toString;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02342_analyzer_compound_types.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.COLUMNS(id) APPLY toString;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02342_analyzer_compound_types.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.COLUMNS(value) APPLY toString;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02342_analyzer_compound_types.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT cityHash64('limit', _CAST(materialize('World'), 'LowCardinality(String)')) FROM system.one GROUP BY GROUPING SETS ('limit');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02992_analyzer_group_by_const.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT col2, col2 + 1 FROM test1 FULL OUTER JOIN test2 USING (col1)\nPREWHERE (col2 * 2) :: UInt8\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_join_prewhere_bug.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT COLUMNS('[jk]') APPLY(toString) APPLY(length) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT COLUMNS(bar, foo) APPLY (length) FROM test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03152_analyzer_columns_list.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT COLUMNS(i, j, k) APPLY(quantiles(0.5)) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT COLUMNS(i, j, k) APPLY(sum) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT COLUMNS(id, value) REPLACE (5 AS id) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT COLUMNS(id, value) REPLACE (5 AS id, 6 as value) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT columns_transformers.* APPLY(avg) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT columns_transformers.* REPLACE(j + 1 AS j, j + 2 AS j) APPLY(avg) from columns_transformers; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } SELECT a.* APPLY(toDate) REPLACE(i + 1 AS i) APPLY(any) from columns_transformers a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT columns_transformers.* REPLACE(j + 2 AS j, i + 1 AS i) APPLY(avg) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input 'REPLACE' expecting <EOF>"
  },
  {
    "query": "SELECT count('Lambda as function parameter') AS c FROM (SELECT ignore(ignore('Lambda as function parameter', 28, 28, 28, 28, 28, 28), 28), materialize('Lambda as function parameter'), 28, 28, 'world', 5 FROM system.numbers WHERE ignore(materialize('Lambda as function parameter'), materialize(toLowCardinality(28)), 28, 28, 28, 28, toUInt128(28)) LIMIT 2) GROUP BY GROUPING SETS ((toLowCardinality(0)), (toLowCardinality(toNullable(28))), (1)) HAVING nullIf(c, 10) < 50 ORDER BY c ASC NULLS FIRST settings group_by_use_nulls=1; -- { serverError ILLEGAL_AGGREGATION } SELECT arraySplit(x -> 0, []) WHERE materialize(1) GROUP BY (0, ignore('a')) WITH ROLLUP SETTINGS group_by_use_nulls = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03023_group_by_use_nulls_analyzer_crashes.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select count() > 0 from system.text_log where level = 'Error' and message_format_string = 'Function with name {} does not exist. In scope {}{}' and value1 = '\\`conut\\`' and value2 = 'SELECT conut()' and value3 ilike '%\\\\'count\\\\'%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT count() AS amount, a, b, GROUPING(a, b) FROM test02315 GROUP BY GROUPING SETS ((a, b), (a), ()) ORDER BY (amount, a, b) SETTINGS force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02315_grouping_constant_folding.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count() AS amount, a, b, GROUPING(a, b) FROM test02315 GROUP BY GROUPING SETS ((a, b), (a, a), ()) ORDER BY (amount, a, b) SETTINGS force_grouping_standard_compatibility=0, enable_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02315_grouping_constant_folding.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count() AS amount, a, b, GROUPING(a, b) FROM test02416 GROUP BY GROUPING SETS ((a, b), (a), ()) ORDER BY (amount, a, b);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02416_grouping_function_compatibility.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count() as d, a, b, c\nFROM test02313\nGROUP BY GROUPING SETS\n(\n(c),\n(a, c),\n(b, c)\n)\nORDER BY d, a, b, c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02313_group_by_modifiers_with_non_default_types.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count() FROM numbers(2)\nGROUP BY\nGROUPING SETS (\n(number, number + 0, number + 1),\n(number % 1048576, number % -9223372036854775808),\n(number / 2, number / 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02705_grouping_keys_equal_keys.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count() FROM system.numbers FORMAT Null SETTINGS max_rows_to_read = 1, read_overflow_mode = 'break';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02385_profile_events_overflow.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select count() from system.query_log where current_database = currentDatabase() and\nquery like 'select \\\\'01231_log_queries_min_type w/ Settings/EXCEPTION_WHILE_PROCESSING%' and\nquery not like '%system.query_log%' and\nevent_date >= yesterday() and\ntype = 'ExceptionWhileProcessing' and\nSettings['max_rows_to_read'] != '';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01231_log_queries_min_type.sql",
    "error": "mismatched input '' and\\nSettings['' expecting <EOF>"
  },
  {
    "query": "select count() from system.query_log where current_database = currentDatabase() and query like 'select \\\\'01231_log_queries_min_type/EXCEPTION_WHILE_PROCESSING%'\nand event_date >= yesterday() and type = 'ExceptionWhileProcessing';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01231_log_queries_min_type.sql",
    "error": "mismatched input ''' expecting <EOF>"
  },
  {
    "query": "select count(), * from dist_01247 group by number offset 1 settings distributed_push_down_limit=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01244_optimize_distributed_group_by_sharding_key.sql",
    "error": "mismatched input 'offset' expecting <EOF>"
  },
  {
    "query": "select count(), * from dist_01247 group by number order by count(), number offset 1 settings distributed_push_down_limit=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01244_optimize_distributed_group_by_sharding_key.sql",
    "error": "mismatched input 'offset' expecting <EOF>"
  },
  {
    "query": "SELECT count(), arrayMap(x -> '.', range(number % 10)) AS k FROM remote('127.0.0.{1,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), arrayMap(x -> '.', range(number % 10)) AS k FROM remote('127.0.0.{1,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k), (k, k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), arrayMap(x -> '.', range(number % 10)) AS k FROM remote('127.0.0.{3,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), arrayMap(x -> '.', range(number % 10)) AS k FROM remote('127.0.0.{3,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k), (k, k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), toString(number) AS k FROM remote('127.0.0.{1,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), toString(number) AS k FROM remote('127.0.0.{1,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k), (k, k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), toString(number) AS k FROM remote('127.0.0.{1,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k), (number + 1, k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), toString(number) AS k FROM remote('127.0.0.{1,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k), (number + 1, k), (k, number + 2)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), toString(number) AS k FROM remote('127.0.0.{3,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), toString(number) AS k FROM remote('127.0.0.{3,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k), (k, k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), toString(number) AS k FROM remote('127.0.0.{3,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k), (number + 1, k)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(), toString(number) AS k FROM remote('127.0.0.{3,2}', numbers(10)) where number > ( queryID() = initialQueryID()) GROUP BY GROUPING SETS ((k), (number + 1, k), (k, number + 2)) ORDER BY k settings group_by_two_level_threshold=9, max_bytes_before_external_group_by=10000000000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(*) FILTER (WHERE uid > 2000) FROM users;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03003_count_asterisk_filter.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(name) FILTER (WHERE uid > 2000) FROM users;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03003_count_asterisk_filter.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT count(NULL) IGNORE NULLS > avg(toDecimal32(NULL)) IGNORE NULLS, count() FROM numbers(1000) WITH TOTALS SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03007_column_nullable_uninitialzed_value.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT d, c, row_number() over (partition by d order by c) as c8 FROM t qualify c8=1 order by d settings max_threads=2, allow_experimental_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.sql",
    "error": "mismatched input '=' expecting <EOF>"
  },
  {
    "query": "SELECT d_ids, id, name FROM f LEFT ARRAY JOIN d_ids LEFT JOIN d ON d.id = d_ids ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'LEFT' expecting <EOF>"
  },
  {
    "query": "SELECT did, id, name FROM f LEFT ARRAY JOIN d_ids as did LEFT JOIN d ON d.id = did ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'LEFT' expecting <EOF>"
  },
  {
    "query": "select dim1, dim2, count() from test group by grouping sets ((dim1, dim2), dim1) order by dim1, dim2, count();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01710_aggregate_projection_with_grouping_set.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT DIV \\`MOD\\` FROM (SELECT 1 \\`DIV\\`) FORMAT TSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01638_div_mod_ambiguities.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT DIV MOD 1 FROM (SELECT 1 \\`DIV\\`) FORMAT TSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01638_div_mod_ambiguities.sql",
    "error": "mismatched input '1' expecting <EOF>"
  },
  {
    "query": "SELECT dummy > 0, toTypeName(any(dummy)), any(toTypeName(dummy)) FROM ( SELECT [toUInt32(dummy), toUInt32(dummy)] AS dummy FROM system.one ) AS x ARRAY JOIN dummy\nJOIN ( SELECT toInt32(dummy) AS dummy FROM system.one ) AS y USING dummy GROUP BY (dummy > 0);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'JOIN' expecting <EOF>"
  },
  {
    "query": "SELECT dummy FROM one l JOIN one r ON l.dummy = one.dummy; -- { serverError INVALID_JOIN_ON_EXPRESSION } SELECT * from one\nJOIN one A ON one.dummy = A.dummy\nJOIN one B ON one.dummy = B.dummy\nFORMAT PrettyCompact;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ambiguous_column.sql",
    "error": "mismatched input 'JOIN' expecting <EOF>"
  },
  {
    "query": "SELECT exp10(number) * (number % 2 ? 1 : -1) FROM numbers(30) FORMAT PrettySpace SETTINGS output_format_pretty_color = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03022_highlight_digit_groups.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT exp10(number) + exp10(-number) FROM numbers(10) FORMAT PrettySpace SETTINGS output_format_pretty_color = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03022_highlight_digit_groups.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT exp10(number) FROM numbers(10) FORMAT PrettySpace SETTINGS output_format_pretty_color = 1, output_format_pretty_highlight_digit_groups = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03022_highlight_digit_groups.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT extract(message, 'SeL.+?;') FROM system.text_log WHERE event_date >= yesterday() AND message LIKE '%SeLeCt \\\\'ab\\\\n%' ORDER BY event_time DESC LIMIT 1 FORMAT TSVRaw;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01319_query_formatting_in_server_log.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT extractAllGroups(NULL, 'worldworldworldwo\\\\0ldworldworldworldwo\\\\0ld'),\nfact_2_id,\nfact_3_id,\nfact_4_id\nFROM grouping_sets\nGROUP BY\nGROUPING SETS (\n(sales_value),\n(fact_1_id, fact_2_id),\n('wo\\\\0ldworldwo\\\\0ldworld'),\n(fact_3_id, fact_4_id))\nORDER BY\nfact_1_id DESC NULLS LAST,\nfact_1_id DESC NULLS FIRST,\nfact_2_id ASC,\nfact_3_id DESC NULLS FIRST,\nfact_4_id ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_1_id,\nfact_3_id,\nSUM(sales_value) AS sales_value\nFROM grouping_sets\nGROUP BY grouping sets ((fact_1_id), (fact_1_id, fact_3_id)) WITH TOTALS\nORDER BY fact_1_id, fact_3_id; -- { serverError NOT_IMPLEMENTED }\nEXPLAIN SYNTAX SELECT\nfact_1_id,\nfact_3_id,\nSUM(sales_value) AS sales_value\nFROM grouping_sets\nGROUP BY grouping sets (fact_1_id, (fact_1_id, fact_3_id)) WITH TOTALS\nORDER BY fact_1_id, fact_3_id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_with_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_1_id,\nfact_3_id,\nSUM(sales_value) AS sales_value\nFROM grouping_sets\nGROUP BY grouping sets (fact_1_id, (fact_1_id, fact_3_id)) WITH TOTALS\nORDER BY fact_1_id, fact_3_id; -- { serverError NOT_IMPLEMENTED }\nDROP TABLE grouping_sets;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_with_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_1_id, fact_2_id, fact_3_id, fact_4_id, SUM(sales_value) AS sales_value from grouping_sets GROUP BY GROUPING SETS ((fact_1_id, fact_2_id), (fact_3_id, fact_4_id))\nORDER BY fact_1_id, fact_2_id, fact_3_id, fact_4_id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_with_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_1_id, fact_2_id, fact_3_id, SUM(sales_value) AS sales_value from grouping_sets GROUP BY GROUPING SETS ((fact_1_id, fact_2_id), (fact_1_id, fact_3_id))\nORDER BY fact_1_id, fact_2_id, fact_3_id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_with_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_1_id, fact_2_id, fact_3_id, SUM(sales_value) AS sales_value from grouping_sets GROUP BY GROUPING SETS ((fact_1_id, fact_2_id), (fact_3_id), ())\nORDER BY fact_1_id, fact_2_id, fact_3_id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_with_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_1_id, fact_3_id, sum(sales_value), count() from grouping_sets GROUP BY GROUPING SETS(fact_1_id, fact_3_id) ORDER BY fact_1_id, fact_3_id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_with_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_3_id FROM grouping_sets\nGROUP BY\nGROUPING SETS (\n( 'wo\\\\0ldworldwo\\\\0ldworldwo\\\\0ldworldwo\\\\0ldworldwo\\\\0ldworldwo\\\\0ldworldwo\\\\0ldworldwo\\\\0ldworld'),\n( NULL),\n( fact_4_id),\n( fact_3_id, fact_4_id))\nORDER BY fact_3_id ASC NULLS FIRST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_3_id FROM grouping_sets\nGROUP BY\nGROUPING SETS ((fact_3_id, fact_4_id))\nORDER BY fact_3_id ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_3_id,\nfact_4_id\nFROM grouping_sets\nGROUP BY\nGROUPING SETS (\n('wo\\\\0ldworldwo\\\\0ldworld'),\n(fact_3_id, fact_4_id))\nORDER BY\nfact_3_id, fact_4_id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_3_id,\nfact_4_id\nFROM grouping_sets\nGROUP BY\nGROUPING SETS (\n(fact_1_id, fact_2_id),\n((-9223372036854775808, NULL, (tuple(1.), (tuple(1.), 1048576), 65535))),\n((tuple(3.4028234663852886e38), (tuple(1024), -2147483647), NULL)),\n(fact_3_id, fact_4_id))\nORDER BY\n(NULL, ('256', (tuple(NULL), NULL), NULL, NULL), NULL) ASC,\nfact_1_id DESC NULLS FIRST,\nfact_2_id DESC NULLS FIRST,\nfact_4_id ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_3_id, fact_4_id, count() FROM grouping_sets\nGROUP BY\nGROUPING SETS (\n( fact_3_id ),\n( fact_3_id, fact_4_id))\nORDER BY fact_3_id, fact_4_id\nSETTINGS optimize_aggregation_in_order=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_3_id, fact_4_id, count() FROM grouping_sets\nGROUP BY\nGROUPING SETS (\n( fact_3_id, fact_4_id))\nORDER BY fact_3_id, fact_4_id\nSETTINGS optimize_aggregation_in_order=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT fact_3_id, fact_4_id, count() FROM grouping_sets\nGROUP BY\nGROUPING SETS (\nfact_3_id,\nfact_4_id)\nORDER BY fact_3_id, fact_4_id\nSETTINGS optimize_aggregation_in_order=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_grouping_sets_crash.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select first_value(b) ignore nulls from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02662_first_last_value.sql",
    "error": "mismatched input 'nulls' expecting <EOF>"
  },
  {
    "query": "select first_value(b) respect nulls from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02662_first_last_value.sql",
    "error": "mismatched input 'nulls' expecting <EOF>"
  },
  {
    "query": "SELECT first_value(number) RESPECT NULLS IGNORE NULLS from numbers(1); -- { clientError SYNTAX_ERROR } SELECT formatQuery('SELECT first_value(number) RESPECT NULLS from numbers(1)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_parser.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "Select first_value_respect_nulls (number) IGNORE NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT first_valueIf (number, isNull(number)) RESPECT NULLS from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT first_valueIf (number, NOT isNull(number) AND (assumeNotNull(number) > 5)) RESPECT NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT formatReadableTimeDelta(1.1, 'seconds', 'hours'); -- { serverError BAD_ARGUMENTS } WITH\n'hours' AS maximum_unit,\n'microseconds' as minimum_unit,\narrayJoin([0, 3601.000000003]) AS elapsed\nSELECT\nformatReadableTimeDelta(elapsed, maximum_unit, minimum_unit);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_format_readable_timedelta_subseconds.sql",
    "error": "mismatched input ''hours'' expecting <EOF>"
  },
  {
    "query": "SELECT func(1)(2)(3); -- { clientError SYNTAX_ERROR } SELECT * FROM VALUES(1)(2); -- { clientError SYNTAX_ERROR }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02481_fix_parameters_parsing.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select functionThatDoesNotExist(); -- { serverError UNKNOWN_FUNCTION } commit; -- { serverError INVALID_TRANSACTION } -- after 46\nbegin transaction; -- { serverError INVALID_TRANSACTION }\nrollback;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01173_transaction_control_queries.sql",
    "error": "mismatched input 'begin' expecting <EOF>"
  },
  {
    "query": "select groupArray(groupArray(number)) over (rows unbounded preceding) as x from remote('127.0.0.{1,2}', '', t_01568) group by mod(number, 3) order by x settings distributed_group_by_no_merge=2; -- { serverError NOT_IMPLEMENTED } select p, o, count() over (partition by p)\nfrom remote('127.0.0.{1,2}', '',  t_01568)\norder by p, o;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01568_window_functions_distributed.sql",
    "error": "mismatched input 'from' expecting <EOF>"
  },
  {
    "query": "SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table GROUP BY GROUPING SETS ((id), (value)) ORDER BY grouping_id, grouping_value;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_analyzer_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table GROUP BY GROUPING SETS (id, value) ORDER BY grouping_id, grouping_value;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_analyzer_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT i, j, COLUMNS(i, j, k) APPLY(toFloat64), COLUMNS(i, j) EXCEPT (i) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT id FROM test\nFINAL\nGROUP BY\nGROUPING SETS ((id))\nORDER BY\nid IN (\nSELECT DISTINCT id\nFROM test\nFINAL\nLIMIT 4\n) ASC\nLIMIT 256 BY id\nFORMAT \\`NUll\\`\nSETTINGS allow_experimental_analyzer = 1, group_by_use_nulls=true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02535_analyzer_group_by_use_nulls.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT id, name FROM f LEFT ARRAY JOIN d_ids as id LEFT JOIN d ON d.id = id ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "mismatched input 'LEFT' expecting <EOF>"
  },
  {
    "query": "SELECT id, value, value_1, value_2 FROM test_table ARRAY JOIN [[1, 2, 3]] AS value_1 ARRAY JOIN value_1 AS value_2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02374_analyzer_array_join.sql",
    "error": "mismatched input 'ARRAY' expecting <EOF>"
  },
  {
    "query": "SELECT id, value, value_array_array, value_array_array_inner_element, value_array_array_inner_element, value_array_array_inner_inner_element FROM test_table ARRAY JOIN value_array_array AS value_array_array_inner_element\nARRAY JOIN value_array_array_inner_element AS value_array_array_inner_inner_element;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02374_analyzer_array_join.sql",
    "error": "mismatched input 'ARRAY' expecting <EOF>"
  },
  {
    "query": "SELECT ignore(3) from numbers(10) GROUP BY GROUPING SETS (('str'), (ignore(3))) order by all;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03013_group_by_use_nulls_with_materialize_and_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT ignore(materialize(3)) from numbers(10) GROUP BY GROUPING SETS (('str'), (ignore(materialize(3)))) order by all;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03013_group_by_use_nulls_with_materialize_and_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT ignore(toFixedString('Lambda as function parameter', 28), toNullable(28), ignore(8)), sum(marks) FROM system.parts WHERE database = currentDatabase() GROUP BY GROUPING SETS ((2)) FORMAT Null settings optimize_injective_functions_in_group_by=1, optimize_group_by_function_keys=1, group_by_use_nulls=1; -- { serverError ILLEGAL_AGGREGATION } SELECT toLowCardinality(materialize('a' AS key)),  'b' AS value GROUP BY key WITH CUBE SETTINGS group_by_use_nulls = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03023_group_by_use_nulls_analyzer_crashes.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT ignore(toLowCardinality(number)) FROM numbers(10) GROUP BY GROUPING SETS ((ignore(toLowCardinality(number)), toLowCardinality(number)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03023_analyzer_optimize_group_by_function_keys_with_nulls.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT intDiv(number, NULL) AS k FROM (SELECT * FROM remote('127.0.0.{2,3}', currentDatabase(), numbers500k) PREWHERE 31 WHERE 65537 > 0 ORDER BY number DESC NULLS FIRST) GROUP BY GROUPING SETS ((k)) WITH TOTALS ORDER BY k ASC NULLS LAST LIMIT 2147483648;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02835_fuzz_remove_redundant_sorting.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT is_initial_query,\ncount() as c, query,\nFROM system.query_log\nWHERE\nevent_date >= yesterday()\nAND type = 'QueryFinish'\nAND initial_query_id =\n(\nSELECT query_id\nFROM system.query_log\nWHERE\ncurrent_database = currentDatabase()\nAND event_date >= yesterday()\nAND type = 'QueryFinish'\nAND query LIKE '-- Simple query with analyzer and pure parallel replicas%'\n)\nGROUP BY is_initial_query, query\nORDER BY is_initial_query DESC, c, query;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02771_parallel_replicas_analyzer.sql",
    "error": "mismatched input 'system' expecting <EOF>"
  },
  {
    "query": "SELECT isNull(number)::Boolean, now() FROM numbers(2) GROUP BY isNull(number)::Boolean, now() FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03206_is_null_constant_result_old_analyzer_bug.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT isNullable(number)::Boolean, now() FROM numbers(2) GROUP BY isNullable(number)::Boolean, now() FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03206_is_null_constant_result_old_analyzer_bug.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT k,\ncount()\nFROM t1\nGROUP BY k\nORDER BY k\nSETTINGS force_primary_key = 1; -- { serverError INDEX_NOT_USED }\nDROP TABLE t1 SYNC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02946_parallel_replicas_force_primary_key.sql",
    "error": "mismatched input 'SYNC' expecting <EOF>"
  },
  {
    "query": "SELECT k1,\nk2,\nSUM(number) AS sum_value,\ncount() AS count_value\nFROM numbers(6)\nGROUP BY\nGROUPING SETS\n(\n(number % 2 AS k1),\n(number % 3 AS k2)\n)\nORDER BY\nsum_value ASC,\ncount_value ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT k1,\nk2,\nSUM(number) AS sum_value,\ncount() AS count_value\nFROM remote('127.0.0.{2,3}', numbers(6))\nGROUP BY\nGROUPING SETS\n(\n(number % 2 AS k1),\n(number % 3 AS k2)\n)\nORDER BY\nsum_value ASC,\ncount_value ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT k2,\nSUM(number) AS sum_value,\ncount() AS count_value\nFROM remote('127.0.0.{2,3}', numbers(6))\nGROUP BY\nGROUPING SETS\n(\n(number % 3 AS k2)\n)\nORDER BY\nsum_value ASC,\ncount_value ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02165_replicated_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select key, groupArray(repeat('a', 200)), count() from data_01513 group by key format Null settings optimize_aggregation_in_order=0; -- { serverError MEMORY_LIMIT_EXCEEDED } select key, groupArray(repeat('a', 200)), count() from data_01513 group by key format Null settings optimize_aggregation_in_order=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01513_optimize_aggregation_in_order_memory_long.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select key, groupArray(repeat('a', 200)), count() from data_01513 group by key with totals format Null settings optimize_aggregation_in_order=1; -- { serverError MEMORY_LIMIT_EXCEEDED } drop table data_01513;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01513_optimize_aggregation_in_order_memory_long.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT key, value1, value2, toUInt64(min(time)) AS start_ts FROM join_inner_table__fuzz_146 GROUP BY key, value1, value2 WITH CUBE ORDER BY key ASC NULLS LAST, value2 DESC NULLS LAST LIMIT 9223372036854775806 FORMAT Null\nSETTINGS\nmax_parallel_replicas = 3,\nprefer_localhost_replica = 1,\ncluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost',\nenable_parallel_replicas = 1,\nuse_hedged_requests = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02932_parallel_replicas_fuzzer.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select last_value(b) ignore nulls from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02662_first_last_value.sql",
    "error": "mismatched input 'nulls' expecting <EOF>"
  },
  {
    "query": "select last_value(b) respect nulls from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02662_first_last_value.sql",
    "error": "mismatched input 'nulls' expecting <EOF>"
  },
  {
    "query": "Select last_value_respect_nulls (number) IGNORE NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT last_valueIf (number, isNull(number)) RESPECT NULLS from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT last_valueIf (number, NOT isNull(number) AND (assumeNotNull(number) > 5)) RESPECT NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT left.x, (right.x IS NULL)::Boolean FROM left LEFT OUTER JOIN right ON left.x = right.x GROUP BY ALL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03206_is_null_constant_result_old_analyzer_bug.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT length(stack_trace) > 1000 FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \\\\'Hello\\\\', throwIf(1)%' AND query NOT LIKE '%system%' ORDER BY event_time_microseconds DESC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02796_calculate_text_stack_trace.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT length(stack_trace) FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \\\\'World\\\\', throwIf(1)%' AND query NOT LIKE '%system%' ORDER BY event_time_microseconds DESC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02796_calculate_text_stack_trace.sql",
    "error": "mismatched input '\\' expecting <EOF>"
  },
  {
    "query": "SELECT m1, m2, m3 FROM map_json FORMAT JSONEachRow SETTINGS output_format_json_quote_64bit_integers = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01939_type_map_json.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT map('key1', number, 'key2', number * 2) AS m FROM numbers(1, 1) FORMAT JSONEachRow\nSETTINGS output_format_json_quote_64bit_integers = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01939_type_map_json.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : 42, \"b\" : \"Hello\"}')::JSON;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : 42}')::JSON as json, toTypeName(json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03230_json_alias_new_old_types.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : [[1, {}], null]}')::JSON as json, getSubcolumn(json, 'a'), dynamicType(getSubcolumn(json, 'a'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03229_json_null_as_default_for_tuple.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON as json, JSONAllPathsWithTypes(json), JSONDynamicPathsWithTypes(json), JSONSharedDataPathsWithTypes(json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(a.b.c.d Bool);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(max_dynamic_paths = 0) as json, JSONAllPathsWithTypes(json), JSONDynamicPathsWithTypes(json), JSONSharedDataPathsWithTypes(json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(max_dynamic_paths = 0, max_dynamic_types=0) as json, JSONAllPathsWithTypes(json), JSONDynamicPathsWithTypes(json), JSONSharedDataPathsWithTypes(json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(max_dynamic_paths = 1) as json, JSONAllPathsWithTypes(json), JSONDynamicPathsWithTypes(json), JSONSharedDataPathsWithTypes(json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(max_dynamic_paths = 1, max_dynamic_types=0) as json, JSONAllPathsWithTypes(json), JSONDynamicPathsWithTypes(json), JSONSharedDataPathsWithTypes(json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(max_dynamic_paths = 2) as json, JSONAllPathsWithTypes(json), JSONDynamicPathsWithTypes(json), JSONSharedDataPathsWithTypes(json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(max_dynamic_paths = 2, max_dynamic_types=0) as json, JSONAllPathsWithTypes(json), JSONDynamicPathsWithTypes(json), JSONSharedDataPathsWithTypes(json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(SKIP a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(SKIP a.b);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(SKIP a.b.c);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(SKIP a.b.c.d);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(SKIP REGEXP '.*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(SKIP REGEXP '.*a.*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON(SKIP REGEXP '.*a.*b');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{\"a\" : {\"b\" : {\"c\" : {\"d\" : 42}, \"e\" : 43}, \"f\" : 44}, \"g\" : 44}')::JSON;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select materialize('{}')::JSON;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_json_cast_from_string.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT materialize(3) + 3 FROM numbers(10) GROUP BY GROUPING SETS (('str', materialize(materialize(3))), ('str')) order by all;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03014_group_by_use_nulls_injective_functions_and_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT materialize(3) from numbers(10) GROUP BY GROUPING SETS (('str'), (materialize(3))) order by all;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03013_group_by_use_nulls_with_materialize_and_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT materialize(id), toTypeName(id) FROM ( SELECT 'aaa' ) AS subquery\nARRAY JOIN [0] AS id\nINNER JOIN test_table\nUSING (id)\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03130_analyzer_array_join_prefer_column.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT materialize(id), toTypeName(id) FROM ( SELECT 'aaa' ) AS subquery\nARRAY JOIN [0] AS id\nINNER JOIN test_table\nUSING (id)\nSETTINGS prefer_column_name_to_alias = 1\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03130_analyzer_array_join_prefer_column.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT materialize(ignore(3)) from numbers(10) GROUP BY GROUPING SETS (('str'), (materialize(ignore(3)))) order by all;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03013_group_by_use_nulls_with_materialize_and_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT max(k) IGNORE NULLS FROM 03215_parallel_replicas WITH TOTALS SETTINGS enable_parallel_replicas = 1, max_parallel_replicas = 65535, prefer_localhost_replica = 0, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', parallel_replicas_single_task_marks_count_multiplier = -0; -- { serverError 36 } DROP TABLE IF EXISTS 03215_parallel_replicas;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_parallel_replicas_crash_after_refactoring.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT max(time),\nmax(toNullable(time)),\nmin(time),\nmin(toNullable(time)),\nargMax(value, time),\nargMax(value, toNullable(time)),\nargMin(value, time),\nargMin(value, toNullable(time)),\nargMinIf(value, toNullable(time), time != '2021-01-01 00:00:00.000'),\nargMaxIf(value, toNullable(time), time != '2021-01-01 00:00:59.000'),\nFROM test\nWHERE (time >= fromUnixTimestamp64Milli(1609459200000, 'UTC')) AND (time < fromUnixTimestamp64Milli(1609459260000, 'UTC')) FORMAT Vertical;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03035_argMinMax_numeric_non_extreme_bug.sql",
    "error": "mismatched input 'test' expecting <EOF>"
  },
  {
    "query": "SELECT merge_algorithm,\nProfileEvents['Merge'],\nProfileEvents['MergedRows'],\nProfileEvents['MergedColumns'],\nProfileEvents['GatheredColumns'],\nProfileEvents['MergedUncompressedBytes'],\nProfileEvents['MergeTotalMilliseconds'] > 0,\nProfileEvents['MergeExecuteMilliseconds'] > 0,\nProfileEvents['MergeHorizontalStageTotalMilliseconds'] > 0,\nProfileEvents['MergeHorizontalStageExecuteMilliseconds'] > 0,\nProfileEvents['MergeVerticalStageTotalMilliseconds'] > 0,\nProfileEvents['MergeVerticalStageExecuteMilliseconds'] > 0,\nFROM system.part_log WHERE database = currentDatabase() AND table = 't_merge_profile_events_2' AND event_type = 'MergeParts' AND part_name = 'all_1_2_1';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03221_merge_profile_events.sql",
    "error": "mismatched input 'system' expecting <EOF>"
  },
  {
    "query": "select min(number) over wa, min(number) over wo,\nmax(number) over wa, max(number) over wo\nfrom\n(select number, intDiv(number, 3) p, mod(number, 5) o\nfrom numbers(31))\nwindow\nwa as (partition by p order by o\nrange between unbounded preceding and unbounded following),\nwo as (partition by p order by o\nrows between unbounded preceding and unbounded following)\nsettings max_block_size = 2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01591_window_functions.sql",
    "error": "mismatched input ',' expecting <EOF>"
  },
  {
    "query": "select multiIf(number % 4 == 0, number, number % 4 == 1, 'str_' || toString(number), number % 4 == 2, range(number), NULL)::Dynamic as d, dynamicType(d) from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_dynamic_conversions.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select multiIf(number % 4 == 0, number, number % 4 == 1, 'str_' || toString(number), number % 4 == 2, range(number), NULL)::Dynamic(max_types=0) as d, dynamicType(d) from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_dynamic_conversions.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select multiIf(number % 4 == 0, number, number % 4 == 1, 'str_' || toString(number), number % 4 == 2, range(number), NULL)::Dynamic(max_types=1) as d, dynamicType(d) from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_dynamic_conversions.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select multiIf(number % 4 == 0, number, number % 4 == 1, 'str_' || toString(number), number % 4 == 2, range(number), NULL)::Dynamic(max_types=2) as d, dynamicType(d) from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_dynamic_conversions.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select multiIf(number % 4 == 0, number, number % 4 == 1, 'str_' || toString(number), number % 4 == 2, range(number), NULL)::Dynamic(max_types=2)::Dynamic(max_types=1) as d, dynamicType(d) from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_dynamic_conversions.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select multiIf(number % 4 == 0, number, number % 4 == 1, toDate(number), number % 4 == 2, range(number), NULL)::Dynamic(max_types=4)::Dynamic(max_types=3) as d, dynamicType(d) from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_dynamic_conversions.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT nonexistentsomething; -- { serverError UNKNOWN_IDENTIFIER } CREATE DICTIONARY dict (n UInt64, col String DEFAULT '42') PRIMARY KEY n\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT getServerPort('tcp_port_secure') SECURE 1 USER 'default' TABLE 'url')) LIFETIME(1) LAYOUT(CACHE(SIZE_IN_CELLS 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01083_expressions_in_engine_arguments.sql",
    "error": "mismatched input 'SOURCE' expecting <EOF>"
  },
  {
    "query": "SELECT NULL FROM (SELECT [1048575, NULL] AS ax, 2147483648 AS c) t1 ARRAY JOIN ax\nINNER JOIN (SELECT NULL AS c) t2 USING (c);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01881_union_header_mismatch_bug.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT NULL FROM t_02709__fuzz_23 FINAL GROUP BY sign, '1023'\nORDER BY nan DESC, [0, NULL, NULL, NULL, NULL] DESC\nFORMAT Null\nSETTINGS\nmax_parallel_replicas = 3,\nenable_parallel_replicas = 1,\nuse_hedged_requests = 0,\ncluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02932_parallel_replicas_fuzzer.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT number\nFROM\nnumbers(10)\nGROUP BY\nGROUPING SETS\n(\nnumber,\nnumber % 2\n)\nWITH ROLLUP; -- { serverError NOT_IMPLEMENTED }\nSELECT\nnumber\nFROM\nnumbers(10)\nGROUP BY\nGROUPING SETS\n(\nnumber,\nnumber % 2\n)\nWITH CUBE; -- { serverError NOT_IMPLEMENTED }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02304_grouping_sets_with_rollup_cube.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nHAVING grouping(number, number % 2) = 1\nORDER BY number\nSETTINGS enable_optimize_predicate_expression = 0, force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02293_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nHAVING grouping(number, number % 2) = 2\nORDER BY number\nSETTINGS enable_optimize_predicate_expression = 0, force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02293_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY number, grouping(number, number % 2) = 1\nSETTINGS force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02293_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, (n, d) AS tuple FROM system.numbers LIMIT 1 FORMAT TabSeparatedWithNamesAndTypes SETTINGS allow_experimental_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00309_formats.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select number as a, number+1 as b from remote('127.0.0.{1,2}', numbers_mt(1e5)) group by grouping sets ((a), (b)) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_grouping_sets_plus_memory_efficient_aggr.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_include_column_names=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02322_sql_insert_format.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_max_batch_size=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02322_sql_insert_format.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_max_batch_size=2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02322_sql_insert_format.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_table_name='test', output_format_sql_insert_quote_names=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02322_sql_insert_format.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_table_name='test';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02322_sql_insert_format.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_use_replace=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02322_sql_insert_format.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT number FROM numbers(10) ORDER BY number DESC OFFSET 2 ROWS FETCH NEXT 3 ROWS WITH TIES;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01525_select_with_offset_fetch_clause.sql",
    "error": "mismatched input 'OFFSET' expecting <EOF>"
  },
  {
    "query": "SELECT number FROM numbers(10) QUALIFY (COUNT() OVER (PARTITION BY number % 3) AS partition_count) = 4 ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03095_window_functions_qualify.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number FROM numbers(10) QUALIFY number > 5 ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03095_window_functions_qualify.sql",
    "error": "mismatched input '>' expecting <EOF>"
  },
  {
    "query": "SELECT number FROM numbers(5) FORMAT JSONEachRow SETTINGS output_format_json_array_of_rows = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02552_client_format_settings.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT number,\ncount(),\ngrouping(number, number % 2) AS gr\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number, number % 2),\n()\n)\nORDER BY (gr, number)\nSETTINGS force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02293_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\ngrouping(number % 2, number) AS gr\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY number, gr\nSETTINGS force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02293_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\ngrouping(number, number % 2) = 1 AS gr\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY number, gr\nSETTINGS force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02293_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\nGROUPING(number, number % 2) = 1 as gr\nFROM remote('127.0.0.{2,3}', numbers(10))\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2))\nORDER BY number, gr\nSETTINGS force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02293_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\ngrouping(number, number % 2, number % 3) AS gr\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY number, gr; -- { serverError BAD_ARGUMENTS }\nSELECT\nnumber,\ngrouping(number, number % 2) AS gr\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY number, gr\nSETTINGS force_grouping_standard_compatibility=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02293_grouping_function.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\nnumber % 2,\nsum(number) AS val\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY (number, number % 2, val)\nSETTINGS group_by_use_nulls = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02535_analyzer_group_by_use_nulls.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\nnumber % 2,\nsum(number) AS val\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY (number, number % 2, val)\nSETTINGS group_by_use_nulls = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02535_analyzer_group_by_use_nulls.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\nnumber % 2,\nsum(number) AS val\nFROM numbers(10)\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY 1, tuple(val)\nSETTINGS group_by_use_nulls = 1, max_bytes_before_external_sort=10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02535_analyzer_group_by_use_nulls.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\nnumber % 2,\nsum(number) AS val\nFROM remote('127.0.0.{2,3}', numbers(10))\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY (number, number % 2, val)\nSETTINGS group_by_use_nulls = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02343_group_by_use_nulls_distributed.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number,\nnumber % 2,\nsum(number) AS val\nFROM remote('127.0.0.{2,3}', numbers(10))\nGROUP BY\nGROUPING SETS (\n(number),\n(number % 2)\n)\nORDER BY (number, number % 2, val)\nSETTINGS group_by_use_nulls = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02343_group_by_use_nulls_distributed.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "Select number, any (number) RESPECT NULLS over (order by number) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "Select number, any_value (number) RESPECT NULLS over (order by number) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "Select number, anyLast (number) RESPECT NULLS over (order by number) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT number, count() FROM numbers(100000) GROUP BY number FORMAT Null SETTINGS max_rows_to_group_by = 1, group_by_overflow_mode = 'any';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02385_profile_events_overflow.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT number, COUNT() OVER (PARTITION BY number % 3) AS partition_count FROM numbers(10) QUALIFY COUNT() OVER (PARTITION BY number % 3) = 4 ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03095_window_functions_qualify.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT number, COUNT() OVER (PARTITION BY number % 3) AS partition_count FROM numbers(10) QUALIFY partition_count = 4 ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03095_window_functions_qualify.sql",
    "error": "mismatched input '=' expecting <EOF>"
  },
  {
    "query": "Select number, FIRST_VALUE (number) IGNORE NULLS over (order by number) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "Select number, first_value (number) RESPECT NULLS over (order by number) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "Select number, LAST_VALUE (number) IGNORE NULLS over (order by number) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "Select number, last_value (number) RESPECT NULLS over (order by number) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT number, sum (number) RESPECT NULLS over (order by number) from numbers(1); -- { serverError NOT_IMPLEMENTED } SELECT number, avgIf (number) RESPECT NULLS over (order by number) from numbers(1); -- { serverError NOT_IMPLEMENTED }\nSELECT number, first_value_respect_nulls (number) RESPECT NULLS over (order by number) from numbers(1); -- { serverError NOT_IMPLEMENTED }\nSELECT number, last_value_respect_nulls (number) RESPECT NULLS over (order by number) from numbers(1); -- { serverError NOT_IMPLEMENTED }\nSELECT toTypeName(any(number) RESPECT NULLS) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT one.* FROM system.one one;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "mismatched input '.' expecting <EOF>"
  },
  {
    "query": "SELECT one.dummy FROM system.one one;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "mismatched input '.' expecting <EOF>"
  },
  {
    "query": "SELECT plus(1, 1) RESPECT NULLS; -- { serverError SYNTAX_ERROR } ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02998_operator_respect_nulls.sql",
    "error": "mismatched input 'NULLS' expecting <EOF>"
  },
  {
    "query": "SELECT replaceRegexpOne(command, '(\\\\\\\\d{10})', 'timestamp'),\nFROM system.mutations\nWHERE database = currentDatabase() AND table = 't_mutations_nondeterministic' AND is_done\nORDER BY command;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02842_mutations_replace_non_deterministic.sql",
    "error": "mismatched input 'system' expecting <EOF>"
  },
  {
    "query": "SELECT replaceRegexpOne(command, '(\\\\\\\\d{10})', 'timestamp'),\nFROM system.mutations\nWHERE database = currentDatabase() AND table = 't_mutations_nondeterministic' AND NOT is_done\nORDER BY command;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02842_mutations_replace_non_deterministic.sql",
    "error": "mismatched input 'system' expecting <EOF>"
  },
  {
    "query": "SELECT s FROM nested_test AS t1\nARRAY JOIN nest\nINNER JOIN join_test AS t2 ON nest.y = t2.y;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03046_column_in_block_array_join.sql",
    "error": "mismatched input 'INNER' expecting <EOF>"
  },
  {
    "query": "SELECT s FROM order_by_desc ORDER BY u DESC LIMIT 10 FORMAT Null SETTINGS max_memory_usage = '400M';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01926_order_by_desc_limit.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT s FROM order_by_desc ORDER BY u LIMIT 10 FORMAT Null SETTINGS max_memory_usage = '400M';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01926_order_by_desc_limit.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select sleep(2) format Null; -- increases probability of reproducing the issue detach table rmt1;      -- make replica inactive\nsystem start replicated sends rmt1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02448_clone_replica_lost_part.sql",
    "error": "mismatched input 'rmt1' expecting <EOF>"
  },
  {
    "query": "SELECT sum(a) FROM remote('127.0.0.4', currentDatabase(), '02863_delayed_source') GROUP BY a ORDER BY a LIMIT 1 FORMAT JSON settings output_format_write_statistics=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02863_delayed_source_with_totals_and_extremes.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT SUM(number) as sum_value, count() AS count_value from numbers_mt(1000000) GROUP BY GROUPING SETS ((number % 10), (number % 100))\nORDER BY sum_value, count_value SETTINGS max_threads=3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_with_grouping_sets.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT sum(number) FILTER(WHERE number % 2 == 0) FROM numbers(100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02001_select_with_filter.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select sum(number) over w1, sum(number) over w2 from numbers(10)\nwindow\nw1 as (rows unbounded preceding),\nw2 as (partition by intDiv(number, 3) as value order by number rows unbounded preceding)\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01591_window_functions.sql",
    "error": "mismatched input ',' expecting <EOF>"
  },
  {
    "query": "SELECT sumIfOrNull(number, number % 2 == 1) FILTER(WHERE 0) FROM numbers(100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02001_select_with_filter.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT sumIfOrNull(number, number % 2 == 1) FILTER(WHERE 1) FROM numbers(100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02001_select_with_filter.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT t.COLUMNS('^c') EXCEPT (test_hello, test_world) FROM t, u;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_4.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT t.COLUMNS('^c') FROM t, u;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_4.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT test_table.COLUMNS('i'), test_table.COLUMNS('v') FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT test_table.COLUMNS(id) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting '.'"
  },
  {
    "query": "SELECT test_table.COLUMNS(id) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input ')' expecting <EOF>"
  },
  {
    "query": "SELECT test_table.COLUMNS(id), test_table.COLUMNS(value) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input '(' expecting '.'"
  },
  {
    "query": "SELECT test_table.COLUMNS(id), test_table.COLUMNS(value) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "mismatched input ')' expecting <EOF>"
  },
  {
    "query": "SELECT throwIf(1); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } SELECT current_value - previous_value\nFROM (\nSELECT event, value as current_value FROM system.events WHERE event like 'FailedSelectQuery'\n) AS previous\nALL LEFT JOIN (\nSELECT event, value as previous_value FROM current_failed_query_metrics\n) AS current\non previous.event = current.event;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01281_unsucceeded_insert_select_queries_counter.sql",
    "error": "mismatched input 'FROM' expecting <EOF>"
  },
  {
    "query": "select throwIf(100 < number) from numbers(1000); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } commit; -- { serverError INVALID_TRANSACTION } -- after 395\ninsert into mt1 values (5); -- { serverError INVALID_TRANSACTION }\ninsert into mt2 values (50); -- { serverError INVALID_TRANSACTION }\nselect 1; -- { serverError INVALID_TRANSACTION }\nrollback;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01173_transaction_control_queries.sql",
    "error": "mismatched input 'rollback' expecting <EOF>"
  },
  {
    "query": "SELECT TIMEDIFF(NOW(), UTC_TIMESTAMP()) DIV 600;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02503_mysql_compat_utc_timestamp.sql",
    "error": "mismatched input '600' expecting <EOF>"
  },
  {
    "query": "select toDecimal128(42.42, 5) as d format JSONEachRow settings output_format_json_quote_decimals=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_json_decimals_as_strings.sql",
    "error": "mismatched input 'settings' expecting <EOF>"
  },
  {
    "query": "SELECT toFixedString('str', 3), 3, CAST(if(1 = 0, toInt8(3), NULL), 'Int32') AS x from numbers(10) GROUP BY GROUPING SETS ((CAST(toInt32(1), 'Int32')), ('str', 3), (CAST(toFixedString('str', 3), 'Dynamic')), (CAST(toFixedString(toFixedString('str', 3), 3), 'Dynamic')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03228_dynamic_serializations_uninitialized_value.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT toStartOfHour(time) AS timex, id, count() FROM\n(\nSELECT\nconcat('id', toString(number % 3)) AS id,\ntoDateTime('2020-01-01') + (number * 60) AS time\nFROM numbers(100)\n)\nGROUP BY\nGROUPING SETS ( (timex, id), (timex))\nORDER BY timex ASC, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02304_grouping_set_order_by.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select toStartOfInterval(toDateTime64('\\\\0930-12-12 12:12:12.1234567', 3), toIntervalNanosecond(1024)); -- {serverError DECIMAL_OVERFLOW} SELECT\ntoDateTime64(-9223372036854775808, 1048575, toIntervalNanosecond(9223372036854775806), NULL),\ntoStartOfInterval(toDateTime64(toIntervalNanosecond(toIntervalNanosecond(257), toDateTime64(toStartOfInterval(toDateTime64(NULL)))), '', 100), toIntervalNanosecond(toStartOfInterval(toDateTime64(toIntervalNanosecond(NULL), NULL)), -1)),\ntoStartOfInterval(toDateTime64('\\\\0930-12-12 12:12:12.1234567', 3), toIntervalNanosecond(1024)); -- {serverError DECIMAL_OVERFLOW}\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02269_to_start_of_interval_overflow.sql",
    "error": "mismatched input 'toDateTime64' expecting <EOF>"
  },
  {
    "query": "select toString(x)::Decimal(15, 9) from generateRandom('x Decimal(15, 9)', 42) limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02709_generate_random_valid_decimals_and_bools.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select toString(x)::Decimal(30, 20) from generateRandom('x Decimal(30, 20)', 42) limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02709_generate_random_valid_decimals_and_bools.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select toString(x)::Decimal(6, 3) from generateRandom('x Decimal(6, 3)', 42) limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02709_generate_random_valid_decimals_and_bools.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "select toString(x)::Decimal(60, 40) from generateRandom('x Decimal(60, 40)', 42) limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02709_generate_random_valid_decimals_and_bools.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT toUInt64(42) AS x FORMAT Vertical SETTINGS use_query_cache = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_bugs.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT toUInt64(42) FORMAT Vertical SETTINGS use_query_cache = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_bugs.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "select toUUID('f82aef31-279e-431f-8b00-2899ad387aea')::UInt128;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_convert_uuid_to_uint128.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT transform(arrayJoin([NULL, NULL]), [NULL, NULL], [NULL]) GROUP BY GROUPING SETS (('0.1'), ('-0.2147483647'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02917_transform_tsan.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc\nfetch first 5 rows only\nformat PrettyCompactNoEscapes;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02790_sql_standard_fetch.sql",
    "error": "mismatched input 'fetch' expecting <EOF>"
  },
  {
    "query": "select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc\nfetch first 5 rows with ties\nformat PrettyCompactNoEscapes;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02790_sql_standard_fetch.sql",
    "error": "mismatched input 'fetch' expecting <EOF>"
  },
  {
    "query": "select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc\noffset 3 rows\nfetch first 5 rows only\nformat PrettyCompactNoEscapes;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02790_sql_standard_fetch.sql",
    "error": "mismatched input 'offset' expecting <EOF>"
  },
  {
    "query": "select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc\noffset 3 rows\nfetch next 5 rows only\nformat PrettyCompactNoEscapes;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02790_sql_standard_fetch.sql",
    "error": "mismatched input 'offset' expecting <EOF>"
  },
  {
    "query": "SELECT tuple(3,4,5).1::Int32;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_4.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT tuple(3,4,5)::Tuple(UInt64, UInt64, UInt64).2::Int32;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_4.sql",
    "error": "mismatched input '::' expecting <EOF>"
  },
  {
    "query": "SELECT tuple(number) AS x FROM numbers(10) GROUP BY GROUPING SETS (number) order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03023_group_by_use_nulls_analyzer_crashes.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT tuple(tuple(tuple(number))) FROM numbers(10) GROUP BY GROUPING SETS (('str', tuple(tuple(number))), ('str')) order by all;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03014_group_by_use_nulls_injective_functions_and_analyzer.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "SELECT u.name user_name,\n20 AS age_group\nFROM user_all u\nLEFT JOIN event e ON u.id = e.user_id\nWHERE (u.age >= 20 AND u.age < 30)\nAND e.created_time > '2022-01-01';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02291_join_const_literal_36279.sql",
    "error": "mismatched input 'user_name' expecting <EOF>"
  },
  {
    "query": "SELECT uniqCombinedIfMergeIf(n, last > 50) FILTER(WHERE last>50) FROM (SELECT uniqCombinedIfState(number, number % 2) AS n, max(number) AS last FROM numbers(10)); -- { serverError ILLEGAL_AGGREGATION } SELECT uniqCombinedIfMerge(n) FILTER(WHERE last>50) FROM (SELECT uniqCombinedIfState(number, number % 2) AS n, max(number) AS last FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02025_nested_func_for_if_combinator.sql",
    "error": "mismatched input '(' expecting <EOF>"
  },
  {
    "query": "select uniqStateResample(30, 75, 30)([x], 30) OVER (PARTITION BY y) from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02428_combinators_with_over_statement.sql",
    "error": "mismatched input 'OVER' expecting <EOF>"
  },
  {
    "query": "SELECT untuple(JSONExtract('{\"key\": \"value\"}', 'Tuple(key String)')) x FORMAT Vertical SETTINGS enable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT untuple(JSONExtract('{\"key\": \"value\"}', 'Tuple(key String)')) x FORMAT Vertical SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT untuple(tuple(1 as a)) as t FORMAT Vertical SETTINGS enable_analyzer = 0, enable_named_columns_in_function_tuple = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT untuple(tuple(1 as a)) as t FORMAT Vertical SETTINGS enable_analyzer = 1, enable_named_columns_in_function_tuple = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT untuple(tuple(1 as a)) as t FORMAT Vertical SETTINGS enable_analyzer = 1, enable_named_columns_in_function_tuple = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "mismatched input 'SETTINGS' expecting <EOF>"
  },
  {
    "query": "SELECT v FROM test__fuzz_22\nORDER BY v\nLIMIT 10, 10\nSETTINGS max_threads = 4\nFORMAT Null; -- { serverError BAD_ARGUMENTS }\nDROP TABLE test__fuzz_22 SYNC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_parallel_replicas_read_task_size_overflow_bug.sql",
    "error": "mismatched input 'SYNC' expecting <EOF>"
  },
  {
    "query": "SELECT value FROM offset_without_limit ORDER BY value OFFSET 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01272_offset_without_limit.sql",
    "error": "mismatched input 'OFFSET' expecting <EOF>"
  },
  {
    "query": "SELECT value_element, value FROM test_table ARRAY JOIN [1048577] AS value_element ARRAY JOIN arrayMap(x -> value_element, ['']) AS value;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql",
    "error": "mismatched input 'ARRAY' expecting <EOF>"
  },
  {
    "query": "select x'' == b'';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_parser_string_binary_literal.sql",
    "error": "mismatched input '''' expecting <EOF>"
  },
  {
    "query": "select X'' == X'';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_parser_string_binary_literal.sql",
    "error": "mismatched input '''' expecting <EOF>"
  },
  {
    "query": "select x'';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_parser_string_binary_literal.sql",
    "error": "mismatched input '''' expecting <EOF>"
  },
  {
    "query": "select x'0' == '\\\\0';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_parser_string_binary_literal.sql",
    "error": "mismatched input ''0'' expecting <EOF>"
  },
  {
    "query": "select x'0' == b'0';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_parser_string_binary_literal.sql",
    "error": "mismatched input ''0'' expecting <EOF>"
  },
  {
    "query": "select X'0' == X'0';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_parser_string_binary_literal.sql",
    "error": "mismatched input ''0'' expecting <EOF>"
  },
  {
    "query": "SELECT x'414243'::String;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03227_proper_parsing_of_cast_operator.sql",
    "error": "mismatched input ''414243'' expecting <EOF>"
  },
  {
    "query": "SELECTB 2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_unicode_whitespaces_lexer.sql",
    "error": "mismatched input 'SELECTB' expecting {<EOF>, ALTER, ATTACH, CHECK, CREATE, DELETE, DESC, DESCRIBE, DETACH, DROP, EXISTS, EXPLAIN, INSERT, KILL, OPTIMIZE, RENAME, REPLACE, SELECT, SET, SHOW, SYSTEM, TRUNCATE, USE, WATCH, WITH, GRANT, REVOKE, '('}"
  },
  {
    "query": "SELECTo;?1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_unicode_whitespaces_lexer.sql",
    "error": "mismatched input 'SELECTo' expecting {<EOF>, ALTER, ATTACH, CHECK, CREATE, DELETE, DESC, DESCRIBE, DETACH, DROP, EXISTS, EXPLAIN, INSERT, KILL, OPTIMIZE, RENAME, REPLACE, SELECT, SET, SHOW, SYSTEM, TRUNCATE, USE, WATCH, WITH, GRANT, REVOKE, '('}"
  }
]