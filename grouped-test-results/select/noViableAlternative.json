[
  {
    "query": "SELECT  * EXCEPT 'bytes', COLUMNS('bytes') APPLY formatReadableSize FROM columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers2.sql",
    "error": "no viable alternative at input 'SELECT  * EXCEPT 'bytes''"
  },
  {
    "query": "SELECT  * FROM\n(\nSELECT  m0.pt                                                                                                                   AS pt\n,m0.\\`exposure_uv\\`                                                                                                        AS exposure_uv\n,round(m2.exposure_uv,4)                                                                                                 AS exposure_uv_hb_last_value\n,if(m2.exposure_uv IS NULL OR m2.exposure_uv = 0,NULL,round((m0.exposure_uv - m2.exposure_uv) * 1.0 / m2.exposure_uv,4)) AS exposure_uv_hb_diff_percent\n,round(m1.exposure_uv,4)                                                                                                 AS exposure_uv_tb_last_value\n,if(m1.exposure_uv IS NULL OR m1.exposure_uv = 0,NULL,round((m0.exposure_uv - m1.exposure_uv) * 1.0 / m1.exposure_uv,4)) AS exposure_uv_tb_diff_percent\nFROM\n(\nSELECT  m0.pt                          AS pt\n,\\`exposure_uv\\`                  AS \\`exposure_uv\\`\nFROM\n(\nSELECT  pt                                                                     AS pt\n,CASE WHEN COUNT(\\`exposure_uv\\`) > 0 THEN AVG(\\`exposure_uv\\`)  ELSE 0 END AS \\`exposure_uv\\`\nFROM\n(\nSELECT  pt                                         AS pt\n,uniqHLL12Merge(count_distinct_exposure_uv) AS \\`exposure_uv\\`\nFROM test\nGROUP BY  pt\n) m\nGROUP BY  pt\n) m0\n) m0\nLEFT JOIN\n(\nSELECT  m0.pt                          AS pt\n,\\`exposure_uv\\`                  AS \\`exposure_uv\\`\nFROM\n(\nSELECT  formatDateTime(addYears(parseDateTimeBestEffort(pt),1),'%Y%m%d')       AS pt\n,CASE WHEN COUNT(\\`exposure_uv\\`) > 0 THEN AVG(\\`exposure_uv\\`)  ELSE 0 END AS \\`exposure_uv\\`\nFROM\n(\nSELECT  pt                                         AS pt\n,uniqHLL12Merge(count_distinct_exposure_uv) AS \\`exposure_uv\\`\nFROM test\nGROUP BY  pt\n) m\nGROUP BY  pt\n) m0\n) m1\nON m0.pt = m1.pt\nLEFT JOIN\n(\nSELECT  m0.pt                          AS pt\n,\\`exposure_uv\\`                  AS \\`exposure_uv\\`\nFROM\n(\nSELECT  formatDateTime(addDays(toDate(parseDateTimeBestEffort(pt)),1),'%Y%m%d') AS pt\n,CASE WHEN COUNT(\\`exposure_uv\\`) > 0 THEN AVG(\\`exposure_uv\\`)  ELSE 0 END  AS \\`exposure_uv\\`\nFROM\n(\nSELECT  pt                                         AS pt\n,uniqHLL12Merge(count_distinct_exposure_uv) AS \\`exposure_uv\\`\nFROM test\nGROUP BY  pt\n) m\nGROUP BY  pt\n) m0\n) m2\nON m0.pt = m2.pt\n) c0\nORDER BY pt ASC, exposure_uv DESC\nsettings join_use_nulls = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug.sql",
    "error": "no viable alternative at input 'SELECT  * FROM\\n(\\nSELECT  m0.pt                                                                                                                   AS pt\\n,m0.\\'"
  },
  {
    "query": "select  2%' and current_database = currentDatabase()\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01531_query_log_query_comment.sql",
    "error": "no viable alternative at input 'select  2%''"
  },
  {
    "query": "SELECT \"number\", CASE \"number\" WHEN 3 THEN 55\nWHEN 6 THEN 77\nWHEN 9 THEN 95\nELSE CASE\nWHEN \"number\"=1 THEN 10\nWHEN \"number\"=10 THEN 100\nELSE 555555\nEND\nEND AS \"LONG_COL_0\"\nFROM \\`system\\`.numbers\nLIMIT 20;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02244_casewithexpression_return_type.sql",
    "error": "no viable alternative at input 'SELECT \"number\", CASE \"number\" WHEN 3 THEN 55\\nWHEN 6 THEN 77\\nWHEN 9 THEN 95\\nELSE CASE\\nWHEN \"number\"=1 THEN 10\\nWHEN \"number\"=10 THEN 100\\nELSE 555555\\nEND\\nEND AS \"LONG_COL_0\"\\nFROM \\'"
  },
  {
    "query": "SELECT \"ta\\`ble\".dummy, 'hello''world' AS \"hel\"\"lo\" FROM system.one AS \\`ta\\`\\`ble\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00471_sql_style_quoting.sql",
    "error": "no viable alternative at input 'SELECT \"ta\\`ble\".dummy, 'hello''world' AS \"hel\"\"lo\" FROM system.one AS \\'"
  },
  {
    "query": "SELECT '' = ALL (SELECT toNullable(''));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02812_subquery_operators.sql",
    "error": "no viable alternative at input 'SELECT '' = ALL (SELECT toNullable('"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('0.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('128.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('240.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('654f:3716::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('::0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '' == dictGetString({'"
  },
  {
    "query": "SELECT '0' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('654f:3716::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '0' == dictGetString({'"
  },
  {
    "query": "SELECT '0' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('::0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '0' == dictGetString({'"
  },
  {
    "query": "SELECT '0',\ntoTypeName(materialize(js2.s))\nFROM\n(\nSELECT number AS k\nFROM numbers(100)\n) AS js1\nFULL OUTER JOIN\n(\nSELECT\ntoLowCardinality(2147483647 + 256) AS k,\n'-0.0000000001',\n1024,\ntoString(number + 10) AS s\nFROM numbers(1024)\n) AS js2 ON js1.k = js2.k\nORDER BY\ninf DESC NULLS FIRST,\njs1.k ASC NULLS LAST,\njs2.k ASC\nFORMAT \\`Null\\`\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02831_ast_fuzz_asan_join.sql",
    "error": "no viable alternative at input 'SELECT '0',\\ntoTypeName(materialize(js2.s))\\nFROM\\n(\\nSELECT number AS k\\nFROM numbers(100)\\n) AS js1\\nFULL OUTER JOIN\\n(\\nSELECT\\ntoLowCardinality(2147483647 + 256) AS k,\\n'-0.0000000001',\\n1024,\\ntoString(number + 10) AS s\\nFROM numbers(1024)\\n) AS js2 ON js1.k = js2.k\\nORDER BY\\ninf DESC NULLS FIRST,\\njs1.k ASC NULLS LAST,\\njs2.k ASC\\nFORMAT \\'"
  },
  {
    "query": "SELECT '1' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '1' == dictGetString({'"
  },
  {
    "query": "SELECT '10' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '10' == dictGetString({'"
  },
  {
    "query": "SELECT '100' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:f000:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '100' == dictGetString({'"
  },
  {
    "query": "SELECT '101' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:f800:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '101' == dictGetString({'"
  },
  {
    "query": "SELECT '102' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fc00:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '102' == dictGetString({'"
  },
  {
    "query": "SELECT '103' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fe00:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '103' == dictGetString({'"
  },
  {
    "query": "SELECT '104' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ff00:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '104' == dictGetString({'"
  },
  {
    "query": "SELECT '105' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ff80:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '105' == dictGetString({'"
  },
  {
    "query": "SELECT '106' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffc0:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '106' == dictGetString({'"
  },
  {
    "query": "SELECT '107' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffe0:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '107' == dictGetString({'"
  },
  {
    "query": "SELECT '108' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fff0:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '108' == dictGetString({'"
  },
  {
    "query": "SELECT '109' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fff8:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '109' == dictGetString({'"
  },
  {
    "query": "SELECT '11' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '11' == dictGetString({'"
  },
  {
    "query": "SELECT '110' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fffc:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '110' == dictGetString({'"
  },
  {
    "query": "SELECT '111' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fffe:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '111' == dictGetString({'"
  },
  {
    "query": "SELECT '112' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '112' == dictGetString({'"
  },
  {
    "query": "SELECT '113' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:8000')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '113' == dictGetString({'"
  },
  {
    "query": "SELECT '114' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:c000')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '114' == dictGetString({'"
  },
  {
    "query": "SELECT '115' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:e000')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '115' == dictGetString({'"
  },
  {
    "query": "SELECT '116' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:f000')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '116' == dictGetString({'"
  },
  {
    "query": "SELECT '117' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:f800')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '117' == dictGetString({'"
  },
  {
    "query": "SELECT '118' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fc00')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '118' == dictGetString({'"
  },
  {
    "query": "SELECT '119' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '119' == dictGetString({'"
  },
  {
    "query": "SELECT '12' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '12' == dictGetString({'"
  },
  {
    "query": "SELECT '120' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '120' == dictGetString({'"
  },
  {
    "query": "SELECT '121' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '121' == dictGetString({'"
  },
  {
    "query": "SELECT '122' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffc0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '122' == dictGetString({'"
  },
  {
    "query": "SELECT '123' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffe0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '123' == dictGetString({'"
  },
  {
    "query": "SELECT '124' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '124' == dictGetString({'"
  },
  {
    "query": "SELECT '125' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff8')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '125' == dictGetString({'"
  },
  {
    "query": "SELECT '126' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '126' == dictGetString({'"
  },
  {
    "query": "SELECT '127' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127' == dictGetString({'"
  },
  {
    "query": "SELECT '127' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127' == dictGetString({'"
  },
  {
    "query": "SELECT '127.0.0.0/16' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.255.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.0.0.0/16' == dictGetString({'"
  },
  {
    "query": "SELECT '127.0.0.0/24' = dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefixprefixprefixprefix', tuple(IPv4StringToNumOrDefault('127.0.0.0127.0.0.0'))); -- { serverError BAD_ARGUMENTS } SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('0.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.0.0.0/24' = dictGetString({'"
  },
  {
    "query": "SELECT '127.0.0.0/24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.0.0.0/24' == dictGetString({'"
  },
  {
    "query": "SELECT '127.0.0.0/24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.0.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.0.0.0/24' == dictGetString({'"
  },
  {
    "query": "SELECT '127.0.0.1/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.0.1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.0.0.1/32' == dictGetString({'"
  },
  {
    "query": "SELECT '127.255.0.0/16' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.127.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.255.0.0/16' == dictGetString({'"
  },
  {
    "query": "SELECT '127.255.128.0/24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.128.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.255.128.0/24' == dictGetString({'"
  },
  {
    "query": "SELECT '127.255.128.0/24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.128.9')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.255.128.0/24' == dictGetString({'"
  },
  {
    "query": "SELECT '127.255.128.10/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.128.10')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.255.128.10/32' == dictGetString({'"
  },
  {
    "query": "SELECT '127.255.128.128/25' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.128.255')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.255.128.128/25' == dictGetString({'"
  },
  {
    "query": "SELECT '127.255.255.128/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.255.128')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '127.255.255.128/32' == dictGetString({'"
  },
  {
    "query": "SELECT '128' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '128' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.248.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.252.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.255.254.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '13' == dictGetString({'"
  },
  {
    "query": "SELECT '14' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '14' == dictGetString({'"
  },
  {
    "query": "SELECT '15' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '15' == dictGetString({'"
  },
  {
    "query": "SELECT '16' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '16' == dictGetString({'"
  },
  {
    "query": "SELECT '17' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '17' == dictGetString({'"
  },
  {
    "query": "SELECT '18' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '18' == dictGetString({'"
  },
  {
    "query": "SELECT '19' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '19' == dictGetString({'"
  },
  {
    "query": "SELECT '2' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '2' == dictGetString({'"
  },
  {
    "query": "SELECT '20' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '20' == dictGetString({'"
  },
  {
    "query": "SELECT '2001:db8::/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'prefix', tuple(IPv6StringToNum('2001:db8::1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '2001:db8::/32' == dictGetString({'"
  },
  {
    "query": "SELECT '2023-10-23' + INTERVAL 1 MICROSECOND, '2023-10-23 12:34:56.123' + INTERVAL 1 MICROSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02900_add_subtract_interval_with_string_date.sql",
    "error": "no viable alternative at input 'SELECT '2023-10-23' + INTERVAL 1 MICROSECOND,'"
  },
  {
    "query": "SELECT '2023-10-23' + INTERVAL 1 MILLISECOND, '2023-10-23 12:34:56.123' + INTERVAL 1 MILLISECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02900_add_subtract_interval_with_string_date.sql",
    "error": "no viable alternative at input 'SELECT '2023-10-23' + INTERVAL 1 MILLISECOND,'"
  },
  {
    "query": "SELECT '2023-10-23' + INTERVAL 1 NANOSECOND, '2023-10-23 12:34:56.123' + INTERVAL 1 NANOSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02900_add_subtract_interval_with_string_date.sql",
    "error": "no viable alternative at input 'SELECT '2023-10-23' + INTERVAL 1 NANOSECOND,'"
  },
  {
    "query": "SELECT '2023-10-23' - INTERVAL 1 MICROSECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 MICROSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02900_add_subtract_interval_with_string_date.sql",
    "error": "no viable alternative at input 'SELECT '2023-10-23' - INTERVAL 1 MICROSECOND,'"
  },
  {
    "query": "SELECT '2023-10-23' - INTERVAL 1 MILLISECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 MILLISECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02900_add_subtract_interval_with_string_date.sql",
    "error": "no viable alternative at input 'SELECT '2023-10-23' - INTERVAL 1 MILLISECOND,'"
  },
  {
    "query": "SELECT '2023-10-23' - INTERVAL 1 NANOSECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 NANOSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02900_add_subtract_interval_with_string_date.sql",
    "error": "no viable alternative at input 'SELECT '2023-10-23' - INTERVAL 1 NANOSECOND,'"
  },
  {
    "query": "SELECT '21' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '21' == dictGetString({'"
  },
  {
    "query": "SELECT '22' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '22' == dictGetString({'"
  },
  {
    "query": "SELECT '23' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '23' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.255.255.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.255.255.128')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.255.255.248')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '24' == dictGetString({'"
  },
  {
    "query": "SELECT '25' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '25' == dictGetString({'"
  },
  {
    "query": "SELECT '26' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '26' == dictGetString({'"
  },
  {
    "query": "SELECT '2620:0:870::/48' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'prefix', tuple(IPv6StringToNum('2620:0:870::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '2620:0:870::/48' == dictGetString({'"
  },
  {
    "query": "SELECT '27' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '27' == dictGetString({'"
  },
  {
    "query": "SELECT '28' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '28' == dictGetString({'"
  },
  {
    "query": "SELECT '29' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '29' == dictGetString({'"
  },
  {
    "query": "SELECT '2a02:6b8:1::/48' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'prefix', tuple(IPv6StringToNum('2a02:6b8:1::1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '2a02:6b8:1::/48' == dictGetString({'"
  },
  {
    "query": "SELECT '3' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '3' == dictGetString({'"
  },
  {
    "query": "SELECT '30' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.255.255.252')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '30' == dictGetString({'"
  },
  {
    "query": "SELECT '30' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.255.255.254')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '30' == dictGetString({'"
  },
  {
    "query": "SELECT '30' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.255.255.255')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '30' == dictGetString({'"
  },
  {
    "query": "SELECT '30' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '30' == dictGetString({'"
  },
  {
    "query": "SELECT '31' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '31' == dictGetString({'"
  },
  {
    "query": "SELECT '32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '32' == dictGetString({'"
  },
  {
    "query": "SELECT '33' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '33' == dictGetString({'"
  },
  {
    "query": "SELECT '34' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '34' == dictGetString({'"
  },
  {
    "query": "SELECT '35' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '35' == dictGetString({'"
  },
  {
    "query": "SELECT '36' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '36' == dictGetString({'"
  },
  {
    "query": "SELECT '37' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '37' == dictGetString({'"
  },
  {
    "query": "SELECT '38' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '38' == dictGetString({'"
  },
  {
    "query": "SELECT '39' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '39' == dictGetString({'"
  },
  {
    "query": "SELECT '4' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '4' == dictGetString({'"
  },
  {
    "query": "SELECT '40' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '40' == dictGetString({'"
  },
  {
    "query": "SELECT '41' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '41' == dictGetString({'"
  },
  {
    "query": "SELECT '42' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '42' == dictGetString({'"
  },
  {
    "query": "SELECT '43' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '43' == dictGetString({'"
  },
  {
    "query": "SELECT '44' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '44' == dictGetString({'"
  },
  {
    "query": "SELECT '45' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '45' == dictGetString({'"
  },
  {
    "query": "SELECT '46' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '46' == dictGetString({'"
  },
  {
    "query": "SELECT '47' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '47' == dictGetString({'"
  },
  {
    "query": "SELECT '48' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '48' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:8000:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:c000:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '49' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('248.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('252.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.240.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '5' == dictGetString({'"
  },
  {
    "query": "SELECT '50' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '50' == dictGetString({'"
  },
  {
    "query": "SELECT '51' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '51' == dictGetString({'"
  },
  {
    "query": "SELECT '52' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '52' == dictGetString({'"
  },
  {
    "query": "SELECT '53' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '53' == dictGetString({'"
  },
  {
    "query": "SELECT '54' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '54' == dictGetString({'"
  },
  {
    "query": "SELECT '55' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '55' == dictGetString({'"
  },
  {
    "query": "SELECT '56' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '56' == dictGetString({'"
  },
  {
    "query": "SELECT '57' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '57' == dictGetString({'"
  },
  {
    "query": "SELECT '58' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '58' == dictGetString({'"
  },
  {
    "query": "SELECT '59' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '59' == dictGetString({'"
  },
  {
    "query": "SELECT '6' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '6' == dictGetString({'"
  },
  {
    "query": "SELECT '60' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '60' == dictGetString({'"
  },
  {
    "query": "SELECT '61' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '61' == dictGetString({'"
  },
  {
    "query": "SELECT '62' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '62' == dictGetString({'"
  },
  {
    "query": "SELECT '63' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '63' == dictGetString({'"
  },
  {
    "query": "SELECT '64' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '64' == dictGetString({'"
  },
  {
    "query": "SELECT '65' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '65' == dictGetString({'"
  },
  {
    "query": "SELECT '66' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '66' == dictGetString({'"
  },
  {
    "query": "SELECT '67' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '67' == dictGetString({'"
  },
  {
    "query": "SELECT '68' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '68' == dictGetString({'"
  },
  {
    "query": "SELECT '69' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '69' == dictGetString({'"
  },
  {
    "query": "SELECT '7' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '7' == dictGetString({'"
  },
  {
    "query": "SELECT '70' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '70' == dictGetString({'"
  },
  {
    "query": "SELECT '71' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '71' == dictGetString({'"
  },
  {
    "query": "SELECT '72' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '72' == dictGetString({'"
  },
  {
    "query": "SELECT '73' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '73' == dictGetString({'"
  },
  {
    "query": "SELECT '74' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '74' == dictGetString({'"
  },
  {
    "query": "SELECT '75' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '75' == dictGetString({'"
  },
  {
    "query": "SELECT '76' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '76' == dictGetString({'"
  },
  {
    "query": "SELECT '77' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '77' == dictGetString({'"
  },
  {
    "query": "SELECT '78' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '78' == dictGetString({'"
  },
  {
    "query": "SELECT '79' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '79' == dictGetString({'"
  },
  {
    "query": "SELECT '8' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '8' == dictGetString({'"
  },
  {
    "query": "SELECT '80' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '80' == dictGetString({'"
  },
  {
    "query": "SELECT '81' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:8000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '81' == dictGetString({'"
  },
  {
    "query": "SELECT '82' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:c000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '82' == dictGetString({'"
  },
  {
    "query": "SELECT '83' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:e000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '83' == dictGetString({'"
  },
  {
    "query": "SELECT '84' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:f000::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '84' == dictGetString({'"
  },
  {
    "query": "SELECT '85' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:f800::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '85' == dictGetString({'"
  },
  {
    "query": "SELECT '86' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fc00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '86' == dictGetString({'"
  },
  {
    "query": "SELECT '87' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fe00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '87' == dictGetString({'"
  },
  {
    "query": "SELECT '88' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ff00::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '88' == dictGetString({'"
  },
  {
    "query": "SELECT '89' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '89' == dictGetString({'"
  },
  {
    "query": "SELECT '9' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ff80::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '9' == dictGetString({'"
  },
  {
    "query": "SELECT '90' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffc0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '90' == dictGetString({'"
  },
  {
    "query": "SELECT '91' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffe0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '91' == dictGetString({'"
  },
  {
    "query": "SELECT '92' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fff0::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '92' == dictGetString({'"
  },
  {
    "query": "SELECT '93' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fff8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '93' == dictGetString({'"
  },
  {
    "query": "SELECT '94' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fffc::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '94' == dictGetString({'"
  },
  {
    "query": "SELECT '95' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:fffe::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '95' == dictGetString({'"
  },
  {
    "query": "SELECT '96' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '96' == dictGetString({'"
  },
  {
    "query": "SELECT '97' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:8000:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '97' == dictGetString({'"
  },
  {
    "query": "SELECT '98' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:c000:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '98' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:e000:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:f000:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:f800:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fc00:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fe00:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ff00:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ff80:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffc0:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffe0:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fff0:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fff8:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fffc:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fffe:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:8000')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:c000')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:e000')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:f000')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:f800')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fc00')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffc0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffe0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff8')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '99' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '99' == dictGetString({'"
  },
  {
    "query": "SELECT '::ffff:101.79.55.22/128' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'prefix', tuple(IPv6StringToNum('::ffff:101.79.55.22')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '::ffff:101.79.55.22/128' == dictGetString({'"
  },
  {
    "query": "SELECT '::ffff:101.79.55.22/128' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'prefix', tuple(IPv6StringToNum('::ffff:654f:3716')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT '::ffff:101.79.55.22/128' == dictGetString({'"
  },
  {
    "query": "SELECT '\\\\\\\\' AS \\`\"\\` FORMAT JSON SETTINGS output_format_write_statistics = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02375_double_escaping_json.sql",
    "error": "no viable alternative at input 'SELECT '\\\\\\\\' AS \\'"
  },
  {
    "query": "SELECT 'a' SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas_after_drop.sql",
    "error": "no viable alternative at input 'SELECT 'a' SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 'a' UNION ALL (SELECT 'a' UNION ALL SELECT 'a' UNION SELECT 'a');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 'a' UNION ALL (SELECT 'a' UNION ALL SELECT 'a' UNION SELECT'"
  },
  {
    "query": "SELECT 'a' UNION ALL SELECT 'a' UNION ALL SELECT 'a' UNION SELECT 'a';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 'a' UNION ALL SELECT 'a' UNION ALL SELECT 'a' UNION SELECT'"
  },
  {
    "query": "SELECT 'a' UNION SELECT 'a' UNION SELECT 'a' UNION ALL SELECT'a';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 'a' UNION SELECT'"
  },
  {
    "query": "SELECT 'all' UNION SELECT 'all' UNION ALL SELECT 'all';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 'all' UNION SELECT'"
  },
  {
    "query": "SELECT 'b' SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas_after_drop.sql",
    "error": "no viable alternative at input 'SELECT 'b' SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 'c' SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas_after_drop.sql",
    "error": "no viable alternative at input 'SELECT 'c' SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 'd' SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas_after_drop.sql",
    "error": "no viable alternative at input 'SELECT 'd' SETTINGS use_query_cache = true'"
  },
  {
    "query": "select 'hello', untuple((* except (b),)), 'world' from (select 1 a, 2 b, 3 c);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01232_untuple.sql",
    "error": "no viable alternative at input 'select 'hello', untuple((* except ('"
  },
  {
    "query": "SELECT 'inside_txn_and_implicit', 1 SETTINGS implicit_transaction=True;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02345_implicit_transaction.sql",
    "error": "no viable alternative at input 'SELECT 'inside_txn_and_implicit', 1 SETTINGS implicit_transaction=True'"
  },
  {
    "query": "SELECT 'JA' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('101.79.55.22')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 'JA' == dictGetString({'"
  },
  {
    "query": "SELECT 'JA' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('::ffff:101.79.55.22')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 'JA' == dictGetString({'"
  },
  {
    "query": "SELECT 'JA' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('::ffff:654f:3716')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 'JA' == dictGetString({'"
  },
  {
    "query": "SELECT 'limit w/ GROUP BY',\ncount(),\nnumber\nFROM remote('127.{1,2}', view(\nSELECT intDiv(number, 2) AS number\nFROM numbers(10)\n))\nGROUP BY number\nORDER BY\ncount() ASC,\nnumber DESC\nSETTINGS limit=2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02566_analyzer_limit_settings_distributed.sql",
    "error": "no viable alternative at input 'SELECT 'limit w/ GROUP BY',\\ncount(),\\nnumber\\nFROM remote('127.{1,2}', view(\\nSELECT intDiv'"
  },
  {
    "query": "SELECT 'limit w/ GROUP BY',\ncount(NULL),\nnumber\nFROM remote('127.{1,2}', view(\nSELECT intDiv(number, 2147483647) AS number\nFROM numbers(10)\n))\nGROUP BY number\nWITH ROLLUP\nORDER BY\ncount() ASC,\nnumber DESC NULLS LAST\nSETTINGS limit = 2, enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02954_analyzer_fuzz_i57086.sql",
    "error": "no viable alternative at input 'SELECT 'limit w/ GROUP BY',\\ncount(NULL),\\nnumber\\nFROM remote('127.{1,2}', view(\\nSELECT intDiv'"
  },
  {
    "query": "SELECT 'limit w/ GROUP BY', count(NULL), number FROM remote('127.{1,2}', view(SELECT intDiv(number, 2147483647) AS number FROM numbers(10))) GROUP BY number WITH ROLLUP ORDER BY count() ASC, number DESC NULLS LAST SETTINGS limit = 2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02915_analyzer_fuzz_5.sql",
    "error": "no viable alternative at input 'SELECT 'limit w/ GROUP BY', count(NULL), number FROM remote('127.{1,2}', view(SELECT intDiv'"
  },
  {
    "query": "SELECT 'limit', * FROM remote('127.1', view(SELECT * FROM numbers(10))) SETTINGS limit=5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02566_analyzer_limit_settings_distributed.sql",
    "error": "no viable alternative at input 'SELECT 'limit', * FROM remote('127.1', view(SELECT *'"
  },
  {
    "query": "SELECT 'limit/offset w/ GROUP BY',\ncount(),\nnumber\nFROM remote('127.{1,2}', view(\nSELECT intDiv(number, 2) AS number\nFROM numbers(10)\n))\nGROUP BY number\nORDER BY\ncount() ASC,\nnumber DESC\nSETTINGS limit=2, offset=2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02566_analyzer_limit_settings_distributed.sql",
    "error": "no viable alternative at input 'SELECT 'limit/offset w/ GROUP BY',\\ncount(),\\nnumber\\nFROM remote('127.{1,2}', view(\\nSELECT intDiv'"
  },
  {
    "query": "SELECT 'main_table_01818', count() FROM main_table_01818 WHERE \\`advertiser_id\\` = 'ClickHouse';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01818_move_partition_simple.sql",
    "error": "no viable alternative at input 'SELECT 'main_table_01818', count() FROM main_table_01818 WHERE \\'"
  },
  {
    "query": "SELECT 'offset', * FROM remote('127.1', view(SELECT * FROM numbers(10))) SETTINGS offset=5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02566_analyzer_limit_settings_distributed.sql",
    "error": "no viable alternative at input 'SELECT 'offset', * FROM remote('127.1', view(SELECT *'"
  },
  {
    "query": "SELECT 'RU' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'cca2', tuple(IPv4StringToNum('127.0.0.1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 'RU' == dictGetString({'"
  },
  {
    "query": "SELECT 'Run another SELECT w/o quota', 1 SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas.sql",
    "error": "no viable alternative at input 'SELECT 'Run another SELECT w/o quota', 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 'Run another SELECT with quota that current user may write only 1 entry in the query cache', 1 SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas.sql",
    "error": "no viable alternative at input 'SELECT 'Run another SELECT with quota that current user may write only 1 entry in the query cache', 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 'Run SELECT again but w/o quota', 1 SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas.sql",
    "error": "no viable alternative at input 'SELECT 'Run SELECT again but w/o quota', 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 'Run SELECT which writes its result in the query cache', 1 SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas.sql",
    "error": "no viable alternative at input 'SELECT 'Run SELECT which writes its result in the query cache', 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 'Run SELECT with quota that current user may use only 1 byte in the query cache', 1 SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_user_quotas.sql",
    "error": "no viable alternative at input 'SELECT 'Run SELECT with quota that current user may use only 1 byte in the query cache', 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "select 'system.databases', count() from system.databases where exists(select 1) and database = currentDatabase();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_system_tables_set_not_ready.sql",
    "error": "no viable alternative at input 'select 'system.databases', count() from system.databases where exists(select 1'"
  },
  {
    "query": "select 'system.distribution_queue', count() from system.distribution_queue where exists(select 1) and database = currentDatabase();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_system_tables_set_not_ready.sql",
    "error": "no viable alternative at input 'select 'system.distribution_queue', count() from system.distribution_queue where exists(select 1'"
  },
  {
    "query": "select 'system.mutations', count() from system.mutations where exists(select 1) and database = currentDatabase();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_system_tables_set_not_ready.sql",
    "error": "no viable alternative at input 'select 'system.mutations', count() from system.mutations where exists(select 1'"
  },
  {
    "query": "select 'system.replication_queue', count()>0 from system.replication_queue where exists(select 1) and database = currentDatabase();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_system_tables_set_not_ready.sql",
    "error": "no viable alternative at input 'select 'system.replication_queue', count()>0 from system.replication_queue where exists(select 1'"
  },
  {
    "query": "select 'system.rocksdb', count()>0 from system.rocksdb where exists(select 1) and database = currentDatabase();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_system_tables_set_not_ready.sql",
    "error": "no viable alternative at input 'select 'system.rocksdb', count()>0 from system.rocksdb where exists(select 1'"
  },
  {
    "query": "SELECT 'The results of query: SELECT id, mapExtractKeyLike(map, \\\\'P1%\\\\') FROM map_extractKeyLike_test ORDER BY id;';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql",
    "error": "no viable alternative at input 'SELECT 'The results of query: SELECT id, mapExtractKeyLike(map, \\\\'P1%\\'"
  },
  {
    "query": "SELECT 'tmp_table_01818', count() FROM tmp_table_01818 WHERE \\`advertiser_id\\` = 'ClickHouse';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01818_move_partition_simple.sql",
    "error": "no viable alternative at input 'SELECT 'tmp_table_01818', count() FROM tmp_table_01818 WHERE \\'"
  },
  {
    "query": "SELECT 'UK' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2a02:6b8:1::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 'UK' == dictGetString({'"
  },
  {
    "query": "SELECT 'US' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2620:0:870::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 'US' == dictGetString({'"
  },
  {
    "query": "SELECT 'ZZ' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2001:db8::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 'ZZ' == dictGetString({'"
  },
  {
    "query": "SELECT 'ZZ' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2001:db8:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 'ZZ' == dictGetString({'"
  },
  {
    "query": "SELECT ('Hello' AS world,) AS t, t.world, (t).world, identity(t).world;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03224_tuple_element_identifier.sql",
    "error": "no viable alternative at input 'SELECT ('Hello' AS world,)'"
  },
  {
    "query": "select ();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02891_empty_tuple.sql",
    "error": "no viable alternative at input 'select ()'"
  },
  {
    "query": "SELECT ()||();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03167_empty_tuple_concat.sql",
    "error": "no viable alternative at input 'SELECT ()'"
  },
  {
    "query": "SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_merge;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01457_create_as_table_function_structure.sql",
    "error": "no viable alternative at input 'SELECT (*,)'"
  },
  {
    "query": "SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_numbers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01457_create_as_table_function_structure.sql",
    "error": "no viable alternative at input 'SELECT (*,)'"
  },
  {
    "query": "SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_remote;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01457_create_as_table_function_structure.sql",
    "error": "no viable alternative at input 'SELECT (*,)'"
  },
  {
    "query": "SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_remote_explicit_structure;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01457_create_as_table_function_structure.sql",
    "error": "no viable alternative at input 'SELECT (*,)'"
  },
  {
    "query": "SELECT (*,).1 AS c, toTypeName(c) FROM tmp;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01457_create_as_table_function_structure.sql",
    "error": "no viable alternative at input 'SELECT (*,)'"
  },
  {
    "query": "SELECT (-1::Int16, -2::Int16, -3::Int16) AS x, (4::Int16, 5::Int16, 6::Int16) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (-1:'"
  },
  {
    "query": "SELECT (-1::Int32, -2::Int32, -3::Int32) AS x, (4::Int32, 5::Int32, 6::Int32) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (-1:'"
  },
  {
    "query": "SELECT (-1::Int64, -2::Int64, -3::Int64) AS x, (4::Int64, 5::Int64, 6::Int64) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (-1:'"
  },
  {
    "query": "SELECT (-1::Int8, -2::Int8, -3::Int8) AS x, (4::Int8, 5::Int8, 6::Int8) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (-1:'"
  },
  {
    "query": "SELECT (0.1::Decimal(4, 4) * 5)::Float64 AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "no viable alternative at input 'SELECT (0.1:'"
  },
  {
    "query": "SELECT (0.1::Decimal(4, 4) + 0.2::Decimal(4, 4) + 0.3::Decimal(4, 4))::Decimal(4, 4) AS c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator.sql",
    "error": "no viable alternative at input 'SELECT (0.1:'"
  },
  {
    "query": "SELECT (1 AS \\`interval\\`) + \\`interval\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01081_keywords_formatting.sql",
    "error": "no viable alternative at input 'SELECT (1 AS \\'"
  },
  {
    "query": "SELECT (1::Float32, 2::Float32, 3::Float32) AS x, (4::Float32, 5::Float32, 6::Float32) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (1:'"
  },
  {
    "query": "SELECT (1::Float64, 2::Float64, 3::Float64) AS x, (4::Float64, 5::Float64, 6::Float64) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (1:'"
  },
  {
    "query": "SELECT (1::UInt16, 2::UInt16, 3::UInt16) AS x, (4::UInt16, 5::UInt16, 6::UInt16) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (1:'"
  },
  {
    "query": "SELECT (1::UInt16, 2::UInt8, 3::Float32) AS x, (4::Int16, 5::Float32, 6::UInt8) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (1:'"
  },
  {
    "query": "SELECT (1::UInt32, 2::UInt32, 3::UInt32) AS x, (4::UInt32, 5::UInt32, 6::UInt32) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (1:'"
  },
  {
    "query": "SELECT (1::UInt64, 2::UInt64, 3::UInt64) AS x, (4::UInt64, 5::UInt64, 6::UInt64) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (1:'"
  },
  {
    "query": "SELECT (1::UInt8, 2::UInt8, 3::UInt8) AS x, (4::UInt8, 5::UInt8, 6::UInt8) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT (1:'"
  },
  {
    "query": "select (2 IN (2,)), * from dist_01756 where dummy in (0, 2) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select (2 IN (2,)'"
  },
  {
    "query": "SELECT ([1,2::UInt64]+[1,number]) from numbers(5);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02812_pointwise_array_operations.sql",
    "error": "no viable alternative at input 'SELECT ([1,2:'"
  },
  {
    "query": "SELECT (abs ((- ((sign (right_0.c1)))))) AS \\`check\\` FROM t0 AS left\nLEFT ANTI JOIN t0 AS right_0 ON ((left.c0)=(right_0.c1))\nWHERE check <> 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03211_convert_outer_join_to_inner_join_anti_join.sql",
    "error": "no viable alternative at input 'SELECT (abs ((- ((sign (right_0.c1)))))) AS \\'"
  },
  {
    "query": "SELECT (abs ((- ((sign (right_0.c1)))))) AS \\`check\\` FROM t0 AS left\nLEFT ANTI JOIN t0 AS right_0 ON ((left.c0)=(right_0.c1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03211_convert_outer_join_to_inner_join_anti_join.sql",
    "error": "no viable alternative at input 'SELECT (abs ((- ((sign (right_0.c1)))))) AS \\'"
  },
  {
    "query": "SELECT (c1, c2) as t FROM values((-5, 0), (nan, 0.), (0., 0.), (5., 5.)) ORDER BY t ASC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT (c1, c2) as t FROM values(('"
  },
  {
    "query": "SELECT (c1, c2) as t FROM values((-5, 0), (nan, 0.), (0., 0.), (5., 5.)) ORDER BY t DESC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT (c1, c2) as t FROM values(('"
  },
  {
    "query": "SELECT (c1, c2) as t FROM values((nan, 0.), (0., 0.), (5., 5.)) ORDER BY t ASC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT (c1, c2) as t FROM values(('"
  },
  {
    "query": "SELECT (c1, c2) as t FROM values((nan, 0.), (0., 0.), (5., 5.)) ORDER BY t DESC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT (c1, c2) as t FROM values(('"
  },
  {
    "query": "SELECT (c1, c2) as t FROM values((NULL, 0.), (0., 0.), (5., 5.)) ORDER BY t ASC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT (c1, c2) as t FROM values(('"
  },
  {
    "query": "SELECT (c1, c2) as t FROM values((NULL, 0.), (0., 0.), (5., 5.)) ORDER BY t DESC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT (c1, c2) as t FROM values(('"
  },
  {
    "query": "SELECT (c1, c2) as t FROM values((NULL, 0.), (0., 0.), (5., 5.), (NULL, 0.)) ORDER BY t ASC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT (c1, c2) as t FROM values(('"
  },
  {
    "query": "SELECT (c1, c2) as t FROM values((NULL, 0.), (0., 0.), (5., 5.), (NULL, 0.)) ORDER BY t DESC LIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT (c1, c2) as t FROM values(('"
  },
  {
    "query": "select (date '2001-09-29' + interval 12345 millisecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } select (date '2001-09-29' + interval 12345 microsecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect (date '2001-09-29' + interval 12345 nanosecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect (date '2001-09-29' - interval 12345 second) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01099_operators_date_and_timestamp.sql",
    "error": "no viable alternative at input 'select (date '2001-09-29' + interval 12345 millisecond)'"
  },
  {
    "query": "select (date '2001-09-29' - interval 12345 millisecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } select (date '2001-09-29' - interval 12345 microsecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect (date '2001-09-29' - interval 12345 nanosecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect (toDate32('2001-09-29') + interval 12345 second) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01099_operators_date_and_timestamp.sql",
    "error": "no viable alternative at input 'select (date '2001-09-29' - interval 12345 millisecond)'"
  },
  {
    "query": "select (dummy IN (toUInt8(2),)), * from dist_01756 where dummy in (0, 2) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select (dummy IN (toUInt8(2),)'"
  },
  {
    "query": "SELECT (EXPLAIN SYNTAX oneline = 1 SELECT 1) == 'SELECT 1 FROM system.one';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT (EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT (EXPLAIN SYNTAX oneline = 1 SELECT 1) == 'SELECT 1';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT (EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT (if(a.test == 'a', b.test, c.test)) as \\`a.test\\` FROM (SELECT 1 AS id, 'a' AS test) a\nLEFT JOIN (SELECT 1 AS id, 'b' AS test) b ON b.id = a.id\nLEFT JOIN (SELECT 1 AS id, 'c' AS test) c ON c.id = a.id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01839_join_to_subqueries_rewriter_columns_matcher.sql",
    "error": "no viable alternative at input 'SELECT (if(a.test == 'a', b.test, c.test)) as \\'"
  },
  {
    "query": "select (toDate32('2001-09-29') + interval 12345 millisecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } select (toDate32('2001-09-29') + interval 12345 microsecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect (toDate32('2001-09-29') + interval 12345 nanosecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect (toDate32('2001-09-29') - interval 12345 second) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01099_operators_date_and_timestamp.sql",
    "error": "no viable alternative at input 'select (toDate32('2001-09-29') + interval 12345 millisecond)'"
  },
  {
    "query": "select (toDate32('2001-09-29') - interval 12345 millisecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } select (toDate32('2001-09-29') - interval 12345 microsecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect (toDate32('2001-09-29') - interval 12345 nanosecond) x, toTypeName(x); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect (timestamp '2001-12-29 03:00:00' - timestamp '2001-12-27 12:00:00') x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01099_operators_date_and_timestamp.sql",
    "error": "no viable alternative at input 'select (toDate32('2001-09-29') - interval 12345 millisecond)'"
  },
  {
    "query": "SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 MICROSECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 MICROSECOND)'"
  },
  {
    "query": "SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 MILLISECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 MILLISECOND)'"
  },
  {
    "query": "SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 NANOSECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 NANOSECOND)'"
  },
  {
    "query": "SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 MICROSECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 MICROSECOND)'"
  },
  {
    "query": "SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 MILLISECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 MILLISECOND)'"
  },
  {
    "query": "SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 NANOSECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 NANOSECOND)'"
  },
  {
    "query": "SELECT (toDateTime64('2000-01-01 12:00:00.67', 2) - INTERVAL 12345 MILLISECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime64('2000-01-01 12:00:00.67', 2) - INTERVAL 12345 MILLISECOND)'"
  },
  {
    "query": "SELECT (toDateTime64('2000-01-01 12:00:00.678', 3) - INTERVAL 12345 MILLISECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime64('2000-01-01 12:00:00.678', 3) - INTERVAL 12345 MILLISECOND)'"
  },
  {
    "query": "SELECT (toDateTime64('2000-01-01 12:00:00.67898', 5) - INTERVAL 12345 MILLISECOND) x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'SELECT (toDateTime64('2000-01-01 12:00:00.67898', 5) - INTERVAL 12345 MILLISECOND)'"
  },
  {
    "query": "SELECT (tuple(sum(if((number % 2) = 0, toNullable(0), 123)) IGNORE NULLS), toUInt8(3)) FROM numbers(100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03010_sum_to_to_count_if_nullable.sql",
    "error": "no viable alternative at input 'SELECT (tuple(sum(if((number % 2) = 0, toNullable(0), 123)) IGNORE NULLS'"
  },
  {
    "query": "SELECT (x IN (111)) == 1 FROM\n(\nSELECT ( SELECT 3 :: Nullable(UInt8) WHERE 0 ) AS x\nFROM ( SELECT 2 AS x )\n) FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02815_empty_subquery_nullable_bug.sql",
    "error": "no viable alternative at input 'SELECT (x IN (111)) == 1 FROM\\n(\\nSELECT ( SELECT 3 :'"
  },
  {
    "query": "SELECT (x IN (111)) == 1 FROM\n(\nSELECT ( SELECT 3 :: Nullable(UInt8) WHERE 1 ) AS x\nFROM ( SELECT 2 AS x )\n) FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02815_empty_subquery_nullable_bug.sql",
    "error": "no viable alternative at input 'SELECT (x IN (111)) == 1 FROM\\n(\\nSELECT ( SELECT 3 :'"
  },
  {
    "query": "SELECT * EXCEPT (id) APPLY toString FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "no viable alternative at input 'SELECT * EXCEPT ('"
  },
  {
    "query": "SELECT * EXCEPT (id) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02343_analyzer_column_transformers_strict.sql",
    "error": "no viable alternative at input 'SELECT * EXCEPT ('"
  },
  {
    "query": "SELECT * EXCEPT('hello|world');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_4.sql",
    "error": "no viable alternative at input 'SELECT * EXCEPT('"
  },
  {
    "query": "SELECT * EXCEPT(hello) REPLACE(x + 1 AS x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_4.sql",
    "error": "no viable alternative at input 'SELECT * EXCEPT('"
  },
  {
    "query": "SELECT * EXCEPT(i) APPLY(sum) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "no viable alternative at input 'SELECT * EXCEPT('"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM ngrambf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM ngrambf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM ngrambf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM ngrambf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM tokenbf_tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM tokenbf_tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM tokenbf_tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes = 1\nSELECT * FROM tokenbf_tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM ngrambf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM ngrambf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM tokenbf_tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM tokenbf_tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id\n)\nWHERE\nexplain LIKE '%Granules: %'\nSETTINGS\nenable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT * FROM\n(\nSELECT\nday_,\nif(type_1 = '', 'all', type_1) AS type_1\nFROM\n(\nSELECT\nday_,\ntype_1\nFROM test_grouping_sets_predicate\nWHERE day_ = '2023-01-05'\nGROUP BY\nGROUPING SETS (\n(day_, type_1),\n(day_))\n) AS t\n)\nWHERE type_1 = 'all';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02554_fix_grouping_sets_predicate_push_down.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nSELECT\\nday_,\\nif(type_1 = '', 'all', type_1) AS type_1\\nFROM\\n(\\nSELECT\\nday_,\\ntype_1\\nFROM test_grouping_sets_predicate\\nWHERE day_ = '2023-01-05'\\nGROUP BY\\nGROUPING SETS ('"
  },
  {
    "query": "SELECT * FROM\n(\nSELECT\nmax(\\`column_1\\`) AS \\`column_1\\`,\nNULL AS \\`column_2\\`,\n\\`id\\`\nFROM \\`clickhouse_alias_issue_1\\`\nGROUP BY\n\\`id\\`\nUNION ALL\nSELECT\nNULL AS \\`column_1\\`,\nmax(\\`column_2\\`) AS \\`column_2\\`,\n\\`id\\`\nFROM \\`clickhouse_alias_issue_2\\`\nGROUP BY\n\\`id\\`\nSETTINGS prefer_column_name_to_alias=1\n)\nORDER BY ALL DESC NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03098_prefer_column_to_alias_subquery.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nSELECT\\nmax(\\'"
  },
  {
    "query": "SELECT * FROM\n(\nSELECT *\nFROM Values('id UInt64, t UInt64', (1, 3))\n) AS t1\nASOF INNER JOIN\n(\nSELECT *\nFROM Values('id UInt64, t UInt64', (1, 1), (1, 2), (1, 3), (1, 4), (1, 5))\n) AS t2 ON (t1.id = t2.id) AND (t1.t < t2.t)\nWHERE t2.t != 4;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01763_filter_push_down_bugs.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nSELECT *\\nFROM Values('id UInt64, t UInt64', ('"
  },
  {
    "query": "SELECT * FROM\n(\nWITH\nassumeNotNull((\nSELECT 0.9\n)) AS TUNING,\nELEMENT_QUERY AS\n(\nSELECT quantiles(TUNING)(1)\n)\nSELECT *\nFROM ELEMENT_QUERY\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03087_analyzer_subquery_with_alias.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nWITH\\nassumeNotNull((\\nSELECT 0.9\\n)) AS TUNING,\\nELEMENT_QUERY AS\\n('"
  },
  {
    "query": "SELECT * FROM\n(\nWITH filtered_groups AS (SELECT a FROM pr_1 WHERE a >= 100)\nSELECT count() FROM pr_2 INNER JOIN filtered_groups ON pr_2.a = filtered_groups.a\n)\nSETTINGS enable_parallel_replicas = 1, parallel_replicas_for_non_replicated_merge_tree = 1, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', max_parallel_replicas = 3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02972_parallel_replicas_cte.sql",
    "error": "no viable alternative at input 'SELECT * FROM\\n(\\nWITH filtered_groups AS ('"
  },
  {
    "query": "SELECT * FROM (\nSELECT\n([toString(number % 2)] :: Array(LowCardinality(String))) AS item_id,\ncount()\nFROM numbers(3)\nGROUP BY item_id WITH TOTALS\n) AS l FULL JOIN (\nSELECT\n([toString((number % 2) * 2)] :: Array(String)) AS item_id\nFROM numbers(3)\n) AS r\nON l.item_id = r.item_id\nORDER BY 1,2,3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03031_low_cardinality_logical_error.sql",
    "error": "no viable alternative at input 'SELECT * FROM (\\nSELECT\\n([toString(number % 2)] :'"
  },
  {
    "query": "SELECT * FROM (\nSELECT 'using asterisk', {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`.*, {CLICKHOUSE_DATABASE_1:Identifier}.\\`1-1\\`.*\nFROM {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`\nLEFT JOIN {CLICKHOUSE_DATABASE_1:Identifier}.\\`1-1\\` USING field\nUNION ALL\nSELECT 'using field name', {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`.field, {CLICKHOUSE_DATABASE_1:Identifier}.\\`1-1\\`.field\nFROM {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`\nLEFT JOIN {CLICKHOUSE_DATABASE_1:Identifier}.\\`1-1\\` USING field\n)\nORDER BY ALL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03091_analyzer_same_table_name_in_different_databases.sql",
    "error": "no viable alternative at input 'SELECT * FROM (\\nSELECT 'using asterisk', {'"
  },
  {
    "query": "SELECT * FROM (\nSELECT if(isValidUTF8(\\`1\\`), NULL, 'error!') AS error_message,\nif(error_message IS NULL, 1, 0) AS valid\nFROM testdata\n)\nWHERE valid;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03079_analyzer_numeric_literals_as_column_names.sql",
    "error": "no viable alternative at input 'SELECT * FROM (\\nSELECT if(isValidUTF8(\\'"
  },
  {
    "query": "SELECT * FROM (\nSELECT number,\nmultiIf(\nCAST(number < 4, 'UInt8'), toString(number),\nCAST(number < 8, 'LowCardinality(UInt8)'), toString(number * 10)::LowCardinality(String),\nCAST(number < 12, 'Nullable(UInt8)'), toString(number * 100)::Nullable(String),\nCAST(number < 16, 'LowCardinality(Nullable(UInt8))'), toString(number * 1000)::LowCardinality(Nullable(String)),\ntoString(number * 10000)) as m\nFROM system.numbers\nLIMIT 20\n)\nORDER BY number\nSETTINGS short_circuit_function_evaluation='enable';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02049_lowcardinality_shortcircuit_crash.sql",
    "error": "no viable alternative at input 'SELECT * FROM (\\nSELECT number,\\nmultiIf(\\nCAST(number < 4, 'UInt8'), toString(number),\\nCAST(number < 8, 'LowCardinality(UInt8)'), toString(number * 10):'"
  },
  {
    "query": "SELECT * FROM (\nWITH RECURSIVE q AS\n(\nSELECT * FROM department__fuzz_3\nUNION ALL\n(\nWITH RECURSIVE x AS\n(\nSELECT * FROM department__fuzz_1\nUNION ALL\n(SELECT * FROM q UNION ALL SELECT * FROM x)\n)\nSELECT * FROM x\n)\n)\nSELECT * FROM q LIMIT 32\n)\nORDER BY id ASC, parent_department DESC, name ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_fuzz_crash_fix.sql",
    "error": "no viable alternative at input 'SELECT * FROM (\\nWITH RECURSIVE q AS\\n('"
  },
  {
    "query": "SELECT * FROM (\nWITH RECURSIVE q AS (\nSELECT * FROM department\nUNION ALL\n(WITH RECURSIVE x AS (\nSELECT * FROM department\nUNION ALL\n(SELECT * FROM q UNION ALL SELECT * FROM x)\n)\nSELECT * FROM x)\n)\nSELECT * FROM q LIMIT 32\n) ORDER BY id, parent_department, name;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql",
    "error": "no viable alternative at input 'SELECT * FROM (\\nWITH RECURSIVE q AS ('"
  },
  {
    "query": "SELECT * FROM (\nWITH RECURSIVE q AS (\nSELECT * FROM department\nUNION ALL\n(WITH x AS (SELECT * FROM q)\nSELECT * FROM x)\n)\nSELECT * FROM q LIMIT 24\n) ORDER BY id, parent_department, name;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03034_recursive_cte_tree_merge_tree.sql",
    "error": "no viable alternative at input 'SELECT * FROM (\\nWITH RECURSIVE q AS ('"
  },
  {
    "query": "SELECT * FROM ( EXPLAIN AST SELECT * FROM (\nEXPLAIN PLAN SELECT * FROM (\nEXPLAIN SYNTAX SELECT trim(explain) == 'Asterisk' FROM (\nEXPLAIN AST SELECT * FROM system.numbers LIMIT 10\n) WHERE explain LIKE '%Asterisk%'\n)\n)\n) FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( EXPLAIN AST'"
  },
  {
    "query": "SELECT * from ( EXPLAIN indexes = 1 SELECT * FROM data_02771 WHERE x = 1 AND y = 2 ) WHERE explain NOT LIKE '%Expression%' AND explain NOT LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02771_ignore_data_skipping_indices.sql",
    "error": "no viable alternative at input 'SELECT * from ( EXPLAIN indexes ='"
  },
  {
    "query": "SELECT * from ( EXPLAIN indexes = 1 SELECT * FROM data_02771 WHERE x = 1 AND y = 2 SETTINGS ignore_data_skipping_indices='xy_idx' ) WHERE explain NOT LIKE '%Expression%' AND explain NOT LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02771_ignore_data_skipping_indices.sql",
    "error": "no viable alternative at input 'SELECT * from ( EXPLAIN indexes ='"
  },
  {
    "query": "SELECT * FROM ( SELECT\n'http_requests_total' AS name,\n'counter' AS type,\n'Total number of HTTP requests' AS help,\nmap('method', 'post', 'code', '200') AS labels,\n1027 AS value,\n1395066363000 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'http_requests_total' AS name,\n'counter' AS type,\n'' AS help,\nmap('method', 'post', 'code', '400') AS labels,\n3 AS value,\n1395066363000 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'msdos_file_access_time_seconds' AS name,\n'' AS type,\n'' AS help,\nmap('path', 'C:\\\\\\\\DIR\\\\\\\\FILE.TXT', 'error', 'Cannot find file:\\\\n\"FILE.TXT\"') AS labels,\n1458255915 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'metric_without_timestamp_and_labels' AS name,\n'' AS type,\n'' AS help,\nmap() AS labels,\n12.47 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'something_weird' AS name,\n'' AS type,\n'' AS help,\nmap('problem', 'division by zero') AS labels,\ninf AS value,\n-3982045 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'http_request_duration_seconds' AS name,\n'histogram' AS type,\n'A histogram of the request duration.' AS help,\nmap('le', '0.05') AS labels,\n24054 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'http_request_duration_seconds' AS name,\n'histogram' AS type,\n'' AS help,\nmap('le', '0.1') AS labels,\n33444 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'http_request_duration_seconds' AS name,\n'histogram' AS type,\n'' AS help,\nmap('le', '0.2') AS labels,\n100392 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'http_request_duration_seconds' AS name,\n'histogram' AS type,\n'' AS help,\nmap('le', '0.5') AS labels,\n129389 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'http_request_duration_seconds' AS name,\n'histogram' AS type,\n'' AS help,\nmap('le', '1') AS labels,\n133988 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'http_request_duration_seconds' AS name,\n'histogram' AS type,\n'' AS help,\nmap('le', '+Inf') AS labels,\n144320 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'http_request_duration_seconds' AS name,\n'histogram' AS type,\n'' AS help,\nmap('sum', '') AS labels,\n53423 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'rpc_duration_seconds' AS name,\n'summary' AS type,\n'A summary of the RPC duration in seconds.' AS help,\nmap('quantile', '0.01') AS labels,\n3102 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'rpc_duration_seconds' AS name,\n'summary' AS type,\n'' AS help,\nmap('quantile', '0.05') AS labels,\n3272 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'rpc_duration_seconds' AS name,\n'summary' AS type,\n'' AS help,\nmap('quantile', '0.5') AS labels,\n4773 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'rpc_duration_seconds' AS name,\n'summary' AS type,\n'' AS help,\nmap('quantile', '0.9') AS labels,\n9001 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'rpc_duration_seconds' AS name,\n'summary' AS type,\n'' AS help,\nmap('quantile', '0.99') AS labels,\n76656 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'rpc_duration_seconds' AS name,\n'summary' AS type,\n'' AS help,\nmap('count', '') AS labels,\n2693 AS value,\n0 :: Float64 AS timestamp\nUNION ALL\nSELECT\n'rpc_duration_seconds' AS name,\n'summary' AS type,\n'' AS help,\nmap('sum', '') AS labels,\n1.7560473e+07 AS value,\n0 :: Float64 AS timestamp\n) ORDER BY name, value\nFORMAT Prometheus;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_output_format_prometheus.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT\\n'http_requests_total' AS name,\\n'counter' AS type,\\n'Total number of HTTP requests' AS help,\\nmap('method', 'post', 'code', '200') AS labels,\\n1027 AS value,\\n1395066363000 :'"
  },
  {
    "query": "SELECT * FROM ( SELECT  m0.pt                                                                                     AS pt\n,m0.\\`uvctr\\`                                                                                AS uvctr\n,round(m1.uvctr,4)                                                                         AS uvctr_hb_last_value\n,round(m2.uvctr,4)                                                                         AS uvctr_tb_last_value\nFROM\n(\nSELECT  m0.pt                                                                                                           AS pt\n,COALESCE(m0.brand_name,m1.brand_name)                                                                           AS brand_name\n,if(isNaN(\\`click_uv\\` / \\`exposure_uv\\`) OR isInfinite(\\`click_uv\\` / \\`exposure_uv\\`),NULL,\\`click_uv\\` / \\`exposure_uv\\`) AS \\`uvctr\\`\nFROM\n(\nSELECT  pt          AS pt\n,brand_name  AS \\`brand_name\\`\n,exposure_uv AS \\`exposure_uv\\`\n,click_uv    AS \\`click_uv\\`\nFROM test2\nWHERE pt = '20230626'\n) m0\nFULL JOIN\n(\nSELECT  pt                        AS pt\n,brand_name                AS \\`brand_name\\`\n,total_indirect_order_cnt  AS \\`total_indirect_order_cnt\\`\n,total_indirect_gmv        AS \\`total_indirect_gmv\\`\nFROM test1\nWHERE pt = '20230626'\n) m1\nON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\n) m0\nLEFT JOIN\n(\nSELECT  m0.pt AS pt\n,if(isNaN(\\`click_uv\\` / \\`exposure_uv\\`) OR isInfinite(\\`click_uv\\` / \\`exposure_uv\\`),NULL,\\`click_uv\\` / \\`exposure_uv\\`) AS \\`uvctr\\`\n,COALESCE(m0.brand_name,m1.brand_name)                                                                 AS brand_name\n,\\`exposure_uv\\`                                                                                         AS \\`exposure_uv\\`\n,\\`click_uv\\`\nFROM\n(\nSELECT  pt          AS pt\n,brand_name  AS \\`brand_name\\`\n,exposure_uv AS \\`exposure_uv\\`\n,click_uv    AS \\`click_uv\\`\nFROM test2\nWHERE pt = '20230625'\n) m0\nFULL JOIN\n(\nSELECT  pt                       AS pt\n,brand_name               AS \\`brand_name\\`\n,total_indirect_order_cnt AS \\`total_indirect_order_cnt\\`\n,total_indirect_gmv       AS \\`total_indirect_gmv\\`\nFROM test1\nWHERE pt = '20230625'\n) m1\nON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\n) m1\nON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\nLEFT JOIN\n(\nSELECT  m0.pt AS pt\n,if(isNaN(\\`click_uv\\` / \\`exposure_uv\\`) OR isInfinite(\\`click_uv\\` / \\`exposure_uv\\`),NULL,\\`click_uv\\` / \\`exposure_uv\\`) AS \\`uvctr\\`\n,COALESCE(m0.brand_name,m1.brand_name)                                                                 AS brand_name\n,\\`exposure_uv\\`                                                                                         AS \\`exposure_uv\\`\n,\\`click_uv\\`\nFROM\n(\nSELECT  pt          AS pt\n,brand_name  AS \\`brand_name\\`\n,exposure_uv AS \\`exposure_uv\\`\n,click_uv    AS \\`click_uv\\`\nFROM test2\nWHERE pt = '20220626'\n) m0\nFULL JOIN\n(\nSELECT  pt                        AS pt\n,brand_name                AS \\`brand_name\\`\n,total_indirect_order_cnt  AS \\`total_indirect_order_cnt\\`\n,total_indirect_gmv        AS \\`total_indirect_gmv\\`\nFROM test1\nWHERE pt = '20220626'\n) m1\nON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\n) m2\nON m0.brand_name = m2.brand_name AND m0.pt = m2.pt\n) c0\nORDER BY pt ASC, uvctr DESC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT  m0.pt                                                                                     AS pt\\n,m0.\\'"
  },
  {
    "query": "SELECT * FROM ( SELECT * from t1 ) t1 PASTE JOIN ( SELECT * from t2 ) t2 SETTINGS max_threads = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT * from t1 ) t1 PASTE JOIN ( SELECT * from t2 ) t2 SETTINGS'"
  },
  {
    "query": "SELECT * FROM ( SELECT * FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ( (*), (day_) ) )\nWHERE day_ = '2023-01-05'\nGROUP BY GROUPING SETS (*)\nORDER BY type_1\nSETTINGS enable_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03150_grouping_sets_use_nulls_pushdown.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT * FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ('"
  },
  {
    "query": "SELECT * FROM ( SELECT * FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ( (day_, type_1), (day_) ) )\nWHERE day_ = '2023-01-05'\nGROUP BY *\nORDER BY ALL\nSETTINGS enable_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03150_grouping_sets_use_nulls_pushdown.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT * FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ('"
  },
  {
    "query": "SELECT * FROM ( SELECT * FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ( (day_, type_1), (day_) ) )\nWHERE day_ = '2023-01-05'\nORDER BY ALL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03150_grouping_sets_use_nulls_pushdown.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT * FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ('"
  },
  {
    "query": "SELECT * FROM ( SELECT 2 AS x ) as t1 RIGHT JOIN ( SELECT count('x') :: Nullable(Int32), count('y') :: Nullable(Int32), 0 AS x ) AS t2 ON t1.x = t2.x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_join_dup_columns_issue36199.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT 2 AS x ) as t1 RIGHT JOIN ( SELECT count('x') :'"
  },
  {
    "query": "SELECT * FROM ( SELECT 2 AS x ) as t1 RIGHT JOIN ( SELECT count('x') :: Nullable(Int32), count('y'), 0 AS x ) AS t2 ON t1.x = t2.x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_join_dup_columns_issue36199.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT 2 AS x ) as t1 RIGHT JOIN ( SELECT count('x') :'"
  },
  {
    "query": "SELECT * FROM ( SELECT day_ FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ( (day_, type_1), (day_) ) )\nWHERE day_ = '2023-01-05'\nORDER BY *\nSETTINGS enable_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03150_grouping_sets_use_nulls_pushdown.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT day_ FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ('"
  },
  {
    "query": "SELECT * FROM ( SELECT day_, COUNT(*) FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ( (day_, type_1), (day_) ) )\nWHERE day_ = '2023-01-05'\nORDER BY ALL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03150_grouping_sets_use_nulls_pushdown.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT day_, COUNT(*) FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ('"
  },
  {
    "query": "SELECT * FROM ( SELECT day_, type_1 FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ( (day_, type_1), (day_) ) )\nWHERE day_ = '2023-01-05'\nORDER BY ALL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03150_grouping_sets_use_nulls_pushdown.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( SELECT day_, type_1 FROM test_grouping_sets_predicate GROUP BY GROUPING SETS ('"
  },
  {
    "query": "SELECT * FROM ( WITH\nb AS\n(\nSELECT toInt64(number) AS a\nFROM numbers(10)\n),\nc AS\n(\nSELECT toInt64(number) AS a\nFROM numbers(10)\n)\nSELECT *\nFROM dist_t0 AS a\nLEFT JOIN b AS b ON a.a = b.a\nLEFT JOIN c AS c ON a.a = c.a\n)\nORDER BY ALL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03123_analyzer_dist_join_CTE.sql",
    "error": "no viable alternative at input 'SELECT * FROM ( WITH\\nb AS\\n('"
  },
  {
    "query": "select * from (explain actions = 1, sorting=1 select a, any(b), c, d from tab where b = 1 group by a, c, d settings optimize_aggregation_in_order=1, query_plan_aggregation_in_order=1) where explain like '%ReadFromMergeTree%' or explain like '%Aggregating%' or explain like '%Order:%' settings enable_analyzer=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02481_aggregation_in_order_plan.sql",
    "error": "no viable alternative at input 'select * from (explain actions ='"
  },
  {
    "query": "select * from (explain actions = 1, sorting=1 select a, any(b), c, d from tab where b = 1 group by a, c, d settings optimize_aggregation_in_order=1, query_plan_aggregation_in_order=1) where explain like '%ReadFromMergeTree%' or explain like '%Aggregating%' or explain like '%Order:%' settings enable_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02481_aggregation_in_order_plan.sql",
    "error": "no viable alternative at input 'select * from (explain actions ='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE z > 400) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM t_02809 WHERE a IN (1,2,3)) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_prewhere_and_in.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM t_02809 WHERE a IN (SELECT * FROM system.one)) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_prewhere_and_in.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM t_02809 WHERE a IN t_02809_aux) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_prewhere_and_in.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM t_02809 WHERE a IN t_02809_set) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_prewhere_and_in.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM t_02809 WHERE a NOT IN (1,2,3)) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_prewhere_and_in.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM t_02809 WHERE a NOT IN (SELECT * FROM system.one)) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_prewhere_and_in.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM t_02809 WHERE a NOT IN t_02809_aux) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_prewhere_and_in.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT * FROM (EXPLAIN actions=1 SELECT * FROM t_02809 WHERE a NOT IN t_02809_set) WHERE explain LIKE '%Prewhere filter';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_prewhere_and_in.sql",
    "error": "no viable alternative at input 'SELECT * FROM (EXPLAIN actions='"
  },
  {
    "query": "select * from (EXPLAIN indexes = 1 SELECT c1, sum(c3) FROM t0 GROUP BY c1) where explain like '%ReadFromMergeTree%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02725_agg_projection_resprect_PK.sql",
    "error": "no viable alternative at input 'select * from (EXPLAIN indexes ='"
  },
  {
    "query": "select * from (EXPLAIN indexes = 1 SELECT c1, sum(c3) FROM t0 WHERE c1 = 100 GROUP BY c1) where explain like '%Granules%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02725_agg_projection_resprect_PK.sql",
    "error": "no viable alternative at input 'select * from (EXPLAIN indexes ='"
  },
  {
    "query": "select * from (explain pipeline select sum(x) from (select x from t order by x) settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1, max_streams_to_max_threads_ratio=8, optimize_read_in_order=1, query_plan_read_in_order=1) where explain like '%Resize%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_max_streams_for_merge_tree_reading.sql",
    "error": "no viable alternative at input 'select * from (explain pipeline'"
  },
  {
    "query": "select * from (explain pipeline select sum(x) from (select x from t order by x) settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1, optimize_read_in_order=1, query_plan_read_in_order=1) where explain like '%Resize%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_max_streams_for_merge_tree_reading.sql",
    "error": "no viable alternative at input 'select * from (explain pipeline'"
  },
  {
    "query": "select * from (explain pipeline select sum(x) from t settings max_threads=32, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=0) where explain like '%Resize%' or explain like '%MergeTreeSelect%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_max_streams_for_merge_tree_reading.sql",
    "error": "no viable alternative at input 'select * from (explain pipeline'"
  },
  {
    "query": "select * from (explain pipeline select sum(x) from t settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=0, max_streams_to_max_threads_ratio=8) where explain like '%Resize%' or explain like '%MergeTreeSelect%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_max_streams_for_merge_tree_reading.sql",
    "error": "no viable alternative at input 'select * from (explain pipeline'"
  },
  {
    "query": "select * from (explain pipeline select sum(x) from t settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1) where explain like '%Resize%' or explain like '%MergeTreeSelect%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_max_streams_for_merge_tree_reading.sql",
    "error": "no viable alternative at input 'select * from (explain pipeline'"
  },
  {
    "query": "select * from (explain pipeline select sum(x) from t settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1, max_streams_to_max_threads_ratio=8) where explain like '%Resize%' or explain like '%MergeTreeSelect%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_max_streams_for_merge_tree_reading.sql",
    "error": "no viable alternative at input 'select * from (explain pipeline'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab3) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5 union all select * from tab4) order by (a + b) * c, sin(a / b), d limit 3) where explain ilike '%sort description%' or explain like '%ReadType%' or explain like '%Limit%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c) where explain like '%sort description%' or explain like '%ReadType%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b) limit 3) where explain ilike '%sort description%' or explain like '%ReadType%' or explain like '%Limit%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab3 where (a + b) * c = 18) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab4) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select *, a + b as x from tab) order by x * c) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select *, a + b as x, a / b as y from tab) order by x * c, sin(y)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from (select *, a / b as y from (select *, a + b as x from tab)) order by x * c, sin(y)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc , intDiv(sin(a / b), 2)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(intDiv(sin(a / b), -2), -3)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(intDiv(sin(a / b), -2), -3)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b) desc) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2), sin(a / b)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab order by sin(a / b), (a + b) * c) where explain ilike '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab where (a + b) * c = 8 order by sin(a / b)) where explain ilike '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab where (a + b) * c = 8 order by sin(b / a)) where explain ilike '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab where d + 1 = 2 order by (d + 1) * 4, (a + b) * c) where explain ilike '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab where d + 1 = 3 and (a + b) = 4 and c = 2 order by (d + 1) * 4, sin(a / b)) where explain ilike '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab2 order by toStartOfDay(x), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab2 order by toTimeZone(toTimezone(x, 'UTC'), 'CET'), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain plan actions = 1 select * from tab2 where toTimezone(x, 'CET') = '2020-02-03 01:00:00' order by intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql",
    "error": "no viable alternative at input 'select * from (explain plan'"
  },
  {
    "query": "select * from (explain select count() from x where (i >= 3 and i <= 6) or i = 7) where explain like '%ReadFromPreparedSource%' or explain like '%ReadFromMergeTree%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01710_projection_pk_trivial_count.sql",
    "error": "no viable alternative at input 'select * from (explain select'"
  },
  {
    "query": "SELECT * FROM (SELECT 'a' :: LowCardinality(Nullable(String)) AS key) AS t1 JOIN (SELECT 'a' :: Nullable(String) AS key) AS t2 ON t1.key = t2.key ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02277_full_sort_join_misc.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 'a' :'"
  },
  {
    "query": "SELECT * FROM (SELECT 'a' :: LowCardinality(Nullable(String)) AS key) AS t1 JOIN (SELECT 'a' :: String AS key) AS t2 ON t1.key = t2.key ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02277_full_sort_join_misc.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 'a' :'"
  },
  {
    "query": "SELECT * FROM (SELECT 'a' :: LowCardinality(String) AS key) AS t1 JOIN (SELECT 'a' :: LowCardinality(String) AS key) AS t2 ON t1.key = t2.key ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02277_full_sort_join_misc.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 'a' :'"
  },
  {
    "query": "SELECT * FROM (SELECT 'a' :: LowCardinality(String) AS key) AS t1 JOIN (SELECT 'a' :: String AS key) AS t2 ON t1.key = t2.key ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02277_full_sort_join_misc.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 'a' :'"
  },
  {
    "query": "select * from (select 'str' as \\`1\\`) where 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03079_analyzer_numeric_literals_as_column_names.sql",
    "error": "no viable alternative at input 'select * from (select 'str' as \\'"
  },
  {
    "query": "SELECT * FROM (SELECT * FROM t_str WHERE (SELECT any('1970-01-01'))::Date > today());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02690_subquery_identifiers.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT * FROM t_str WHERE (SELECT any('1970-01-01')):'"
  },
  {
    "query": "SELECT * FROM (SELECT * FROM test_fetch ORDER BY a OFFSET 1 ROW FETCH FIRST 3 ROWS WITH TIES) ORDER BY a, b;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01525_select_with_offset_fetch_clause.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT * FROM test_fetch ORDER BY a OFFSET'"
  },
  {
    "query": "SELECT * FROM (SELECT * FROM test_fetch ORDER BY a, b OFFSET 1 ROW FETCH FIRST 3 ROWS ONLY) ORDER BY a, b;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01525_select_with_offset_fetch_clause.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT * FROM test_fetch ORDER BY a, b OFFSET'"
  },
  {
    "query": "SELECT * FROM (SELECT -1 :: Nullable(Int32) as key) AS t1 FULL JOIN (SELECT 4294967295 :: UInt32 as key) t2 ON t1.key = t2.key ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02277_full_sort_join_misc.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT -1 :'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 :: Int32 as key) AS t1 JOIN (SELECT 1 :: UInt32 as key) t2 ON t1.key = t2.key ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02277_full_sort_join_misc.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 :'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 :: UInt32 as key) AS t1 FULL JOIN (SELECT 1 :: Nullable(UInt32) as key) t2 USING (key) ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02277_full_sort_join_misc.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 :'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 :: UInt32 as key) AS t1 FULL JOIN (SELECT NULL :: Nullable(UInt32) as key) t2 USING (key) ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02277_full_sort_join_misc.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 :'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 as a) as t1 ANTI JOIN  ( SELECT ('b', 256) as b ) AS t2 ON NULL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02000_join_on_const.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 as a) as t1 ANTI JOIN'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 as a) as t1 SEMI JOIN  ( SELECT ('b', 256) as b ) AS t2 ON NULL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02000_join_on_const.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 as a) as t1 SEMI JOIN'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 AS a) PASTE JOIN (SELECT 2 AS b) PASTE JOIN (SELECT 3 AS a) SETTINGS enable_analyzer = 1; -- { serverError AMBIGUOUS_COLUMN_NAME } SET enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 AS a) PASTE JOIN (SELECT 2 AS b) PASTE JOIN (SELECT 3 AS a) SETTINGS'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 AS a) PASTE JOIN (SELECT 2 AS b) PASTE JOIN (SELECT 3 AS c) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 AS a) PASTE JOIN (SELECT 2 AS b) PASTE JOIN (SELECT 3 AS c) SETTINGS'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 as a) t JOIN (SELECT 2 as a) \\`89467d35-77c2-4f82-ae7a-f093ff40f4cd\\`\nON t.a = \\`89467d35-77c2-4f82-ae7a-f093ff40f4cd\\`.a\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02871_join_on_system_errors.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 as a) t JOIN (SELECT 2 as a) \\'"
  },
  {
    "query": "select * from (select 1 intersect select 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select * from (select 1 intersect'"
  },
  {
    "query": "SELECT * FROM (SELECT 1 UNION ALL (SELECT 1 UNION SELECT 1 UNION ALL (SELECT 1 UNION ALL SELECT 1)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1 UNION ALL (SELECT 1 UNION SELECT'"
  },
  {
    "query": "select * from (select 1 union all select 2 union all select 3 union all select 4 except select 3 union all select 5) order by 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select * from (select 1 union all select 2 union all select 3 union all select 4 except'"
  },
  {
    "query": "select * from (select 1 union all select 2 union all select 3 union all select 4 intersect select 3 union all select 5 except select 1) order by 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select * from (select 1 union all select 2 union all select 3 union all select 4 intersect'"
  },
  {
    "query": "select * from (select 1 union all select 2 union all select 3 union all select 4 intersect select 3 union all select 5) order by 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select * from (select 1 union all select 2 union all select 3 union all select 4 intersect'"
  },
  {
    "query": "SELECT * FROM (SELECT 1) t1 PASTE JOIN (SELECT 2) SETTINGS joined_subquery_requires_alias=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT 1) t1 PASTE JOIN (SELECT 2) SETTINGS'"
  },
  {
    "query": "SELECT * FROM (SELECT NULL AS y, 1 AS x, '2020-01-01 10:10:10' :: DateTime64 AS t) AS t1\nASOF LEFT JOIN (SELECT NULL AS y, 1 AS x, '2020-01-01 10:10:10' :: DateTime64 AS t) AS t2\nON t1.t <= t2.t AND t1.x == t2.x FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01428_nullable_asof_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT NULL AS y, 1 AS x, '2020-01-01 10:10:10' :'"
  },
  {
    "query": "select * from (SELECT number as a FROM numbers(10)) t1 ANY PASTE JOIN (select number as a from numbers(10)) t2; -- { clientError SYNTAX_ERROR } select * from (SELECT number as a FROM numbers(10)) t1 ALL PASTE JOIN (select number as a from numbers(10)) t2; -- { clientError SYNTAX_ERROR }\nTRUNCATE TABLE test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'select * from (SELECT number as a FROM numbers(10)) t1 ANY PASTE'"
  },
  {
    "query": "select * from (SELECT number as a FROM numbers(10)) t1 PASTE JOIN (select number as a from numbers(10) order by a desc) t2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'select * from (SELECT number as a FROM numbers(10)) t1 PASTE JOIN (select number as a from numbers(10) order by a desc) t2;'"
  },
  {
    "query": "select * from (SELECT number as a FROM numbers(10)) t1 PASTE JOIN (select number as a from numbers(10)) t2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'select * from (SELECT number as a FROM numbers(10)) t1 PASTE JOIN (select number as a from numbers(10)) t2;'"
  },
  {
    "query": "select * from (SELECT number as a FROM numbers(11)) t1 PASTE JOIN (select * from test limit 2) t2 SETTINGs max_threads=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'select * from (SELECT number as a FROM numbers(11)) t1 PASTE JOIN (select * from test limit 2) t2 SETTINGs'"
  },
  {
    "query": "select * from (SELECT number as a FROM numbers(11)) t1 PASTE JOIN test t2 SETTINGS max_threads=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'select * from (SELECT number as a FROM numbers(11)) t1 PASTE JOIN test t2 SETTINGS'"
  },
  {
    "query": "select * from (SELECT number as a FROM numbers_mt(10)) t1 PASTE JOIN (select number as a from numbers(10) ORDER BY a DESC) t2 SETTINGS max_block_size=10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'select * from (SELECT number as a FROM numbers_mt(10)) t1 PASTE JOIN (select number as a from numbers(10) ORDER BY a DESC) t2 SETTINGS'"
  },
  {
    "query": "SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANTI JOIN dict_flat d USING(key) ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01115_join_with_dictionary.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANTI JOIN'"
  },
  {
    "query": "SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANTI JOIN dict_hashed d USING(key) ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01115_join_with_dictionary.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANTI JOIN'"
  },
  {
    "query": "SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 SEMI JOIN dict_flat d USING(key) ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01115_join_with_dictionary.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 SEMI JOIN'"
  },
  {
    "query": "SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 SEMI JOIN dict_hashed d USING(key) ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01115_join_with_dictionary.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 SEMI JOIN'"
  },
  {
    "query": "select * from (select number from system.numbers limit 5 union all select x from table_1) order by number settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from (select number from system.numbers limit 5 union all select x from table_1) order by number settings additional_table_filters={'"
  },
  {
    "query": "SELECT * FROM (SELECT number FROM test PASTE JOIN (Select number FROM numbers(7))) PASTE JOIN (SELECT number FROM numbers(6) PASTE JOIN (SELECT number FROM test)) SETTINGS joined_subquery_requires_alias = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT number FROM test PASTE JOIN (Select number FROM numbers(7)))'"
  },
  {
    "query": "SELECT * FROM (SELECT number FROM test PASTE JOIN (SELECT number FROM test PASTE JOIN (Select number FROM numbers(7)))) PASTE JOIN (SELECT number FROM numbers(6) PASTE JOIN (SELECT number FROM test)) SETTINGS joined_subquery_requires_alias = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT number FROM test PASTE JOIN (SELECT number FROM test PASTE JOIN (Select number FROM numbers(7)))'"
  },
  {
    "query": "SELECT * FROM (SELECT number FROM test) PASTE JOIN (SELECT number FROM numbers(6) ORDER BY number) SETTINGS joined_subquery_requires_alias = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT number FROM test) PASTE JOIN (SELECT number FROM numbers(6) ORDER BY number) SETTINGS'"
  },
  {
    "query": "SELECT * FROM (SELECT toUInt64(b), sum(id) AS b FROM test) WHERE \\`toUInt64(sum(id))\\` = 3; -- { serverError UNKNOWN_IDENTIFIER } DROP TABLE IF EXISTS test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01076_predicate_optimizer_with_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM (SELECT toUInt64(b), sum(id) AS b FROM test) WHERE \\'"
  },
  {
    "query": "SELECT * FROM (WITH test1 AS (SELECT toInt32(*) i FROM numbers(5)) SELECT * FROM test1) l ANY INNER JOIN test1 r on (l.i == r.i);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01495_subqueries_in_with_statement.sql",
    "error": "no viable alternative at input 'SELECT * FROM (WITH test1 AS ('"
  },
  {
    "query": "SELECT * FROM 02131_rptable PREWHERE x >= 2\nSETTINGS additional_table_filters = {'02131_rptable': 'x > 1'}\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02131_row_policies_combination.sql",
    "error": "no viable alternative at input 'SELECT * FROM 02131_rptable PREWHERE x >= 2\\nSETTINGS additional_table_filters = {'"
  },
  {
    "query": "SELECT * FROM 02131_rptable WHERE x >= 2\nSETTINGS additional_table_filters = {'02131_rptable': 'x > 1'}\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02131_row_policies_combination.sql",
    "error": "no viable alternative at input 'SELECT * FROM 02131_rptable WHERE x >= 2\\nSETTINGS additional_table_filters = {'"
  },
  {
    "query": "SELECT * FROM \\`01945.db\\`.\\`test_dictionary.test\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_dictionary_quoted_database_name.sql",
    "error": "no viable alternative at input 'SELECT * FROM \\'"
  },
  {
    "query": "SELECT * FROM \\`01945.db\\`.test_dictionary;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_dictionary_quoted_database_name.sql",
    "error": "no viable alternative at input 'SELECT * FROM \\'"
  },
  {
    "query": "SELECT * FROM \\`system\\`.\\`one\\` AS \\`xxx\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00138_table_aliases.sql",
    "error": "no viable alternative at input 'SELECT * FROM \\'"
  },
  {
    "query": "select * from \\`table_00609\\` prewhere val > 2 format Null SETTINGS max_block_size=10000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00609_prewhere_and_default.sql",
    "error": "no viable alternative at input 'select * from \\'"
  },
  {
    "query": "select * from \\`table_00609\\` prewhere val > 2 format Null SETTINGS max_block_size=1000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00609_prewhere_and_default.sql",
    "error": "no viable alternative at input 'select * from \\'"
  },
  {
    "query": "select * from \\`table_00609\\` prewhere val > 2 format Null SETTINGS max_block_size=100;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00609_prewhere_and_default.sql",
    "error": "no viable alternative at input 'select * from \\'"
  },
  {
    "query": "select * from \\`table_00609\\` prewhere val > 2 format Null SETTINGS max_block_size=20000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00609_prewhere_and_default.sql",
    "error": "no viable alternative at input 'select * from \\'"
  },
  {
    "query": "select * from \\`table_00609\\` prewhere val > 2 format Null SETTINGS max_block_size=30000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00609_prewhere_and_default.sql",
    "error": "no viable alternative at input 'select * from \\'"
  },
  {
    "query": "select * from \\`table_00609\\` prewhere val > 2 format Null SETTINGS max_block_size=40000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00609_prewhere_and_default.sql",
    "error": "no viable alternative at input 'select * from \\'"
  },
  {
    "query": "select * from \\`table_00609\\` prewhere val > 2 format Null SETTINGS max_block_size=80000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00609_prewhere_and_default.sql",
    "error": "no viable alternative at input 'select * from \\'"
  },
  {
    "query": "select * from \\`table_00609\\` prewhere val > 2 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00609_prewhere_and_default.sql",
    "error": "no viable alternative at input 'select * from \\'"
  },
  {
    "query": "SELECT * FROM ab_12_aaa aa\nLEFT JOIN ab_12_bbb bb\nON bb.id = aa.id AND bb.\\`_year\\` = aa.\\`_year\\`\nWHERE bb.theyear >= 2019;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03048_not_found_column_xxx_in_block.sql",
    "error": "no viable alternative at input 'SELECT * FROM ab_12_aaa aa\\nLEFT JOIN ab_12_bbb bb\\nON bb.id = aa.id AND bb.\\'"
  },
  {
    "query": "SELECT * FROM cluster(test_cluster_two_shards, view(SELECT 'Hello' AS all, 'World' AS distinct));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02133_distributed_queries_formatting.sql",
    "error": "no viable alternative at input 'SELECT * FROM cluster(test_cluster_two_shards, view(SELECT 'Hello''"
  },
  {
    "query": "select * from dist_01757 where dummy in (0,) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01757_optimize_skip_unused_shards_limit.sql",
    "error": "no viable alternative at input 'select * from dist_01757 where dummy in (0,)'"
  },
  {
    "query": "select * from dist_02346 order by x settings additional_table_filters={'dist_02346' : 'x > 3 and x < 7'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_distr.sql",
    "error": "no viable alternative at input 'select * from dist_02346 order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from distr_table order by x settings additional_table_filters={'distr_table' : 'length(y) < 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_index.sql",
    "error": "no viable alternative at input 'select * from distr_table order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from distr_table order by x settings additional_table_filters={'distr_table' : 'length(y) > 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_index.sql",
    "error": "no viable alternative at input 'select * from distr_table order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from distr_table order by x settings additional_table_filters={'distr_table' : 'x < 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_index.sql",
    "error": "no viable alternative at input 'select * from distr_table order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from distr_table order by x settings additional_table_filters={'distr_table' : 'x > 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_index.sql",
    "error": "no viable alternative at input 'select * from distr_table order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from distr_table settings additional_table_filters={'distr_table' : 'x != 2 and x != 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from distr_table settings additional_table_filters={'"
  },
  {
    "query": "select * from distr_table settings additional_table_filters={'distr_table' : 'x = 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from distr_table settings additional_table_filters={'"
  },
  {
    "query": "SELECT * FROM fill ORDER BY date DESC WITH FILL TO toDate('2019-05-01') STEP -2, val DESC WITH FILL FROM 10 TO -5 STEP -3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00995_order_by_with_fill.sql",
    "error": "no viable alternative at input 'SELECT * FROM fill ORDER BY date DESC WITH FILL TO toDate'"
  },
  {
    "query": "SELECT * FROM fill ORDER BY date WITH FILL FROM toDate('2019-05-01') TO toDate('2019-05-31'), val WITH FILL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00995_order_by_with_fill.sql",
    "error": "no viable alternative at input 'SELECT * FROM fill ORDER BY date WITH FILL FROM toDate'"
  },
  {
    "query": "SELECT * FROM fill ORDER BY date WITH FILL TO toDate('2019-06-23') STEP 3, val WITH FILL FROM -10 STEP 2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00995_order_by_with_fill.sql",
    "error": "no viable alternative at input 'SELECT * FROM fill ORDER BY date WITH FILL TO toDate'"
  },
  {
    "query": "select * from format('RowBinaryWithDefaults', 'x Array(Tuple(UInt32, UInt32)) default [(42, 42)]', x'01');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_row_binary_with_defaults.sql",
    "error": "no viable alternative at input 'select * from format('RowBinaryWithDefaults', 'x Array(Tuple(UInt32, UInt32)) default [(42, 42)]', x'01''"
  },
  {
    "query": "select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'000001000000');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_row_binary_with_defaults.sql",
    "error": "no viable alternative at input 'select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'000001000000''"
  },
  {
    "query": "select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'0001');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_row_binary_with_defaults.sql",
    "error": "no viable alternative at input 'select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'0001''"
  },
  {
    "query": "select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'01');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_row_binary_with_defaults.sql",
    "error": "no viable alternative at input 'select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'01''"
  },
  {
    "query": "select * from format('RowBinaryWithDefaults', 'x UInt32 default 42', x'0001000000');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_row_binary_with_defaults.sql",
    "error": "no viable alternative at input 'select * from format('RowBinaryWithDefaults', 'x UInt32 default 42', x'0001000000''"
  },
  {
    "query": "select * from format('RowBinaryWithDefaults', 'x UInt32 default 42', x'01');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_row_binary_with_defaults.sql",
    "error": "no viable alternative at input 'select * from format('RowBinaryWithDefaults', 'x UInt32 default 42', x'01''"
  },
  {
    "query": "select * from format(BSONEachRow, 'x UInt32, y UInt32', x'1a0000001078002a0000001078002a0000001079002a00000000'); -- {serverError INCORRECT_DATA} ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02590_bson_duplicate_column.sql",
    "error": "no viable alternative at input 'select * from format(BSONEachRow, 'x UInt32, y UInt32', x'1a0000001078002a0000001078002a0000001079002a00000000''"
  },
  {
    "query": "select * from format(CSV, '1,2,\"[1,2,3]\",\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02542_table_function_format.sql",
    "error": "no viable alternative at input 'select * from format(CSV, '1,2,\"[1,2,3]\",\"[[\\\\'abc'"
  },
  {
    "query": "select * from format(CSV, 'a1 Int32, a2 UInt64, a3 Array(Int32), a4 Array(Array(String))', '1,2,\"[1,2,3]\",\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02542_table_function_format.sql",
    "error": "no viable alternative at input 'select * from format(CSV, 'a1 Int32, a2 UInt64, a3 Array(Int32), a4 Array(Array(String))', '1,2,\"[1,2,3]\",\"[[\\\\'abc'"
  },
  {
    "query": "select * from format(JSONEachRow,  \\$\\$\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02188_table_function_format.sql",
    "error": "no viable alternative at input 'select * from format(JSONEachRow,  \\'"
  },
  {
    "query": "select * from format(JSONEachRow, 'a String, b Int64', \\$\\$\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n{\"a\": \"Hello\", \"b\": 111}\n{\"a\": \"World\", \"b\": 123}\n\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02542_table_function_format.sql",
    "error": "no viable alternative at input 'select * from format(JSONEachRow, 'a String, b Int64', \\'"
  },
  {
    "query": "select * from format(JSONEachRow, \\$\\$ {\"key\" : \"\\\\u\"}\n{\"key\" : \"\\\\ud\"}\n{\"key\" : \"\\\\ud8\"}\n{\"key\" : \"\\\\ud80\"}\n{\"key\" : \"\\\\ud800\"}\n{\"key\" : \"\\\\ud800\\\\\"}\n{\"key\" : \"\\\\ud800\\\\u\"}\n{\"key\" : \"\\\\ud800\\\\u1\"}\n{\"key\" : \"\\\\ud800\\\\u12\"}\n{\"key\" : \"\\\\ud800\\\\u123\"}\n{\"key\" : \"\\\\ud800\\\\u1234\"}\n\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_save_bad_json_escape_sequences.sql",
    "error": "no viable alternative at input 'select * from format(JSONEachRow, \\'"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"ClickHouse\":\"Is Fast\"}', random_seed=1337) LIMIT 20;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}',\nrandom_seed=123456,\nreuse_output=0,\nmax_output_length=128) LIMIT 20;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}',\nrandom_seed=123456,\nreuse_output=0,\nmax_output_length=65536,\nmax_nesting_level=10,\nmax_array_size=20) LIMIT 20;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}', random_seed=123456, reuse_output=false) LIMIT 20;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}', random_seed=123456, reuse_output=true) LIMIT 20;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}]}', random_seed=1337) LIMIT 20;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, max_output_length=\"Hello\") LIMIT 10; -- { serverError BAD_ARGUMENTS } SELECT * FROM fuzzJSON(02918_json_fuzzer, max_output_length=65537) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nSELECT * FROM fuzzJSON(02918_json_fuzzer, probability=10) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nSELECT * FROM fuzzJSON(02918_json_fuzzer, probability=-0.1) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nSELECT * FROM fuzzJSON(02918_json_fuzzer, probability=1.1) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nSELECT * FROM fuzzJSON(02918_json_fuzzer, probability=1.1) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nSELECT * FROM fuzzJSON(02918_json_fuzzer, max_string_value_length=65537) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nSELECT * FROM fuzzJSON(02918_json_fuzzer, max_key_length=65537) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nSELECT * FROM fuzzJSON(02918_json_fuzzer, max_key_length=10, min_key_length=0) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nSELECT * FROM fuzzJSON(02918_json_fuzzer, max_key_length=10, min_key_length=11) LIMIT 10; -- { serverError BAD_ARGUMENTS }\nDROP TABLE IF EXISTS 02918_table_obj1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, max_output_length='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=54321) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=6667,\nmax_nesting_level=0) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed='"
  },
  {
    "query": "SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=6667,\nmax_object_size=0,\nmax_array_size=0) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed='"
  },
  {
    "query": "SELECT * FROM fuzzQuery('SELECT * FROM (\nSELECT\n([toString(number % 2)] :: Array(LowCardinality(String))) AS item_id,\ncount()\nFROM numbers(3)\nGROUP BY item_id WITH TOTALS\n) AS l FULL JOIN (\nSELECT\n([toString((number % 2) * 2)] :: Array(String)) AS item_id\nFROM numbers(3)\n) AS r\nON l.item_id = r.item_id\nORDER BY 1,2,3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03031_table_function_fuzzquery.sql",
    "error": "no viable alternative at input 'SELECT * FROM fuzzQuery(''"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName != 'Peter'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !contains 'Pet'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !contains_cs 'Pet'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !endswith 'ter'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !endswith_cs 'ter'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !has 'Peter'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !has_cs 'peter'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !in (\"test\", \"test2\")\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !in ('Peter', 'Latoya')\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !startswith 'Peter'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "select * from kql(\\$\\$Customers | where FirstName !startswith_cs 'Peter'\\$\\$);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_operator_in_sql.sql",
    "error": "no viable alternative at input 'select * from kql(\\'"
  },
  {
    "query": "Select * from kql(\\$\\$Customers|project FirstName\\$\\$) limit 1;;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_kql_create_table.sql",
    "error": "no viable alternative at input 'Select * from kql(\\'"
  },
  {
    "query": "SELECT * FROM loop({CLICKHOUSE_DATABASE:Identifier}, t) LIMIT 15;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03147_table_function_loop.sql",
    "error": "no viable alternative at input 'SELECT * FROM loop({'"
  },
  {
    "query": "SELECT * FROM loop({CLICKHOUSE_DATABASE:Identifier}.t) LIMIT 15;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03147_table_function_loop.sql",
    "error": "no viable alternative at input 'SELECT * FROM loop({'"
  },
  {
    "query": "select * from m_table order by x  settings additional_table_filters={'m_table' : 'x != 4', 'table_1' : 'x != 2', 'table_2' : 'x != 5'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from m_table order by x  settings additional_table_filters={'"
  },
  {
    "query": "select * from m_table order by x  settings additional_table_filters={'m_table' : 'x != 4'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from m_table order by x  settings additional_table_filters={'"
  },
  {
    "query": "select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 2', 'table_2' : 'x != 5'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from m_table order by x  settings additional_table_filters={'"
  },
  {
    "query": "select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 4', 'table_2' : 'x != 4'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from m_table order by x  settings additional_table_filters={'"
  },
  {
    "query": "select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 4'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from m_table order by x  settings additional_table_filters={'"
  },
  {
    "query": "select * from m_table order by x  settings additional_table_filters={'table_2' : 'x != 4'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from m_table order by x  settings additional_table_filters={'"
  },
  {
    "query": "select * from m_table order by x  settings additional_table_filters={'table_2' : 'x != 5'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from m_table order by x  settings additional_table_filters={'"
  },
  {
    "query": "select * from m_table order by x settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from m_table order by x settings additional_table_filters={'"
  },
  {
    "query": "SELECT * FROM mergeTreeIndex(currentDatabase(), t_merge_tree_index, with_marks = true) ORDER BY part_name, mark_number FORMAT PrettyCompactNoEscapesMonoBlock;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02947_merge_tree_index_table_2.sql",
    "error": "no viable alternative at input 'SELECT * FROM mergeTreeIndex(currentDatabase(), t_merge_tree_index, with_marks ='"
  },
  {
    "query": "select * from mv_table settings additional_table_filters={'mv_table' : 'x != 5'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from mv_table settings additional_table_filters={'"
  },
  {
    "query": "select * from mv_table settings additional_table_filters={'table_1' : 'x != 5'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from mv_table settings additional_table_filters={'"
  },
  {
    "query": "select * from mv_table settings additional_table_filters={'table_2' : 'x != 5'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from mv_table settings additional_table_filters={'"
  },
  {
    "query": "SELECT * FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT * FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout'"
  },
  {
    "query": "SELECT * FROM null();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02674_null_default_structure.sql",
    "error": "no viable alternative at input 'SELECT * FROM null'"
  },
  {
    "query": "SELECT * FROM numbers(SETTINGS x = 1); -- { serverError BAD_ARGUMENTS, UNSUPPORTED_METHOD } SELECT * FROM numbers(numbers(SETTINGS x = 1)); -- { serverError UNKNOWN_FUNCTION, UNSUPPORTED_METHOD }\nSELECT * FROM numbers(numbers(SETTINGS x = 1), SETTINGS x = 1); -- { serverError UNKNOWN_FUNCTION, UNSUPPORTED_METHOD }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02815_logical_error_cannot_get_column_name_of_set.sql",
    "error": "no viable alternative at input 'SELECT * FROM numbers(SETTINGS x'"
  },
  {
    "query": "SELECT * from one A JOIN system.one one ON A.dummy = one.dummy\nJOIN system.one two ON A.dummy = two.dummy\nFORMAT PrettyCompact;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ambiguous_column.sql",
    "error": "no viable alternative at input 'SELECT * from one A JOIN system.one one'"
  },
  {
    "query": "SELECT * FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_order_by_all.sql",
    "error": "no viable alternative at input 'SELECT * FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false'"
  },
  {
    "query": "select * from pv (timestamp_param=toDateTime('2024-04-01 00:00:01'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03146_parameterized_view_with_date.sql",
    "error": "no viable alternative at input 'select * from pv (timestamp_param='"
  },
  {
    "query": "select * from pv (timestamp_param=toDateTime('2024-040')); -- { serverError CANNOT_PARSE_DATETIME } drop table table_pv;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03146_parameterized_view_with_date.sql",
    "error": "no viable alternative at input 'select * from pv (timestamp_param='"
  },
  {
    "query": "SELECT * FROM remote('127.0.0.1', view(SELECT 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01415_table_function_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM remote('127.0.0.1', view(SELECT 1'"
  },
  {
    "query": "select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy != 0'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'"
  },
  {
    "query": "select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy = 0'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'"
  },
  {
    "query": "SELECT * FROM remote('127.1', system.one, 1 IN id); -- { serverError UNKNOWN_TABLE } SELECT * FROM remote('127.1', system.one, 1 IN dummy); -- { serverError UNKNOWN_TABLE }\nSELECT * FROM remote('127.1', view(SELECT * FROM system.one), 1 IN id); -- { serverError UNKNOWN_TABLE }\nSELECT * FROM remote('127.1', view(SELECT number AS id FROM numbers(2)), 1 IN id); -- { serverError UNKNOWN_TABLE }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02111_global_context_temporary_tables.sql",
    "error": "no viable alternative at input 'SELECT * FROM remote('127.1', system.one, 1 IN'"
  },
  {
    "query": "select * from remote('127.1', view(select * from system.one), dummy) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01932_remote_sharding_key_column.sql",
    "error": "no viable alternative at input 'select * from remote('127.1', view(select *'"
  },
  {
    "query": "select * from remote('127.1', view(select * from system.one), identity(dummy)) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01932_remote_sharding_key_column.sql",
    "error": "no viable alternative at input 'select * from remote('127.1', view(select *'"
  },
  {
    "query": "SELECT * FROM remote('127.{1,2}', view(\nSELECT number%20 number\nFROM numbers(40)\nWHERE (number % 2) = (shardNum() - 1)\n), number)\nGROUP BY number\nORDER BY number ASC\nLIMIT 1 BY number\nLIMIT 5, 5\nSETTINGS\ndistributed_group_by_no_merge=2,\ndistributed_push_down_limit=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02003_WithMergeableStateAfterAggregationAndLimit_LIMIT_BY_LIMIT_OFFSET.sql",
    "error": "no viable alternative at input 'SELECT * FROM remote('127.{1,2}', view(\\nSELECT number'"
  },
  {
    "query": "SELECT * FROM remote('127.{1,2}', view(\nSELECT number%20 number\nFROM numbers(40)\nWHERE (number % 2) = (shardNum() - 1)\n), number)\nGROUP BY number\nORDER BY number ASC\nLIMIT 1 BY number\nLIMIT 5, 5\nSETTINGS\noptimize_skip_unused_shards=1,\noptimize_distributed_group_by_sharding_key=1,\ndistributed_push_down_limit=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02003_WithMergeableStateAfterAggregationAndLimit_LIMIT_BY_LIMIT_OFFSET.sql",
    "error": "no viable alternative at input 'SELECT * FROM remote('127.{1,2}', view(\\nSELECT number'"
  },
  {
    "query": "select * from remote('127.{1,2}', view(select 'foo.com' key), cityHash64(key)) where key = cutToFirstSignificantSubdomainCustom('bar.com', 'public_suffix_list') settings optimize_skip_unused_shards=1, force_optimize_skip_unused_shards=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_custom_tld_sharding_key.sql",
    "error": "no viable alternative at input 'select * from remote('127.{1,2}', view(select 'foo.com''"
  },
  {
    "query": "select * from remote('127.{1,2}', view(select 'foo.com' key), cityHash64(key)) where key = cutToFirstSignificantSubdomainCustom('foo.com', 'public_suffix_list') settings optimize_skip_unused_shards=1, force_optimize_skip_unused_shards=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_custom_tld_sharding_key.sql",
    "error": "no viable alternative at input 'select * from remote('127.{1,2}', view(select 'foo.com''"
  },
  {
    "query": "select * from remote('127.{1,2}', view(select * from system.one), dummy) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01932_remote_sharding_key_column.sql",
    "error": "no viable alternative at input 'select * from remote('127.{1,2}', view(select *'"
  },
  {
    "query": "select * from remote('127.{1,2}', view(select * from system.one), identity(dummy)) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01932_remote_sharding_key_column.sql",
    "error": "no viable alternative at input 'select * from remote('127.{1,2}', view(select *'"
  },
  {
    "query": "select * from remote('127.{1..4}', view(select number id from numbers(0)), bitAnd(murmurHash3_32(id), 2147483647)) where id in (2, 3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select * from remote('127.{1..4}', view(select number'"
  },
  {
    "query": "select * from remote('127.{1..8}', view(select number id from numbers(0)), bitAnd(murmurHash3_32(id), 2147483647)) where id in (2, 3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select * from remote('127.{1..8}', view(select number'"
  },
  {
    "query": "select * from remote('127.{2,4}', view( select sleep(0.1) from numbers(20) settings max_block_size=1)\n)\nlimit 10\nsettings\ndrain_timeout=-1,\nquery_profiler_real_time_period_ns=1,\nuse_hedged_requests=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02466_distributed_query_profiler.sql",
    "error": "no viable alternative at input 'select * from remote('127.{2,4}', view( select sleep'"
  },
  {
    "query": "select * from remote('127.{2..11}', view(select * from numbers(1e6))) group by number order by number limit 1e6 settings distributed_group_by_no_merge=2, max_memory_usage='20Mi', max_block_size=4294967296; -- { serverError MEMORY_LIMIT_EXCEEDED } create table data_01730 engine=MergeTree() order by key as select number key from numbers(1e6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01730_distributed_group_by_no_merge_order_by_long.sql",
    "error": "no viable alternative at input 'select * from remote('127.{2..11}', view(select *'"
  },
  {
    "query": "select * from remote('127.{2..11}', view(select * from numbers(1e6))) group by number order by number limit 20 settings distributed_group_by_no_merge=0, max_memory_usage='100Mi'; -- { serverError MEMORY_LIMIT_EXCEEDED } select * from remote('127.{2..11}', view(select * from numbers(1e6))) group by number order by number limit 20 settings distributed_group_by_no_merge=2, max_memory_usage='100Mi';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01730_distributed_group_by_no_merge_order_by_long.sql",
    "error": "no viable alternative at input 'select * from remote('127.{2..11}', view(select *'"
  },
  {
    "query": "select * from requests as \\`t\\` where \\`t\\`.event_tm > toDate('2000-01-01');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01047_no_alias_columns_with_table_aliases.sql",
    "error": "no viable alternative at input 'select * from requests as \\'"
  },
  {
    "query": "SELECT * FROM s3(headers('random_header' = 'value')); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH } SELECT * FROM s3Cluster('test_cluster_two_shards_localhost', headers('random_header' = 'value')); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02772_s3_crash.sql",
    "error": "no viable alternative at input 'SELECT * FROM s3(headers('random_header' ='"
  },
  {
    "query": "SELECT * FROM s3(s3_conn, filename='03036_archive1.zip :: example{1,2}.csv') ORDER BY tuple(*);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_schema_inference_cache_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT * FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT * FROM s3(s3_conn, filename='03036_json_archive.zip :: example{11,12}.jsonl') ORDER BY tuple(*);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_schema_inference_cache_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT * FROM s3(s3_conn, filename='"
  },
  {
    "query": "select * from s3(s3_conn, filename='test_02302_*', format=Parquet) where _file like '%5';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02302_s3_file_pruning.sql",
    "error": "no viable alternative at input 'select * from s3(s3_conn, filename='"
  },
  {
    "query": "select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV', 'auto', headers(MyCustomHeader = 'SomeValue'), 'auto') order by c1, c2, c3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02457_s3_cluster_schema_inference.sql",
    "error": "no viable alternative at input 'select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV', 'auto', headers(MyCustomHeader ='"
  },
  {
    "query": "select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', headers(MyCustomHeader = 'SomeValue')) order by c1, c2, c3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02457_s3_cluster_schema_inference.sql",
    "error": "no viable alternative at input 'select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', headers(MyCustomHeader ='"
  },
  {
    "query": "SELECT * FROM system . \\`one\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00269_database_table_whitespace.sql",
    "error": "no viable alternative at input 'SELECT * FROM system . \\'"
  },
  {
    "query": "select * from system.numbers as t limit 5 settings additional_table_filters={'t' : 'number % 2 != 0'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from system.numbers as t limit 5 settings additional_table_filters={'"
  },
  {
    "query": "select * from system.numbers limit 5 settings additional_table_filters={'system.numbers' : 'number != 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from system.numbers limit 5 settings additional_table_filters={'"
  },
  {
    "query": "select * from system.numbers limit 5 settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from system.numbers limit 5 settings additional_table_filters={'"
  },
  {
    "query": "SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true, query_cache_squash_partial_results = false;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_squash_partial_results.sql",
    "error": "no viable alternative at input 'SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true'"
  },
  {
    "query": "SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true, query_cache_squash_partial_results = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_squash_partial_results.sql",
    "error": "no viable alternative at input 'SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true'"
  },
  {
    "query": "SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_squash_partial_results.sql",
    "error": "no viable alternative at input 'SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true'"
  },
  {
    "query": "SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true, query_cache_compress_entries = false;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_compression.sql",
    "error": "no viable alternative at input 'SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true, query_cache_compress_entries = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_compression.sql",
    "error": "no viable alternative at input 'SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_compression.sql",
    "error": "no viable alternative at input 'SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT * FROM t1 JOIN t2 ON (t1.x <=> t2.x OR (t1.x IS NULL AND t2.x IS NULL)) AND (t1.y == t2.y OR (t1.y IS NULL AND t2.y IS NULL)) AND COALESCE(t1.x, 0) != 2  ORDER BY t1.x NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT * FROM t1 JOIN t2 ON (t1.x <=>'"
  },
  {
    "query": "SELECT * FROM t1 JOIN t2 ON (t1.x <=> t2.x OR (t1.x IS NULL AND t2.x IS NULL)) ORDER BY t1.x NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT * FROM t1 JOIN t2 ON (t1.x <=>'"
  },
  {
    "query": "SELECT * FROM t1 JOIN t2 ON (t1.x <=> t2.x OR t1.x IS NULL AND t2.x IS NULL) OR t1.y <=> t2.y ORDER BY t1.x NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT * FROM t1 JOIN t2 ON (t1.x <=>'"
  },
  {
    "query": "SELECT * FROM t1 JOIN t2 ON (t1.x <=> t2.x OR t1.y <=> t2.y OR (t1.x IS NULL AND t2.x IS NULL) OR (t1.y IS NULL AND t2.y IS NULL)) ORDER BY t1.x NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT * FROM t1 JOIN t2 ON (t1.x <=>'"
  },
  {
    "query": "SELECT * FROM t1 JOIN t2 ON (t1.x = t2.x OR t1.x IS NULL AND t2.x IS NULL) AND t1.y <=> t2.y ORDER BY t1.x NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT * FROM t1 JOIN t2 ON (t1.x = t2.x OR t1.x IS NULL AND t2.x IS NULL) AND t1.y <=>'"
  },
  {
    "query": "SELECT * FROM t1 JOIN t2 ON t1.key = t2.key AND t2.key > 0; -- { serverError NOT_IMPLEMENTED } SELECT * FROM t1 JOIN t2 ON t1.key = t2.key AND t1.key > 0; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM t1 JOIN t2 ON t1.key = t2.key OR t1.val = t2.key; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM t1 ANTI JOIN t2 ON t1.key = t2.key; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM t1 SEMI JOIN t2 ON t1.key = t2.key; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM t1 ANY JOIN t2 ON t1.key = t2.key SETTINGS any_join_distinct_right_table_keys = 1; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM t1 JOIN t2 USING (key) SETTINGS join_use_nulls = 1; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM ( SELECT key, sum(val) AS val FROM t1 GROUP BY key WITH TOTALS ) as t1\nJOIN ( SELECT key, sum(val) AS val FROM t2 GROUP BY key WITH TOTALS ) as t2 ON t1.key = t2.key; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM t1 JOIN ( SELECT key, sum(val) AS val FROM t2 GROUP BY key WITH TOTALS ) as t2 ON t1.key = t2.key; -- { serverError NOT_IMPLEMENTED }\nSELECT * FROM ( SELECT key, sum(val) AS val FROM t1 GROUP BY key WITH TOTALS ) as t1 JOIN t2 ON t1.key = t2.key; -- { serverError NOT_IMPLEMENTED }\nDROP TABLE IF EXISTS t1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02276_full_sort_join_unsupported.sql",
    "error": "no viable alternative at input 'SELECT * FROM t1 ANTI JOIN'"
  },
  {
    "query": "SELECT * FROM t1 JOIN t2 ON t1.x <=> t2.x AND ((t1.x = t1.y) OR t1.x IS NULL AND t1.y IS NULL) ORDER BY t1.x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT * FROM t1 JOIN t2 ON t1.x <=>'"
  },
  {
    "query": "SELECT * FROM t__fuzz_0 PREWHERE 7 AND (i < 2147483647) AND (j IN (2147483646, -2, 1)) SETTINGS enable_analyzer = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02996_analyzer_prewhere_projection.sql",
    "error": "no viable alternative at input 'SELECT * FROM t__fuzz_0 PREWHERE 7 AND (i < 2147483647) AND (j IN (2147483646, -2, 1)) SETTINGS enable_analyzer = true'"
  },
  {
    "query": "select * from table_1 order by x settings additional_table_filters={'table_1' : 'length(y) < 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_index.sql",
    "error": "no viable alternative at input 'select * from table_1 order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from table_1 order by x settings additional_table_filters={'table_1' : 'length(y) >= 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_index.sql",
    "error": "no viable alternative at input 'select * from table_1 order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from table_1 order by x settings additional_table_filters={'table_1' : 'x < 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_index.sql",
    "error": "no viable alternative at input 'select * from table_1 order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from table_1 order by x settings additional_table_filters={'table_1' : 'x > 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters_index.sql",
    "error": "no viable alternative at input 'select * from table_1 order by x settings additional_table_filters={'"
  },
  {
    "query": "select * from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from table_1 prewhere x != 4 settings additional_table_filters={'"
  },
  {
    "query": "select * from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'"
  },
  {
    "query": "select * from table_1 settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from table_1 settings additional_table_filters={'"
  },
  {
    "query": "select * from table_1 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from table_1 settings additional_table_filters={'"
  },
  {
    "query": "select * from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from table_1 where x != 3 settings additional_table_filters={'"
  },
  {
    "query": "select * from tb where \\`index\\` >= 0 AND \\`index\\` <= 2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01835_alias_to_primary_key_cyfdecyf.sql",
    "error": "no viable alternative at input 'select * from tb where \\'"
  },
  {
    "query": "SELECT * FROM test WHERE \\`int16\\` = -1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01056_negative_with_bloom_filter.sql",
    "error": "no viable alternative at input 'SELECT * FROM test WHERE \\'"
  },
  {
    "query": "SELECT * FROM test WHERE \\`int32\\` = -1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01056_negative_with_bloom_filter.sql",
    "error": "no viable alternative at input 'SELECT * FROM test WHERE \\'"
  },
  {
    "query": "SELECT * FROM test WHERE \\`int64\\` = -1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01056_negative_with_bloom_filter.sql",
    "error": "no viable alternative at input 'SELECT * FROM test WHERE \\'"
  },
  {
    "query": "SELECT * FROM test WHERE \\`int8\\` = -1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01056_negative_with_bloom_filter.sql",
    "error": "no viable alternative at input 'SELECT * FROM test WHERE \\'"
  },
  {
    "query": "SELECT * FROM test1 PASTE JOIN (SELECT * FROM test2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT * FROM test1 PASTE JOIN (SELECT * FROM test2);'"
  },
  {
    "query": "select * from test_23634 where (id, s, s1) = (null::Nullable(String), null::Nullable(String), null::Nullable(String)) order by id, s1, s1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01410_nullable_key_and_index_negate_cond.sql",
    "error": "no viable alternative at input 'select * from test_23634 where (id, s, s1) = (null:'"
  },
  {
    "query": "SELECT * FROM test_bloom_filter_index WHERE (\\`uint16\\`, \\`index_column\\`) IN (SELECT toUInt16(2), toUInt64(2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01414_bloom_filter_index_with_const_column.sql",
    "error": "no viable alternative at input 'SELECT * FROM test_bloom_filter_index WHERE (\\'"
  },
  {
    "query": "select * from test_param_view(param_test_val = 3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.sql",
    "error": "no viable alternative at input 'select * from test_param_view(param_test_val ='"
  },
  {
    "query": "select * from test_param_view2(param_test_val = 3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.sql",
    "error": "no viable alternative at input 'select * from test_param_view2(param_test_val ='"
  },
  {
    "query": "select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Database'='default'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02244_url_engine_headers_test.sql",
    "error": "no viable alternative at input 'select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Database'='"
  },
  {
    "query": "select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Database'='default', 'X-ClickHouse-Format'='JSONEachRow'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02244_url_engine_headers_test.sql",
    "error": "no viable alternative at input 'select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Database'='"
  },
  {
    "query": "select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Format'='JSONEachRow', 'X-ClickHouse-Database'='kek')); -- { serverError RECEIVED_ERROR_FROM_REMOTE_IO_SERVER } select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Format'='JSONEachRow', 'X-ClickHouse-Database'=1)); -- { serverError BAD_ARGUMENTS }\ndrop table if exists url;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02244_url_engine_headers_test.sql",
    "error": "no viable alternative at input 'select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Format'='"
  },
  {
    "query": "SELECT * FROM url('http://localhost:8123/', LineAsString, headers('exact_header' = 'value')); -- { serverError BAD_ARGUMENTS } SELECT * FROM url('http://localhost:8123/', LineAsString, headers('cAsE_INSENSITIVE_header' = 'value')); -- { serverError BAD_ARGUMENTS }\nSELECT * FROM url('http://localhost:8123/', LineAsString, headers('bad_header_name: test\\\\nexact_header' = 'value')); -- { serverError BAD_ARGUMENTS }\nSELECT * FROM url('http://localhost:8123/', LineAsString, headers('bad_header_value' = 'test\\\\nexact_header: value')); -- { serverError BAD_ARGUMENTS }\nSELECT * FROM url('http://localhost:8123/', LineAsString, headers('random_header' = 'value')) FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_forbidden_headers.sql",
    "error": "no viable alternative at input 'SELECT * FROM url('http://localhost:8123/', LineAsString, headers('exact_header' ='"
  },
  {
    "query": "select * from url(url_with_headers, url='http://127.0.0.1:8123?query=select+12', format='RawBLOB'); -- { serverError RECEIVED_ERROR_FROM_REMOTE_IO_SERVER } select * from url(url_with_headers, url='http://127.0.0.1:8123?query=select+12', format='RawBLOB', headers('X-ClickHouse-Database'='default'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02244_url_engine_headers_test.sql",
    "error": "no viable alternative at input 'select * from url(url_with_headers, url='"
  },
  {
    "query": "select * from url(url_with_headers, url='http://127.0.0.1:8123?query=select+12', format='RawBLOB', headers('X-ClickHouse-Database'='default', 'X-ClickHouse-Format'='JSONEachRow'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02244_url_engine_headers_test.sql",
    "error": "no viable alternative at input 'select * from url(url_with_headers, url='"
  },
  {
    "query": "select * from url(url_with_headers, url='http://127.0.0.1:8123?query=select+12', format='RawBLOB', headers('X-ClickHouse-Database'='kek')); -- { serverError RECEIVED_ERROR_FROM_REMOTE_IO_SERVER } select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02244_url_engine_headers_test.sql",
    "error": "no viable alternative at input 'select * from url(url_with_headers, url='"
  },
  {
    "query": "SELECT * FROM urlCluster('test_cluster_two_shards_localhost', 'http://localhost:8123/', LineAsString, headers('exact_header' = 'value')); -- { serverError BAD_ARGUMENTS } SELECT * FROM urlCluster('test_cluster_two_shards_localhost', 'http://localhost:8123/', LineAsString, headers('cAsE_INSENSITIVE_header' = 'value')); -- { serverError BAD_ARGUMENTS }\nSELECT * FROM urlCluster('test_cluster_two_shards_localhost', 'http://localhost:8123/', LineAsString, headers('bad_header_name: test\\\\nexact_header' = 'value')); -- { serverError BAD_ARGUMENTS }\nSELECT * FROM urlCluster('test_cluster_two_shards_localhost', 'http://localhost:8123/', LineAsString, headers('bad_header_value' = 'test\\\\nexact_header: value')); -- { serverError BAD_ARGUMENTS }\nSELECT * FROM urlCluster('test_cluster_two_shards_localhost', 'http://localhost:8123/', LineAsString, headers('random_header' = 'value')) FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_forbidden_headers.sql",
    "error": "no viable alternative at input 'SELECT * FROM urlCluster('test_cluster_two_shards_localhost', 'http://localhost:8123/', LineAsString, headers('exact_header' ='"
  },
  {
    "query": "select * from v1(m='test');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02428_parameterized_view_param_in_select_section.sql",
    "error": "no viable alternative at input 'select * from v1(m='"
  },
  {
    "query": "select * from v2(m='test');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02428_parameterized_view_param_in_select_section.sql",
    "error": "no viable alternative at input 'select * from v2(m='"
  },
  {
    "query": "select * from v3(m='test');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02428_parameterized_view_param_in_select_section.sql",
    "error": "no viable alternative at input 'select * from v3(m='"
  },
  {
    "query": "select * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3', 'v_numbers' : 'x != 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from v_numbers settings additional_table_filters={'"
  },
  {
    "query": "select * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from v_numbers settings additional_table_filters={'"
  },
  {
    "query": "select * from v_numbers settings additional_table_filters={'v_numbers' : 'x != 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select * from v_numbers settings additional_table_filters={'"
  },
  {
    "query": "SELECT * FROM VALUES('a Decimal(4, 4), b String, c String', (divide(toDecimal32(5, 3), 3), 'a', 'b'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00975_values_list.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('a Decimal(4, 4), b String, c String', ('"
  },
  {
    "query": "SELECT * FROM VALUES('a UInt64, s String', (1, 'one'), (2, 'two'), (3, 'three'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00975_values_list.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('a UInt64, s String', ('"
  },
  {
    "query": "SELECT * FROM values('arr Array(JSON)', '[\\\\'{\"x\" : 1}\\\\']') FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT * FROM values('arr Array(JSON)', '[\\\\'{'"
  },
  {
    "query": "SELECT * FROM values('arr Array(Object(''json''))', '[\\\\'{\"x\" : 1}\\\\']') FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT * FROM values('arr Array(Object(''json''))', '[\\\\'{'"
  },
  {
    "query": "SELECT * FROM values('arr Map(String, JSON)', '{\\\\'x\\\\' : \\\\'{\"y\" : 1}\\\\', \\\\'t\\\\' : \\\\'{\"y\" : 2}\\\\'}') FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT * FROM values('arr Map(String, JSON)', '{\\\\'x'"
  },
  {
    "query": "SELECT * FROM values('arr Map(String, Object(''json''))', '{\\\\'x\\\\' : \\\\'{\"y\" : 1}\\\\', \\\\'t\\\\' : \\\\'{\"y\" : 2}\\\\'}') FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT * FROM values('arr Map(String, Object(''json''))', '{\\\\'x'"
  },
  {
    "query": "SELECT * FROM values('arr Tuple(Int32, JSON)', '(1, \\\\'{\"y\" : 1}\\\\')', '(2, \\\\'{\"y\" : 2}\\\\')') FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT * FROM values('arr Tuple(Int32, JSON)', '(1, \\\\'{'"
  },
  {
    "query": "SELECT * FROM values('arr Tuple(Int32, Object(''json''))', '(1, \\\\'{\"y\" : 1}\\\\')', '(2, \\\\'{\"y\" : 2}\\\\')') FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT * FROM values('arr Tuple(Int32, Object(''json''))', '(1, \\\\'{'"
  },
  {
    "query": "SELECT * FROM VALUES('n UInt64, s String, ss String', (1 + 22, '23', toString(23)), (toUInt64('24'), '24', concat('2', '4')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00975_values_list.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('n UInt64, s String, ss String', ('"
  },
  {
    "query": "select * from values('s LowCardinality(Nullable(String))', (NULL));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02782_values_null_to_lc_nullable.sql",
    "error": "no viable alternative at input 'select * from values('s LowCardinality(Nullable(String))', ('"
  },
  {
    "query": "SELECT * FROM VALUES('s String', ('abra'), ('cadabra'), ('abracadabra'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00975_values_list.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('s String', ('"
  },
  {
    "query": "SELECT * FROM VALUES('x Decimal128(0)', (3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02286_convert_decimal_type.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('x Decimal128(0)', ('"
  },
  {
    "query": "SELECT * FROM VALUES('x Decimal256(0)', (4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02286_convert_decimal_type.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('x Decimal256(0)', ('"
  },
  {
    "query": "SELECT * FROM VALUES('x Decimal32(0)', (1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02286_convert_decimal_type.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('x Decimal32(0)', ('"
  },
  {
    "query": "SELECT * FROM VALUES('x Decimal64(0)', (2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02286_convert_decimal_type.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('x Decimal64(0)', ('"
  },
  {
    "query": "SELECT * FROM VALUES('x UInt8, y UInt16', 1 + 2, 'Hello'); -- { serverError BAD_ARGUMENTS } ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01658_values_ubsan.sql",
    "error": "no viable alternative at input 'SELECT * FROM VALUES('x UInt8, y UInt16', 1 +'"
  },
  {
    "query": "select * from values([1, 2.2]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02316_values_table_func_bug.sql",
    "error": "no viable alternative at input 'select * from values(['"
  },
  {
    "query": "select * from values([[1, 2, 3], [1.1, 2.2, 3.3]]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02316_values_table_func_bug.sql",
    "error": "no viable alternative at input 'select * from values(['"
  },
  {
    "query": "SELECT * FROM view(SELECT 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01415_table_function_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM view(SELECT 1'"
  },
  {
    "query": "select * from view(select id, toDateTime(date) as date from view(select 1 as id, '2024-05-02' as date)) where date='2024-05-02';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03245_views_and_filter_push_down_bug.sql",
    "error": "no viable alternative at input 'select * from view(select id'"
  },
  {
    "query": "select * from x order by () settings max_threads = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02891_empty_tuple.sql",
    "error": "no viable alternative at input 'select * from x order by ()'"
  },
  {
    "query": "select * from x order by ();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02891_empty_tuple.sql",
    "error": "no viable alternative at input 'select * from x order by ()'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`\nLEFT JOIN {CLICKHOUSE_DATABASE_1:Identifier}.\\`1-1\\` ON {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`.field = {CLICKHOUSE_DATABASE_1:Identifier}.\\`1-1\\`.field;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03091_analyzer_same_table_name_in_different_databases.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.dst ORDER BY x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00508_materialized_view_to.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "select * from {CLICKHOUSE_DATABASE:Identifier}.l left join {CLICKHOUSE_DATABASE:Identifier}.r  on  l.y = r.y  where r.ty >= 2019;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03049_unknown_identifier_materialized_column.sql",
    "error": "no viable alternative at input 'select * from {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.mv_00508 ORDER BY x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00508_materialized_view_to.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "select * from {CLICKHOUSE_DATABASE:Identifier}.my_materialized_view;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01053_drop_database_mat_view.sql",
    "error": "no viable alternative at input 'select * from {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.t_00751 ORDER BY date;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00751_default_databasename_for_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.t_mv_00751 ORDER BY date;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00751_default_databasename_for_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_00571;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00571_non_exist_database_when_create_materializ_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_joined_view_00740;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00740_database_in_nested_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_materialized_00571;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00571_non_exist_database_when_create_materializ_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_nested_view_00740;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00740_database_in_nested_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_view_00740;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00740_database_in_nested_view.sql",
    "error": "no viable alternative at input 'SELECT * FROM {'"
  },
  {
    "query": "SELECT *, _file FROM s3(s3_conn, filename = 'test_02495_1', format = Parquet)\nWHERE _file = 'test_02495_1';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_s3_filter_by_file.sql",
    "error": "no viable alternative at input 'SELECT *, _file FROM s3(s3_conn, filename ='"
  },
  {
    "query": "select *, _table from merge(currentDatabase(), '') order by  _table, (*,);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02486_truncate_and_unexpected_parts.sql",
    "error": "no viable alternative at input 'select *, _table from merge(currentDatabase(), '') order by  _table, (*,)'"
  },
  {
    "query": "select *, _table from merge(currentDatabase(), '') order by _table, (*,);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02486_truncate_and_unexpected_parts.sql",
    "error": "no viable alternative at input 'select *, _table from merge(currentDatabase(), '') order by _table, (*,)'"
  },
  {
    "query": "SELECT +1_2_3_4;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_numeric_literals_with_underscores.sql",
    "error": "no viable alternative at input 'SELECT +1_2_3_4'"
  },
  {
    "query": "SELECT -.3_4e+2_1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_numeric_literals_with_underscores.sql",
    "error": "no viable alternative at input 'SELECT -.3_4e'"
  },
  {
    "query": "SELECT -.3_4e-2_1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_numeric_literals_with_underscores.sql",
    "error": "no viable alternative at input 'SELECT -.3_4e'"
  },
  {
    "query": "SELECT -.3_4e2_1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_numeric_literals_with_underscores.sql",
    "error": "no viable alternative at input 'SELECT -.3_4e2_1'"
  },
  {
    "query": "SELECT -1::Int32;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_3.sql",
    "error": "no viable alternative at input '-1:'"
  },
  {
    "query": "SELECT -1::UInt64; -- { serverError CANNOT_PARSE_NUMBER } SELECT CAST(-1 AS UInt64); -- conversion with overflow\nSELECT [1.1, 2.3]::Array(Decimal(30, 20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input '-1:'"
  },
  {
    "query": "select 0 = multiMatchAny(materialize('abc'), []::Array(String)) from system.numbers limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00926_multimatch.sql",
    "error": "no viable alternative at input 'select 0 = multiMatchAny(materialize('abc'), []:'"
  },
  {
    "query": "select 0 = multiMatchAny(materialize('abc'), materialize([]::Array(String))) from system.numbers limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00926_multimatch.sql",
    "error": "no viable alternative at input 'select 0 = multiMatchAny(materialize('abc'), materialize([]:'"
  },
  {
    "query": "select 0 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), []::Array(String)) from system.numbers limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00926_multimatch.sql",
    "error": "no viable alternative at input 'select 0 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), []:'"
  },
  {
    "query": "select 0 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), materialize([]::Array(String))) from system.numbers limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00926_multimatch.sql",
    "error": "no viable alternative at input 'select 0 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), materialize([]:'"
  },
  {
    "query": "SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('0.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('128.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('192.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('224.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('240.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('654f:3716::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('654f:3716:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('::ffff:1:1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('0.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('1.1.1.1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('128.127.127.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('128.127.127.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('255.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('255.127.127.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 0 == dictHas({'"
  },
  {
    "query": "select 1 != all (select 1 from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 != all (select 1'"
  },
  {
    "query": "select 1 != all (select number from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 != all (select number from'"
  },
  {
    "query": "select 1 != any (select 1 from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 != any (select 1'"
  },
  {
    "query": "select 1 != any (select number from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 != any (select number from'"
  },
  {
    "query": "SELECT 1 + number from system.numbers LIMIT 1 SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_explain.sql",
    "error": "no viable alternative at input 'SELECT 1 + number from system.numbers LIMIT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 + x FROM tab where plus(1::LowCardinality(Nullable(UInt8)), x) <= 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT 1 + x FROM tab where plus(1:'"
  },
  {
    "query": "SELECT 1 + x FROM tab where plus(1::LowCardinality(Nullable(UInt8)), x) <= toDateTime('2022-02-02') + 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT 1 + x FROM tab where plus(1:'"
  },
  {
    "query": "SELECT 1 + x FROM tab where plus(1::LowCardinality(UInt8), x) <= 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT 1 + x FROM tab where plus(1:'"
  },
  {
    "query": "SELECT 1 + x FROM tab where plus(1::LowCardinality(UInt8), x) <= toDateTime('2022-02-02') + 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT 1 + x FROM tab where plus(1:'"
  },
  {
    "query": "SELECT 1 + x FROM tab where plus(1::Nullable(UInt8), x) <= 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT 1 + x FROM tab where plus(1:'"
  },
  {
    "query": "SELECT 1 + x FROM tab where plus(1::Nullable(UInt8), x) <= toDateTime('2022-02-02') + 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT 1 + x FROM tab where plus(1:'"
  },
  {
    "query": "select 1 < any (select 1 from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 < any (select 1'"
  },
  {
    "query": "select 1 < any (select number from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 < any (select number from'"
  },
  {
    "query": "select 1 <= any (select 1 from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 <= any (select 1'"
  },
  {
    "query": "select 1 == all (select 1 from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 == all (select 1'"
  },
  {
    "query": "select 1 == all (select number from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 == all (select number from'"
  },
  {
    "query": "select 1 == any (select number from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 == any (select number from'"
  },
  {
    "query": "select 1 == any (select number from numbers(2, 10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 == any (select number from'"
  },
  {
    "query": "SELECT 1 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('128.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv4StringToNum('127.0.0.1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('2001:db8:ffff:1::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('2001:db8:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('2001:db8:ffff:ffff::')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('::ffff:127.0.0.1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.0.0.1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.0.0.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.0.0.2')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.0.0.255')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.0.0.3')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.0.255.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.255.127.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.255.128.10')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.255.128.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.255.128.255')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.255.128.9')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.255.255.128')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1 == dictHas({'"
  },
  {
    "query": "select 1 > any (select number from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 > any (select number from'"
  },
  {
    "query": "select 1 >= any (select number from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 1 >= any (select number from'"
  },
  {
    "query": "SELECT 1 AS \\$alias\\$name\\$ FORMAT TSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01460_allow_dollar_and_number_in_identifier.sql",
    "error": "no viable alternative at input 'SELECT 1 AS \\'"
  },
  {
    "query": "SELECT 1 AS value, 2 AS value; -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS } SELECT plus(1, 1) AS value, 2 AS value; -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\nSELECT (SELECT 1) AS subquery, 1 AS subquery; -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\nWITH x -> x + 1 AS lambda, x -> x + 2 AS lambda SELECT lambda(1); -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\nWITH x -> x + 1 AS lambda SELECT (SELECT 1) AS lambda; -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\nWITH x -> x + 1 AS lambda SELECT 1 AS lambda; -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\nSELECT id AS value, value AS value FROM test_table; -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\nSELECT id AS value_1, value AS value_1 FROM test_table; -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\nSELECT id AS value, (id + 1) AS value FROM test_table; -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\nDROP TABLE test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02344_analyzer_multiple_aliases_for_expression.sql",
    "error": "no viable alternative at input 'WITH x ->'"
  },
  {
    "query": "SELECT 1 from defaults_on_defaults where length(\\`Arr.C2\\`) = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.sql",
    "error": "no viable alternative at input 'SELECT 1 from defaults_on_defaults where length(\\'"
  },
  {
    "query": "SELECT 1 from defaults_on_defaults where length(\\`Arr.C3\\`) = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.sql",
    "error": "no viable alternative at input 'SELECT 1 from defaults_on_defaults where length(\\'"
  },
  {
    "query": "SELECT 1 from defaults_on_defaults where length(\\`Arr.C4\\`) = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.sql",
    "error": "no viable alternative at input 'SELECT 1 from defaults_on_defaults where length(\\'"
  },
  {
    "query": "SELECT 1 FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT 1 FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout'"
  },
  {
    "query": "SELECT 1 FROM tab WHERE snowflakeToDateTime(42::Int64, tz) != now() SETTINGS allow_nonconst_timezone_arguments = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01942_snowflakeToDateTime.sql",
    "error": "no viable alternative at input 'SELECT 1 FROM tab WHERE snowflakeToDateTime(42:'"
  },
  {
    "query": "SELECT 1 FROM tab WHERE snowflakeToDateTime64(42::Int64, tz) != now() SETTINGS allow_nonconst_timezone_arguments = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01942_snowflakeToDateTime.sql",
    "error": "no viable alternative at input 'SELECT 1 FROM tab WHERE snowflakeToDateTime64(42:'"
  },
  {
    "query": "SELECT 1 FROM test2 AS test2\nARRAY JOIN arrayFilter(t -> (t GLOBAL IN\n(\nSELECT DISTINCT now() AS \\`ym:a\\`\nWHERE 1\n)), test2.b) AS test2_b\nWHERE 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01009_global_array_join_names.sql",
    "error": "no viable alternative at input 'SELECT 1 FROM test2 AS test2\\nARRAY JOIN arrayFilter(t -> (t GLOBAL IN\\n(\\nSELECT DISTINCT now() AS \\'"
  },
  {
    "query": "select 1 from test_rows_compact_part__fuzz_11 where exists(select 1) settings enable_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02477_exists_fuzz_43478.sql",
    "error": "no viable alternative at input 'select 1 from test_rows_compact_part__fuzz_11 where exists(select 1'"
  },
  {
    "query": "select 1 intersect (select 1 except select 2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select 1 intersect ('"
  },
  {
    "query": "select 1 intersect select count() from (select 1 except select 2 intersect select 2 union all select 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select 1 intersect select count() from (select 1 except'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, enable_writes_to_query_cache = false, max_threads = 16;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_normalize_ast.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, enable_writes_to_query_cache = false;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_passive_usage.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, query_cache_min_query_duration = 10000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_min_query_duration.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, query_cache_min_query_runs = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_min_query_runs.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, query_cache_min_query_runs = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_min_query_runs.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, query_cache_min_query_runs = 2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_min_query_runs.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, query_cache_store_results_of_queries_with_nondeterministic_functions = true, max_threads = 16;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_normalize_ast.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, query_cache_tag = 'abc';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_tag.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, query_cache_tag = 'def';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_drop_cache.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true, query_cache_ttl = 3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_ttl_long.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_tag.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 SETTINGS use_query_cache = true; -- default query_cache_tag = '' SELECT 1 SETTINGS use_query_cache = true, query_cache_tag = 'abc';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_tag.sql",
    "error": "no viable alternative at input 'SELECT 1 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 1 UNION  ALL (SELECT 1 UNION ALL SELECT 1 UNION SELECT 1 UNION DISTINCT SELECT 1 UNION ALL SELECT 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 1 UNION  ALL (SELECT 1 UNION ALL SELECT 1 UNION SELECT'"
  },
  {
    "query": "SELECT 1 UNION (SELECT 1 UNION (SELECT 1 UNION (SELECT 1 UNION (SELECT 1 UNION (SELECT 1 UNION (SELECT 1 UNION (SELECT 1)))))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 1 UNION ('"
  },
  {
    "query": "SELECT 1 UNION (SELECT 1 UNION ALL SELECT 1 UNION SELECT 1 UNION DISTINCT SELECT 1 UNION ALL SELECT 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 1 UNION ('"
  },
  {
    "query": "SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION SELECT 1 UNION ALL SELECT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION SELECT'"
  },
  {
    "query": "select 1 UNION select 1 UNION ALL select 1; -- { serverError EXPECTED_ALL_OR_DISTINCT } ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01732_union_and_union_all.sql",
    "error": "no viable alternative at input 'select 1 UNION select'"
  },
  {
    "query": "SELECT 1 UNION SELECT 1 UNION SELECT 1 UNION ALL SELECT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 1 UNION SELECT'"
  },
  {
    "query": "SELECT 1 UNION SELECT 1 UNION SELECT 1 UNION DISTINCT SELECT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01529_union_distinct_and_setting_union_default_mode.sql",
    "error": "no viable alternative at input 'SELECT 1 UNION SELECT'"
  },
  {
    "query": "SELECT 1, * FROM (SELECT NULL AS \\`1\\`); -- { serverError AMBIGUOUS_COLUMN_NAME } SELECT '7', 'xyz', * FROM (SELECT NULL AS \\`'xyz'\\`); -- { serverError AMBIGUOUS_COLUMN_NAME }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01950_aliases_bad_cast.sql",
    "error": "no viable alternative at input 'SELECT 1, * FROM (SELECT NULL AS \\'"
  },
  {
    "query": "SELECT 1,;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_trailing_commas.sql",
    "error": "no viable alternative at input 'SELECT 1,;'"
  },
  {
    "query": "SELECT 10 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.192.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 10 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 1048575, NULL, b FROM (SELECT '25.5' AS a, NULL, NULL AS b GROUP BY GROUPING SETS ((0.0001)) WITH TOTALS) AS js1 ANY RIGHT JOIN (SELECT NULL AS a, NULL AS b WHERE NULL GROUP BY NULL, -9223372036854775807 WITH CUBE WITH TOTALS UNION ALL SELECT NULL AS a, NULL AS b GROUP BY 1, '21474836.46' WITH TOTALS) AS js2 USING (a, b) ORDER BY nan DESC NULLS LAST, '9223372036854775807' DESC NULLS LAST, a ASC NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02932_group_by_null_fuzzer.sql",
    "error": "no viable alternative at input 'SELECT 1048575, NULL, b FROM (SELECT '25.5' AS a, NULL, NULL AS b GROUP BY GROUPING SETS ('"
  },
  {
    "query": "select 11 < all (select 11 from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 11 < all (select 11'"
  },
  {
    "query": "select 11 <= all (select number from numbers(11));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 11 <= all (select number from'"
  },
  {
    "query": "SELECT 11 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.224.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 11 == dictGetUInt32({'"
  },
  {
    "query": "select 11 > all (select 11 from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 11 > all (select 11'"
  },
  {
    "query": "select 11 > all (select number from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 11 > all (select number from'"
  },
  {
    "query": "select 11 >= all (select 11 from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select 11 >= all (select 11'"
  },
  {
    "query": "SELECT 11211 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('202.79.32.2')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 11211 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 11211 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(toIPv4('202.79.32.2')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 11211 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 11212 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('101.79.55.22')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 11212 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 11212 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv6StringToNum('::ffff:101.79.55.22')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 11212 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 11212 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv6StringToNum('::ffff:654f:3716')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 11212 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 11212 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(toIPv6('::ffff:101.79.55.22')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 11212 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 12 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.240.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 12 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 1270 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1270 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 1270 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1270 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 1270 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.255')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1270 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 1270 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.3')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1270 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 1272 == asn AND 'RU' == cca2 FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ipv4_trie_dict WHERE prefix == '127.0.0.2/32';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1272 == asn AND 'RU' == cca2 FROM {'"
  },
  {
    "query": "SELECT 1272 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.2')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 1272 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.248.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.248.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.252.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.254.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.128.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.192.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.224.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.240.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.248.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.252.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.254.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 13 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 134 == COUNT(*) FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ip_trie_dict;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 134 == COUNT(*) FROM {'"
  },
  {
    "query": "SELECT 14 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.252.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 14 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 15 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.254.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 15 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 15 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.127.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 15 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 15 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:7f7f')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 15 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 16 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.128.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 16 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.128.9')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 16 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:8009')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 16 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:807f')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 16 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 17 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.128.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 17 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 18 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.192.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 18 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 18 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.128.10')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 18 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 18 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:800a')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 18 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 19 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.224.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 19 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 19 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.128.255')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 19 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 19 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:80ff')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 19 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 2 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('192.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 2 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 2 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.0.255.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 2 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 2 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7f00:ff7f')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 2 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 2 SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_drop_cache.sql",
    "error": "no viable alternative at input 'SELECT 2 SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT 2., * FROM (SELECT 1024, 256 INTERSECT SELECT 100 AND inf, 256);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02804_intersect_bad_cast.sql",
    "error": "no viable alternative at input 'SELECT 2., * FROM (SELECT 1024, 256 INTERSECT'"
  },
  {
    "query": "SELECT 20 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.240.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 20 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 20 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.255.128')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 20 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 20 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:ff80')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 20 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 21 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.248.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 21 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 22 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.252.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 22 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 23 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.254.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 23 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 24 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 24 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.128')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 24 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.192')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 24 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.224')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 24 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.240')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 24 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.248')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 24 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 25 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.128')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 25 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 26 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.192')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 26 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 27 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.224')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 27 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 28 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.240')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 28 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 29 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.248')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 29 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('224.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 3 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 3 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.0.0.127')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 3 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7f00:0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 3 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7f00:7f')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 3 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 30 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.252')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 30 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 30 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.252')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 30 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 30 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.254')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 30 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 30 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.255')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 30 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 31 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.254')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 31 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 32 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.255')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 32 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 37 == COUNT(*) FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ipv4_trie_dict;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 37 == COUNT(*) FROM {'"
  },
  {
    "query": "SELECT 37 == COUNT(DISTINCT prefix) FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ipv4_trie_dict;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 37 == COUNT(DISTINCT prefix) FROM {'"
  },
  {
    "query": "SELECT 4 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('240.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 4 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 4 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.0.0.1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 4 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 4 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7f00:1')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 4 == dictGetUInt32({'"
  },
  {
    "query": "select 5 = multiMatchAnyIndex(materialize('vladizlvav dabe don\\\\'t heart me no more'), ['what', 'is', 'love', 'baby', 'no mo??', 'dont', 'h.rt me']) from system.numbers limit 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00926_multimatch.sql",
    "error": "no viable alternative at input 'select 5 = multiMatchAnyIndex(materialize('vladizlvav dabe don\\\\'t heart me no'"
  },
  {
    "query": "select 5 = multiMatchAnyIndex(materialize('vladizlvav dabe don\\\\'t heart me no more'), materialize(['what', 'is', 'love', 'baby', 'no mo??', 'dont', 'h.rt me'])) from system.numbers limit 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00926_multimatch.sql",
    "error": "no viable alternative at input 'select 5 = multiMatchAnyIndex(materialize('vladizlvav dabe don\\\\'t heart me no'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('248.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('248.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('252.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('254.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.128.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.192.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.224.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.240.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 5 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 6 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('252.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 6 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 7 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('254.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 7 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 8 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.0.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 8 == dictGetUInt32({'"
  },
  {
    "query": "SELECT 9 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.128.0.0')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT 9 == dictGetUInt32({'"
  },
  {
    "query": "SELECT @@max_allowed_packet FORMAT CSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01337_mysql_global_variables.sql",
    "error": "no viable alternative at input 'SELECT @'"
  },
  {
    "query": "SELECT @@max_allowed_packet, number FROM system.numbers LIMIT 3 FORMAT CSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01337_mysql_global_variables.sql",
    "error": "no viable alternative at input 'SELECT @'"
  },
  {
    "query": "SELECT @@session.auto_increment_increment AS auto_increment_increment FORMAT CSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01337_mysql_global_variables.sql",
    "error": "no viable alternative at input 'SELECT @'"
  },
  {
    "query": "SELECT @@session.auto_increment_increment FORMAT CSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01337_mysql_global_variables.sql",
    "error": "no viable alternative at input 'SELECT @'"
  },
  {
    "query": "SELECT @@test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01337_mysql_global_variables.sql",
    "error": "no viable alternative at input 'SELECT @'"
  },
  {
    "query": "SELECT @@Version FORMAT CSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01337_mysql_global_variables.sql",
    "error": "no viable alternative at input 'SELECT @'"
  },
  {
    "query": "select [()][0];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03229_empty_tuple_in_array.sql",
    "error": "no viable alternative at input 'select [()'"
  },
  {
    "query": "SELECT [1::UInt16, 2::UInt8, 3::Float32] AS x, [4::Int16, 5::Float32, 6::UInt8] AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT [1:'"
  },
  {
    "query": "SELECT [1::UInt32, 2::UInt32]::Array(UInt64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_2.sql",
    "error": "no viable alternative at input 'SELECT [1:'"
  },
  {
    "query": "SELECT [[1, 2]::Array(UInt32), [3]]::Array(Array(UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_2.sql",
    "error": "no viable alternative at input 'SELECT [[1, 2]:'"
  },
  {
    "query": "SELECT [[1::UInt16, 2::UInt16]::Array(UInt32), [3]]::Array(Array(UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_cast_operator_2.sql",
    "error": "no viable alternative at input 'SELECT [[1:'"
  },
  {
    "query": "SELECT [] = multiMatchAllIndices(materialize('Butterbrot!'), []::Array(String)) from system.numbers limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00926_multimatch.sql",
    "error": "no viable alternative at input 'SELECT [] = multiMatchAllIndices(materialize('Butterbrot!'), []:'"
  },
  {
    "query": "SELECT [] = multiMatchAllIndices(materialize('Butterbrot!'), materialize([]::Array(String))) from system.numbers limit 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00926_multimatch.sql",
    "error": "no viable alternative at input 'SELECT [] = multiMatchAllIndices(materialize('Butterbrot!'), materialize([]:'"
  },
  {
    "query": "SELECT \\$\\$ value1\nvalue2\nvalue3\n\\$\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$\\$\\$\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$\\$VALUE\\$\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$\\\\xc3\\\\x28\\$'\\\\xc3\\\\x28'\\$\\\\xc3\\\\x28\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$doc\\$'\\\\xc3\\\\x28'\\$doc\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$doc\\$'VALUE'\\$doc\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$doc\\$\\$do\\$ \\$ doc\\$ \\$doc \\$ \\$doco\\$\\$doc\\$, \\$doc\\$\\$do\\$ \\$ doc\\$ \\$doc \\$ \\$doco\\$\\$doc\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$doc\\$\\$do\\$ \\$ doc\\$ \\$doc \\$ \\$doco\\$\\$doc\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$doc\\$\\$doc\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\$doc\\$VALUE\\$doc\\$;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01948_heredoc.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`1a\\`,\n\\`2b\\`\nFROM t1 AS tt1\nINNER JOIN\n(\nSELECT \\`3c\\`\nFROM t2\n) AS tt2 ON tt1.\\`1a\\` = tt2.\\`3c\\`\nINNER JOIN\n(\nSELECT \\`6f\\`\nFROM t3\n) AS tt3 ON tt1.\\`2b\\` = tt3.\\`6f\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02691_multiple_joins_backtick_identifiers.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`APPLICATION\\`.\\`Name\\` AS \\`App\\`, CAST(CAST(\\`DATABASE_IO\\`.\\`Date\\` AS DATE) AS DATE) AS \\`date\\`\nFROM   \\`DATABASE_IO\\`\nINNER\nJOIN   \\`APPLICATION\\` ON (\\`DATABASE_IO\\`.\\`Base\\` = \\`APPLICATION\\`.\\`Base\\`)\nWHERE (\nCAST(CAST(\\`DATABASE_IO\\`.\\`Date\\` AS DATE) AS TIMESTAMP) >= toDateTime('2020-01-01 00:00:00')\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01482_move_to_prewhere_and_cast.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`column_1\\` / \\`column_2\\`, \\`id\\` FROM (\nSELECT\nmax(\\`column_1\\`) AS \\`column_1\\`,\nmax(\\`column_2\\`) AS \\`column_2\\`,\n\\`id\\`\nFROM (\nSELECT\nmax(\\`column_1\\`) AS \\`column_1\\`,\nNULL AS \\`column_2\\`,\n\\`id\\`\nFROM \\`clickhouse_alias_issue_1\\`\nGROUP BY\n\\`id\\`\nUNION ALL\nSELECT\nNULL AS \\`column_1\\`,\nmax(\\`column_2\\`) AS \\`column_2\\`,\n\\`id\\`\nFROM \\`clickhouse_alias_issue_2\\`\nGROUP BY\n\\`id\\`\n) as T1\nGROUP BY \\`id\\`\nORDER BY \\`id\\` DESC\n) as T2\nWHERE \\`column_1\\` IS NOT NULL AND \\`column_2\\` IS NOT NULL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03098_prefer_column_to_alias_subquery.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`column_1\\` / \\`column_2\\`, \\`id\\` FROM (\nSELECT\nmax(\\`column_1\\`) AS \\`column_1\\`,\nmax(\\`column_2\\`) AS \\`column_2\\`,\n\\`id\\`\nFROM (\nSELECT\nmax(\\`column_1\\`) AS \\`column_1\\`,\nNULL AS \\`column_2\\`,\n\\`id\\`\nFROM \\`clickhouse_alias_issue_1\\`\nGROUP BY\n\\`id\\`\nUNION ALL\nSELECT\nNULL AS \\`column_1\\`,\nmax(\\`column_2\\`) AS \\`column_2\\`,\n\\`id\\`\nFROM \\`clickhouse_alias_issue_2\\`\nGROUP BY\n\\`id\\`\nSETTINGS prefer_column_name_to_alias=1\n) as T1\nGROUP BY \\`id\\`\nORDER BY \\`id\\` DESC\nSETTINGS prefer_column_name_to_alias=1\n) as T2\nWHERE \\`column_1\\` IS NOT NULL AND \\`column_2\\` IS NOT NULL\nSETTINGS prefer_column_name_to_alias=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03098_prefer_column_to_alias_subquery.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "select \\`concat(str, \\\\'_abc\\\\')\\` from (with 'string' as str select str || '_abc');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00490_with_select.sql",
    "error": "no viable alternative at input 'select \\'"
  },
  {
    "query": "SELECT \\`dummy\\` FROM \\`one\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\`, \\`views-count-before-full-watched-average\\`, \\`duration\\`, \\`full-watched-learners-count\\`, \\`overall-watchers-count\\`, \\`overall-full-watched-learners-count\\`, \\`views-count\\`, \\`time-before-full-watched-average\\`, if (isNaN((\\`overall-full-watched-learners-count\\`/\\`overall-watchers-count\\`) * 100), 0, (\\`overall-full-watched-learners-count\\`/\\`overall-watchers-count\\`) * 100) as \\`overall-watched-part\\`, if (isNaN((\\`full-watched-learners-count\\`/\\`watchers-count\\` * 100)), 0, (\\`full-watched-learners-count\\`/\\`watchers-count\\` * 100)) as \\`full-watched-part\\`, if (isNaN((\\`rejects-count\\`/\\`views-count\\` * 100)), 0, (\\`rejects-count\\`/\\`views-count\\` * 100)) as \\`rejects-part\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\`, \\`views-count-before-full-watched-average\\`, \\`duration\\`, \\`full-watched-learners-count\\`, \\`overall-watchers-count\\`, \\`overall-full-watched-learners-count\\`, \\`views-count\\`, \\`time-before-full-watched-average\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\`, \\`views-count-before-full-watched-average\\`, \\`duration\\`, \\`full-watched-learners-count\\`, \\`overall-watchers-count\\`, \\`overall-full-watched-learners-count\\`, \\`views-count\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\`, \\`views-count-before-full-watched-average\\`, \\`duration\\`, \\`full-watched-learners-count\\`, \\`overall-watchers-count\\`, \\`overall-full-watched-learners-count\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\`, \\`views-count-before-full-watched-average\\`, \\`duration\\`, \\`full-watched-learners-count\\`, \\`overall-watchers-count\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\`, \\`views-count-before-full-watched-average\\`, \\`duration\\`, \\`full-watched-learners-count\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\`, \\`views-count-before-full-watched-average\\`, \\`duration\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\`, \\`views-count-before-full-watched-average\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\`, \\`progress-average\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\`, \\`rejects-count\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\`, \\`watched-part-average\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\`, \\`views-duration-average\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\`, \\`repeating-views-count-average\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\`, \\`reject-views-duration-average\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\`, \\`time-repeating-average\\` FROM (SELECT \\`entityIri\\`, \\`watchers-count\\` FROM (SELECT \\`entityIri\\` FROM dict_string) ANY LEFT JOIN (SELECT uniq(learnerId) as \\`watchers-count\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT avg(viewDurationSum) as \\`time-repeating-average\\`, \\`entityIri\\` FROM (SELECT sum(views.viewDuration) as viewDurationSum, \\`entityIri\\`, \\`learnerId\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`views\\`.\\`repeatingView\\` = 1 AND \\`learnerId\\` IN dict_ui64 GROUP BY \\`learnerId\\`, \\`entityIri\\`) GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT avg(views.viewDuration) as \\`reject-views-duration-average\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`views\\`.\\`reject\\` = 1 AND \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT avg(viewsCount) as \\`repeating-views-count-average\\`, \\`entityIri\\` FROM (SELECT count() as viewsCount, \\`learnerId\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`courseId\\` = 1 AND \\`entityIri\\` IN dict_string WHERE \\`views\\`.\\`repeatingView\\` = 1 AND \\`learnerId\\` IN dict_ui64 GROUP BY \\`learnerId\\`, \\`entityIri\\`) GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT avg(views.viewDuration) as \\`views-duration-average\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT avg(views.watchedPart) as \\`watched-part-average\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT count() as \\`rejects-count\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`views\\`.\\`reject\\` = 1 AND \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT avg(progressMax) as \\`progress-average\\`, \\`entityIri\\` FROM (SELECT max(views.progress) as progressMax, \\`entityIri\\`, \\`learnerId\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`learnerId\\`, \\`entityIri\\`) GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT avg(fullWatchedViews) as \\`views-count-before-full-watched-average\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT any(duration) as \\`duration\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT uniq(learnerId) as \\`full-watched-learners-count\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`fullWatched\\` = 1 AND \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT uniq(learnerId) as \\`overall-watchers-count\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT uniq(learnerId) as \\`overall-full-watched-learners-count\\`,\n\\`entityIri\\` FROM \\`video_views\\` FINAL PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`fullWatched\\` = 1 AND \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT count() as \\`views-count\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL ARRAY JOIN \\`views\\` PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`) ANY LEFT JOIN (SELECT avg(fullWatchedTime) as \\`time-before-full-watched-average\\`, \\`entityIri\\` FROM \\`video_views\\` FINAL PREWHERE \\`entityIri\\` IN dict_string AND \\`courseId\\` = 1 WHERE \\`learnerId\\` IN dict_ui64 GROUP BY \\`entityIri\\`) USING \\`entityIri\\`);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00632_get_sample_block_cache.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`n.i8\\` FROM alter_00394 ORDER BY k;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00394_new_nested_column_keeps_offsets.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`n.i8\\`, \\`n.ui8\\`, \\`n.s\\` FROM alter_00394 ORDER BY k;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00394_new_nested_column_keeps_offsets.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`null\\` FROM remote('127.0.0.2', view(SELECT 1 AS \\`null\\`));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01932_null_valid_identifier.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`nULl\\`, null FROM remote('127.0.0.2', view(SELECT 1 AS \\`nULl\\`));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01932_null_valid_identifier.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`one\\`.dummy FROM system.one;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`plus(1, 2)\\` FROM (SELECT 1 + 2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_4.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "select \\`pow(four, 2)\\`, \\`pow(two, 2)\\` from (with (select pow(2,2)) as four select pow(four, 2), 2 as two, pow(two, 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00490_with_select.sql",
    "error": "no viable alternative at input 'select \\'"
  },
  {
    "query": "select \\`pow(four, 2)\\`, \\`pow(two, 2)\\` from (with pow(2,2) as four select pow(four, 2), 2 as two, pow(two, 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00490_with_select.sql",
    "error": "no viable alternative at input 'select \\'"
  },
  {
    "query": "select \\`SomeIntExcluded\\`, \\`SomeMap.ID\\`, \\`SomeMap.Num\\` from nested_map_explicit;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00146_summing_merge_tree_nested_map.sql",
    "error": "no viable alternative at input 'select \\'"
  },
  {
    "query": "select \\`SomeMap.ID\\`, \\`SomeMap.Num\\` from nested_map;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00146_summing_merge_tree_nested_map.sql",
    "error": "no viable alternative at input 'select \\'"
  },
  {
    "query": "SELECT \\`system\\`.\\`one\\`.* FROM system.one;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`t\\`.\\`1\\`.\\`1\\`, \\`t\\`.\\`1\\`.\\`2\\`, \\`t\\`.\\`2\\` FROM t_tuple_numeric;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`t\\`.\\`1\\`.\\`2\\`, \\`t\\`.\\`1\\`.\\`3\\`, \\`t\\`.\\`4\\` FROM t_tuple_numeric;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`t\\`.dummy FROM system.one AS t;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT \\`time\\`, groupArray((sensor_id, volume)) AS groupArr FROM ( SELECT (intDiv(toUInt32(received_at), 900) * 900) AS \\`time\\`, sensor_id, avg(value) AS volume\nFROM sensor_value\nWHERE received_at BETWEEN '2018-12-12 00:00:00' AND '2018-12-30 00:00:00'\nGROUP BY \\`time\\`,sensor_id\nORDER BY \\`time\\`\n) GROUP BY \\`time\\` ORDER BY \\`time\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00910_decimal_group_array_crash_3783.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT _CAST(NULL, 'Nullable(Nothing)') AS \\`NULL\\` FROM t_02709__fuzz_23 FINAL\nGROUP BY\nt_02709__fuzz_23.sign,\n'1023'\nORDER BY\nnan DESC,\n_CAST([0, NULL, NULL, NULL, NULL], 'Array(Nullable(UInt8))') DESC\nFORMAT Null\nSETTINGS receive_timeout = 10., receive_data_timeout_ms = 10000, use_hedged_requests = 0, allow_suspicious_low_cardinality_types = 1, max_parallel_replicas = 3, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', enable_parallel_replicas = 1, parallel_replicas_for_non_replicated_merge_tree = 1, log_queries = 1, table_function_remote_max_addresses = 200, enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02932_parallel_replicas_fuzzer.sql",
    "error": "no viable alternative at input 'SELECT _CAST(NULL, 'Nullable(Nothing)') AS \\'"
  },
  {
    "query": "SELECT _CAST(x, 'UInt8') AS y, toTypeName(y) FROM VALUES('x Nullable(String)', ('123'), ('456'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT _CAST(x, 'UInt8') AS y, toTypeName(y) FROM VALUES('x Nullable(String)', ('"
  },
  {
    "query": "SELECT _file, _path FROM s3(s3_conn, filename='::03215_archive.csv') ORDER BY (_file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_parsing_archive_name_s3.sql",
    "error": "no viable alternative at input 'SELECT _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT _file, _path FROM s3(s3_conn, filename='test :: 03215_archive.csv') ORDER BY (_file, _path); -- { serverError S3_ERROR } INSERT INTO FUNCTION s3(s3_conn, filename='test::03215_archive.csv') SELECT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_parsing_archive_name_s3.sql",
    "error": "no viable alternative at input 'SELECT _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT _file, _path FROM s3(s3_conn, filename='test.zip::03215_archive.csv') ORDER BY (_file, _path) SETTINGS allow_archive_path_syntax=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_parsing_archive_name_s3.sql",
    "error": "no viable alternative at input 'SELECT _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT _file, _path FROM s3(s3_conn, filename='test::03215_archive.csv') ORDER BY (_file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_parsing_archive_name_s3.sql",
    "error": "no viable alternative at input 'SELECT _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toInt16(id) id from data), toInt16(id)) where id in (0, 1, 0x7fff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toInt16'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toInt16(id) id from data), toUInt16(id)) where id in (0, 1, 0x7fff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toInt16'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toInt32(id) id from data), toInt32(id)) where id in (0, 1, 0x7fffffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toInt32'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toInt32(id) id from data), toUInt32(id)) where id in (0, 1, 0x7fffffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toInt32'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toInt64(id) id from data), toInt64(id)) where id in (0, 1, 0x7fffffffffffffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toInt64'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toInt64(id) id from data), toUInt64(id)) where id in (0, 1, 0x7fffffffffffffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toInt64'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toInt8(id) id from data), toInt8(id)) where id in (0, 1, 0x7f) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toInt8'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toInt8(id) id from data), toUInt8(id)) where id in (0, 1, 0x7f) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toInt8'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toUInt16(id) id from data), toInt16(id)) where id in (0, 1, 0x7fff, 0x8000, 0xffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toUInt16'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toUInt16(id) id from data), toUInt16(id)) where id in (0, 1, 0x7fff, 0x8000, 0xffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toUInt16'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toUInt32(id) id from data), toInt32(id)) where id in (0, 1, 0x7fffffff, 0x80000000, 0xffffffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toUInt32'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toUInt32(id) id from data), toUInt32(id)) where id in (0, 1, 0x7fffffff, 0x80000000, 0xffffffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toUInt32'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toUInt64(id) id from data), toInt64(id)) where id in (0, 1, 0x7fffffffffffffff, 0x8000000000000000, 0xffffffffffffffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toUInt64'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toUInt64(id) id from data), toUInt64(id)) where id in (0, 1, 0x7fffffffffffffff, 0x8000000000000000, 0xffffffffffffffff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toUInt64'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toUInt8(id) id from data), toInt8(id)) where id in (0, 1, 0x7f, 0x80, 0xff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toUInt8'"
  },
  {
    "query": "select _shard_num, * from remote('127.{1..4}', view(select toUInt8(id) id from data), toUInt8(id)) where id in (0, 1, 0x7f, 0x80, 0xff) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select _shard_num, * from remote('127.{1..4}', view(select toUInt8'"
  },
  {
    "query": "SELECT _table, key FROM 02987_logical_optimizer_merge WHERE (_table = toFixedString(toFixedString(toFixedString('v1', toNullable(2)), 2), 2)) OR ((value = toLowCardinality(toNullable(10))) AND (_table = toFixedString(toNullable('v3'), 2))) OR ((value = 20) AND (_table = toFixedString(toFixedString(toFixedString('v1', 2), 2), 2)) AND (_table = toFixedString(toLowCardinality(toFixedString('v3', 2)), 2))) SETTINGS enable_analyzer = true, join_use_nulls = true, convert_query_to_cnf = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02987_logical_optimizer_pass_lowcardinality.sql",
    "error": "no viable alternative at input 'SELECT _table, key FROM 02987_logical_optimizer_merge WHERE (_table = toFixedString(toFixedString(toFixedString('v1', toNullable(2)), 2), 2)) OR ((value = toLowCardinality(toNullable(10))) AND (_table = toFixedString(toNullable('v3'), 2))) OR ((value = 20) AND (_table = toFixedString(toFixedString(toFixedString('v1', 2), 2), 2)) AND (_table = toFixedString(toLowCardinality(toFixedString('v3', 2)), 2))) SETTINGS enable_analyzer = true'"
  },
  {
    "query": "SELECT a FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_order_by_all.sql",
    "error": "no viable alternative at input 'SELECT a FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false'"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='*/test_02480_support_wildcard_*', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='*/test_02480_support_wildcard_?', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='p?*/test_02480_support_wildcard_{56..666}', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='prefi?/test_02480_support_wildcard_*', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='prefix/test_02480_support_wildcard_??', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='test_02480_support_wildcard_*', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='test_02480_support_wildcard_?', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='test_02480_support_wildcard_?*?', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='test_02480_support_wildcard_??', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='test_02480_support_wildcard_{1,333}', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b from s3(s3_conn, filename='test_02480_support_wildcard_{1..333}', format=Parquet) order by a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_s3_support_wildcard.sql",
    "error": "no viable alternative at input 'select a, b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b.a, b.b from s3(s3_conn, filename='test_02245_s3_nested_arrow1_*', format='Arrow');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02245_s3_support_read_nested_column.sql",
    "error": "no viable alternative at input 'select a, b.a, b.b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b.a, b.b from s3(s3_conn, filename='test_02245_s3_nested_orc1_*', format='ORC');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02245_s3_support_read_nested_column.sql",
    "error": "no viable alternative at input 'select a, b.a, b.b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b.a, b.b from s3(s3_conn, filename='test_02245_s3_nested_parquet1_*', format='Parquet');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02245_s3_support_read_nested_column.sql",
    "error": "no viable alternative at input 'select a, b.a, b.b from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='test_02245_s3_nested_arrow2_*', format='Arrow', structure='a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02245_s3_support_read_nested_column.sql",
    "error": "no viable alternative at input 'select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='test_02245_s3_nested_orc2_*', format='ORC', structure='a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02245_s3_support_read_nested_column.sql",
    "error": "no viable alternative at input 'select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='"
  },
  {
    "query": "select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='test_02245_s3_nested_parquet2_*', format='Parquet', structure='a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02245_s3_support_read_nested_column.sql",
    "error": "no viable alternative at input 'select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='"
  },
  {
    "query": "select a, sipHash64(a) from x order by \\`sipHash64(a)\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03117_analyzer_same_column_name_as_func.sql",
    "error": "no viable alternative at input 'select a, sipHash64(a) from x order by \\'"
  },
  {
    "query": "SELECT a.key FROM a LEFT SEMI JOIN b ON a.key IS NOT DISTINCT FROM b.key ORDER BY a.key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03214_join_on_tuple_comparison_elimination_bug.sql",
    "error": "no viable alternative at input 'SELECT a.key FROM a LEFT SEMI JOIN b ON a.key IS NOT DISTINCT'"
  },
  {
    "query": "SELECT accurateCastOrDefault(-1, 'UInt64', 0::UInt64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT accurateCastOrDefault(-1, 'UInt64', 0:'"
  },
  {
    "query": "SELECT addDate('2022-05-07'::Date); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH } SELECT addDate('2022-05-07'::Date, INTERVAL 5 MINUTE, 5);  -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\nSELECT addDate('2022-05-07'::Date, 10); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT addDate(1.2, INTERVAL 5 MINUTE);  -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT '---';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT addDate('2022-05-07':'"
  },
  {
    "query": "SELECT addDate('2022-05-07'::Date, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT addDate('2022-05-07':'"
  },
  {
    "query": "SELECT addDate('2022-05-07'::Date32, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT addDate('2022-05-07':'"
  },
  {
    "query": "SELECT addDate('2022-05-07'::DateTime, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT addDate('2022-05-07':'"
  },
  {
    "query": "SELECT addDate('2022-05-07'::DateTime64, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT addDate('2022-05-07':'"
  },
  {
    "query": "SELECT ADDDATE(materialize('2022-05-07'::Date), INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT ADDDATE(materialize('2022-05-07':'"
  },
  {
    "query": "SELECT addInterval((), INTERVAL 1 MONTH);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql",
    "error": "no viable alternative at input 'SELECT addInterval(()'"
  },
  {
    "query": "SELECT addTupleOfIntervals('2022-10-11'::Date, (INTERVAL 1 DAY, INTERVAL 1 MONTH));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql",
    "error": "no viable alternative at input 'SELECT addTupleOfIntervals('2022-10-11':'"
  },
  {
    "query": "SELECT addTupleOfIntervals('2022-10-11'::Date, tuple(INTERVAL 1 DAY));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql",
    "error": "no viable alternative at input 'SELECT addTupleOfIntervals('2022-10-11':'"
  },
  {
    "query": "SELECT ALL * FROM (SELECT 1 UNION ALL SELECT 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01632_select_all_syntax.sql",
    "error": "no viable alternative at input 'SELECT ALL * FROM (SELECT 1'"
  },
  {
    "query": "SELECT amount FROM realtimebuff__fuzz_19 t1 JOIN (SELECT number :: UInt32 AS amount FROM numbers(300) ) t2 ON t1.amount = t2.amount\nORDER BY ALL\nSETTINGS allow_experimental_analyzer = 0; -- { serverError UNKNOWN_IDENTIFIER }\nSELECT amount FROM realtimebuff__fuzz_19 t1\nJOIN (SELECT number :: UInt32 AS amount FROM numbers(300) ) t2 ON t1.amount = t2.amount\nORDER BY ALL\nSETTINGS allow_experimental_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_buffer_over_distributed_type_mismatch.sql",
    "error": "no viable alternative at input 'SELECT amount FROM realtimebuff__fuzz_19 t1 JOIN (SELECT number :'"
  },
  {
    "query": "SELECT analysisOfVariance(number :: Decimal256(5), number % 2) FROM numbers(10) FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02475_analysis_of_variance.sql",
    "error": "no viable alternative at input 'SELECT analysisOfVariance(number :'"
  },
  {
    "query": "SELECT analysisOfVariance(number :: Decimal32(5), number % 2) FROM numbers(10) FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02475_analysis_of_variance.sql",
    "error": "no viable alternative at input 'SELECT analysisOfVariance(number :'"
  },
  {
    "query": "SELECT any(toTypeName(s)) FROM (SELECT ('a' :: String) as s) t1 FULL JOIN (SELECT ('b' :: LowCardinality(String)) as s) t2 USING (s);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02795_full_join_assert_cast.sql",
    "error": "no viable alternative at input 'SELECT any(toTypeName(s)) FROM (SELECT ('a' :'"
  },
  {
    "query": "SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 3 = 0, NULL, number::Int32) AS n from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02451_variadic_null_garbage_data.sql",
    "error": "no viable alternative at input 'SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 3 = 0, NULL, number:'"
  },
  {
    "query": "SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number <= 100, NULL, number::Int32) AS n from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02451_variadic_null_garbage_data.sql",
    "error": "no viable alternative at input 'SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number <= 100, NULL, number:'"
  },
  {
    "query": "SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number >= 100, NULL, number::Int32) AS n from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02451_variadic_null_garbage_data.sql",
    "error": "no viable alternative at input 'SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number >= 100, NULL, number:'"
  },
  {
    "query": "SELECT argMax(number, -number::Float64) from numbers(2029);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMax(number, -number:'"
  },
  {
    "query": "SELECT argMax(number, number::Float64) from numbers(2029);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMax(number, number:'"
  },
  {
    "query": "SELECT argMax(number::String, 1) FROM (Select number as number from numbers(10, 10000)) settings max_threads=1, max_block_size=100;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMax(number:'"
  },
  {
    "query": "SELECT argMax(number::String, 1) FROM (Select number as number from numbers(10, 10000)) settings max_threads=1, max_block_size=20000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMax(number:'"
  },
  {
    "query": "SELECT argMaxIf(number, -number::Float64, number > 2030) from numbers(2029);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMaxIf(number, -number:'"
  },
  {
    "query": "SELECT argMaxIf(number, -number::Float64, number > 2030) from numbers(2032);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMaxIf(number, -number:'"
  },
  {
    "query": "SELECT argMaxIf(number, number::Float64, number > 2030) from numbers(2029);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMaxIf(number, number:'"
  },
  {
    "query": "SELECT argMaxIf(number, number::Float64, number > 2030) from numbers(2032);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMaxIf(number, number:'"
  },
  {
    "query": "SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 5 == 0, NULL, number::Int32) as n from numbers(5, 10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02451_variadic_null_garbage_data.sql",
    "error": "no viable alternative at input 'SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 5 == 0, NULL, number:'"
  },
  {
    "query": "SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number <= 100, NULL, number::Int32) AS n from numbers(5, 10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02451_variadic_null_garbage_data.sql",
    "error": "no viable alternative at input 'SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number <= 100, NULL, number:'"
  },
  {
    "query": "SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number >= 100, NULL, number::Int32) AS n from numbers(5, 10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02451_variadic_null_garbage_data.sql",
    "error": "no viable alternative at input 'SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number >= 100, NULL, number:'"
  },
  {
    "query": "SELECT argMin(number, -number::Float64) from numbers(2029);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMin(number, -number:'"
  },
  {
    "query": "SELECT argMin(number, number::Float64) from numbers(2029);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMin(number, number:'"
  },
  {
    "query": "SELECT argMin(number::String, 1) FROM (Select number as number from numbers(10, 10000)) settings max_threads=1, max_block_size=100;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMin(number:'"
  },
  {
    "query": "SELECT argMin(number::String, 1) FROM (Select number as number from numbers(10, 10000)) settings max_threads=1, max_block_size=20000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMin(number:'"
  },
  {
    "query": "SELECT argMinIf(number, -number::Float64, number > 2030) from numbers(2029);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMinIf(number, -number:'"
  },
  {
    "query": "SELECT argMinIf(number, -number::Float64, number > 2030) from numbers(2032);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMinIf(number, -number:'"
  },
  {
    "query": "SELECT argMinIf(number, number::Float64, number > 2030) from numbers(2029);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMinIf(number, number:'"
  },
  {
    "query": "SELECT argMinIf(number, number::Float64, number > 2030) from numbers(2032);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT argMinIf(number, number:'"
  },
  {
    "query": "SELECT arr, has(\\`arr\\`, 'str1') FROM has_function;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00661_array_has_silviucpp.sql",
    "error": "no viable alternative at input 'SELECT arr, has(\\'"
  },
  {
    "query": "SELECT arr.size0, n.null, t.s1, t.s2 FROM t_subcolumns_dist;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_subcolumns_distributed.sql",
    "error": "no viable alternative at input 'SELECT arr.size0, n.null'"
  },
  {
    "query": "SELECT arr.size0, n.null, t.s1, t.s2 FROM t_subcolumns_dist; -- { serverError UNKNOWN_IDENTIFIER } DROP TABLE t_subcolumns_local;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01883_subcolumns_distributed.sql",
    "error": "no viable alternative at input 'SELECT arr.size0, n.null'"
  },
  {
    "query": "SELECT arr2, arr2.size0, arr2.size1, arr2.null FROM subcolumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01475_read_subcolumns_2.sql",
    "error": "no viable alternative at input 'SELECT arr2, arr2.size0, arr2.size1, arr2.null'"
  },
  {
    "query": "select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a1 as \\`struct.a1\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00261_storage_aliases_and_array_join.sql",
    "error": "no viable alternative at input 'select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a1 as \\'"
  },
  {
    "query": "select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a2 as \\`struct.a2\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00261_storage_aliases_and_array_join.sql",
    "error": "no viable alternative at input 'select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a2 as \\'"
  },
  {
    "query": "select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a3 as \\`struct.a3\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00261_storage_aliases_and_array_join.sql",
    "error": "no viable alternative at input 'select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a3 as \\'"
  },
  {
    "query": "select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a4 as \\`struct.a4\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00261_storage_aliases_and_array_join.sql",
    "error": "no viable alternative at input 'select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a4 as \\'"
  },
  {
    "query": "select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a5 as \\`struct.a5\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00261_storage_aliases_and_array_join.sql",
    "error": "no viable alternative at input 'select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a5 as \\'"
  },
  {
    "query": "select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a6 as \\`struct.a6\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00261_storage_aliases_and_array_join.sql",
    "error": "no viable alternative at input 'select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.a6 as \\'"
  },
  {
    "query": "select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.d1 as \\`struct.d1\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00261_storage_aliases_and_array_join.sql",
    "error": "no viable alternative at input 'select array, struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test array join struct.d1 as \\'"
  },
  {
    "query": "SELECT arrayAvg([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arrayAvg([1.2:'"
  },
  {
    "query": "SELECT arrayCompact([1.2::Decimal(60, 30) AS x, x, x, x, 3.45::Decimal(3, 2) AS y, y, x, x]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arrayCompact([1.2:'"
  },
  {
    "query": "SELECT arrayCumSum([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arrayCumSum([1.2:'"
  },
  {
    "query": "SELECT arrayCumSumNonNegative([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arrayCumSumNonNegative([1.2:'"
  },
  {
    "query": "SELECT arrayDifference([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arrayDifference([1.2:'"
  },
  {
    "query": "SELECT arrayElementOrNull(m1, 'aaa'::FixedString(3)), arrayElementOrNull(m2, 'aaa'::FixedString(3)) FROM t_map_03240;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03240_array_element_or_null_for_map.sql",
    "error": "no viable alternative at input 'SELECT arrayElementOrNull(m1, 'aaa':'"
  },
  {
    "query": "SELECT arrayEnumerateUniqRanked(x, 2) FROM VALUES('x Array(Array(String))', ([[]]), ([['a'], ['a'], ['b']]), ([['a'], ['a'], ['b']]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00982_array_enumerate_uniq_ranked.sql",
    "error": "no viable alternative at input 'SELECT arrayEnumerateUniqRanked(x, 2) FROM VALUES('x Array(Array(String))', ('"
  },
  {
    "query": "select arrayFilter(x -> NULL::Nullable(UInt8), range(number)) from numbers(3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02320_mapped_array_witn_const_nullable.sql",
    "error": "no viable alternative at input 'select arrayFilter(x -> NULL:'"
  },
  {
    "query": "SELECT arrayFold((acc, x) -> (acc + (x * 2)), [1, 2, 3, 4], NULL::LowCardinality(Nullable(Int64))); -- { serverError TYPE_MISMATCH } SELECT arrayFold((acc, x) -> (acc + (x * 2))::LowCardinality(Nullable(Int64)), [1, 2, 3, 4], NULL::LowCardinality(Nullable(Int64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02990_arrayFold_nullable_lc.sql",
    "error": "no viable alternative at input 'SELECT arrayFold((acc, x) -> (acc + (x * 2)), [1, 2, 3, 4], NULL:'"
  },
  {
    "query": "SELECT arrayFold((acc, x) -> (acc + (x * 2)), [1, 2, 3, 4]::Array(LowCardinality(Int64)), toInt64(toLowCardinality(3))); -- { serverError TYPE_MISMATCH } SELECT arrayFold((acc, x) -> toLowCardinality(acc + (x * 2)), [1, 2, 3, 4]::Array(LowCardinality(Int64)), toInt64(toLowCardinality(3)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02990_arrayFold_nullable_lc.sql",
    "error": "no viable alternative at input 'SELECT arrayFold((acc, x) -> (acc + (x * 2)), [1, 2, 3, 4]:'"
  },
  {
    "query": "SELECT arrayFold((acc, x) -> (acc + (x * 2)), [1, 2, 3, 4]::Array(Nullable(Int64)), toInt64(3)); -- { serverError TYPE_MISMATCH } SELECT arrayFold((acc, x) -> (acc + (x * 2)), [1, 2, 3, 4]::Array(Nullable(Int64)), toInt64(toNullable(3)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02990_arrayFold_nullable_lc.sql",
    "error": "no viable alternative at input 'SELECT arrayFold((acc, x) -> (acc + (x * 2)), [1, 2, 3, 4]:'"
  },
  {
    "query": "SELECT arrayFold((acc, x) -> (acc + (x * 2)), []::Array(Int64), toInt64(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02990_arrayFold_nullable_lc.sql",
    "error": "no viable alternative at input 'SELECT arrayFold((acc, x) -> (acc + (x * 2)), []:'"
  },
  {
    "query": "SELECT arrayFold((acc, x) -> (acc + (x * 2)), []::Array(Nullable(Int64)), toInt64(NULL));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02990_arrayFold_nullable_lc.sql",
    "error": "no viable alternative at input 'SELECT arrayFold((acc, x) -> (acc + (x * 2)), []:'"
  },
  {
    "query": "SELECT arrayFold((acc, x) -> (acc + (x * 2)), []::Array(Nullable(Int64)), toInt64(toNullable(3)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02990_arrayFold_nullable_lc.sql",
    "error": "no viable alternative at input 'SELECT arrayFold((acc, x) -> (acc + (x * 2)), []:'"
  },
  {
    "query": "SELECT arrayFold((acc, x) -> acc + (x * 2), [1, 2, 3, 4]::Array(Nullable(Int64)), toInt64(toLowCardinality(3))); -- { serverError TYPE_MISMATCH } SELECT arrayFold((acc, x) -> toLowCardinality(acc + (x * 2)), [1, 2, 3, 4]::Array(Nullable(Int64)), toInt64(toLowCardinality(3))); -- { serverError TYPE_MISMATCH }\nSELECT arrayFold((acc, x) -> toLowCardinality(acc + (x * 2)), [1, 2, 3, 4]::Array(Nullable(Int64)), toInt64(toNullable(3))); -- { serverError TYPE_MISMATCH }\nSELECT arrayFold((acc, x) -> (acc + (x * 2)), [1, 2, 3, 4], NULL);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02990_arrayFold_nullable_lc.sql",
    "error": "no viable alternative at input 'SELECT arrayFold((acc, x) -> acc + (x * 2), [1, 2, 3, 4]:'"
  },
  {
    "query": "SELECT arrayJoin(arrayJoin(arr.k1[])) AS k1 FROM t_json_array ORDER BY toString(k1) FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT arrayJoin(arrayJoin(arr.k1[]'"
  },
  {
    "query": "SELECT arrayJoin(CAST(\\$\\$['Hello', 'wo\\\\'rld\\\\\\\\']\\$\\$ AS Array(String))) AS x, CAST(\\$\\$wo\\\\'rld\\\\\\\\\\$\\$ AS FixedString(9)) AS y;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT arrayJoin(CAST(\\'"
  },
  {
    "query": "SELECT arrayJoin(sumMap(x)) FROM (SELECT [('Hello', 1.2::Decimal256(30)), ('World', 3.4::Decimal256(30))]::Map(String, Decimal256(30)) AS x UNION ALL SELECT [('World', 5.6::Decimal256(30)), ('GoodBye', -111.222::Decimal256(30))]::Map(String, Decimal256(30))) ORDER BY 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arrayJoin(sumMap(x)) FROM (SELECT [('Hello', 1.2:'"
  },
  {
    "query": "SELECT arrayMap((x -> concat(concat(toString(x), '_'), toString(id))) as lambda, [1,2,3]) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql",
    "error": "no viable alternative at input 'SELECT arrayMap((x ->'"
  },
  {
    "query": "SELECT arrayMap((x -> toString(x)) as lambda, [1,2,3]), arrayMap(lambda, ['1','2','3']);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql",
    "error": "no viable alternative at input 'SELECT arrayMap((x ->'"
  },
  {
    "query": "SELECT arrayMap(a -> round(a, 2), (quantilesDDMerge(0.001, 0.9)(sketch))) FROM \\`02919_ddsketch_quantile\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02919_ddsketch_quantile.sql",
    "error": "no viable alternative at input 'SELECT arrayMap(a -> round(a, 2), (quantilesDDMerge(0.001, 0.9)(sketch))) FROM \\'"
  },
  {
    "query": "SELECT arrayMap(lambda((x,), x + 1), [1, 2, 3]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02343_analyzer_lambdas.sql",
    "error": "no viable alternative at input 'SELECT arrayMap(lambda((x,)'"
  },
  {
    "query": "SELECT arrayMap(x -> (toLowCardinality(1) + 1::Nullable(UInt8)), [1]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02568_array_map_const_low_cardinality.sql",
    "error": "no viable alternative at input 'SELECT arrayMap(x -> (toLowCardinality(1) + 1:'"
  },
  {
    "query": "select arrayMap(x -> floor(x, 4), original_medians_array.medians_by_version[1] as l) l_rounded,\narrayMap(x -> floor(x, 4), original_medians_array.medians_by_version[2] as r) r_rounded,\narrayMap(x, y -> floor((y - x) / x, 3), l, r) diff_percent,\narrayMap(x, y -> floor(x / y, 3), threshold, l) threshold_percent,\ntest, query\nfrom\n(\nselect quantileExactForEach(0.999)(arrayMap(x, y -> abs(x - y), metrics_by_label[1], metrics_by_label[2]) as d) threshold\nfrom\n(\nselect virtual_run, groupArrayInsertAt(median_metrics, random_label) metrics_by_label\nfrom\n(\nselect medianExactForEach(metrics) median_metrics, virtual_run, random_label\nfrom\n(\nselect *, toUInt32(rowNumberInAllBlocks() % 2) random_label\nfrom\n(\nselect metrics, number virtual_run\nfrom (select metrics, run, version from table) no_query, numbers(1, 100000) nn\norder by virtual_run, rand()\n) virtual_runs\n) relabeled \ngroup by virtual_run, random_label\n) virtual_medians\ngroup by virtual_run\n) virtual_medians_array\n) rd,\n(\nselect groupArrayInsertAt(median_metrics, version) medians_by_version\nfrom\n(\nselect medianExactForEach(metrics) median_metrics, version\nfrom table\ngroup by version\n) original_medians\n) original_medians_array,\n(\nselect any(test) test, any(query) query from table\n) any_query,\n(\nselect throwIf(uniq((test, query))) from table\n) check_single_query;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01144_multiple_joins_rewriter_v2_and_lambdas.sql",
    "error": "no viable alternative at input 'select arrayMap(x -> floor(x, 4), original_medians_array.medians_by_version[1] as l) l_rounded,\\narrayMap(x -> floor(x, 4), original_medians_array.medians_by_version[2] as r) r_rounded,\\narrayMap(x, y -> floor((y - x) / x, 3), l, r) diff_percent,\\narrayMap(x, y -> floor(x / y, 3), threshold, l) threshold_percent,\\ntest, query\\nfrom\\n(\\nselect quantileExactForEach(0.999)(arrayMap(x, y -> abs(x - y), metrics_by_label[1], metrics_by_label[2]) as d) threshold\\nfrom\\n(\\nselect virtual_run, groupArrayInsertAt(median_metrics, random_label) metrics_by_label\\nfrom\\n(\\nselect medianExactForEach(metrics) median_metrics, virtual_run, random_label\\nfrom\\n(\\nselect *, toUInt32(rowNumberInAllBlocks() % 2) random_label\\nfrom\\n(\\nselect metrics, number virtual_run\\nfrom (select metrics, run, version from table) no_query, numbers(1, 100000) nn\\norder by virtual_run, rand()\\n) virtual_runs\\n) relabeled \\ngroup by virtual_run, random_label\\n) virtual_medians\\ngroup by virtual_run\\n) virtual_medians_array\\n) rd,\\n(\\nselect groupArrayInsertAt(median_metrics, version) medians_by_version\\nfrom\\n(\\nselect medianExactForEach(metrics) median_metrics, version\\nfrom table\\ngroup by version\\n) original_medians\\n) original_medians_array,\\n(\\nselect any(test) test'"
  },
  {
    "query": "select arrayMap(x -> floor(x, 4), original_medians_array.medians_by_version[1] as l) l_rounded,\narrayMap(x -> floor(x, 4), original_medians_array.medians_by_version[2] as r) r_rounded,\narrayMap(x, y -> floor((y - x) / x, 3), l, r) diff_percent,\ntest, query\nfrom (select 1) rd,\n(select [[1,2], [3,4]] medians_by_version) original_medians_array,\n(select 'test' test, 'query' query) any_query,\n(select 1 as A) check_single_query;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01144_multiple_joins_rewriter_v2_and_lambdas.sql",
    "error": "no viable alternative at input 'select arrayMap(x -> floor(x, 4), original_medians_array.medians_by_version[1] as l) l_rounded,\\narrayMap(x -> floor(x, 4), original_medians_array.medians_by_version[2] as r) r_rounded,\\narrayMap(x, y -> floor((y - x) / x, 3), l, r) diff_percent,\\ntest, query\\nfrom (select 1) rd,\\n(select [[1,2], [3,4]] medians_by_version) original_medians_array,\\n(select 'test' test'"
  },
  {
    "query": "select arrayMap(x -> NULL::Nullable(UInt8), range(number)) from numbers(3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02320_mapped_array_witn_const_nullable.sql",
    "error": "no viable alternative at input 'select arrayMap(x -> NULL:'"
  },
  {
    "query": "SELECT arrayMap(x -> round(x), quantileArrayResampleOrDefaultIfMerge(0.10, 1, 2, 42)((*,).1)) FROM t9;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT arrayMap(x -> round(x), quantileArrayResampleOrDefaultIfMerge(0.10, 1, 2, 42)((*,)'"
  },
  {
    "query": "SELECT arrayMap(x -> round(x), quantileForEachMerge(0.10)((*,).1)) FROM t2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT arrayMap(x -> round(x), quantileForEachMerge(0.10)((*,)'"
  },
  {
    "query": "SELECT arrayMap(x -> round(x), quantileResampleMerge(0.10, 1, 2, 42)((*,).1)) FROM t7;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT arrayMap(x -> round(x), quantileResampleMerge(0.10, 1, 2, 42)((*,)'"
  },
  {
    "query": "select arrayMap(x, y -> floor((y - x) / x, 3), l, r) diff_percent,\ntest, query\nfrom (select [1] l) s1,\n(select [2] r) s2,\n(select 'test' test, 'query' query) any_query,\n(select 1 ) check_single_query;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01144_multiple_joins_rewriter_v2_and_lambdas.sql",
    "error": "no viable alternative at input 'select arrayMap(x, y -> floor((y - x) / x, 3), l, r) diff_percent,\\ntest, query\\nfrom (select [1] l) s1,\\n(select [2] r) s2,\\n(select 'test' test'"
  },
  {
    "query": "SELECT arrayMax([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arrayMax([1.2:'"
  },
  {
    "query": "SELECT arrayMin([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arrayMin([1.2:'"
  },
  {
    "query": "SELECT arrayReduce('any_respect_nulls', [10, NULL]::Array(Nullable(UInt8))) as a, toTypeName(a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02996_nullable_arrayReduce.sql",
    "error": "no viable alternative at input 'SELECT arrayReduce('any_respect_nulls', [10, NULL]:'"
  },
  {
    "query": "SELECT arrayReduce('any_respect_nulls', [NULL, 10]::Array(Nullable(UInt8))) as a, toTypeName(a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02996_nullable_arrayReduce.sql",
    "error": "no viable alternative at input 'SELECT arrayReduce('any_respect_nulls', [NULL, 10]:'"
  },
  {
    "query": "SELECT arrayReduce('quantile(0.5)', []::Array(DateTime('UTC')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT arrayReduce('quantile(0.5)', []:'"
  },
  {
    "query": "SELECT arrayReduce('quantiles(0.5)', []::Array(DateTime('UTC')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT arrayReduce('quantiles(0.5)', []:'"
  },
  {
    "query": "SELECT arrayReduce('sum', [NULL, 10]::Array(Nullable(UInt8))) as a, toTypeName(a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02996_nullable_arrayReduce.sql",
    "error": "no viable alternative at input 'SELECT arrayReduce('sum', [NULL, 10]:'"
  },
  {
    "query": "SELECT arrayReduce('sum', [NULL]::Array(Nullable(UInt8))) as a, toTypeName(a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02996_nullable_arrayReduce.sql",
    "error": "no viable alternative at input 'SELECT arrayReduce('sum', [NULL]:'"
  },
  {
    "query": "SELECT arrayReduce('sumOrNull', []::Array(UInt8)) as a, toTypeName(a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02996_nullable_arrayReduce.sql",
    "error": "no viable alternative at input 'SELECT arrayReduce('sumOrNull', []:'"
  },
  {
    "query": "SELECT arrayReduce(toNullable('stddevSampOrNull'), [1]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } SELECT arrayReduce(toNullable('median'), [toDecimal32OrNull(toFixedString('1', 1), 2), 8]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT toFixedString('--- Int Empty ---', toLowCardinality(17)), arrayReduce(toNullable('avgOrNull'), [1]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT arrayReduce('any', toNullable(3)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT arrayReduce(toLowCardinality('median'), [toLowCardinality(toNullable(8))]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT arrayReduce('sum', []::Array(UInt8)) as a, toTypeName(a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02996_nullable_arrayReduce.sql",
    "error": "no viable alternative at input 'SELECT arrayReduce('sum', []:'"
  },
  {
    "query": "SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int128)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arraySort(arrayIntersect([1, 2, 3]:'"
  },
  {
    "query": "SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int8)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arraySort(arrayIntersect([1, 2, 3]:'"
  },
  {
    "query": "SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(UInt256)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arraySort(arrayIntersect([1, 2, 3]:'"
  },
  {
    "query": "SELECT arraySort(arrayIntersect([1.1::Decimal128(1)], [1.12::Decimal128(2)])); -- Note: this is correct but the semantics has to be clarified in the docs. SELECT arraySort(arrayIntersect([1.1::Decimal128(2)], [1.12::Decimal128(2)]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arraySort(arrayIntersect([1.1:'"
  },
  {
    "query": "SELECT arraySort(arrayIntersect([1.1::Decimal256(1)], [1.12::Decimal256(2)])); -- Note: this is correct but the semantics has to be clarified in the docs. SELECT arraySort(arrayIntersect([1.1::Decimal256(2)], [1.12::Decimal256(2)]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arraySort(arrayIntersect([1.1:'"
  },
  {
    "query": "SELECT arraySort(arrayIntersect([1.1::Decimal256(70), 2.34::Decimal256(60), 3.456::Decimal256(50)], [2.34::Decimal256(65), 3.456::Decimal256(55), 4.5678::Decimal256(45)]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arraySort(arrayIntersect([1.1:'"
  },
  {
    "query": "SELECT arraySort(arrayMap(x -> x == 'crc32' ? 'CRC32' : x, arrayFilter(x-> x != 'arrayJoin', used_functions))) as \\`arraySort(used_functions)\\` FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000-12-05\\\\')%')\nORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01656_test_query_log_factories_info.sql",
    "error": "no viable alternative at input 'SELECT arraySort(arrayMap(x -> x == 'crc32' ? 'CRC32' : x, arrayFilter(x-> x != 'arrayJoin', used_functions))) as \\'"
  },
  {
    "query": "SELECT arraySort(groupUniqArray(val)) AS uniq,\ntoTypeName(uniq),\narraySort(groupArray(val)) AS arr,\ntoTypeName(arr)\nFROM\n(\nSELECT CAST(number % 2, 'Enum(\\\\'hello\\\\' = 1, \\\\'world\\\\' = 0)') AS val\nFROM numbers(2)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01651_group_uniq_array_enum.sql",
    "error": "no viable alternative at input 'SELECT arraySort(groupUniqArray(val)) AS uniq,\\ntoTypeName(uniq),\\narraySort(groupArray(val)) AS arr,\\ntoTypeName(arr)\\nFROM\\n(\\nSELECT CAST(number % 2, 'Enum(\\\\'hello\\'"
  },
  {
    "query": "SELECT arraySort(used_aggregate_function_combinators) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000-12-05\\\\')%')\nORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01656_test_query_log_factories_info.sql",
    "error": "no viable alternative at input 'SELECT arraySort(used_aggregate_function_combinators) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000'"
  },
  {
    "query": "SELECT arraySort(used_aggregate_functions) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000-12-05\\\\')%')\nORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01656_test_query_log_factories_info.sql",
    "error": "no viable alternative at input 'SELECT arraySort(used_aggregate_functions) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000'"
  },
  {
    "query": "SELECT arraySort(used_data_type_families) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000-12-05\\\\')%')\nORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01656_test_query_log_factories_info.sql",
    "error": "no viable alternative at input 'SELECT arraySort(used_data_type_families) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000'"
  },
  {
    "query": "SELECT arraySort(used_table_functions) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000-12-05\\\\')%')\nORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01656_test_query_log_factories_info.sql",
    "error": "no viable alternative at input 'SELECT arraySort(used_table_functions) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\\\\'2000'"
  },
  {
    "query": "SELECT arrayStringConcat([Null::Nullable(String), Null::Nullable(String)], ';');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00255_array_concat_string.sql",
    "error": "no viable alternative at input 'SELECT arrayStringConcat([Null:'"
  },
  {
    "query": "select arrayStringConcat(arraySlice(splitByString(', ', trimLeft(explain)), 2), ', ') from (explain query tree select hex(countState(if(toNullable(number % 2 = 0), number, null))) from numbers(5) settings optimize_rewrite_aggregate_function_with_if=1) where explain like '%AggregateFunction%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_optimize_rewrite_aggregate_function_with_if_return_type_bug.sql",
    "error": "no viable alternative at input 'select arrayStringConcat(arraySlice(splitByString(', ', trimLeft(explain)), 2), ', ') from (explain query'"
  },
  {
    "query": "select arrayStringConcat(arraySlice(splitByString(', ', trimLeft(explain)), 2), ', ') from (explain query tree select hex(uniqState(if(toNullable(number % 2 = 0), number, null))) from numbers(5) settings optimize_rewrite_aggregate_function_with_if=1) where explain like '%AggregateFunction%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_optimize_rewrite_aggregate_function_with_if_return_type_bug.sql",
    "error": "no viable alternative at input 'select arrayStringConcat(arraySlice(splitByString(', ', trimLeft(explain)), 2), ', ') from (explain query'"
  },
  {
    "query": "SELECT arrayStringConcat(materialize([Null::Nullable(String), Null::Nullable(String)]), ';');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00255_array_concat_string.sql",
    "error": "no viable alternative at input 'SELECT arrayStringConcat(materialize([Null:'"
  },
  {
    "query": "SELECT arraySum([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arraySum([1.2:'"
  },
  {
    "query": "SELECT arraySum([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT arraySum([1.2:'"
  },
  {
    "query": "SELECT avg(-8000000000000000000) FROM (SELECT *, 1 AS k FROM numbers(65535*2)) GROUP BY k;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02144_avg_ubsan.sql",
    "error": "no viable alternative at input 'SELECT avg(-8000000000000000000) FROM (SELECT *, 1 AS k FROM numbers(65535*'"
  },
  {
    "query": "SELECT avg(-8000000000000000000) FROM numbers(65535 * 2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02144_avg_ubsan.sql",
    "error": "no viable alternative at input 'SELECT avg(-8000000000000000000) FROM numbers(65535 *'"
  },
  {
    "query": "SELECT avg(toNullable(-8000000000000000000)) FROM numbers(65535 * 2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02144_avg_ubsan.sql",
    "error": "no viable alternative at input 'SELECT avg(toNullable(-8000000000000000000)) FROM numbers(65535 *'"
  },
  {
    "query": "SELECT ax, c FROM (SELECT [101,102] ax, 0 c) s1 JOIN system.one s2 ON s1.c = s2.dummy\nJOIN system.one s3 ON s1.c = s3.dummy\nARRAY JOIN ax;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00855_join_with_array_join.sql",
    "error": "no viable alternative at input 'SELECT ax, c FROM (SELECT [101,102] ax, 0 c) s1 JOIN system.one s2 ON s1.c = s2.dummy\\nJOIN system.one s3'"
  },
  {
    "query": "select b + 1 as c from (select a + 1 as b from (select x + 1 as a from table_1)) settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select b + 1 as c from (select a + 1 as b from (select x + 1 as a from table_1)) settings additional_table_filters={'"
  },
  {
    "query": "SELECT b FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) WHERE c != 'twee' ORDER BY b;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT b FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout'"
  },
  {
    "query": "SELECT b, a FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) ORDER BY a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT b, a FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout'"
  },
  {
    "query": "SELECT b, a FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) ORDER BY c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT b, a FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout'"
  },
  {
    "query": "SELECT b.id FROM (\nSELECT toLowCardinality(0 :: UInt32) AS id\nGROUP BY []\n) AS a\nSEMI LEFT JOIN (\nSELECT toLowCardinality(1 :: UInt64) AS id\n) AS b\nUSING (id);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02531_semi_join_null_const_bug.sql",
    "error": "no viable alternative at input 'SELECT b.id FROM (\\nSELECT toLowCardinality(0 :'"
  },
  {
    "query": "SELECT base.id AS \\`base.id\\`,\nderived1.value1 AS \\`derived1.value1\\`\nFROM base AS base\nLEFT JOIN derived1 AS derived1 ON base.id = derived1.id1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01600_multiple_left_join_with_aliases.sql",
    "error": "no viable alternative at input 'SELECT base.id AS \\'"
  },
  {
    "query": "SELECT base.id AS \\`base.id\\`,\nderived2.id2 AS \\`derived2.id2\\`,\nderived2.value2 AS \\`derived2.value2\\`,\nderived1.value1 AS \\`derived1.value1\\`\nFROM {CLICKHOUSE_DATABASE:Identifier}.base AS base\nLEFT JOIN {CLICKHOUSE_DATABASE:Identifier}.derived2 AS derived2 ON base.id2 = derived2.id2\nLEFT JOIN {CLICKHOUSE_DATABASE:Identifier}.derived1 AS derived1 ON base.id = derived1.id1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03053_analyzer_join_alias.sql",
    "error": "no viable alternative at input 'SELECT base.id AS \\'"
  },
  {
    "query": "select base.id as \\`base.id\\`,\nderived2.value2 as \\`derived2.value2\\`,\nderived1.value1 as \\`derived1.value1\\`\nfrom base as base\nleft join derived2 as derived2 on base.id2 = derived2.id2\nleft join derived1 as derived1 on base.id = derived1.id1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01600_multiple_left_join_with_aliases.sql",
    "error": "no viable alternative at input 'select base.id as \\'"
  },
  {
    "query": "SELECT begin,\nvalue IN (\nSELECT e1.value\nFROM (\nSELECT *\nFROM events e1\nWHERE e1.value = events.value\n) AS e1\nASOF JOIN (\nSELECT number :: Float64 AS begin\nFROM numbers(10)\nWHERE number >= 1 AND number < 10\n)\nUSING (begin)\n)\nFROM events\nORDER BY begin ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03148_asof_join_ddb_subquery.sql",
    "error": "no viable alternative at input 'SELECT begin,\\nvalue IN (\\nSELECT e1.value\\nFROM (\\nSELECT *\\nFROM events e1\\nWHERE e1.value = events.value\\n) AS e1\\nASOF JOIN (\\nSELECT number :'"
  },
  {
    "query": "SELECT bin(1.234567890123456789012345678901::Decimal(60, 30));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT bin(1.234567890123456789012345678901:'"
  },
  {
    "query": "SELECT bitmapMax(argMax(x, y)) FROM remote('127.0.0.{2,3}', view(\nSELECT\ngroupBitmapState(toUInt32(number)) AS x,\nnumber AS y\nFROM numbers(10)\nGROUP BY number\n));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01924_argmax_bitmap_state.sql",
    "error": "no viable alternative at input 'SELECT bitmapMax(argMax(x, y)) FROM remote('127.0.0.{2,3}', view(\\nSELECT\\ngroupBitmapState'"
  },
  {
    "query": "select blockSize(), * from \\`table_00483\\` prewhere \\`Struct.Key1\\`[1] = 19 and \\`Struct.Key2\\`[1] >= 0 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00483_reading_from_array_structure.sql",
    "error": "no viable alternative at input 'select blockSize(), * from \\'"
  },
  {
    "query": "select blockSize(), * from \\`table_00483\\` prewhere x = 7 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00483_reading_from_array_structure.sql",
    "error": "no viable alternative at input 'select blockSize(), * from \\'"
  },
  {
    "query": "SELECT byteSwap(-0::Int8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-0:'"
  },
  {
    "query": "SELECT byteSwap(-1242525266376::Int64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-1242525266376:'"
  },
  {
    "query": "SELECT byteSwap(-128::Int8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-128:'"
  },
  {
    "query": "SELECT byteSwap(-129::Int16);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-129:'"
  },
  {
    "query": "SELECT byteSwap(-170141183460469231731687303715884105729::Int256);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-170141183460469231731687303715884105729:'"
  },
  {
    "query": "SELECT byteSwap(-1::Int8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-1:'"
  },
  {
    "query": "SELECT byteSwap(-2147483648::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-2147483648:'"
  },
  {
    "query": "SELECT byteSwap(-2147483649::Int64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-2147483649:'"
  },
  {
    "query": "SELECT byteSwap(-32768::Int16);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-32768:'"
  },
  {
    "query": "SELECT byteSwap(-32769::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-32769:'"
  },
  {
    "query": "SELECT byteSwap(-3351772109::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-3351772109:'"
  },
  {
    "query": "SELECT byteSwap(-4135::Int16);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-4135:'"
  },
  {
    "query": "SELECT byteSwap(-9223372036854775808::Int64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-9223372036854775808:'"
  },
  {
    "query": "SELECT byteSwap(-9223372036854775809::Int128);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(-9223372036854775809:'"
  },
  {
    "query": "SELECT byteSwap(0::UInt8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(0:'"
  },
  {
    "query": "SELECT byteSwap(10000::UInt16);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(10000:'"
  },
  {
    "query": "SELECT byteSwap(123294967295::UInt64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(123294967295:'"
  },
  {
    "query": "SELECT byteSwap(18439412204227788800::UInt64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(18439412204227788800:'"
  },
  {
    "query": "SELECT byteSwap(18446744073709551615::UInt64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(18446744073709551615:'"
  },
  {
    "query": "SELECT byteSwap(18446744073709551616::UInt128);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(18446744073709551616:'"
  },
  {
    "query": "SELECT byteSwap(1::UInt8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(1:'"
  },
  {
    "query": "SELECT byteSwap(255::UInt8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(255:'"
  },
  {
    "query": "SELECT byteSwap(256::UInt16);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(256:'"
  },
  {
    "query": "SELECT byteSwap(3351772109::UInt32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(3351772109:'"
  },
  {
    "query": "SELECT byteSwap(340282366920938463463374607431768211456::UInt256);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(340282366920938463463374607431768211456:'"
  },
  {
    "query": "SELECT byteSwap(3455829959::UInt32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(3455829959:'"
  },
  {
    "query": "SELECT byteSwap(4135::UInt16);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(4135:'"
  },
  {
    "query": "SELECT byteSwap(4294967295::UInt32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(4294967295:'"
  },
  {
    "query": "SELECT byteSwap(4294967296::UInt64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(4294967296:'"
  },
  {
    "query": "SELECT byteSwap(65535::UInt16);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(65535:'"
  },
  {
    "query": "SELECT byteSwap(65536::UInt32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02887_byteswap.sql",
    "error": "no viable alternative at input 'SELECT byteSwap(65536:'"
  },
  {
    "query": "SELECT c1, c2, c3, c4 FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02368_analyzer_table_functions.sql",
    "error": "no viable alternative at input 'SELECT c1, c2, c3, c4 FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc'"
  },
  {
    "query": "select case 1::Nullable(Int32) when 1 then 123 else 0 end;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02798_generic_transform.sql",
    "error": "no viable alternative at input 'select case 1:'"
  },
  {
    "query": "SELECT CAST(' {\"a\": { \"a\": [ [1],  null ] } }', 'Object(Nullable(\\\\'json\\\\'))');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02287_type_object_convert.sql",
    "error": "no viable alternative at input 'SELECT CAST(' {\"a\": { \"a\": [ [1],  null ] } }', 'Object(Nullable(\\\\'json'"
  },
  {
    "query": "SELECT CAST('2020-01-01 00:00:00', 'DateTime') AS a, toTypeName(a), CAST('2020-01-01 00:02:00.11', 'DateTime(2)') AS b, toTypeName(b), CAST('2020-01-01 00:03:00', 'DateTime(\\\\'Asia/Istanbul\\\\')') AS c, toTypeName(c), CAST('2020-01-01 00:04:00.22', 'DateTime(3, \\\\'Asia/Istanbul\\\\')') AS d, toTypeName(d), CAST('2020-01-01 00:05:00', 'DateTime(0)') AS e, toTypeName(e);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01442_date_time_with_params.sql",
    "error": "no viable alternative at input 'SELECT CAST('2020-01-01 00:00:00', 'DateTime') AS a, toTypeName(a), CAST('2020-01-01 00:02:00.11', 'DateTime(2)') AS b, toTypeName(b), CAST('2020-01-01 00:03:00', 'DateTime(\\\\'Asia/Istanbul\\'"
  },
  {
    "query": "select CAST('42'::FixedString(2), 'Variant(String, UInt64)') as v, variantType(v);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_string_to_variant_cast.sql",
    "error": "no viable alternative at input 'select CAST('42':'"
  },
  {
    "query": "select CAST('42'::LowCardinality(Nullable(String)), 'Variant(String, UInt64)') as v, variantType(v);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_string_to_variant_cast.sql",
    "error": "no viable alternative at input 'select CAST('42':'"
  },
  {
    "query": "select CAST('42'::LowCardinality(String), 'Variant(String, UInt64)') as v, variantType(v);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_string_to_variant_cast.sql",
    "error": "no viable alternative at input 'select CAST('42':'"
  },
  {
    "query": "select CAST('42'::Nullable(String), 'Variant(String, UInt64)') as v, variantType(v);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_string_to_variant_cast.sql",
    "error": "no viable alternative at input 'select CAST('42':'"
  },
  {
    "query": "SELECT CAST('{\"x\" : [ 1 , [ 1 , 2] ]}', 'Object(\\\\'json\\\\')');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02287_type_object_convert.sql",
    "error": "no viable alternative at input 'SELECT CAST('{\"x\" : [ 1 , [ 1 , 2] ]}', 'Object(\\\\'json'"
  },
  {
    "query": "SELECT CAST('{\"x\" : [ {} , [ 1 , 2] ]}', 'Object(\\\\'json\\\\')');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02287_type_object_convert.sql",
    "error": "no viable alternative at input 'SELECT CAST('{\"x\" : [ {} , [ 1 , 2] ]}', 'Object(\\\\'json'"
  },
  {
    "query": "SELECT CAST('{\"x\" : [ {} , [ 1 , [2]] ]}', 'Object(\\\\'json\\\\')');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02287_type_object_convert.sql",
    "error": "no viable alternative at input 'SELECT CAST('{\"x\" : [ {} , [ 1 , [2]] ]}', 'Object(\\\\'json'"
  },
  {
    "query": "SELECT CAST('{\"x\" : [ {} , [ {} , [2]] ]}', 'Object(\\\\'json\\\\')');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02287_type_object_convert.sql",
    "error": "no viable alternative at input 'SELECT CAST('{\"x\" : [ {} , [ {} , [2]] ]}', 'Object(\\\\'json'"
  },
  {
    "query": "SELECT CAST(('hello', 1) AS Tuple(name String, count UInt32)).*;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_4.sql",
    "error": "no viable alternative at input 'SELECT CAST(('hello', 1) AS Tuple(name String, count UInt32)).*'"
  },
  {
    "query": "SELECT CAST(1, 'Enum8(\\\\'hello\\\\' = 1, \\\\'world\\\\' = 2)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00642_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(1, 'Enum8(\\\\'hello\\'"
  },
  {
    "query": "SELECT CAST(1, 'Enum8(\\\\'hello\\\\' = 1,\\\\n\\\\t\\\\'world\\\\' = 2)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00642_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(1, 'Enum8(\\\\'hello\\'"
  },
  {
    "query": "select cast(1, 'UInt8') from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8'); -- { serverError INVALID_JOIN_ON_EXPRESSION } select isConstant('UInt8'), toFixedString('hello', toUInt8(substring('UInt8', 5, 1))) from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8');  -- { serverError INVALID_JOIN_ON_EXPRESSION }\nselect 2 as \\`toString(x)\\`, x from (select 1 as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01101_literal_column_clash.sql",
    "error": "no viable alternative at input 'select 2 as \\'"
  },
  {
    "query": "SELECT CAST(123 AS \\`String\\`);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(123 AS \\'"
  },
  {
    "query": "SELECT CAST(\\$\\$['Hello', 'wo\\\\'rld\\\\\\\\']\\$\\$ AS Array(String));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(\\'"
  },
  {
    "query": "SELECT CAST(a, b -> c) ++; -- { clientError SYNTAX_ERROR } ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_fix_cast_parser_bug.sql",
    "error": "no viable alternative at input 'SELECT CAST(a, b -> c) ++;'"
  },
  {
    "query": "SELECT CAST(CAST('{\"x\" : 1}', 'Object(\\\\'json\\\\')'), 'Object(Nullable(\\\\'json\\\\'))');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02287_type_object_convert.sql",
    "error": "no viable alternative at input 'SELECT CAST(CAST('{\"x\" : 1}', 'Object(\\\\'json'"
  },
  {
    "query": "SELECT CAST(CAST('{\"x\" : 1}', 'Object(Nullable(\\\\'json\\\\'))'), 'Object(\\\\'json\\\\')');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02287_type_object_convert.sql",
    "error": "no viable alternative at input 'SELECT CAST(CAST('{\"x\" : 1}', 'Object(Nullable(\\\\'json'"
  },
  {
    "query": "SELECT CAST(CAST(1, 'Nullable(Enum(\\\\'A\\\\' = 1, \\\\'B\\\\' = 2))'), 'Nullable(String)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02910_nullable_enum_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(CAST(1, 'Nullable(Enum(\\\\'A\\'"
  },
  {
    "query": "SELECT CAST(CAST(NULL, 'Nullable(Enum(\\\\'A\\\\' = 1, \\\\'B\\\\' = 2))'), 'Nullable(String)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02910_nullable_enum_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(CAST(NULL, 'Nullable(Enum(\\\\'A\\'"
  },
  {
    "query": "SELECT CAST(materialize(CAST(1, 'Nullable(Enum(\\\\'A\\\\' = 1, \\\\'B\\\\' = 2))')), 'Nullable(String)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02910_nullable_enum_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(materialize(CAST(1, 'Nullable(Enum(\\\\'A\\'"
  },
  {
    "query": "SELECT CAST(materialize(CAST(NULL, 'Nullable(Enum(\\\\'A\\\\' = 1, \\\\'B\\\\' = 2))')), 'Nullable(String)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02910_nullable_enum_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(materialize(CAST(NULL, 'Nullable(Enum(\\\\'A\\'"
  },
  {
    "query": "select CAST(multiIf(number == 1, NULL::Variant(String, UInt64), number == 2, 'Hello'::Variant(String, UInt64), number::Variant(String, UInt64)), 'UInt64') from numbers(6); -- {serverError CANNOT_PARSE_TEXT} select number::Variant(UInt64)::Variant(String, UInt64)::Variant(Array(String), String, UInt64) from numbers(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02942_variant_cast.sql",
    "error": "no viable alternative at input 'select CAST(multiIf(number == 1, NULL:'"
  },
  {
    "query": "select CAST(NULL::LowCardinality(Nullable(FixedString(2))), 'Variant(String, UInt64)') as v, variantType(v);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_string_to_variant_cast.sql",
    "error": "no viable alternative at input 'select CAST(NULL:'"
  },
  {
    "query": "select CAST(NULL::LowCardinality(Nullable(String)), 'Variant(String, UInt64)') as v, variantType(v);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_string_to_variant_cast.sql",
    "error": "no viable alternative at input 'select CAST(NULL:'"
  },
  {
    "query": "select CAST(NULL::Nullable(String), 'Variant(String, UInt64)') as v, variantType(v);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_string_to_variant_cast.sql",
    "error": "no viable alternative at input 'select CAST(NULL:'"
  },
  {
    "query": "SELECT cast(tuple('0', '1'), 'Tuple(value_1 String, value_2 String)') AS value, number FROM numbers(value.* APPLY x -> toUInt64(x));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_analyzer_table_functions_untuple.sql",
    "error": "no viable alternative at input 'SELECT cast(tuple('0', '1'), 'Tuple(value_1 String, value_2 String)') AS value, number FROM numbers(value.*'"
  },
  {
    "query": "SELECT cast(tuple('1'), 'Tuple(value String)') AS value, number FROM numbers(value.* APPLY x -> toUInt64(x));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_analyzer_table_functions_untuple.sql",
    "error": "no viable alternative at input 'SELECT cast(tuple('1'), 'Tuple(value String)') AS value, number FROM numbers(value.*'"
  },
  {
    "query": "SELECT cast(tuple('1', '2'), 'Tuple(value_1 String, value_2 String)') AS value, number FROM numbers(value.* APPLY x -> toUInt64(x));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_analyzer_table_functions_untuple.sql",
    "error": "no viable alternative at input 'SELECT cast(tuple('1', '2'), 'Tuple(value_1 String, value_2 String)') AS value, number FROM numbers(value.*'"
  },
  {
    "query": "SELECT cast(tuple(0, 1), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, number FROM numbers(value.*);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_analyzer_table_functions_untuple.sql",
    "error": "no viable alternative at input 'SELECT cast(tuple(0, 1), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, number FROM numbers(value.*'"
  },
  {
    "query": "SELECT cast(tuple(1), 'Tuple(value UInt64)') AS value, number FROM numbers(value.*);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_analyzer_table_functions_untuple.sql",
    "error": "no viable alternative at input 'SELECT cast(tuple(1), 'Tuple(value UInt64)') AS value, number FROM numbers(value.*'"
  },
  {
    "query": "SELECT cast(tuple(1, 2), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, number FROM numbers(value.*);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02493_analyzer_table_functions_untuple.sql",
    "error": "no viable alternative at input 'SELECT cast(tuple(1, 2), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, number FROM numbers(value.*'"
  },
  {
    "query": "SELECT CAST(x AS UInt8) AS y, toTypeName(y) FROM VALUES('x Nullable(String)', ('123'), ('NULL'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(x AS UInt8) AS y, toTypeName(y) FROM VALUES('x Nullable(String)', ('"
  },
  {
    "query": "SELECT CAST(x AS UInt8) AS y, toTypeName(y) FROM VALUES('x Nullable(String)', ('123'), ('NULL')); -- { serverError CANNOT_PARSE_TEXT } SELECT CAST(257 AS UInt8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT CAST(x AS UInt8) AS y, toTypeName(y) FROM VALUES('x Nullable(String)', ('"
  },
  {
    "query": "SELECT categoricalInformationValue(c1, c2) FROM VALUES((0, 0), (NULL, 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02425_categorical_information_value_properties.sql",
    "error": "no viable alternative at input 'SELECT categoricalInformationValue(c1, c2) FROM VALUES(('"
  },
  {
    "query": "SELECT categoricalInformationValue(c1, c2) FROM VALUES((NULL, 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } SELECT categoricalInformationValue(dummy, dummy);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02425_categorical_information_value_properties.sql",
    "error": "no viable alternative at input 'SELECT categoricalInformationValue(c1, c2) FROM VALUES(('"
  },
  {
    "query": "SELECT categoricalInformationValue(c1, c2) FROM VALUES((NULL, NULL)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } SELECT categoricalInformationValue(c1, c2) FROM VALUES((0, 0), (NULL, 0));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02425_categorical_information_value_properties.sql",
    "error": "no viable alternative at input 'SELECT categoricalInformationValue(c1, c2) FROM VALUES(('"
  },
  {
    "query": "SELECT categoricalInformationValue(c1, c2) FROM VALUES((toNullable(0), 0));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02425_categorical_information_value_properties.sql",
    "error": "no viable alternative at input 'SELECT categoricalInformationValue(c1, c2) FROM VALUES(('"
  },
  {
    "query": "SELECT cityHash64(number GLOBAL IN (NULL, -2147483648, -9223372036854775808), nan, 1024, NULL, NULL, 1.000100016593933, NULL),\n(NULL, cityHash64(inf, -2147483648, NULL, NULL, 10.000100135803223), cityHash64(1.1754943508222875e-38, NULL, NULL, NULL), 2147483647)\nFROM cluster(test_cluster_two_shards_localhost, numbers((NULL, cityHash64(0., 65536, NULL, NULL, 10000000000., NULL), 0) GLOBAL IN (some_identifier), 65536))\nWHERE number GLOBAL IN [1025] --{ serverError BAD_ARGUMENTS, WRONG_GLOBAL_SUBQUERY, UNKNOWN_IDENTIFIER }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02002_global_subqueries_subquery_or_table_name.sql",
    "error": "no viable alternative at input 'SELECT cityHash64(number GLOBAL IN (NULL, -2147483648, -9223372036854775808), nan, 1024, NULL, NULL, 1.000100016593933, NULL),\\n(NULL, cityHash64(inf, -2147483648, NULL, NULL, 10.000100135803223), cityHash64(1.1754943508222875e-38, NULL, NULL, NULL), 2147483647)\\nFROM cluster(test_cluster_two_shards_localhost, numbers(('"
  },
  {
    "query": "SELECT COALESCE((SELECT status FROM system.dictionaries WHERE database='test_01676' AND name='dict')::Nullable(String), 'NOT_LOADED');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01676_dictget_in_default_expression.sql",
    "error": "no viable alternative at input 'SELECT COALESCE((SELECT status FROM system.dictionaries WHERE database='test_01676' AND name='dict'):'"
  },
  {
    "query": "SELECT column FROM {CLICKHOUSE_DATABASE:Identifier}.table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_1.sql",
    "error": "no viable alternative at input 'SELECT column FROM {'"
  },
  {
    "query": "SELECT COLUMNS(id, value) EXCEPT (id) APPLY toString FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "no viable alternative at input 'SELECT COLUMNS(id, value) EXCEPT ('"
  },
  {
    "query": "SELECT COLUMNS(id, value) EXCEPT (id) FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "no viable alternative at input 'SELECT COLUMNS(id, value) EXCEPT ('"
  },
  {
    "query": "SELECT COLUMNS(id, value) EXCEPT id REPLACE (5 AS id, 6 as value) APPLY toString FROM test_table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02339_analyzer_matcher_basic.sql",
    "error": "no viable alternative at input 'SELECT COLUMNS(id, value) EXCEPT id'"
  },
  {
    "query": "SELECT columns_transformers.* EXCEPT(j) APPLY(avg) from columns_transformers;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01470_columns_transformers.sql",
    "error": "no viable alternative at input 'SELECT columns_transformers.* EXCEPT('"
  },
  {
    "query": "SELECT concat('42', materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('42', materialize(NULL :'"
  },
  {
    "query": "SELECT concat('42', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('42', materialize(NULL :'"
  },
  {
    "query": "SELECT concat('With ', materialize('122.233.64.201' :: IPv4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('122.233.64.201' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :: IPv6));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('2023-11-14 05:50:12' :: DateTime('Europe/Amsterdam')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('2023-11-14 05:50:12' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('2023-11-14 05:50:12.123' :: DateTime64(3, 'Europe/Amsterdam')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('2023-11-14 05:50:12.123' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('2023-11-14' :: Date));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('2023-11-14' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('2123-11-14' :: Date32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('2123-11-14' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('bar' :: FixedString(3)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('bar' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('bar' :: LowCardinality(FixedString(3))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('bar' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('bar' :: LowCardinality(Nullable(FixedString(3)))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('bar' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('bar' :: Nullable(FixedString(3))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('bar' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :: UUID));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('foo' :: LowCardinality(Nullable(String))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('foo' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('foo' :: LowCardinality(String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('foo' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('foo' :: Nullable(String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('foo' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('foo' :: String));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('foo' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('hallo' :: Enum('hallo' = 1)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('hallo' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('{\"foo\": \"bar\"}' :: JSON));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('{\"foo\": \"bar\"}' :'"
  },
  {
    "query": "SELECT concat('With ', materialize('{\"foo\": \"bar\"}' :: Object('json')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize('{\"foo\": \"bar\"}' :'"
  },
  {
    "query": "SELECT concat('With ', materialize((42, 'foo') :: Tuple(Int32, String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize((42, 'foo') :'"
  },
  {
    "query": "SELECT concat('With ', materialize((42, 43) :: Point));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize((42, 43) :'"
  },
  {
    "query": "SELECT concat('With ', materialize(42 :: Int8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(42 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(42 :: LowCardinality(Nullable(UInt32))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(42 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(42 :: LowCardinality(UInt32)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(42 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(42.42 :: Float32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(42.42 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(43 :: Int16));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(43 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(43.43 :: Float64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(43.43 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(44 :: Int32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(44 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(44.44 :: Decimal(2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(44.44 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(45 :: Int64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(45 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(46 :: Int128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(46 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(47 :: Int256));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(47 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(48 :: UInt8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(48 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(49 :: UInt16));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(49 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(50 :: UInt32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(50 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(51 :: UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(51 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(52 :: UInt128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(52 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(53 :: UInt256));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(53 :'"
  },
  {
    "query": "SELECT concat('With ', materialize(['foo', 'bar'] :: Array(String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(['foo', 'bar'] :'"
  },
  {
    "query": "SELECT concat('With ', materialize([(0,0),(10,0),(10,10),(0,10)] :: Ring));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize([(0,0),(10,0),(10,10),(0,10)] :'"
  },
  {
    "query": "SELECT concat('With ', materialize([[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]] :: Polygon));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize([[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]] :'"
  },
  {
    "query": "SELECT concat('With ', materialize([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]] :: MultiPolygon));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]] :'"
  },
  {
    "query": "SELECT concat('With ', materialize(_CAST('ba\\\\0', 'LowCardinality(FixedString(3))'))) AS \\`concat('With ', materialize(CAST('ba\\\\\\\\0', 'LowCardinality(FixedString(3))')))\\` FROM system.one GROUP BY 'With ';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02915_analyzer_fuzz_1.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(_CAST('ba\\\\0', 'LowCardinality(FixedString(3))'))) AS \\'"
  },
  {
    "query": "SELECT concat('With ', materialize(false :: Bool));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(false :'"
  },
  {
    "query": "SELECT concat('With ', materialize(map(42, 'foo') :: Map(Int32, String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(map(42, 'foo') :'"
  },
  {
    "query": "SELECT concat('With ', materialize(true :: Bool));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat('With ', materialize(true :'"
  },
  {
    "query": "SELECT concat(42, materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat(42, materialize(NULL :'"
  },
  {
    "query": "SELECT concat(42, materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat(42, materialize(NULL :'"
  },
  {
    "query": "SELECT concat(materialize(3 :: Int64), ' arguments test', ' with int type');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat(materialize(3 :'"
  },
  {
    "query": "SELECT concat(materialize(42 :: Int32), materialize(144 :: UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat(materialize(42 :'"
  },
  {
    "query": "SELECT concat(materialize(42 :: Int32), materialize(144 :: UInt64), materialize(255 :: UInt32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat(materialize(42 :'"
  },
  {
    "query": "SELECT concat(materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat(materialize(NULL :'"
  },
  {
    "query": "SELECT concat(materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat(materialize(NULL :'"
  },
  {
    "query": "SELECT concat(NULL, materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00727_concat.sql",
    "error": "no viable alternative at input 'SELECT concat(NULL, materialize(NULL :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('122.233.64.201' :: IPv4)) == 'a|122.233.64.201';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('122.233.64.201' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :: IPv6)) == 'a|2001:0001:130F:0002:0003:09C0:876A:130B';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('2023-11-14 05:50:12' :: DateTime('Europe/Amsterdam'))) == 'a|2023-11-14 05:50:12';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('2023-11-14 05:50:12' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('2023-11-14' :: Date)) == 'a|2023-11-14';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('2023-11-14' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('2123-11-14' :: Date32)) == 'a|2123-11-14';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('2123-11-14' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('bar' :: FixedString(3))) == 'a|bar';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('bar' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('bar' :: LowCardinality(FixedString(3)))) == 'a|bar';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('bar' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('bar' :: LowCardinality(Nullable(FixedString(3))))) == 'a|bar';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('bar' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('bar' :: Nullable(FixedString(3)))) == 'a|bar';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('bar' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :: UUID)) == 'a|fae310ca-d52a-4923-9e9b-02bf67f4b009';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('foo' :: LowCardinality(Nullable(String)))) == 'a|foo';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('foo' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('foo' :: LowCardinality(String))) == 'a|foo';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('foo' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('foo' :: Nullable(String))) == 'a|foo';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('foo' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('foo' :: String)) == 'a|foo';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('foo' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize('hallo' :: Enum('hallo' = 1))) == 'a|hallo';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize('hallo' :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize((42, 'foo') :: Tuple(Int32, String))) == 'a|(42,\\\\'foo\\\\')';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize((42, 'foo') :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(42 :: Int8)) == 'a|42';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(42 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(42 :: LowCardinality(Nullable(UInt32)))) == 'a|42';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(42 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(42 :: LowCardinality(UInt32))) == 'a|42';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(42 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(42.42 :: Float32)) == 'a|42.42';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(42.42 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(43 :: Int16)) == 'a|43';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(43 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(43.43 :: Float64)) == 'a|43.43';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(43.43 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(44 :: Int32)) == 'a|44';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(44 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(44.44 :: Decimal(2))) == 'a|44';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(44.44 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(45 :: Int64)) == 'a|45';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(45 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(46 :: Int128)) == 'a|46';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(46 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(47 :: Int256)) == 'a|47';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(47 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(48 :: UInt8)) == 'a|48';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(48 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(49 :: UInt16)) == 'a|49';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(49 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(50 :: UInt32)) == 'a|50';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(50 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(51 :: UInt64)) == 'a|51';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(51 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(52 :: UInt128)) == 'a|52';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(52 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(53 :: UInt256)) == 'a|53';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(53 :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(['foo', 'bar'] :: Array(String))) == 'a|[\\\\'foo\\\\',\\\\'bar\\\\']';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(['foo', 'bar'] :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(false :: Bool)) == 'a|false';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(false :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(map(42, 'foo') :: Map(Int32, String))) == 'a|{42:\\\\'foo\\\\'}';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(map(42, 'foo') :'"
  },
  {
    "query": "SELECT concatWithSeparator('|', 'a', materialize(true :: Bool)) == 'a|true';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02495_concat_with_separator.sql",
    "error": "no viable alternative at input 'SELECT concatWithSeparator('|', 'a', materialize(true :'"
  },
  {
    "query": "SELECT corr(c1, c2) FROM VALUES((0, 0), (NULL, 2), (1, 0), (1, 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02425_categorical_information_value_properties.sql",
    "error": "no viable alternative at input 'SELECT corr(c1, c2) FROM VALUES(('"
  },
  {
    "query": "SELECT count() == 0 FROM (EXPLAIN PIPELINE SELECT * FROM ( SELECT 'a' AS key ) AS t1\nINNER JOIN ( SELECT 'a' AS key ) AS t2\nON t1.key = t2.key\n) WHERE explain ilike '%FilterBySetOnTheFlyTransform%'\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02382_join_and_filtering_set.sql",
    "error": "no viable alternative at input 'SELECT count() == 0 FROM (EXPLAIN PIPELINE'"
  },
  {
    "query": "SELECT count() == 0 FROM (SELECT '33.3' :: Decimal(9, 1) AS a WHERE a IN ('33.33' :: Decimal(9, 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.sql",
    "error": "no viable alternative at input 'SELECT count() == 0 FROM (SELECT '33.3' :'"
  },
  {
    "query": "SELECT count() == 1 FROM (EXPLAIN ESTIMATE SELECT sum(a) FROM t1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT count() == 1 FROM (EXPLAIN ESTIMATE'"
  },
  {
    "query": "SELECT count() == 1 FROM (EXPLAIN SYNTAX SELECT number FROM system.numbers ORDER BY number DESC) WHERE explain ILIKE 'SELECT%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT count() == 1 FROM (EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT count() > 0 FROM (EXPLAIN CURRENT TRANSACTION);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT count() > 0 FROM (EXPLAIN CURRENT'"
  },
  {
    "query": "SELECT count() > 0 FROM (EXPLAIN PLAN SELECT * FROM system.numbers ORDER BY number DESC) WHERE explain ILIKE '%Sort%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT count() > 0 FROM (EXPLAIN PLAN'"
  },
  {
    "query": "SELECT count() > 0 FROM (EXPLAIN SELECT * FROM system.numbers ORDER BY number DESC) WHERE explain ILIKE '%Sort%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT count() > 0 FROM (EXPLAIN SELECT'"
  },
  {
    "query": "SELECT count() > 1 FROM (EXPLAIN PIPELINE SELECT * FROM ( SELECT materialize('a') AS key ) AS t1\nINNER JOIN ( SELECT materialize('a') AS key ) AS t2\nON t1.key = t2.key\n) WHERE explain ilike '%FilterBySetOnTheFlyTransform%'\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02382_join_and_filtering_set.sql",
    "error": "no viable alternative at input 'SELECT count() > 1 FROM (EXPLAIN PIPELINE'"
  },
  {
    "query": "SELECT count() > 3 FROM (EXPLAIN PIPELINE header = 1 SELECT * FROM system.numbers ORDER BY number DESC) WHERE explain LIKE '%Header: \\\\_\\\\_table1.number UInt64%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT count() > 3 FROM (EXPLAIN PIPELINE'"
  },
  {
    "query": "SELECT count() > 3 FROM (EXPLAIN PIPELINE header = 1 SELECT * FROM system.numbers ORDER BY number DESC) WHERE explain LIKE '%Header: number UInt64%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT count() > 3 FROM (EXPLAIN PIPELINE'"
  },
  {
    "query": "select count() as diff from (select distinct * from distinct_in_order except select * from ordinary_distinct);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02317_distinct_in_order_optimization.sql",
    "error": "no viable alternative at input 'select count() as diff from (select distinct * from distinct_in_order except'"
  },
  {
    "query": "SELECT count() FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM test_table WHERE (NOT ((k in (101) = 0) OR (k in (100) = 1))) = 1\n)\nWHERE\nexplain LIKE '%Granules: 1/%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_redundant_equals.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT count() FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM test_table WHERE (NOT ((k not in (100) = 0) OR (k in (100) = 1))) = 0\n)\nWHERE\nexplain LIKE '%Granules: 1/%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_redundant_equals.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT count() FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM test_table WHERE k > 1 = 0\n)\nWHERE\nexplain LIKE '%Granules: 1/%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_redundant_equals.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT count() FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM test_table WHERE k >= 1 = 0\n)\nWHERE\nexplain LIKE '%Granules: 1/%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_redundant_equals.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT count() FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM test_table WHERE k in (100) = 1\n)\nWHERE\nexplain LIKE '%Granules: 1/%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_redundant_equals.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT count() FROM\n(\nEXPLAIN PLAN indexes=1\nSELECT * FROM test_table WHERE k not in (100) = 0\n)\nWHERE\nexplain LIKE '%Granules: 1/%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03032_redundant_equals.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nEXPLAIN PLAN'"
  },
  {
    "query": "SELECT count() FROM\n(\nEXPLAIN SELECT DISTINCT x FROM (SELECT materialize(x) as x FROM (select DISTINCT x from tab))\n)\nWHERE explain ILIKE '%distinct%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_fix_remove_dedundant_distinct_view.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nEXPLAIN SELECT'"
  },
  {
    "query": "SELECT count() FROM\n(\nEXPLAIN SELECT DISTINCT x FROM tab_v\n)\nWHERE explain ILIKE '%distinct%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02810_fix_remove_dedundant_distinct_view.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nEXPLAIN SELECT'"
  },
  {
    "query": "SELECT count() FROM\n(\nSELECT c + 1\nFROM\n(\nWITH filtered_groups AS (SELECT a FROM pr_1 WHERE a >= 100)\nSELECT count() as c FROM pr_2 INNER JOIN filtered_groups ON pr_2.a = filtered_groups.a\n)\n)\nSETTINGS enable_parallel_replicas = 1, parallel_replicas_for_non_replicated_merge_tree = 1, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', max_parallel_replicas = 3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02972_parallel_replicas_cte.sql",
    "error": "no viable alternative at input 'SELECT count() FROM\\n(\\nSELECT c + 1\\nFROM\\n(\\nWITH filtered_groups AS ('"
  },
  {
    "query": "SELECT count() FROM (\nEXPLAIN PIPELINE SELECT * FROM t_read_in_order_1 ORDER BY id\n) WHERE explain LIKE '%BufferChunks%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03168_read_in_order_buffering_1.sql",
    "error": "no viable alternative at input 'SELECT count() FROM (\\nEXPLAIN PIPELINE'"
  },
  {
    "query": "SELECT count() FROM (\nEXPLAIN PIPELINE SELECT * FROM t_read_in_order_1 ORDER BY id LIMIT 10\n) WHERE explain LIKE '%BufferChunks%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03168_read_in_order_buffering_1.sql",
    "error": "no viable alternative at input 'SELECT count() FROM (\\nEXPLAIN PIPELINE'"
  },
  {
    "query": "SELECT count() FROM (\nEXPLAIN PIPELINE SELECT * FROM t_read_in_order_1 WHERE v % 10 = 0 ORDER BY id LIMIT 10\n) WHERE explain LIKE '%BufferChunks%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03168_read_in_order_buffering_1.sql",
    "error": "no viable alternative at input 'SELECT count() FROM (\\nEXPLAIN PIPELINE'"
  },
  {
    "query": "SELECT count() FROM ( EXPLAIN PLAN\nSELECT * FROM tab\nANY LEFT JOIN mem AS t1 ON tab.k = t1.k\nANY LEFT JOIN mem AS t2 ON tab.k = t2.k\nANY LEFT JOIN mem AS t3 ON tab.k = t3.k\nANY LEFT JOIN mem AS t4 ON tab.k = t4.k\nANY RIGHT JOIN mem2 AS t5 ON tab.k = t5.k\nANY LEFT JOIN mem AS t6 ON tab.k = t6.k\nANY LEFT JOIN mem AS t7 ON tab.k = t7.k\n)\nWHERE explain like '%FilledJoin%'\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_multiple_joins_with_storage_join.sql",
    "error": "no viable alternative at input 'SELECT count() FROM ( EXPLAIN PLAN'"
  },
  {
    "query": "SELECT count() FROM ( EXPLAIN QUERY TREE SELECT * FROM t1 JOIN t2 ON ( (t1.x = t2.x)  AND true )\n) WHERE explain like '%CONSTANT%' OR explain ilike '%is%null%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT count() FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT count() FROM ( EXPLAIN QUERY TREE SELECT * FROM t1 JOIN t2 ON ( (t1.x = t2.x) AND (t1.x IS NOT NULL) AND true AND (t2.x IS NOT NULL) )\n) WHERE explain like '%CONSTANT%' OR explain ilike '%is%null%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT count() FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT count() FROM ( EXPLAIN QUERY TREE SELECT * FROM t1 JOIN t2 ON (t1.x <=> t2.x OR t1.x IS NULL AND t1.y <=> t2.y AND t2.x IS NULL)\n) WHERE explain like '%CONSTANT%' OR explain ilike '%is%null%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT count() FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT count() FROM ( EXPLAIN QUERY TREE SELECT * FROM t1 JOIN t2 ON t1.x <=> t2.x AND (t1.x = t1.y OR t1.x IS NULL AND t1.y IS NULL)\n) WHERE explain like '%CONSTANT%' OR explain ilike '%is%null%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02911_join_on_nullsafe_optimization.sql",
    "error": "no viable alternative at input 'SELECT count() FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT count() FROM (EXPLAIN PIPELINE SELECT nw,\nsum(WR) AS R,\nsumIf(WR, uniq_rows = 1) AS UNR\nFROM\n(\nSELECT\nuniq(nw) OVER (PARTITION BY ac) AS uniq_rows,\nAVG(wg) AS WR,\nac,\nnw\nFROM window_function_threading\nGROUP BY ac, nw\n)\nGROUP BY nw\nORDER BY nw ASC, R DESC\nLIMIT 10) where explain ilike '%ScatterByPartitionTransform%' SETTINGS max_threads = 4;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_parallel_window_functions.sql",
    "error": "no viable alternative at input 'SELECT count() FROM (EXPLAIN PIPELINE'"
  },
  {
    "query": "SELECT count() FROM (SELECT * FROM t_sparse_intersect EXCEPT SELECT * FROM t_sparse_intersect);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02552_sparse_columns_intersect.sql",
    "error": "no viable alternative at input 'SELECT count() FROM (SELECT * FROM t_sparse_intersect EXCEPT'"
  },
  {
    "query": "SELECT count() FROM (SELECT * FROM t_sparse_intersect INTERSECT SELECT * FROM t_sparse_intersect);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02552_sparse_columns_intersect.sql",
    "error": "no viable alternative at input 'SELECT count() FROM (SELECT * FROM t_sparse_intersect INTERSECT'"
  },
  {
    "query": "select count() from (select * from test intersect (select * from test where toUInt8(name) < 4) union distinct (select * from test where name = '5' or name = '1') except select * from test where name = '3');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02008_test_union_distinct_in_subquery.sql",
    "error": "no viable alternative at input 'select count() from (select * from test intersect'"
  },
  {
    "query": "select count() from (select * from test union distinct select * from test except select * from test where name = '3');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02008_test_union_distinct_in_subquery.sql",
    "error": "no viable alternative at input 'select count() from (select * from test union distinct select * from test except'"
  },
  {
    "query": "select count() from (select 1 except select 2) limit 100;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select count() from (select 1 except'"
  },
  {
    "query": "select count() from (select 1 intersect select 1) limit 100;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select count() from (select 1 intersect'"
  },
  {
    "query": "select count() from (select number from numbers(10) except select 5);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select count() from (select number from numbers(10) except'"
  },
  {
    "query": "select count() from (select number from numbers(100) intersect select number from numbers(20, 60) except select number from numbers(30, 20) except select number from numbers(60, 20) union all select number from numbers(100, 10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select count() from (select number from numbers(100) intersect'"
  },
  {
    "query": "select count() from (select number from numbers(100) intersect select number from numbers(20, 60) except select number from numbers(30, 20) except select number from numbers(60, 20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select count() from (select number from numbers(100) intersect'"
  },
  {
    "query": "select count() from (select number from numbers(1000000) intersect select number from numbers(200000, 600000) except select number from numbers(300000, 200000) except select number from numbers(600000, 200000));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select count() from (select number from numbers(1000000) intersect'"
  },
  {
    "query": "select count() from (select number from numbers(1000000) intersect select number from numbers(200000, 600000));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02004_intersect_except_operators.sql",
    "error": "no viable alternative at input 'select count() from (select number from numbers(1000000) intersect'"
  },
  {
    "query": "select count() from \\`table_00653\\` where toUInt64(val) == 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00653_monotonic_integer_cast.sql",
    "error": "no viable alternative at input 'select count() from \\'"
  },
  {
    "query": "select count() from atf_p settings additional_table_filters = {'atf_p': 'x <= 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01710_projection_additional_filters.sql",
    "error": "no viable alternative at input 'select count() from atf_p settings additional_table_filters = {'"
  },
  {
    "query": "SELECT count() FROM cluster('test_cluster_two_shards', view( SELECT * FROM numbers(100000000000) )) SETTINGS max_execution_time_leaf = 1; -- { serverError TIMEOUT_EXCEEDED } SELECT count() FROM cluster('test_cluster_two_shards', view( SELECT * FROM numbers(100000000000) )) FORMAT Null SETTINGS max_execution_time_leaf = 1, timeout_overflow_mode_leaf = 'break';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02786_max_execution_time_leaf.sql",
    "error": "no viable alternative at input 'SELECT count() FROM cluster('test_cluster_two_shards', view( SELECT *'"
  },
  {
    "query": "SELECT count() FROM format(TSVRaw, (SELECT cast(arrayStringConcat(groupArray('some long string'), '\\\\n'), 'LowCardinality(String)') FROM numbers(10000))) FORMAT TSVRaw;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02902_add_scalar_in_all_case.sql",
    "error": "no viable alternative at input 'SELECT count() FROM format(TSVRaw, ('"
  },
  {
    "query": "SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) WHERE c != 'twee';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout'"
  },
  {
    "query": "SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout'"
  },
  {
    "query": "SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connection_pool_size = 0); -- { serverError BAD_ARGUMENTS } DROP TABLE foo;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connection_pool_size'"
  },
  {
    "query": "SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connection_pool_size = 1, connect_timeout = 100, connection_wait_timeout = 100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connection_pool_size'"
  },
  {
    "query": "SELECT count() FROM null_subcolumns PREWHERE n.null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01475_read_subcolumns_3.sql",
    "error": "no viable alternative at input 'SELECT count() FROM null_subcolumns PREWHERE n.null'"
  },
  {
    "query": "SELECT count() FROM null_subcolumns WHERE n.null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01475_read_subcolumns_3.sql",
    "error": "no viable alternative at input 'SELECT count() FROM null_subcolumns WHERE n.null'"
  },
  {
    "query": "select count() from numbers(10) where exists(select 1 except select 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02044_exists_operator.sql",
    "error": "no viable alternative at input 'select count() from numbers(10) where exists(select 1'"
  },
  {
    "query": "select count() from numbers(10) where exists(select 1 intersect select 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02044_exists_operator.sql",
    "error": "no viable alternative at input 'select count() from numbers(10) where exists(select 1'"
  },
  {
    "query": "select count() from numbers(10) where exists(select number from numbers(10) where number > 8);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02044_exists_operator.sql",
    "error": "no viable alternative at input 'select count() from numbers(10) where exists(select number from'"
  },
  {
    "query": "select count() from numbers(10) where exists(select number from numbers(10) where number > 9);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02044_exists_operator.sql",
    "error": "no viable alternative at input 'select count() from numbers(10) where exists(select number from'"
  },
  {
    "query": "SELECT count() FROM numbers(cityHash64(materialize(toLowCardinality(toNullable(0))) GLOBAL IN (NULL, -2147483648, -9223372036854775808), nan, 1024, NULL, materialize(1.000100016593933), 0, NULL), 4) AS n1, numbers(3) AS n2, numbers(6) AS n3 GROUP BY (NULL, cityHash64(inf, -2147483648, toLowCardinality(16), NULL, 10.000100135803223), cityHash64(1.1754943508222875e-38, NULL, NULL, NULL), 2147483647), cityHash64(0., 3, NULL, NULL, 10000000000., NULL, NULL) SETTINGS enable_analyzer = 1; -- { serverError BAD_ARGUMENTS } ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03234_evaluate_constant_analyzer.sql",
    "error": "no viable alternative at input 'SELECT count() FROM numbers(cityHash64(materialize(toLowCardinality(toNullable(0))) GLOBAL'"
  },
  {
    "query": "SELECT count() FROM remote(remote1, database=currentDatabase());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02046_remote_table_function_named_collections.sql",
    "error": "no viable alternative at input 'SELECT count() FROM remote(remote1, database='"
  },
  {
    "query": "SELECT count() FROM remote(remote2, database=merge(currentDatabase(), '^remote_test'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02046_remote_table_function_named_collections.sql",
    "error": "no viable alternative at input 'SELECT count() FROM remote(remote2, database='"
  },
  {
    "query": "SELECT count() FROM s3(s3_conn, filename = 'test_02496_*', format = Parquet, structure = 'a UInt64');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02496_storage_s3_profile_events.sql",
    "error": "no viable alternative at input 'SELECT count() FROM s3(s3_conn, filename ='"
  },
  {
    "query": "select count() from system.query_log\nwhere\nquery like 'select \\\\'01546_log_queries_min_query_duration_ms-fast%'\nand current_database = currentDatabase()\nand event_date >= yesterday();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01546_log_queries_min_query_duration_ms.sql",
    "error": "no viable alternative at input 'select count() from system.query_log\\nwhere\\nquery like 'select \\\\'01546_log_queries_min_query_duration_ms-fast%''"
  },
  {
    "query": "select count() from system.query_log\nwhere\nquery like 'select \\\\'01546_log_queries_min_query_duration_ms-slow%'\nand current_database = currentDatabase()\nand event_date >= yesterday();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01546_log_queries_min_query_duration_ms.sql",
    "error": "no viable alternative at input 'select count() from system.query_log\\nwhere\\nquery like 'select \\\\'01546_log_queries_min_query_duration_ms-slow%''"
  },
  {
    "query": "select count() from system.query_log\nwhere\nquery like 'select \\\\'01547_query_log_current_database%'\nand current_database = currentDatabase()\nand event_date >= yesterday();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01547_query_log_current_database.sql",
    "error": "no viable alternative at input 'select count() from system.query_log\\nwhere\\nquery like 'select \\\\'01547_query_log_current_database%''"
  },
  {
    "query": "select count() from system.query_log where current_database = currentDatabase() and query like 'select \\\\'01231_log_queries_min_type/EXCEPTION_BEFORE_START%'\nand event_date >= yesterday();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01231_log_queries_min_type.sql",
    "error": "no viable alternative at input 'select count() from system.query_log where current_database = currentDatabase() and query like 'select \\\\'01231_log_queries_min_type/EXCEPTION_BEFORE_START%''"
  },
  {
    "query": "select count() from system.query_log where current_database = currentDatabase() and query like 'select \\\\'01231_log_queries_min_type/QUERY_START%'\nand event_date >= yesterday();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01231_log_queries_min_type.sql",
    "error": "no viable alternative at input 'select count() from system.query_log where current_database = currentDatabase() and query like 'select \\\\'01231_log_queries_min_type/QUERY_START%''"
  },
  {
    "query": "select count() from system.query_thread_log\nwhere\nquery like 'select \\\\'01546_log_queries_min_query_duration_ms-fast%'\nand current_database = currentDatabase()\nand event_date >= yesterday();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01546_log_queries_min_query_duration_ms.sql",
    "error": "no viable alternative at input 'select count() from system.query_thread_log\\nwhere\\nquery like 'select \\\\'01546_log_queries_min_query_duration_ms-fast%''"
  },
  {
    "query": "select count() from test where arrayJoin(json.a.r[].c.d.e) is null and arrayJoin(json.a.r[].b.c.d_0) is null and arrayJoin(json.a.r[].b.c.d_1) is null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where arrayJoin(json.a.r[]'"
  },
  {
    "query": "select count() from test where arrayJoin(json.a.r[].c.d.e.:\\`Array(Nullable(Int64))\\`) is null and arrayJoin(json.a.r[].b.c.d_0.:Int64) is null and arrayJoin(json.a.r[].b.c.d_1.:Int64) is null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where arrayJoin(json.a.r[]'"
  },
  {
    "query": "select count() from test where d.\\`LowCardinality(String)\\` is not NULL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_shared_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select count() from test where d.\\'"
  },
  {
    "query": "select count() from test where empty(arrayJoin(json.a.r[].^b)) and empty(arrayJoin(json.a.r[].^b.c)) and arrayJoin(json.a.r[].b.c.d_0) is null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(arrayJoin(json.a.r[]'"
  },
  {
    "query": "select count() from test where empty(arrayJoin(json.a.r[].^b)) and empty(arrayJoin(json.a.r[].^b.c)) and arrayJoin(json.a.r[].b.c.d_0.:Int64) is null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(arrayJoin(json.a.r[]'"
  },
  {
    "query": "select count() from test where empty(json.^a) and json.a.b.c == 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(json.^'"
  },
  {
    "query": "select count() from test where empty(json.^a) and json.a.b.d is Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(json.^'"
  },
  {
    "query": "select count() from test where empty(json.a.r[].^b) and empty(json.a.r[].^b.c) and empty(json.a.r[].b.c.d_0);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(json.a.r[]'"
  },
  {
    "query": "select count() from test where empty(json.a.r[].^b) and empty(json.a.r[].^b.c) and empty(json.a.r[].b.c.d_0.:Int64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(json.a.r[]'"
  },
  {
    "query": "select count() from test where empty(json.a.r[].c.d.e) and empty(json.a.r[].b.c.d_0) and empty(json.a.r[].b.c.d_1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(json.a.r[]'"
  },
  {
    "query": "select count() from test where empty(json.a.r[].c.d.e.:\\`Array(Nullable(Int64))\\`) and empty(json.a.r[].b.c.d_0.:Int64) and empty(json.a.r[].b.c.d_1.:Int64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(json.a.r[]'"
  },
  {
    "query": "select count() from test where empty(json.d.a.:\\`Array(Nullable(Int64))\\`) and json.b.b.\\`_1\\`.:Int64 is Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(json.d.a.:'"
  },
  {
    "query": "select count() from test where empty(json.d.a.:\\`Array(Nullable(Int64))\\`) and json.d.b.:Int64 is Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where empty(json.d.a.:'"
  },
  {
    "query": "select count() from test where json.b.b.e.:String is Null and empty(json.d.a.:\\`Array(Nullable(Int64))\\`) and json.d.b.:Int64 is Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where json.b.b.e.:'"
  },
  {
    "query": "select count() from test where json.b.b.e.:String is Null and empty(json.d.a.:\\`Array(Nullable(Int64))\\`);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where json.b.b.e.:'"
  },
  {
    "query": "select count() from test where json.b.b.e.:String is Null and json.a.b.d.:Int64 is Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where json.b.b.e.:'"
  },
  {
    "query": "select count() from test where json.b.b.e.:String is Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where json.b.b.e.:'"
  },
  {
    "query": "select count() from test where json.d.a is Null and json.b.b.\\`_1\\` is Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where json.d.a is Null and json.b.b.\\'"
  },
  {
    "query": "select count() from test where json.non.existing.path.:String is Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select count() from test where json.non.existing.path.:'"
  },
  {
    "query": "select count() from test where not empty(d.\\`Array(Array(Dynamic))\\`);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select count() from test where not empty(d.\\'"
  },
  {
    "query": "select count() from test where not empty(d.\\`Array(Variant(String, UInt64))\\`);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select count() from test where not empty(d.\\'"
  },
  {
    "query": "select count() from test where not empty(d.\\`Tuple(a Array(Dynamic))\\`.a.String);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select count() from test where not empty(d.\\'"
  },
  {
    "query": "select count() from view(select 1 union all (select 2 union all select 3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00612_union_query_with_subquery.sql",
    "error": "no viable alternative at input 'select count() from view(select 1'"
  },
  {
    "query": "SELECT count() FROM {CLICKHOUSE_DATABASE:Identifier}.tablefunc01; -- { serverError POSTGRESQL_CONNECTION_FAILURE } SELECT engine FROM system.tables WHERE name = 'tablefunc01' and database=currentDatabase();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02888_system_tables_with_inaccessible_table_function.sql",
    "error": "no viable alternative at input 'SELECT count() FROM {'"
  },
  {
    "query": "select count() over (rows between 1 + 1 preceding and 1 + 1 following) from numbers(10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01571_window_functions.sql",
    "error": "no viable alternative at input 'select count() over (rows between 1 +'"
  },
  {
    "query": "select count() over (rows between 2 following and 1 + -1 following) FROM numbers(10); -- { serverError BAD_ARGUMENTS } select number,\nlagInFrame(toNullable(number), 2, null) over w,\nlagInFrame(number, 2, 1) over w\nfrom numbers(10)\nwindow w as (order by number)\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01571_window_functions.sql",
    "error": "no viable alternative at input 'select count() over (rows between 2 following and 1 +'"
  },
  {
    "query": "select count() over (w partition by number) from numbers(1) window w as (partition by intDiv(number, 5)); -- { serverError BAD_ARGUMENTS } select count() over (w order by number) from numbers(1) window w as (partition by intDiv(number, 5) order by mod(number, 3)); -- { serverError BAD_ARGUMENTS }\nselect count() over (w range unbounded preceding) from numbers(1) window w as (partition by intDiv(number, 5) order by mod(number, 3) rows unbounded preceding); -- { serverError BAD_ARGUMENTS }\nselect count() over (w) from numbers(1) window w as ();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01591_window_functions.sql",
    "error": "no viable alternative at input 'select count() over (w'"
  },
  {
    "query": "SELECT count(), (quantile(0.9)(price) OVER ()) AS price_quantile FROM uk_price_paid WHERE toYear(date) = 2023 QUALIFY price > price_quantile; -- { serverError NOT_AN_AGGREGATE } SELECT count() FROM uk_price_paid WHERE toYear(date) = 2023 QUALIFY price > (quantile(0.9)(price) OVER ()); -- { serverError NOT_AN_AGGREGATE }\nDROP TABLE uk_price_paid;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03143_window_functions_qualify_validation.sql",
    "error": "no viable alternative at input 'SELECT count(), (quantile(0.9)(price) OVER'"
  },
  {
    "query": "select count(), dynamicType(d) || ':' || dynamicType(d.\\`Tuple(a Dynamic(max_types=2))\\`.a) as type, isDynamicElementInSharedData(d.\\`Tuple(a Dynamic(max_types=2))\\`.a) as flag from test group by type, flag order by count(), type;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03038_nested_dynamic_merges_wide_vertical.sql",
    "error": "no viable alternative at input 'select count(), dynamicType(d) || ':' || dynamicType(d.\\'"
  },
  {
    "query": "SELECT count(), min(a), max(a) FROM t SETTINGS additional_table_filters = {'t' : '0'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01710_projection_additional_filters.sql",
    "error": "no viable alternative at input 'SELECT count(), min(a), max(a) FROM t SETTINGS additional_table_filters = {'"
  },
  {
    "query": "SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/1e1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00276_sample.sql",
    "error": "no viable alternative at input 'SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/1e1'"
  },
  {
    "query": "SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1e1/1e2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00276_sample.sql",
    "error": "no viable alternative at input 'SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1e1'"
  },
  {
    "query": "select count(), sum(number) from file('02841.parquet') where indexHint(d128 between '-0.00000000000011'::Decimal128(20) and 0.00000000000006::Decimal128(20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02841_parquet_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02841.parquet') where indexHint(d128 between '-0.00000000000011':'"
  },
  {
    "query": "select count(), sum(number) from file('02841.parquet') where indexHint(d256 between '-0.00000000000000000000000000011'::Decimal256(40) and 0.00000000000000000000000000006::Decimal256(35));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02841_parquet_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02841.parquet') where indexHint(d256 between '-0.00000000000000000000000000011':'"
  },
  {
    "query": "select count(), sum(number) from file('02841.parquet') where indexHint(d32 between '-0.011'::Decimal32(3) and 0.006::Decimal32(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02841_parquet_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02841.parquet') where indexHint(d32 between '-0.011':'"
  },
  {
    "query": "select count(), sum(number) from file('02841.parquet') where indexHint(d64 between '-0.0000011'::Decimal64(7) and 0.0000006::Decimal64(9));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02841_parquet_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02841.parquet') where indexHint(d64 between '-0.0000011':'"
  },
  {
    "query": "select count(), sum(number) from file('02841.parquet') where indexHint(dt64_cs between toDateTime64('-2.01e8'::Decimal64(1), 1) and toDateTime64(1.5e8::Decimal64(2), 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02841_parquet_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02841.parquet') where indexHint(dt64_cs between toDateTime64('-2.01e8':'"
  },
  {
    "query": "select count(), sum(number) from file('02841.parquet') where indexHint(dt64_s between toDateTime64('-2.01e8'::Decimal64(0), 0) and toDateTime64(1.5e8::Decimal64(0), 0));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02841_parquet_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02841.parquet') where indexHint(dt64_s between toDateTime64('-2.01e8':'"
  },
  {
    "query": "select count(), sum(number) from file('02841.parquet') where indexHint(f32 between -0.11::Float32 and 0.06::Float32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02841_parquet_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02841.parquet') where indexHint(f32 between -0.11:'"
  },
  {
    "query": "select count(), sum(number) from file('02892.orc') where indexHint(d128 between '-0.00000000000011'::Decimal128(20) and 0.00000000000006::Decimal128(20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02892.orc') where indexHint(d128 between '-0.00000000000011':'"
  },
  {
    "query": "select count(), sum(number) from file('02892.orc') where indexHint(d32 between '-0.011'::Decimal32(3) and 0.006::Decimal32(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02892.orc') where indexHint(d32 between '-0.011':'"
  },
  {
    "query": "select count(), sum(number) from file('02892.orc') where indexHint(d64 between '-0.0000011'::Decimal64(7) and 0.0000006::Decimal64(9));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02892.orc') where indexHint(d64 between '-0.0000011':'"
  },
  {
    "query": "select count(), sum(number) from file('02892.orc') where indexHint(dt64_cs between toDateTime64('-2.01e8'::Decimal64(1), 1) and toDateTime64(1.5e8::Decimal64(2), 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02892.orc') where indexHint(dt64_cs between toDateTime64('-2.01e8':'"
  },
  {
    "query": "select count(), sum(number) from file('02892.orc') where indexHint(dt64_s between toDateTime64('-2.01e8'::Decimal64(0), 0) and toDateTime64(1.5e8::Decimal64(0), 0));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02892.orc') where indexHint(dt64_s between toDateTime64('-2.01e8':'"
  },
  {
    "query": "select count(), sum(number) from file('02892.orc') where indexHint(f32 between -0.11::Float32 and 0.06::Float32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(), sum(number) from file('02892.orc') where indexHint(f32 between -0.11:'"
  },
  {
    "query": "SELECT count(), sum(s::UInt64) FROM t_sparse_mutations_2 WHERE s != '';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02662_sparse_columns_mutations_2.sql",
    "error": "no viable alternative at input 'SELECT count(), sum(s:'"
  },
  {
    "query": "select count(*) = 18 * 18 * 17 + 35  from (\nselect key\nfrom (\nwith 18 as n\nselect repeat('\\\\0', number % n)\n|| repeat('1', intDiv(number, n) % n)\n|| repeat('\\\\0', intDiv(number, n * n) % n) key\nfrom numbers(18 * 18 * 18))\ngroup by key);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01109_sc0rp10_string_hash_map_zero_bytes.sql",
    "error": "no viable alternative at input 'select count(*) = 18 * 18 * 17 + 35  from (\\nselect key\\nfrom (\\nwith 18 as n\\nselect repeat('\\\\0', number % n)\\n|| repeat('1', intDiv(number, n) % n)\\n|| repeat('\\\\0', intDiv(number, n * n) % n) key\\nfrom numbers(18 *'"
  },
  {
    "query": "select count(*) as \\`value\\`, 0 as \\`data\\` from test group by \\`data\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02006_test_positional_arguments.sql",
    "error": "no viable alternative at input 'select count(*) as \\'"
  },
  {
    "query": "SELECT count(*) FROM (\nWITH RECURSIVE t AS (\nSELECT toUInt64(1) AS n UNION ALL SELECT n + 1 FROM t WHERE n < 500\n)\nSELECT * FROM t\n) AS t WHERE n < (\nSELECT count(*) FROM (\nWITH RECURSIVE t AS (\nSELECT toUInt64(1) AS n UNION ALL SELECT n + 1 FROM t WHERE n < 100\n)\nSELECT * FROM t WHERE n < 50000\n) AS t WHERE n < 100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_recursive_cte_postgres_2.sql",
    "error": "no viable alternative at input 'SELECT count(*) FROM (\\nWITH RECURSIVE t AS ('"
  },
  {
    "query": "SELECT count(*) FROM view(SELECT * FROM numbers(10) SETTINGS limit=5);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02565_analyzer_limit_settings.sql",
    "error": "no viable alternative at input 'SELECT count(*) FROM view(SELECT *'"
  },
  {
    "query": "SELECT count(*) FROM view(SELECT * FROM numbers(10)) SETTINGS limit=5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02565_analyzer_limit_settings.sql",
    "error": "no viable alternative at input 'SELECT count(*) FROM view(SELECT *'"
  },
  {
    "query": "SELECT count(*) FROM view(SELECT * FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02565_analyzer_limit_settings.sql",
    "error": "no viable alternative at input 'SELECT count(*) FROM view(SELECT *'"
  },
  {
    "query": "select count(1), min(d128), max(128) from file('02892.orc') where (d128 between '-0.00000000000011'::Decimal128(20) and 0.00000000000006::Decimal128(20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(1), min(d128), max(128) from file('02892.orc') where (d128 between '-0.00000000000011':'"
  },
  {
    "query": "select count(1), min(d32), max(d32) from file('02892.orc') where (d32 between '-0.011'::Decimal32(3) and 0.006::Decimal32(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(1), min(d32), max(d32) from file('02892.orc') where (d32 between '-0.011':'"
  },
  {
    "query": "select count(1), min(d64), max(d64) from file('02892.orc') where (d64 between '-0.0000011'::Decimal64(7) and 0.0000006::Decimal64(9));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(1), min(d64), max(d64) from file('02892.orc') where (d64 between '-0.0000011':'"
  },
  {
    "query": "select count(1), min(dt64_cs), max(dt64_cs) from file('02892.orc') where (dt64_cs between toDateTime64('-2.01e8'::Decimal64(1), 1) and toDateTime64(1.5e8::Decimal64(2), 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(1), min(dt64_cs), max(dt64_cs) from file('02892.orc') where (dt64_cs between toDateTime64('-2.01e8':'"
  },
  {
    "query": "select count(1), min(dt64_s), max(dt64_s) from file('02892.orc') where (dt64_s between toDateTime64('-2.01e8'::Decimal64(0), 0) and toDateTime64(1.5e8::Decimal64(0), 0));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(1), min(dt64_s), max(dt64_s) from file('02892.orc') where (dt64_s between toDateTime64('-2.01e8':'"
  },
  {
    "query": "select count(1), min(f32), max(f32) from file('02892.orc') where (f32 between -0.11::Float32 and 0.06::Float32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02892_orc_filter_pushdown.sql",
    "error": "no viable alternative at input 'select count(1), min(f32), max(f32) from file('02892.orc') where (f32 between -0.11:'"
  },
  {
    "query": "SELECT count(distinct(dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', toUInt64(number)))) from numbers(100);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT count(distinct(dictGetUInt8({'"
  },
  {
    "query": "SELECT count(now()) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'ignore';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.sql",
    "error": "no viable alternative at input 'SELECT count(now()) SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT count(now()) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'save';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.sql",
    "error": "no viable alternative at input 'SELECT count(now()) SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT count(now()) SETTINGS use_query_cache = true; -- { serverError QUERY_CACHE_USED_WITH_NONDETERMINISTIC_FUNCTIONS } SELECT count(now()) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'throw'; -- { serverError QUERY_CACHE_USED_WITH_NONDETERMINISTIC_FUNCTIONS }\nSELECT count(*) FROM system.query_cache;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.sql",
    "error": "no viable alternative at input 'SELECT count(now()) SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT countDigits(-123.45678901::Decimal256(8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(-123.45678901:'"
  },
  {
    "query": "SELECT countDigits(-123.4567890::Decimal128(7));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(-123.4567890:'"
  },
  {
    "query": "SELECT countDigits(-123.456789::Decimal256(8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(-123.456789:'"
  },
  {
    "query": "SELECT countDigits(-123.456789::Decimal64(6));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(-123.456789:'"
  },
  {
    "query": "SELECT countDigits(-123.45678::Decimal128(7));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(-123.45678:'"
  },
  {
    "query": "SELECT countDigits(-123.45678::Decimal32(5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(-123.45678:'"
  },
  {
    "query": "SELECT countDigits(-123.4567::Decimal64(6));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(-123.4567:'"
  },
  {
    "query": "SELECT countDigits(-123.456::Decimal32(5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(-123.456:'"
  },
  {
    "query": "SELECT countDigits(CAST(CAST(-1 AS UInt128) DIV 2 + 1 AS Int128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(CAST(CAST(-1 AS UInt128) DIV 2'"
  },
  {
    "query": "SELECT countDigits(CAST(CAST(-1 AS UInt256) DIV 2 + 1 AS Int256));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02560_count_digits.sql",
    "error": "no viable alternative at input 'SELECT countDigits(CAST(CAST(-1 AS UInt256) DIV 2'"
  },
  {
    "query": "SELECT countIf(1) FROM (SELECT NULL, exponentialTimeDecayedSum(100000002004087730000.)(value, time) OVER (Rows BETWEEN 255 FOLLOWING AND UNBOUNDED FOLLOWING), number = -2147483649, exponentialTimeDecayedSum(-1)(value, time) OVER (Rows BETWEEN UNBOUNDED PRECEDING AND 65537 PRECEDING), number AS value, number = NULL, exponentialTimeDecayedSum(65537)(value, time) OVER (Rows BETWEEN UNBOUNDED PRECEDING AND 1048577 FOLLOWING), number AS time FROM numbers(65535)) ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing_cross_block.sql",
    "error": "no viable alternative at input 'SELECT countIf(1) FROM (SELECT NULL, exponentialTimeDecayedSum(100000002004087730000.)(value, time) OVER'"
  },
  {
    "query": "SELECT countIf(explain like '%Algorithm: DirectKeyValueJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN actions = 1\nSELECT s FROM (SELECT toUInt64(9911) id) t1 INNER JOIN dict t2 USING (id)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02815_join_algorithm_setting.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%Algorithm: DirectKeyValueJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN actions ='"
  },
  {
    "query": "SELECT countIf(explain like '%Algorithm: DirectKeyValueJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN actions = 1\nSELECT * FROM ( SELECT k AS key FROM t2 ) AS t2\nINNER JOIN rdb ON rdb.key = t2.key\nORDER BY key ASC\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02815_join_algorithm_setting.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%Algorithm: DirectKeyValueJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN'"
  },
  {
    "query": "SELECT countIf(explain like '%Algorithm: GraceHashJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN actions = 1\nSELECT * FROM ( SELECT number AS key, number * 10 AS key2 FROM numbers_mt(10) ) AS t1\nJOIN ( SELECT k AS key, k + 100 AS key2 FROM t2 ) AS t2 ON t1.key = t2.key\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02815_join_algorithm_setting.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%Algorithm: GraceHashJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN'"
  },
  {
    "query": "SELECT countIf(explain like '%Algorithm: GraceHashJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN actions = 1\nSELECT * FROM ( SELECT number AS key, number * 10 AS key2 FROM numbers_mt(10) ) AS t1\nJOIN ( SELECT k AS key, k + 100 AS key2 FROM t2 ) AS t2 ON t1.key = t2.key OR t1.key2 = t2.key2\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02815_join_algorithm_setting.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%Algorithm: GraceHashJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1 CROSS JOIN t2 CROSS JOIN t3 CROSS JOIN t4) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1 JOIN t2 ON t1.a = t2.a CROSS JOIN t3) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1 JOIN t2 USING a CROSS JOIN t3) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2 CROSS JOIN t3) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2 WHERE t1.a = t2.a) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2 WHERE t1.b = t2.b) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3 WHERE t1.a = t2.a AND t1.a = t3.a) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3 WHERE t1.b = t2.b AND t1.b = t3.b) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t1.a = t3.a AND t1.a = t4.a) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t2.a = t3.a AND t3.a = t4.a) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.b = t2.b AND t1.b = t3.b AND t1.b = t4.b) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t2.a = t1.a AND t2.a = t3.a AND t2.a = t4.a) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t3.a = t1.a AND t3.a = t2.a AND t3.a = t4.a) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t4.a = t1.a AND t4.a = t2.a AND t4.a = t3.a) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4) SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1 CROSS JOIN t2 CROSS JOIN t3 CROSS JOIN t4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1 JOIN t2 ON t1.a = t2.a CROSS JOIN t3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1 JOIN t2 USING a CROSS JOIN t3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2 CROSS JOIN t3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2 WHERE t1.a = t2.a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2 WHERE t1.b = t2.b);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3 WHERE t1.a = t2.a AND t1.a = t3.a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3 WHERE t1.b = t2.b AND t1.b = t3.b);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t1.a = t3.a AND t1.a = t4.a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t2.a = t3.a AND t3.a = t4.a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.b = t2.b AND t1.b = t3.b AND t1.b = t4.b);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t2.a = t1.a AND t2.a = t3.a AND t2.a = t4.a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t3.a = t1.a AND t3.a = t2.a AND t3.a = t4.a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t4.a = t1.a AND t4.a = t2.a AND t4.a = t3.a);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00849_multiple_comma_join_2.sql",
    "error": "no viable alternative at input 'SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX'"
  },
  {
    "query": "SELECT countIf(sym = 'Red') OVER () AS res FROM\n(\nSELECT CAST(CAST(number % 5, 'Enum8(\\\\'Red\\\\' = 0, \\\\'Blue\\\\' = 1, \\\\'Yellow\\\\' = 2, \\\\'Black\\\\' = 3, \\\\'White\\\\' = 4)'), 'LowCardinality(String)') AS sym\nFROM numbers(10)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02126_lc_window_functions.sql",
    "error": "no viable alternative at input 'SELECT countIf(sym = 'Red') OVER () AS res FROM\\n(\\nSELECT CAST(CAST(number % 5, 'Enum8(\\\\'Red\\'"
  },
  {
    "query": "SELECT d FROM (SELECT toDate(1) AS d) ORDER BY d DESC WITH FILL FROM toDate(3) TO toDate(0) STEP INTERVAL -1 DAY;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT d FROM (SELECT toDate(1) AS d) ORDER BY d DESC WITH FILL FROM toDate'"
  },
  {
    "query": "SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 DAY LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 HOUR LIMIT 5; -- { serverError INVALID_WITH_FILL_EXPRESSION } DROP TABLE with_fill_date;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 HOUR LIMIT 5; -- { serverError INVALID_WITH_FILL_EXPRESSION } SELECT '1 DAY';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 15 MINUTE LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL'"
  },
  {
    "query": "select d, d.\\`Tuple(a UInt64, b String)\\`.a, d.\\`Array(Dynamic)\\`.\\`Variant(String, UInt64)\\`.UInt64, d.\\`Array(Variant(String, UInt64))\\`.UInt64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select d, d.\\'"
  },
  {
    "query": "select d, d.UInt64, d.Date, d.\\`Array(Variant(String, UInt64))\\`, d.\\`Array(Variant(String, UInt64))\\`.size0, d.\\`Array(Variant(String, UInt64))\\`.UInt64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select d, d.UInt64, d.Date, d.\\'"
  },
  {
    "query": "select d, d.UInt64, d.Date, d.\\`LowCardinality(String)\\`, d.\\`Array(Variant(String, UInt64))\\`, d.\\`Array(Variant(String, UInt64))\\`.size0, d.\\`Array(Variant(String, UInt64))\\`.UInt64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_shared_subcolumns_compact_merge_tree.sql",
    "error": "no viable alternative at input 'select d, d.UInt64, d.Date, d.\\'"
  },
  {
    "query": "select d, d.UInt64, d.String, d.\\`Array(Variant(String, UInt64))\\` from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select d, d.UInt64, d.String, d.\\'"
  },
  {
    "query": "SELECT d, dt, dtm\nFROM generateRandom('d Date, dt DateTime(\\\\'UTC\\\\'), dtm DateTime(\\\\'UTC\\\\')', 1, 10, 10)\nLIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT d, dt, dtm\\nFROM generateRandom('d Date, dt DateTime(\\\\'UTC'"
  },
  {
    "query": "select d, dynamicType(d) from format(CSV, 'd Dynamic', \\$\\$42\n42.42\n\"str\"\n\"[1, 2, 3]\"\n\"2020-01-01\"\n\"2020-01-01 10:00:00\"\n\"[1, 'str', [1, 2, 3]]\"\n\\\\N\ntrue\n\\$\\$) format CSV;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03033_dynamic_text_serialization.sql",
    "error": "no viable alternative at input 'select d, dynamicType(d) from format(CSV, 'd Dynamic', \\'"
  },
  {
    "query": "select d, dynamicType(d) from format(JSONEachRow, 'd Dynamic', \\$\\$ {\"d\" : 42}\n{\"d\" : 42.42}\n{\"d\" : \"str\"}\n{\"d\" : [1, 2, 3]}\n{\"d\" : \"2020-01-01\"}\n{\"d\" : \"2020-01-01 10:00:00\"}\n{\"d\" : {\"a\" : 42, \"b\" : \"str\"}}\n{\"d\" : {\"a\" : 43}}\n{\"d\" : {\"a\" : 44, \"c\" : [1, 2, 3]}}\n{\"d\" : [1, \"str\", [1, 2, 3]]}\n{\"d\" : null}\n{\"d\" : true}\n\\$\\$) format JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03033_dynamic_text_serialization.sql",
    "error": "no viable alternative at input 'select d, dynamicType(d) from format(JSONEachRow, 'd Dynamic', \\'"
  },
  {
    "query": "select d, dynamicType(d) from format(TSV, 'd Dynamic', \\$\\$42\n42.42\nstr\n[1, 2, 3]\n2020-01-01\n2020-01-01 10:00:00\n[1, 'str', [1, 2, 3]]\n\\\\N\ntrue\n\\$\\$) format TSV;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03033_dynamic_text_serialization.sql",
    "error": "no viable alternative at input 'select d, dynamicType(d) from format(TSV, 'd Dynamic', \\'"
  },
  {
    "query": "select d, dynamicType(d) from format(Values, 'd Dynamic', \\$\\$ (42)\n(42.42)\n('str')\n([1, 2, 3])\n('2020-01-01')\n('2020-01-01 10:00:00')\n(NULL)\n(true)\n\\$\\$) format Values;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03033_dynamic_text_serialization.sql",
    "error": "no viable alternative at input 'select d, dynamicType(d) from format(Values, 'd Dynamic', \\'"
  },
  {
    "query": "SELECT d, dynamicType(d), d.Int64, d.String, d.Date, d.Float64, d.DateTime, d.\\`Array(Int64)\\`, d.\\`Array(String)\\` FROM test_rapid_schema FORMAT PrettyCompactMonoBlock;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03152_dynamic_type_simple.sql",
    "error": "no viable alternative at input 'SELECT d, dynamicType(d), d.Int64, d.String, d.Date, d.Float64, d.DateTime, d.\\'"
  },
  {
    "query": "select d, dynamicType(d), isDynamicElementInSharedData(d) from format(JSONEachRow, 'd Dynamic(max_types=2)', \\$\\$ {\"d\" : 42}\n{\"d\" : 42.42}\n{\"d\" : \"str\"}\n{\"d\" : null}\n{\"d\" : true}\n\\$\\$) format JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03033_dynamic_text_serialization.sql",
    "error": "no viable alternative at input 'select d, dynamicType(d), isDynamicElementInSharedData(d) from format(JSONEachRow, 'd Dynamic(max_types=2)', \\'"
  },
  {
    "query": "select d.\\`Array(Array(Dynamic))\\`.size1, d.\\`Array(Array(Dynamic))\\`.UInt64, d.\\`Array(Array(Dynamic))\\`.\\`Map(String, Tuple(a UInt64))\\`.values.a from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select d.\\'"
  },
  {
    "query": "select d.\\`Array(Dynamic)\\`.\\`Variant(String, UInt64)\\`.UInt64, d.\\`Array(Dynamic)\\`.size0, d.\\`Array(Variant(String, UInt64))\\`.UInt64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select d.\\'"
  },
  {
    "query": "select d.Int8, d.Date, d.\\`Array(String)\\` from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select d.Int8, d.Date, d.\\'"
  },
  {
    "query": "select d.Int8, d.Date, d.\\`LowCardinality(String)\\`, d.\\`Array(String)\\` from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_shared_subcolumns_compact_merge_tree.sql",
    "error": "no viable alternative at input 'select d.Int8, d.Date, d.\\'"
  },
  {
    "query": "select d.String from (select 'str'::Dynamic as d);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03228_dynamic_subcolumns_from_subquery.sql",
    "error": "no viable alternative at input 'select d.String from (select 'str':'"
  },
  {
    "query": "select d.UInt64, d.Date, d.\\`Array(Variant(String, UInt64))\\`, d.\\`Array(Variant(String, UInt64))\\`.size0, d.\\`Array(Variant(String, UInt64))\\`.UInt64, d.\\`Array(Variant(String, UInt64))\\`.String from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select d.UInt64, d.Date, d.\\'"
  },
  {
    "query": "select d.UInt64, d.Date, d.\\`LowCardinality(String)\\`, d.\\`Array(Variant(String, UInt64))\\`, d.\\`Array(Variant(String, UInt64))\\`.size0, d.\\`Array(Variant(String, UInt64))\\`.UInt64, d.\\`Array(Variant(String, UInt64))\\`.String from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_shared_subcolumns_compact_merge_tree.sql",
    "error": "no viable alternative at input 'select d.UInt64, d.Date, d.\\'"
  },
  {
    "query": "select d.UInt64, d.String, d.\\`Array(Variant(String, UInt64))\\` from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_dynamic_read_subcolumns_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select d.UInt64, d.String, d.\\'"
  },
  {
    "query": "SELECT d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL 1 DAY LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL 15 MINUTE LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT database, name, type FROM system.dictionaries WHERE database = {CLICKHOUSE_DATABASE:String} ORDER BY name;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT database, name, type FROM system.dictionaries WHERE database = {'"
  },
  {
    "query": "SELECT DATE '2024-04-25', TIMESTAMP '2024-01-01 02:03:04', INTERVAL 1 MINUTE, INTERVAL '12 hour';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT DATE '2024-04-25', TIMESTAMP '2024-01-01 02:03:04', INTERVAL 1 MINUTE, INTERVAL '12 hour';'"
  },
  {
    "query": "SELECT date AS d, toNullable(f) AS f FROM 02861_interpolate WHERE id = '1' ORDER BY d ASC WITH FILL STEP toIntervalDay(1) INTERPOLATE (f);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02861_interpolate_alias_precedence.sql",
    "error": "no viable alternative at input 'SELECT date AS d, toNullable(f) AS f FROM 02861_interpolate WHERE id = '1' ORDER BY d ASC WITH FILL STEP toIntervalDay'"
  },
  {
    "query": "SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL '2 day');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01523_interval_operator_support_string_literal.sql",
    "error": "no viable alternative at input 'SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL '2 day')'"
  },
  {
    "query": "SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL '2 days');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL '2 days')'"
  },
  {
    "query": "SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL 2 days);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL 2 days)'"
  },
  {
    "query": "SELECT DATEDIFF(microsecond, '1969-12-31 23:59:59.999950'::DateTime64(6, 'UTC'), '1970-01-01 00:00:00.000010'::DateTime64(6, 'UTC'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(microsecond, '1969-12-31 23:59:59.999950':'"
  },
  {
    "query": "SELECT DATEDIFF(microsecond, '2021-01-01 23:59:59.899999'::DateTime64(6), '2021-01-02 00:01:00.100200300'::DateTime64(9));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(microsecond, '2021-01-01 23:59:59.899999':'"
  },
  {
    "query": "SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.2'::DateTime64(1), '2021-01-02'::Date);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.2':'"
  },
  {
    "query": "SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.299'::DateTime64, '2021-01-02'::Date);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.299':'"
  },
  {
    "query": "SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.299999'::DateTime64(6), '2021-01-02'::Date);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.299999':'"
  },
  {
    "query": "SELECT DATEDIFF(millisecond, '2021-01-01'::Date, '2021-01-02 00:00:01.299'::DateTime64);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(millisecond, '2021-01-01':'"
  },
  {
    "query": "SELECT DATEDIFF(millisecond, '2021-01-01'::Date, '2021-01-02 00:01:01'::DateTime);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(millisecond, '2021-01-01':'"
  },
  {
    "query": "SELECT DATEDIFF(millisecond, '2021-01-01'::Date, '2021-01-02'::Date);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(millisecond, '2021-01-01':'"
  },
  {
    "query": "SELECT DATEDIFF(millisecond, '2021-01-01'::Date, '2021-01-03'::Date32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(millisecond, '2021-01-01':'"
  },
  {
    "query": "SELECT DATEDIFF(second, '1969-12-31 23:59:59.123'::DateTime64(6, 'UTC'), '1970-01-01 00:00:09.123'::DateTime64(6, 'UTC'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02814_age_datediff.sql",
    "error": "no viable alternative at input 'SELECT DATEDIFF(second, '1969-12-31 23:59:59.123':'"
  },
  {
    "query": "SELECT defaultValueOfTypeName('Int64'),\ndefaultValueOfTypeName('String'),\ndefaultValueOfTypeName('UUID'),\ndefaultValueOfTypeName('IPv4'),\ndefaultValueOfTypeName('IPv6'),\ndefaultValueOfTypeName('Decimal128(3)'),\ndefaultValueOfTypeName('Tuple(Date, DateTime(\\\\'UTC\\\\'), Array(Array(String)), Nullable(UInt8))');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01425_default_value_of_type_name.sql",
    "error": "no viable alternative at input 'SELECT defaultValueOfTypeName('Int64'),\\ndefaultValueOfTypeName('String'),\\ndefaultValueOfTypeName('UUID'),\\ndefaultValueOfTypeName('IPv4'),\\ndefaultValueOfTypeName('IPv6'),\\ndefaultValueOfTypeName('Decimal128(3)'),\\ndefaultValueOfTypeName('Tuple(Date, DateTime(\\\\'UTC\\'"
  },
  {
    "query": "SELECT dictGet({CLICKHOUSE_DATABASE:Identifier}.dict3, 'some_column', toUInt64(12));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGet({'"
  },
  {
    "query": "select dictGet({CLICKHOUSE_DATABASE:String} || '.test_dict_01051_d', 'value', toUInt64(4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01050_clickhouse_dict_source_with_subquery.sql",
    "error": "no viable alternative at input 'select dictGet({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'fourth_column', toUInt64(14));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'fourth_column', tuple(toUInt64(14), '196'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'Tax', toUInt64(1), toDate('2019-05-15'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'Tax', toUInt64(1), toDate('2019-05-29'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'Tax', toUInt64(2), toDate('2019-05-29'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'Tax', toUInt64(2), toDate('2019-05-31'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict2', 'Tax', toUInt64(1), toDateTime('2019-05-15 00:00:00'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict2', 'Tax', toUInt64(1), toDateTime('2019-05-29 00:00:00'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict2', 'Tax', toUInt64(2), toDateTime('2019-05-29 00:00:00'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict2', 'Tax', toUInt64(2), toDateTime('2019-05-31 00:00:00'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict_exists', 'value', toUInt64(1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01041_create_dictionary_if_not_exists.sql",
    "error": "no viable alternative at input 'SELECT dictGetFloat64({'"
  },
  {
    "query": "SELECT dictGetHierarchy({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', toUInt64(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetHierarchy({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:Identifier}.dict3, 'some_column', toUInt64(12));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict', 'value_default', toUInt64(12));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01043_dictionary_attribute_properties_values.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict', 'value_default', toUInt64(14));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01043_dictionary_attribute_properties_values.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict', 'value_expression', toUInt64(12));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01043_dictionary_attribute_properties_values.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict', 'value_expression', toUInt64(14));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01043_dictionary_attribute_properties_values.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict1', 'third_column', toUInt64(12));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict2', 'some_column', toUInt64(12));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict3', 'some_column', toUInt64(12));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', 'RegionName', toUInt64(2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "select dictGetString({CLICKHOUSE_DATABASE:String} || '.restricted_dict', 'value', toUInt64(1));  -- {serverError DICTIONARY_ACCESS_DENIED} select 'Ok.';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01045_dictionaries_restrictions.sql",
    "error": "no viable alternative at input 'select dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', tuple(toInt64(0)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', tuple(toInt64(1)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'SELECT dictGetString({'"
  },
  {
    "query": "select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x)  from (select tuple(toInt64(0)) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'select dictGetString({'"
  },
  {
    "query": "select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x)  from (select tuple(toInt64(1)) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'select dictGetString({'"
  },
  {
    "query": "select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x)  from (select tuple(toInt64(number)) as x from numbers(5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'select dictGetString({'"
  },
  {
    "query": "select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(blockSize()=0)) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'select dictGetString({'"
  },
  {
    "query": "select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(materialize(0))) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'select dictGetString({'"
  },
  {
    "query": "select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(materialize(1))) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'select dictGetString({'"
  },
  {
    "query": "select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(rand64()*0)) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01080_check_for_error_incorrect_size_of_nested_column.sql",
    "error": "no viable alternative at input 'select dictGetString({'"
  },
  {
    "query": "SELECT dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', toUInt64(11));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetUInt8({'"
  },
  {
    "query": "SELECT dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', toUInt64(11)); -- {serverError BAD_ARGUMENTS} ATTACH DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetUInt8({'"
  },
  {
    "query": "SELECT dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', toUInt64(11)); -- {serverError BAD_ARGUMENTS} DROP DICTIONARY IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.dict1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetUInt8({'"
  },
  {
    "query": "SELECT dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', tuple(toUInt64(11), '121'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetUInt8({'"
  },
  {
    "query": "SELECT dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', tuple(toUInt64(11), '121')); -- {serverError BAD_ARGUMENTS} ATTACH DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT dictGetUInt8({'"
  },
  {
    "query": "SELECT dictGetUInt8({CLICKHOUSE_DATABASE_1:String}||'.dict1', 'second_column', toUInt64(100500));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01033_dictionaries_lifetime.sql",
    "error": "no viable alternative at input 'SELECT dictGetUInt8({'"
  },
  {
    "query": "SELECT dictIsIn({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', toUInt64(1), toUInt64(5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictIsIn({'"
  },
  {
    "query": "SELECT dictIsIn({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', toUInt64(3), toUInt64(2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictIsIn({'"
  },
  {
    "query": "SELECT dictIsIn({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', toUInt64(7), toUInt64(10000));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_special.sql",
    "error": "no viable alternative at input 'SELECT dictIsIn({'"
  },
  {
    "query": "select distinct _shard_num, * from remote('127.{1..4}', view(select toInt16(id) id from data), toInt8(id)%255) where id in (-1) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select distinct _shard_num, * from remote('127.{1..4}', view(select toInt16'"
  },
  {
    "query": "select distinct _shard_num, * from remote('127.{1..4}', view(select toInt16(id) id from data), toUInt8(id)%255) where id in (-1) order by _shard_num, id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01930_optimize_skip_unused_shards_rewrite_in.sql",
    "error": "no viable alternative at input 'select distinct _shard_num, * from remote('127.{1..4}', view(select toInt16'"
  },
  {
    "query": "SELECT DISTINCT a FROM remote('127.0.0.{1,2,3}', values('a UInt8, b UInt8', (1, 2), (1, 3))) GROUP BY a, b;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01801_distinct_group_by_shard.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT a FROM remote('127.0.0.{1,2,3}', values('a UInt8, b UInt8', ('"
  },
  {
    "query": "select distinct arrayJoin(JSONAllPaths(arrayJoin(json.a[]))) as path from test order by path;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03222_json_squashing.sql",
    "error": "no viable alternative at input 'select distinct arrayJoin(JSONAllPaths(arrayJoin(json.a[]'"
  },
  {
    "query": "SELECT DISTINCT arrayJoin(JSONAllPathsWithTypes(arrayJoin(arrayJoin(arr.k1[])))) AS path FROM t_json_array order by path;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayJoin(JSONAllPathsWithTypes(arrayJoin(arrayJoin(arr.k1[]'"
  },
  {
    "query": "select distinct arrayJoin(JSONAllPathsWithTypes(arrayJoin(json.a.r[]))) as paths_with_types from test order by paths_with_types;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select distinct arrayJoin(JSONAllPathsWithTypes(arrayJoin(json.a.r[]'"
  },
  {
    "query": "SELECT DISTINCT arrayJoin(JSONAllPathsWithTypes(arrayJoin(o.a.c.:\\`Array(JSON)\\`))) as path FROM t_json_10 order by path;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_10.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayJoin(JSONAllPathsWithTypes(arrayJoin(o.a.c.:'"
  },
  {
    "query": "select distinct arrayJoin(JSONDynamicPaths(arrayJoin(json.a[]))) as path from test order by path;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03222_json_squashing.sql",
    "error": "no viable alternative at input 'select distinct arrayJoin(JSONDynamicPaths(arrayJoin(json.a[]'"
  },
  {
    "query": "select distinct arrayJoin(JSONSharedDataPaths(arrayJoin(json.a[]))) as path from test order by path;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03222_json_squashing.sql",
    "error": "no viable alternative at input 'select distinct arrayJoin(JSONSharedDataPaths(arrayJoin(json.a[]'"
  },
  {
    "query": "SELECT DISTINCT arrayReduce('quantile(0.5)', []::Array(Float64)) FROM numbers(1000) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayReduce('quantile(0.5)', []:'"
  },
  {
    "query": "SELECT DISTINCT arrayReduce('quantile(0.5)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayReduce('quantile(0.5)', materialize([]:'"
  },
  {
    "query": "SELECT DISTINCT arrayReduce('quantileDeterministic(0.5)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayReduce('quantileDeterministic(0.5)', materialize([]:'"
  },
  {
    "query": "SELECT DISTINCT arrayReduce('quantiles(0, 0.5, 0.9, 1)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayReduce('quantiles(0, 0.5, 0.9, 1)', materialize([]:'"
  },
  {
    "query": "SELECT DISTINCT arrayReduce('quantiles(0.5)', []::Array(Float64)) FROM numbers(1000) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayReduce('quantiles(0.5)', []:'"
  },
  {
    "query": "SELECT DISTINCT arrayReduce('quantiles(0.5)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayReduce('quantiles(0.5)', materialize([]:'"
  },
  {
    "query": "SELECT DISTINCT arrayReduce('quantilesDeterministic(0, 0.5, 0.9, 1)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayReduce('quantilesDeterministic(0, 0.5, 0.9, 1)', materialize([]:'"
  },
  {
    "query": "SELECT DISTINCT arrayReduce('quantilesDeterministic(0.5)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT DISTINCT arrayReduce('quantilesDeterministic(0.5)', materialize([]:'"
  },
  {
    "query": "select distinct dynamicType(arrayJoin(json.a[].c)) as type, isDynamicElementInSharedData(arrayJoin(json.a[].c)) from test order by type;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03224_nested_json_merges_new_type_in_shared_data.sql",
    "error": "no viable alternative at input 'select distinct dynamicType(arrayJoin(json.a[]'"
  },
  {
    "query": "select distinct dynamicType(arrayJoin(json.a[].d)) as type, isDynamicElementInSharedData(arrayJoin(json.a[].d)) from test order by type;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03224_nested_json_merges_new_type_in_shared_data.sql",
    "error": "no viable alternative at input 'select distinct dynamicType(arrayJoin(json.a[]'"
  },
  {
    "query": "select distinct JSONDynamicPaths(arrayJoin(json.a[])) as path from test order by path;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03224_nested_json_merges_new_type_in_shared_data.sql",
    "error": "no viable alternative at input 'select distinct JSONDynamicPaths(arrayJoin(json.a[]'"
  },
  {
    "query": "select distinct JSONSharedDataPaths(arrayJoin(json.a[])) as path from test order by path;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03224_nested_json_merges_new_type_in_shared_data.sql",
    "error": "no viable alternative at input 'select distinct JSONSharedDataPaths(arrayJoin(json.a[]'"
  },
  {
    "query": "SELECT DIV AS MOD FROM (SELECT 1 \\`DIV\\`) FORMAT TSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01638_div_mod_ambiguities.sql",
    "error": "no viable alternative at input 'SELECT DIV AS MOD FROM (SELECT 1 \\'"
  },
  {
    "query": "SELECT dt64, dts64, dtms64\nFROM generateRandom('dt64 DateTime64(3, \\\\'UTC\\\\'), dts64 DateTime64(6, \\\\'UTC\\\\'), dtms64 DateTime64(6 ,\\\\'UTC\\\\')', 1, 10, 10)\nLIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT dt64, dts64, dtms64\\nFROM generateRandom('dt64 DateTime64(3, \\\\'UTC'"
  },
  {
    "query": "SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}'::JSON), dummy;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_order_by.sql",
    "error": "no viable alternative at input 'SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}':'"
  },
  {
    "query": "SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}'::JSON);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_order_by.sql",
    "error": "no viable alternative at input 'SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}':'"
  },
  {
    "query": "SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}'::Object('json')), dummy;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_order_by.sql",
    "error": "no viable alternative at input 'SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}':'"
  },
  {
    "query": "SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}'::Object('json'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_order_by.sql",
    "error": "no viable alternative at input 'SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}':'"
  },
  {
    "query": "SELECT dumpColumnStructure(['Hello', 'World']::Array(LowCardinality(String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02313_dump_column_structure_low_cardinality.sql",
    "error": "no viable alternative at input 'SELECT dumpColumnStructure(['Hello', 'World']:'"
  },
  {
    "query": "SELECT dynamicType(d), d,\nd.\\`Nested(x UInt32, y Dynamic)\\`.x,\nd.\\`Nested(x UInt32, y Dynamic)\\`.y,\ndynamicType(d.\\`Nested(x UInt32, y Dynamic)\\`.y[1]),\nd.\\`Nested(x UInt32, y Dynamic)\\`.y.\\`String\\`,\nd.\\`Nested(x UInt32, y Dynamic)\\`.y.\\`Tuple(Int64, Array(String))\\`\nFROM t ORDER BY d\nFORMAT PrettyCompactMonoBlock;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03162_dynamic_type_nested.sql",
    "error": "no viable alternative at input 'SELECT dynamicType(d), d,\\nd.\\'"
  },
  {
    "query": "SELECT encodeXMLComponent('\\\\'foo\\\\'');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01600_encode_XML.sql",
    "error": "no viable alternative at input 'SELECT encodeXMLComponent('\\\\'foo\\'"
  },
  {
    "query": "SELECT endUserIDs._experience.aaid.namespace.code FROM t_nested_tuple FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02184_nested_tuple.sql",
    "error": "no viable alternative at input 'SELECT endUserIDs._experience.aaid.namespace.code'"
  },
  {
    "query": "SELECT engine_full LIKE ('%replica-' || serverUUID()::String || '%') FROM system.tables WHERE database = currentDatabase() AND name = 'test';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02711_server_uuid_macro.sql",
    "error": "no viable alternative at input 'SELECT engine_full LIKE ('%replica-' || serverUUID():'"
  },
  {
    "query": "SELECT equals(sum_bytes1, sum_bytes2),\nequals(avg_duration1, avg_duration2)\nFROM\n(\nSELECT\ntoStartOfHour(datetime) AS hour,\nsum(bytes) AS sum_bytes1,\navg(duration) AS avg_duration1\nFROM video_log\nWHERE (toDate(hour) = '2022-07-22') AND (device_id = '100') --(device_id = '100') Make sure it's not good and doesn't go into prewhere.\nGROUP BY hour\n)\nLEFT JOIN\n(\nSELECT\n\\`hour\\`,\n\\`sum_bytes\\` AS sum_bytes2,\n\\`avg_duration\\` AS avg_duration2\nFROM video_log_result\n)\nUSING (hour) settings joined_subquery_requires_alias=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02371_select_projection_normal_agg.sql",
    "error": "no viable alternative at input 'SELECT equals(sum_bytes1, sum_bytes2),\\nequals(avg_duration1, avg_duration2)\\nFROM\\n(\\nSELECT\\ntoStartOfHour(datetime) AS hour,\\nsum(bytes) AS sum_bytes1,\\navg(duration) AS avg_duration1\\nFROM video_log\\nWHERE (toDate(hour) = '2022-07-22') AND (device_id = '100') GROUP BY hour\\n)\\nLEFT JOIN\\n(\\nSELECT\\n\\'"
  },
  {
    "query": "SELECT EXISTS (SELECT 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02160_special_functions.sql",
    "error": "no viable alternative at input 'SELECT EXISTS (SELECT 1'"
  },
  {
    "query": "select exists(select 1 except select 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02044_exists_operator.sql",
    "error": "no viable alternative at input 'select exists(select 1'"
  },
  {
    "query": "SELECT EXISTS(SELECT 1) AS mycheck FORMAT TSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03115_alias_exists_column.sql",
    "error": "no viable alternative at input 'SELECT EXISTS(SELECT 1'"
  },
  {
    "query": "select exists(select 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02044_exists_operator.sql",
    "error": "no viable alternative at input 'select exists(select 1'"
  },
  {
    "query": "select exists(select number from numbers(10) where number < 0);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02044_exists_operator.sql",
    "error": "no viable alternative at input 'select exists(select number from'"
  },
  {
    "query": "select exists(select number from numbers(10) where number > 0);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02044_exists_operator.sql",
    "error": "no viable alternative at input 'select exists(select number from'"
  },
  {
    "query": "select explain from (explain actions = 1 select * from (select sum(number) as v, bitAnd(number, 15) as key from numbers(1e8) group by key having v != 0) where key = 7) where explain like '%Filter%' or explain like '%Aggregating%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01655_plan_optimizations_merge_filters.sql",
    "error": "no viable alternative at input 'select explain from (explain actions ='"
  },
  {
    "query": "SELECT f.* FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"') AS f;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02368_analyzer_table_functions.sql",
    "error": "no viable alternative at input 'SELECT f.* FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc'"
  },
  {
    "query": "SELECT f.c1, f.c2, f.c3, f.c4 FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"') AS f;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02368_analyzer_table_functions.sql",
    "error": "no viable alternative at input 'SELECT f.c1, f.c2, f.c3, f.c4 FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\\\'abc'"
  },
  {
    "query": "select f.model_id from {CLICKHOUSE_DATABASE:Identifier}.fact_cpc_clicks as f left join {CLICKHOUSE_DATABASE:Identifier}.dim_model as d on f.model_id=d.model_id limit 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00815_left_join_on_stepanel.sql",
    "error": "no viable alternative at input 'select f.model_id from {'"
  },
  {
    "query": "SELECT finalizeAggregation(d.\\`AggregateFunction(sum, UInt64)\\`), sumMerge(d.\\`AggregateFunction(sum, UInt64)\\`)\nFROM t GROUP BY d.\\`AggregateFunction(sum, UInt64)\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03160_dynamic_type_agg.sql",
    "error": "no viable alternative at input 'SELECT finalizeAggregation(d.\\'"
  },
  {
    "query": "Select finalizeAggregation(unhex('070109000000010600000001080000000103000000010500000001040000000107000000')::AggregateFunction(groupArraySorted(10), Nullable(Decimal(3, 0))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03008_groupSortedArray_field.sql",
    "error": "no viable alternative at input 'Select finalizeAggregation(unhex('070109000000010600000001080000000103000000010500000001040000000107000000'):'"
  },
  {
    "query": "SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(dummy::Nullable(UInt8)) as t FROM system.one);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_Nullable.sql",
    "error": "no viable alternative at input 'SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(dummy:'"
  },
  {
    "query": "SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(NULL::Nullable(UInt8)) as t FROM numbers(5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_states.sql",
    "error": "no viable alternative at input 'SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(NULL:'"
  },
  {
    "query": "SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(NULL::Nullable(UInt8)) as t FROM system.one);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_states.sql",
    "error": "no viable alternative at input 'SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(NULL:'"
  },
  {
    "query": "SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(number::LowCardinality(Nullable(UInt8))) as t FROM numbers(0)) settings allow_suspicious_low_cardinality_types=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_Nullable.sql",
    "error": "no viable alternative at input 'SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(number:'"
  },
  {
    "query": "SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(number::Nullable(UInt8)) as t FROM numbers(0));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_Nullable.sql",
    "error": "no viable alternative at input 'SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(number:'"
  },
  {
    "query": "SELECT format('The answer to all questions is {0}.', materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The answer to all questions is {0}.', materialize(NULL :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1} and {2}', materialize(3 :: Int64), ' arguments test', ' with int type');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1} and {2}', materialize(3 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1} and {2}', materialize(42 :: Int32), materialize(144 :: UInt64), materialize(255 :: UInt32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1} and {2}', materialize(42 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}', '42', materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}', '42', materialize(NULL :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}', '42', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}', '42', materialize(NULL :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}', 42, materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}', 42, materialize(NULL :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}', 42, materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}', 42, materialize(NULL :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}', materialize(42 :: Int32), materialize(144 :: UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}', materialize(42 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}', materialize(NULL :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}', NULL, materialize(NULL :: Nullable(UInt64)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}', NULL, materialize(NULL :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('122.233.64.201' :: IPv4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('122.233.64.201' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :: IPv6));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14 05:50:12' :: DateTime('Europe/Amsterdam')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14 05:50:12' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14 05:50:12.123' :: DateTime64(3, 'Europe/Amsterdam')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14 05:50:12.123' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14' :: Date));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2123-11-14' :: Date32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2123-11-14' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: FixedString(3)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: LowCardinality(FixedString(3))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: LowCardinality(Nullable(FixedString(3)))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: Nullable(FixedString(3))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :: UUID));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: LowCardinality(Nullable(String))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: LowCardinality(String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: Nullable(String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: String));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('hallo' :: Enum('hallo' = 1)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('hallo' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('{\"foo\": \"bar\"}' :: JSON));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('{\"foo\": \"bar\"}' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize('{\"foo\": \"bar\"}' :: Object('json')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize('{\"foo\": \"bar\"}' :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize((42, 'foo') :: Tuple(Int32, String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize((42, 'foo') :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize((42, 43) :: Point));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize((42, 43) :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: Int8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: LowCardinality(Nullable(UInt32))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: LowCardinality(UInt32)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42.42 :: Float32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42.42 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(43 :: Int16));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(43 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(43.43 :: Float64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(43.43 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(44 :: Int32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(44 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(44.44 :: Decimal(2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(44.44 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(45 :: Int64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(45 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(46 :: Int128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(46 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(47 :: Int256));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(47 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(48 :: UInt8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(48 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(49 :: UInt16));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(49 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(50 :: UInt32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(50 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(51 :: UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(51 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(52 :: UInt128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(52 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(53 :: UInt256));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(53 :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(['foo', 'bar'] :: Array(String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(['foo', 'bar'] :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize([(0,0),(10,0),(10,10),(0,10)] :: Ring));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize([(0,0),(10,0),(10,10),(0,10)] :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize([[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]] :: Polygon));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize([[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]] :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]] :: MultiPolygon));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]] :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(false :: Bool));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(false :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(map(42, 'foo') :: Map(Int32, String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(map(42, 'foo') :'"
  },
  {
    "query": "SELECT format('The {0} to all questions is {1}.', 'answer', materialize(true :: Bool));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02935_format_with_arbitrary_types.sql",
    "error": "no viable alternative at input 'SELECT format('The {0} to all questions is {1}.', 'answer', materialize(true :'"
  },
  {
    "query": "SELECT format, format_value, c1, c2, c3, c4 FROM format('CSV' AS format, '1,2,\"[1,2,3]\",\"[[\\\\'abc\\\\'], [], [\\\\'d\\\\', \\\\'e\\\\']]\"' AS format_value);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02368_analyzer_table_functions.sql",
    "error": "no viable alternative at input 'SELECT format, format_value, c1, c2, c3, c4 FROM format('CSV' AS'"
  },
  {
    "query": "SELECT formatDateTimeInJodaSyntax(toDateTime('2018-01-12 22:33:44'), 'z'); -- { serverError NOT_IMPLEMENTED } SELECT formatDateTimeInJodaSyntax(toDateTime('2018-01-12 22:33:44'), 'zz'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDateTime('2018-01-12 22:33:44'), 'zzz'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDateTime('2018-01-12 22:33:44'), 'Z'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDateTime('2018-01-12 22:33:44'), 'b'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDate32('2018-01-12 22:33:44'), 'z'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDate32('2018-01-12 22:33:44'), 'zz'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDate32('2018-01-12 22:33:44'), 'zzz'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDate32('2018-01-12 22:33:44'), 'Z'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDate32('2018-01-12 22:33:44'), 'b'); -- { serverError NOT_IMPLEMENTED }\nSELECT formatDateTimeInJodaSyntax(toDate32('2018-01-12 22:33:44'), '\\\\'aaaa\\\\'\\\\''); -- { serverError BAD_ARGUMENTS }\nselect formatDateTimeInJodaSyntax(toDate('2012-05-29'), 'D');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02496_format_datetime_in_joda_syntax.sql",
    "error": "no viable alternative at input 'SELECT formatDateTimeInJodaSyntax(toDate32('2018-01-12 22:33:44'), '\\\\'aaaa\\'"
  },
  {
    "query": "SELECT formatQuery('ALTER TABLE a (MODIFY TTL expr TO VOLUME \\\\'vol1\\\\', expr2 + INTERVAL 2 YEAR TO VOLUME \\\\'vol2\\\\'), (DROP COLUMN c)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_unambiguous_alter_commands.sql",
    "error": "no viable alternative at input 'SELECT formatQuery('ALTER TABLE a (MODIFY TTL expr TO VOLUME \\\\'vol1\\'"
  },
  {
    "query": "SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 DEFAULT 2 MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR } SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 MATERIALIZED 3 MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 EPHEMERAL 4 MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 COMMENT \\\\'5\\\\' MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 CODEC(ZSTD) MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 STATISTICS(tdigest) MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 TTL toDate(\\\\'2025-01-01\\\\') + toIntervalDay(x) MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 COLLATE binary MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 SETTINGS (some_setting = 2) MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 PRIMARY KEY MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT 'RESET SETTING';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03231_alter_no_properties_before_remove_modify_reset.sql",
    "error": "no viable alternative at input 'SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 COMMENT \\\\'5'"
  },
  {
    "query": "SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 DEFAULT 2 REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR } SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 MATERIALIZED 3 REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 EPHEMERAL 4 REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 COMMENT \\\\'5\\\\' REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 CODEC(ZSTD) REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 STATISTICS(tdigest) REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 TTL toDate(\\\\'2025-01-01\\\\') + toIntervalDay(x) REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 COLLATE binary REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 SETTINGS (max_compress_block_size = 20000) REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 PRIMARY KEY REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT 'MODIFY SETTING';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03231_alter_no_properties_before_remove_modify_reset.sql",
    "error": "no viable alternative at input 'SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 COMMENT \\\\'5'"
  },
  {
    "query": "SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR } SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y DEFAULT 2 MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y MATERIALIZED 3 MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y EPHEMERAL 4 MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COMMENT \\\\'5\\\\' MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y CODEC(ZSTD) MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y STATISTICS(tdigest) MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y TTL toDate(\\\\'2025-01-01\\\\') + toIntervalDay(x) MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COLLATE binary MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y SETTINGS (some_setting = 2) MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y PRIMARY KEY MODIFY SETTING max_compress_block_size = 20000'); -- { serverError SYNTAX_ERROR }\nSELECT 'The same, but with type';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03231_alter_no_properties_before_remove_modify_reset.sql",
    "error": "no viable alternative at input 'SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COMMENT \\\\'5'"
  },
  {
    "query": "SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR } SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y DEFAULT 2 REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y MATERIALIZED 3 REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y EPHEMERAL 4 REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COMMENT \\\\'5\\\\' REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y CODEC(ZSTD) REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y STATISTICS(tdigest) REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y TTL toDate(\\\\'2025-01-01\\\\') + toIntervalDay(x) REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COLLATE binary REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y SETTINGS (max_compress_block_size = 20000) REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y PRIMARY KEY REMOVE MATERIALIZED'); -- { serverError SYNTAX_ERROR }\nSELECT 'The same, but with type';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03231_alter_no_properties_before_remove_modify_reset.sql",
    "error": "no viable alternative at input 'SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COMMENT \\\\'5'"
  },
  {
    "query": "SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y Int64 RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR } SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y DEFAULT 2 RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y MATERIALIZED 3 RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y EPHEMERAL 4 RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COMMENT \\\\'5\\\\' RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y CODEC(ZSTD) RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y STATISTICS(tdigest) RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y TTL toDate(\\\\'2025-01-01\\\\') + toIntervalDay(x) RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COLLATE binary RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y SETTINGS (some_setting = 2) RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT formatQuery('ALTER TABLE a MODIFY COLUMN y PRIMARY KEY RESET SETTING max_compress_block_size'); -- { serverError SYNTAX_ERROR }\nSELECT 'The same, but with type';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03231_alter_no_properties_before_remove_modify_reset.sql",
    "error": "no viable alternative at input 'SELECT formatQuery('ALTER TABLE a MODIFY COLUMN y COMMENT \\\\'5'"
  },
  {
    "query": "SELECT formatQuery('EXPLAIN SYNTAX SELECT CAST(1 AS INT), CEIL(1), CEILING(1), CHAR(49), CHAR_LENGTH(\\\\'1\\\\'), CHARACTER_LENGTH(\\\\'1\\\\'), COALESCE(1), CONCAT(\\\\'1\\\\', \\\\'1\\\\'), CORR(1, 1), COS(1), COUNT(1), COVAR_POP(1, 1), COVAR_SAMP(1, 1), DATABASE(), SCHEMA(), DATEDIFF(\\\\'DAY\\\\', toDate(\\\\'2020-10-24\\\\'), toDate(\\\\'2019-10-24\\\\')), EXP(1), FLATTEN([[1]]), FLOOR(1), FQDN(), GREATEST(1), IF(1, 1, 1), IFNULL(1, 1), LCASE(\\\\'A\\\\'), LEAST(1), LENGTH(\\\\'1\\\\'), LN(1), LOCATE(\\\\'1\\\\', \\\\'1\\\\'), LOG(1), LOG10(1), LOG2(1), LOWER(\\\\'A\\\\'), MAX(1), MID(\\\\'123\\\\', 1, 1), MIN(1), MOD(1, 1), NOT(1), NOW(), NOW64(), NULLIF(1, 1), PI(), POSITION(\\\\'123\\\\', \\\\'2\\\\'), POW(1, 1), POWER(1, 1), RAND(), REPLACE(\\\\'1\\\\', \\\\'1\\\\', \\\\'2\\\\'), REVERSE(\\\\'123\\\\'), ROUND(1), SIN(1), SQRT(1), STDDEV_POP(1), STDDEV_SAMP(1), SUBSTR(\\\\'123\\\\', 2), SUBSTRING(\\\\'123\\\\', 2), SUM(1), TAN(1), TANH(1), TRUNC(1), TRUNCATE(1), UCASE(\\\\'A\\\\'), UPPER(\\\\'A\\\\'), USER(), VAR_POP(1), VAR_SAMP(1), WEEK(toDate(\\\\'2020-10-24\\\\')), YEARWEEK(toDate(\\\\'2020-10-24\\\\')) format TSVRaw;');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02882_formatQuery.sql",
    "error": "no viable alternative at input 'SELECT formatQuery('EXPLAIN SYNTAX SELECT CAST(1 AS INT), CEIL(1), CEILING(1), CHAR(49), CHAR_LENGTH(\\\\'1'"
  },
  {
    "query": "SELECT formatQuery('INSERT INTO tab VALUES (\\\\'\\\\') (\\\\'test\\\\')');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02882_formatQuery.sql",
    "error": "no viable alternative at input 'SELECT formatQuery('INSERT INTO tab VALUES (\\\\'\\'"
  },
  {
    "query": "SELECT formatQuerySingleLine('EXPLAIN SYNTAX SELECT CAST(1 AS INT), CEIL(1), CEILING(1), CHAR(49), CHAR_LENGTH(\\\\'1\\\\'), CHARACTER_LENGTH(\\\\'1\\\\'), COALESCE(1), CONCAT(\\\\'1\\\\', \\\\'1\\\\'), CORR(1, 1), COS(1), COUNT(1), COVAR_POP(1, 1), COVAR_SAMP(1, 1), DATABASE(), SCHEMA(), DATEDIFF(\\\\'DAY\\\\', toDate(\\\\'2020-10-24\\\\'), toDate(\\\\'2019-10-24\\\\')), EXP(1), FLATTEN([[1]]), FLOOR(1), FQDN(), GREATEST(1), IF(1, 1, 1), IFNULL(1, 1), LCASE(\\\\'A\\\\'), LEAST(1), LENGTH(\\\\'1\\\\'), LN(1), LOCATE(\\\\'1\\\\', \\\\'1\\\\'), LOG(1), LOG10(1), LOG2(1), LOWER(\\\\'A\\\\'), MAX(1), MID(\\\\'123\\\\', 1, 1), MIN(1), MOD(1, 1), NOT(1), NOW(), NOW64(), NULLIF(1, 1), PI(), POSITION(\\\\'123\\\\', \\\\'2\\\\'), POW(1, 1), POWER(1, 1), RAND(), REPLACE(\\\\'1\\\\', \\\\'1\\\\', \\\\'2\\\\'), REVERSE(\\\\'123\\\\'), ROUND(1), SIN(1), SQRT(1), STDDEV_POP(1), STDDEV_SAMP(1), SUBSTR(\\\\'123\\\\', 2), SUBSTRING(\\\\'123\\\\', 2), SUM(1), TAN(1), TANH(1), TRUNC(1), TRUNCATE(1), UCASE(\\\\'A\\\\'), UPPER(\\\\'A\\\\'), USER(), VAR_POP(1), VAR_SAMP(1), WEEK(toDate(\\\\'2020-10-24\\\\')), YEARWEEK(toDate(\\\\'2020-10-24\\\\')) format TSVRaw;');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02882_formatQuery.sql",
    "error": "no viable alternative at input 'SELECT formatQuerySingleLine('EXPLAIN SYNTAX SELECT CAST(1 AS INT), CEIL(1), CEILING(1), CHAR(49), CHAR_LENGTH(\\\\'1'"
  },
  {
    "query": "SELECT formatQuerySingleLine('INSERT INTO tab VALUES (\\\\'\\\\') (\\\\'test\\\\')');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02882_formatQuery.sql",
    "error": "no viable alternative at input 'SELECT formatQuerySingleLine('INSERT INTO tab VALUES (\\\\'\\'"
  },
  {
    "query": "SELECT formatQuerySingleLine('SELECT v FROM t1 SETTINGS additional_table_filters = {\\\\'default.t1\\\\': \\\\'s\\\\'}');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02916_set_formatting.sql",
    "error": "no viable alternative at input 'SELECT formatQuerySingleLine('SELECT v FROM t1 SETTINGS additional_table_filters = {\\\\'default'"
  },
  {
    "query": "SELECT formatQuerySingleLine('set additional_table_filters = {\\\\'kjsnckjn\\\\': \\\\'ksanmn\\\\', \\\\'dkm\\\\': \\\\'dd\\\\'}');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02916_set_formatting.sql",
    "error": "no viable alternative at input 'SELECT formatQuerySingleLine('set additional_table_filters = {\\\\'kjsnckjn\\'"
  },
  {
    "query": "SELECT formatRow('RawBLOB', [[[33]], []]); -- { serverError NOT_IMPLEMENTED } SELECT formatRow('RawBLOB', [[[]], []]); -- { serverError NOT_IMPLEMENTED }\nSELECT formatRow('RawBLOB', [[[[[[[0x48, 0x65, 0x6c, 0x6c, 0x6f]]]]]], []]); -- { serverError NOT_IMPLEMENTED }\nSELECT formatRow('RawBLOB', []::Array(Array(Nothing))); -- { serverError NOT_IMPLEMENTED }\nSELECT formatRow('RawBLOB', [[], [['Hello']]]); -- { serverError NOT_IMPLEMENTED }\nSELECT formatRow('RawBLOB', [[['World']], []]); -- { serverError NOT_IMPLEMENTED }\nSELECT formatRow('RawBLOB', []::Array(String)); -- { serverError NOT_IMPLEMENTED }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02423_multidimensional_array_get_data_at.sql",
    "error": "no viable alternative at input 'SELECT formatRow('RawBLOB', []:'"
  },
  {
    "query": "SELECT fourth_column FROM {CLICKHOUSE_DATABASE:Identifier}.dict1 WHERE key_column = 14;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT fourth_column FROM {'"
  },
  {
    "query": "SELECT fromModifiedJulianDay(9223372036854775807 :: Int64); -- { serverError CANNOT_FORMAT_DATETIME } ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02463_julian_day_ubsan.sql",
    "error": "no viable alternative at input 'SELECT fromModifiedJulianDay(9223372036854775807 :'"
  },
  {
    "query": "SELECT greatest(1.5, 1.0::Decimal32(5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02155_binary_op_between_float_and_decimal.sql",
    "error": "no viable alternative at input 'SELECT greatest(1.5, 1.0:'"
  },
  {
    "query": "SELECT groupArray('5'::UInt8)(number) FROM numbers(10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01934_constexpr_aggregate_function_parameters.sql",
    "error": "no viable alternative at input 'SELECT groupArray('5':'"
  },
  {
    "query": "select groupArray(key) as keys,\ncount() as c\nfrom\n(\nselect\n*,\neventDate as key\nfrom\n(\nselect\neventDate\nfrom\n(\nselect\neventDate\nfrom\nfill_ex final\nwhere\neventDate >= toDate('2021-07-01')\nand eventDate<toDate('2021-07-30')\norder by\neventDate )\norder by\neventDate with fill\nfrom\ntoDate('2021-07-01') to toDate('2021-07-30') )\norder by\neventDate );",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03043_group_array_result_is_expected.sql",
    "error": "no viable alternative at input 'select groupArray(key) as keys,\\ncount() as c\\nfrom\\n(\\nselect\\n*,\\neventDate as key\\nfrom\\n(\\nselect\\neventDate\\nfrom\\n(\\nselect\\neventDate\\nfrom\\nfill_ex final\\nwhere\\neventDate >= toDate('2021-07-01')\\nand eventDate<toDate('2021-07-30')\\norder by\\neventDate )\\norder by\\neventDate with fill\\nfrom\\ntoDate'"
  },
  {
    "query": "select groupArrayLast(100)((number+1)::String) state from remote('127.{1,1}', view(select * from numbers(10)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02520_group_array_last.sql",
    "error": "no viable alternative at input 'select groupArrayLast(100)((number+1):'"
  },
  {
    "query": "select groupArrayLast(100)([number+1]) state from remote('127.{1,1}', view(select * from numbers(10)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02520_group_array_last.sql",
    "error": "no viable alternative at input 'select groupArrayLast(100)([number+1]) state from remote('127.{1,1}', view(select *'"
  },
  {
    "query": "select groupArrayLast(100)(number+1) state from remote('127.{1,1}', view(select * from numbers(10)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02520_group_array_last.sql",
    "error": "no viable alternative at input 'select groupArrayLast(100)(number+1) state from remote('127.{1,1}', view(select *'"
  },
  {
    "query": "select groupArrayLast(3)((number+1)::String) from numbers(10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02520_group_array_last.sql",
    "error": "no viable alternative at input 'select groupArrayLast(3)((number+1):'"
  },
  {
    "query": "select groupArrayLast(3)((number+1)::String) from numbers(5);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02520_group_array_last.sql",
    "error": "no viable alternative at input 'select groupArrayLast(3)((number+1):'"
  },
  {
    "query": "select groupArrayLast(3)((number+1)::String) state from remote('127.{1,1}', view(select * from numbers(10)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02520_group_array_last.sql",
    "error": "no viable alternative at input 'select groupArrayLast(3)((number+1):'"
  },
  {
    "query": "select groupArrayLast(3)([number+1]) state from remote('127.{1,1}', view(select * from numbers(10)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02520_group_array_last.sql",
    "error": "no viable alternative at input 'select groupArrayLast(3)([number+1]) state from remote('127.{1,1}', view(select *'"
  },
  {
    "query": "select groupArrayLast(3)(number+1) state from remote('127.{1,1}', view(select * from numbers(10)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02520_group_array_last.sql",
    "error": "no viable alternative at input 'select groupArrayLast(3)(number+1) state from remote('127.{1,1}', view(select *'"
  },
  {
    "query": "select groupUniqArray(v) from values('id int, v Array(int)', (1, [2]), (1, [])) group by id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01011_group_uniq_array_memsan.sql",
    "error": "no viable alternative at input 'select groupUniqArray(v) from values('id int, v Array(int)', ('"
  },
  {
    "query": "SELECT has(materialize(CAST(['2021-07-14'] AS Array(LowCardinality(Nullable(DateTime))))), materialize('2021-07-14 00:00:01'::DateTime64(7)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02010_array_index_bad_cast.sql",
    "error": "no viable alternative at input 'SELECT has(materialize(CAST(['2021-07-14'] AS Array(LowCardinality(Nullable(DateTime))))), materialize('2021-07-14 00:00:01':'"
  },
  {
    "query": "SELECT has(materialize(CAST(['2021-07-14'] AS Array(LowCardinality(Nullable(DateTime))))), materialize('2021-07-14'::DateTime64(7)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02010_array_index_bad_cast.sql",
    "error": "no viable alternative at input 'SELECT has(materialize(CAST(['2021-07-14'] AS Array(LowCardinality(Nullable(DateTime))))), materialize('2021-07-14':'"
  },
  {
    "query": "select hasSubsequence('garbage'::Nullable(String), 'a');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_has_subsequence.sql",
    "error": "no viable alternative at input 'select hasSubsequence('garbage':'"
  },
  {
    "query": "select hasSubsequence('garbage'::Nullable(String), 'arg'::Nullable(String));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_has_subsequence.sql",
    "error": "no viable alternative at input 'select hasSubsequence('garbage':'"
  },
  {
    "query": "select hasSubsequence(materialize('garbage'::Nullable(String)), materialize('arg'::Nullable(String)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_has_subsequence.sql",
    "error": "no viable alternative at input 'select hasSubsequence(materialize('garbage':'"
  },
  {
    "query": "select hasSubsequence(Null::Nullable(String), 'arg'::Nullable(String));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02809_has_subsequence.sql",
    "error": "no viable alternative at input 'select hasSubsequence(Null:'"
  },
  {
    "query": "SELECT hex('\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\\\\\\\\\'\\\\\"\\\\?\\\\xAA');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00342_escape_sequences.sql",
    "error": "no viable alternative at input 'SELECT hex('\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\\\\\\\\\'\\'"
  },
  {
    "query": "SELECT hex(1.234567890123456789012345678901::Decimal(60, 30));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT hex(1.234567890123456789012345678901:'"
  },
  {
    "query": "SELECT hex(encrypt('aes-128-ecb', 'plaintext', 'passwordpassword')) SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_secrets.sql",
    "error": "no viable alternative at input 'SELECT hex(encrypt('aes-128-ecb', 'plaintext', 'passwordpassword')) SETTINGS use_query_cache = true'"
  },
  {
    "query": "Select hex(groupArraySortedState(10)((number < 3 ? NULL : number)::Nullable(Decimal(3))) as t), toTypeName(t) from numbers(10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03008_groupSortedArray_field.sql",
    "error": "no viable alternative at input 'Select hex(groupArraySortedState(10)((number < 3 ? NULL : number):'"
  },
  {
    "query": "SELECT hex(maxIntersectionsState(*)) FROM VALUES((1, 3), (3, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02572_max_intersections.sql",
    "error": "no viable alternative at input 'SELECT hex(maxIntersectionsState(*)) FROM VALUES(('"
  },
  {
    "query": "SELECT hex(sipHash128Keyed((1::UInt64, 2::UInt64), []));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128Keyed((1:'"
  },
  {
    "query": "SELECT hex(sipHash128Keyed((1::UInt64, 2::UInt64), map([0], 1, [2], 3)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128Keyed((1:'"
  },
  {
    "query": "SELECT hex(sipHash128Keyed((1::UInt64, 2::UInt64), mapFromArrays([], [])));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128Keyed((1:'"
  },
  {
    "query": "SELECT hex(sipHash128Keyed((2::UInt64, 2::UInt64), val)) FROM sipHashKeyed_keys ORDER by val;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128Keyed((2:'"
  },
  {
    "query": "SELECT hex(sipHash128Keyed((key0, key1), 4::UInt64)) FROM sipHashKeyed_keys ORDER by key0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128Keyed((key0, key1), 4:'"
  },
  {
    "query": "SELECT hex(sipHash128Keyed((materialize(1::UInt64), 2::UInt64), map([0], 1, [2], 3))) FROM numbers(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128Keyed((materialize(1:'"
  },
  {
    "query": "SELECT hex(sipHash128Keyed(key, 4::UInt64)) FROM tab;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128Keyed(key, 4:'"
  },
  {
    "query": "SELECT hex(sipHash128ReferenceKeyed((0::UInt64, materialize(0::UInt64)), a)) FROM sipHashKeyed_keys ORDER BY a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128ReferenceKeyed((0:'"
  },
  {
    "query": "SELECT hex(sipHash128ReferenceKeyed((2::UInt64, 2::UInt64), val)) FROM sipHashKeyed_keys ORDER by val;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02552_siphash128_reference.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128ReferenceKeyed((2:'"
  },
  {
    "query": "SELECT hex(sipHash128ReferenceKeyed((key0, key1), 4::UInt64)) FROM sipHashKeyed_keys ORDER by key0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02552_siphash128_reference.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128ReferenceKeyed((key0, key1), 4:'"
  },
  {
    "query": "SELECT hex(sipHash128ReferenceKeyed(key, 4::UInt64)) FROM tab;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02552_siphash128_reference.sql",
    "error": "no viable alternative at input 'SELECT hex(sipHash128ReferenceKeyed(key, 4:'"
  },
  {
    "query": "SELECT hex(unhex('02010A00000000000000020A00000000000000')::AggregateFunction(1, sumMapFiltered([1, 2]), Array(UInt8), Array(UInt8)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.sql",
    "error": "no viable alternative at input 'SELECT hex(unhex('02010A00000000000000020A00000000000000'):'"
  },
  {
    "query": "SELECT host_id,\npath_id,\nmax(rank) AS rank\nFROM\n(\nWITH\nas_of_posts AS\n(\nSELECT\n*,\nrow_number() OVER (PARTITION BY (page_id, post_id) ORDER BY as_of DESC) AS row_num\nFROM posts\nWHERE (created >= subtractHours(now(), 24)) AND (host_id > 0)\n),\nas_of_post_metrics AS\n(\nSELECT\n*,\nrow_number() OVER (PARTITION BY (page_id, post_id) ORDER BY as_of DESC) AS row_num\nFROM post_metrics\nWHERE created >= subtractHours(now(), 24)\n)\nSELECT\npage_id,\npost_id,\nhost_id,\npath_id,\nimpressions,\nclicks,\nntile(20) OVER (PARTITION BY page_id ORDER BY clicks ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS rank\nFROM as_of_posts\nGLOBAL LEFT JOIN as_of_post_metrics USING (page_id, post_id, row_num)\nWHERE (row_num = 1) AND (impressions > 0)\n) AS t\nWHERE t.rank > 18\nGROUP BY\nhost_id,\npath_id\nFORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_parallel_window_functions_bug.sql",
    "error": "no viable alternative at input 'SELECT host_id,\\npath_id,\\nmax(rank) AS rank\\nFROM\\n(\\nWITH\\nas_of_posts AS\\n('"
  },
  {
    "query": "select hostname from system.query_log\nwhere\nquery like 'select \\\\'02095_system_logs_hostname%'\nand current_database = currentDatabase()\nand event_date >= yesterday() LIMIT 1 FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02905_system_logs_hostname.sql",
    "error": "no viable alternative at input 'select hostname from system.query_log\\nwhere\\nquery like 'select \\\\'02095_system_logs_hostname%''"
  },
  {
    "query": "select hostName(), hostname from system.query_thread_log\nwhere\nquery like 'select \\\\'02095_system_logs_hostname%'\nand current_database = currentDatabase()\nand event_date >= yesterday() LIMIT 1 FORMAT Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02905_system_logs_hostname.sql",
    "error": "no viable alternative at input 'select hostName(), hostname from system.query_thread_log\\nwhere\\nquery like 'select \\\\'02095_system_logs_hostname%''"
  },
  {
    "query": "SELECT i\nFROM generateRandom('i Array(Nullable(Enum8(\\\\'hello\\\\' = 1, \\\\'world\\\\' = 5)))', 1, 10, 10)\nLIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT i\\nFROM generateRandom('i Array(Nullable(Enum8(\\\\'hello'"
  },
  {
    "query": "SELECT i\nFROM generateRandom('i Enum8(\\\\'hello\\\\' = 1, \\\\'world\\\\' = 5)', 1, 10, 10)\nLIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT i\\nFROM generateRandom('i Enum8(\\\\'hello'"
  },
  {
    "query": "SELECT i\nFROM generateRandom('i Nullable(Enum16(\\\\'h\\\\' = 1, \\\\'w\\\\' = 5 , \\\\'o\\\\' = -200))', 1, 10, 10)\nLIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT i\\nFROM generateRandom('i Nullable(Enum16(\\\\'h'"
  },
  {
    "query": "SELECT i FROM generateRandom('i Array(Nullable(Enum8(\\\\'hello\\\\' = 1, \\\\'world\\\\' = 5)))', 1025, 65535, 9223372036854775807) LIMIT 10; -- { serverError TOO_LARGE_ARRAY_SIZE } ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01352_generate_random_overflow.sql",
    "error": "no viable alternative at input 'SELECT i FROM generateRandom('i Array(Nullable(Enum8(\\\\'hello'"
  },
  {
    "query": "SELECT i, col1 FROM ( SELECT i, a AS col1, a AS col2 FROM tab ORDER BY i WITH FILL INTERPOLATE (col1 AS col1+col2, col2)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02863_interpolate_subquery.sql",
    "error": "no viable alternative at input 'SELECT i, col1 FROM ( SELECT i, a AS col1, a AS col2 FROM tab ORDER BY i WITH FILL INTERPOLATE (col1 AS col1+col2,'"
  },
  {
    "query": "SELECT id % 255,\ntoTypeName(d.id)\nFROM\n(\nSELECT\ntoLowCardinality(1048577) AS id,\ntoLowCardinality(9223372036854775807) AS value\nGROUP BY\nGROUPING SETS (\n(toLowCardinality(1024)),\n(id % 10.0001),\n((id % 2147483646) != -9223372036854775807),\n((id % -1) != 255))\n) AS a\nSEMI LEFT JOIN\n(\nSELECT toLowCardinality(9223372036854775807) AS id\nWHERE (id % 2147483646) != NULL\n) AS d USING (id)\nSETTINGS join_use_nulls=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02923_join_use_nulls_modulo.sql",
    "error": "no viable alternative at input 'SELECT id % 255,\\ntoTypeName(d.id)\\nFROM\\n(\\nSELECT\\ntoLowCardinality(1048577) AS id,\\ntoLowCardinality(9223372036854775807) AS value\\nGROUP BY\\nGROUPING SETS ('"
  },
  {
    "query": "SELECT id FROM (SELECT id FROM test_table EXCEPT SELECT id FROM test_table);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02375_analyzer_union.sql",
    "error": "no viable alternative at input 'SELECT id FROM (SELECT id FROM test_table EXCEPT'"
  },
  {
    "query": "SELECT id FROM (SELECT id FROM test_table INTERSECT SELECT id FROM test_table);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02375_analyzer_union.sql",
    "error": "no viable alternative at input 'SELECT id FROM (SELECT id FROM test_table INTERSECT'"
  },
  {
    "query": "SELECT id FROM 03173_empty_transform WHERE xxHash32(id) % 3 IN (xxHash32(2::Int32) % 3) SETTINGS log_comment='03173_empty_transform';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03173_set_transformed_partition_pruning.sql",
    "error": "no viable alternative at input 'SELECT id FROM 03173_empty_transform WHERE xxHash32(id) % 3 IN (xxHash32(2:'"
  },
  {
    "query": "select id from date32_pv(dtparam='2199-12-31');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date32_pv(dtparam='"
  },
  {
    "query": "select id from date32_pv(dtparam=(select dt from date32_table_pv where id = 3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date32_pv(dtparam='"
  },
  {
    "query": "select id from date32_pv(dtparam=(select dt from date32_table_pv where id = 4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date32_pv(dtparam='"
  },
  {
    "query": "select id from date32_pv(dtparam=toDate32('1900-01-01'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date32_pv(dtparam='"
  },
  {
    "query": "select id from date32_pv(dtparam=today());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date32_pv(dtparam='"
  },
  {
    "query": "select id from date32_pv(dtparam=yesterday());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date32_pv(dtparam='"
  },
  {
    "query": "select id from date32_pv(dtparam=yesterday()+1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date32_pv(dtparam='"
  },
  {
    "query": "select id from date_pv(dtparam='1974-04-07');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv(dtparam='"
  },
  {
    "query": "select id from date_pv(dtparam=(select dt from date_table_pv where id = 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv(dtparam='"
  },
  {
    "query": "select id from date_pv(dtparam=toDate('1974-04-07'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv(dtparam='"
  },
  {
    "query": "select id from date_pv(dtparam=toDate('1975-04-07'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv(dtparam='"
  },
  {
    "query": "select id from date_pv(dtparam=today());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv(dtparam='"
  },
  {
    "query": "select id from date_pv(dtparam=toString(toDate('1974-04-07')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv(dtparam='"
  },
  {
    "query": "select id from date_pv(dtparam=yesterday());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv(dtparam='"
  },
  {
    "query": "select id from date_pv(dtparam=yesterday()+1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv(dtparam='"
  },
  {
    "query": "select id from date_pv2(dtparam='1974-04-07',intparam=length('AAA'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv2(dtparam='"
  },
  {
    "query": "select id from date_pv2(dtparam=toDate('1974-04-07'),intparam=length('BBB'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv2(dtparam='"
  },
  {
    "query": "select id from date_pv2(dtparam=today(),intparam=1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv2(dtparam='"
  },
  {
    "query": "select id from date_pv2(dtparam=today(),intparam=length('A'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from date_pv2(dtparam='"
  },
  {
    "query": "select id from ipv4_pv(ipv4param='116.106.34.242');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from ipv4_pv(ipv4param='"
  },
  {
    "query": "select id from ipv4_pv(ipv4param=(select ipaddr from ipv4_table_pv where id=3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from ipv4_pv(ipv4param='"
  },
  {
    "query": "select id from ipv4_pv(ipv4param=toIPv4('116.106.34.243'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from ipv4_pv(ipv4param='"
  },
  {
    "query": "SELECT id FROM test\nFINAL\nGROUP BY id\nWITH CUBE\nHAVING id IN (\nSELECT DISTINCT id\nFROM test\nFINAL\n)\nFORMAT \\`NUll\\`\nSETTINGS allow_experimental_analyzer = 1, group_by_use_nulls = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02535_analyzer_group_by_use_nulls.sql",
    "error": "no viable alternative at input 'SELECT id FROM test\\nFINAL\\nGROUP BY id\\nWITH CUBE\\nHAVING id IN (\\nSELECT DISTINCT id\\nFROM test\\nFINAL\\n)\\nFORMAT \\'"
  },
  {
    "query": "SELECT id FROM test\nGROUP BY id\nWITH CUBE\nHAVING id IN (\nSELECT id\nFROM test\n)\nFORMAT \\`NUll\\`\nSETTINGS allow_experimental_analyzer = 1, group_by_use_nulls = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02535_analyzer_group_by_use_nulls.sql",
    "error": "no viable alternative at input 'SELECT id FROM test\\nGROUP BY id\\nWITH CUBE\\nHAVING id IN (\\nSELECT id\\nFROM test\\n)\\nFORMAT \\'"
  },
  {
    "query": "select id from uuid_pv(uuidparam='11111111-2222-3333-4444-555555555555');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from uuid_pv(uuidparam='"
  },
  {
    "query": "select id from uuid_pv(uuidparam=(select uu from uuid_table_pv where id = 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from uuid_pv(uuidparam='"
  },
  {
    "query": "select id from uuid_pv(uuidparam=(select uu from uuid_table_pv where id = 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from uuid_pv(uuidparam='"
  },
  {
    "query": "select id from uuid_pv(uuidparam=generateUUIDv4()); -- { serverError UNKNOWN_QUERY_PARAMETER } select id from uuid_pv(uuidparam=(select generateUUIDv4()));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from uuid_pv(uuidparam='"
  },
  {
    "query": "select id from uuid_pv(uuidparam=serverUUID());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from uuid_pv(uuidparam='"
  },
  {
    "query": "select id from uuid_pv(uuidparam=toUUID('11111111-2222-3333-4444-555555555555'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03209_parameterized_view_with_non_literal_params.sql",
    "error": "no viable alternative at input 'select id from uuid_pv(uuidparam='"
  },
  {
    "query": "SELECT id,\nwhatever\nFROM ids AS l\nINNER JOIN view(SELECT * FROM merge(currentDatabase(), 'data*')) AS s ON l.id = s.id\nWHERE (status IN ['CREATED', 'CREATING'])\nORDER BY event_time DESC\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_storage_merge_view_prewhere.sql",
    "error": "no viable alternative at input 'SELECT id,\\nwhatever\\nFROM ids AS l\\nINNER JOIN view(SELECT *'"
  },
  {
    "query": "SELECT id, \\`n.a\\`, \\`n.b\\`, toTypeName(\\`n.b\\`) FROM t_nested_modify ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02377_modify_column_from_nested.sql",
    "error": "no viable alternative at input 'SELECT id, \\'"
  },
  {
    "query": "SELECT id, arr.k1[].k2, arr.k1[].k3, arr.k1[].k4, arr.k5.k6 FROM t_json_array ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_in_array.sql",
    "error": "no viable alternative at input 'SELECT id, arr.k1[]'"
  },
  {
    "query": "SELECT id, arrayDotProduct([5, 2, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2]::Array(UInt32), vec) FROM tab ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT id, arrayDotProduct([5, 2, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2]:'"
  },
  {
    "query": "SELECT id, arrayDotProduct([5.0, 2.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0]::Array(Float32), vec) FROM tab ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT id, arrayDotProduct([5.0, 2.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0]:'"
  },
  {
    "query": "SELECT id, arrayDotProduct([5.0, 2.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0]::Array(Float64), vec) FROM tab ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT id, arrayDotProduct([5.0, 2.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0]:'"
  },
  {
    "query": "SELECT id, arrayDotProduct(vec::Array(Float64), vec::Array(Float64)) FROM tab ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT id, arrayDotProduct(vec:'"
  },
  {
    "query": "SELECT id, arrayDotProduct(vec::Array(UInt32), vec::Array(UInt32)) FROM tab ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT id, arrayDotProduct(vec:'"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive*.tar :: example4.csv') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive*.tar* :: example{2..3}.csv') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive*.tar.gz :: example*.csv') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive*.zip :: example*') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive*.zip :: example2.csv') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive1.tar :: example1.csv') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive1.zip :: example1.csv') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive2.tar :: example*.csv') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='03036_archive2.zip :: example*.csv') ORDER BY (id, _file, _path);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'SELECT id, data, _size, _file, _path FROM s3(s3_conn, filename='"
  },
  {
    "query": "select id, data, _size, _file, _path from s3(s3_conn, filename='03036_archive2.zip :: nonexistent.csv'); -- { serverError CANNOT_EXTRACT_TABLE_STRUCTURE } select id, data, _size, _file, _path from s3(s3_conn, filename='03036_archive2.zip :: nonexistent{2..3}.csv'); -- { serverError CANNOT_EXTRACT_TABLE_STRUCTURE }\nCREATE TABLE table_zip22 Engine S3(s3_conn, filename='03036_archive2.zip :: example2.csv');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03036_reading_s3_archives.sql",
    "error": "no viable alternative at input 'select id, data, _size, _file, _path from s3(s3_conn, filename='"
  },
  {
    "query": "SELECT id, n.a.null, n.b.null FROM t_missed_subcolumns ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03203_fill_missed_subcolumns.sql",
    "error": "no viable alternative at input 'SELECT id, n.a.null'"
  },
  {
    "query": "SELECT id, t.a, t.b, arr.size0, arr.null FROM t_missed_subcolumns ORDER BY id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03203_fill_missed_subcolumns.sql",
    "error": "no viable alternative at input 'SELECT id, t.a, t.b, arr.size0, arr.null'"
  },
  {
    "query": "select if(count() == 2, 'OK', 'Fail: ' || toString(count())) from system.query_thread_log\nwhere\nquery like 'select \\\\'01546_log_queries_min_query_duration_ms-slow%'\nand current_database = currentDatabase()\nand event_date >= yesterday();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01546_log_queries_min_query_duration_ms.sql",
    "error": "no viable alternative at input 'select if(count() == 2, 'OK', 'Fail: ' || toString(count())) from system.query_thread_log\\nwhere\\nquery like 'select \\\\'01546_log_queries_min_query_duration_ms-slow%''"
  },
  {
    "query": "SELECT if(explain like '%ReadType: Default%', 'Ok', 'Error: ' || explain) FROM ( EXPLAIN PLAN actions = 1\nSELECT timestamp, value\nFROM mytable FINAL\nWHERE key = 5\nORDER BY timestamp DESC\n) WHERE explain like '%ReadType%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02564_read_in_order_final_desc.sql",
    "error": "no viable alternative at input 'SELECT if(explain like '%ReadType: Default%', 'Ok', 'Error: ' || explain) FROM ( EXPLAIN PLAN'"
  },
  {
    "query": "SELECT if(explain like '%ReadType: InOrder%', 'Ok', 'Error: ' || explain) FROM ( EXPLAIN PLAN actions = 1\nSELECT timestamp, value\nFROM mytable FINAL\nWHERE key = 5\nORDER BY timestamp SETTINGS enable_vertical_final = 0\n) WHERE explain like '%ReadType%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02564_read_in_order_final_desc.sql",
    "error": "no viable alternative at input 'SELECT if(explain like '%ReadType: InOrder%', 'Ok', 'Error: ' || explain) FROM ( EXPLAIN PLAN'"
  },
  {
    "query": "SELECT if(number % 2, number::Dynamic(max_types=3), ('str_' || toString(number))::Dynamic(max_types=2)) AS d, toTypeName(d), dynamicType(d) FROM numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03163_dynamic_as_supertype.sql",
    "error": "no viable alternative at input 'SELECT if(number % 2, number:'"
  },
  {
    "query": "SELECT if(number % 2, number::Int16, number::UInt64) as res, toTypeName(res) FROM numbers(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_varian_as_common_type_integers.sql",
    "error": "no viable alternative at input 'SELECT if(number % 2, number:'"
  },
  {
    "query": "SELECT if(number % 2, number::Int32, number::UInt64) as res, toTypeName(res) FROM numbers(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_varian_as_common_type_integers.sql",
    "error": "no viable alternative at input 'SELECT if(number % 2, number:'"
  },
  {
    "query": "SELECT if(number % 2, number::Int64, number::UInt64) as res, toTypeName(res) FROM numbers(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_varian_as_common_type_integers.sql",
    "error": "no viable alternative at input 'SELECT if(number % 2, number:'"
  },
  {
    "query": "SELECT if(number % 2, number::Int8, number::UInt64) as res, toTypeName(res) FROM numbers(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03215_varian_as_common_type_integers.sql",
    "error": "no viable alternative at input 'SELECT if(number % 2, number:'"
  },
  {
    "query": "SELECT ignore(*) FROM ( SELECT\nuId,\nuser.id as \\`uuu\\`\nFROM order\nLEFT ANY JOIN user\nON uId = \\`uuu\\`\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02724_mutliple_storage_join.sql",
    "error": "no viable alternative at input 'SELECT ignore(*) FROM ( SELECT\\nuId,\\nuser.id as \\'"
  },
  {
    "query": "SELECT intDiv(number, 2) AS k,\nsumArgMax(number, number % 20),\nsumArgMax(number, leftPad(toString(number % 20), 5, '0')), -- Pad with 0 to preserve number ordering\nsumArgMax(number, [number % 20, number % 20]),\nsumArgMin(number, number % 20),\nsumArgMin(number, leftPad(toString(number % 20), 5, '0')),\nsumArgMin(number, [number % 20, number % 20]),\nFROM\n(\nSELECT number\nFROM system.numbers\nLIMIT 65537\n)\nGROUP BY k\nWITH TOTALS\nORDER BY k ASC\nLIMIT 10\nSETTINGS group_by_overflow_mode = 'any', totals_mode = 'before_having', max_rows_to_group_by = 100000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_fix_single_value_data_assertion.sql",
    "error": "no viable alternative at input 'SELECT intDiv(number, 2) AS k,\\nsumArgMax(number, number % 20),\\nsumArgMax(number, leftPad(toString(number % 20), 5, '0')), sumArgMax(number, [number % 20, number % 20]),\\nsumArgMin(number, number % 20),\\nsumArgMin(number, leftPad(toString(number % 20), 5, '0')),\\nsumArgMin(number, [number % 20, number % 20]),\\nFROM\\n(\\nSELECT number\\nFROM'"
  },
  {
    "query": "select interval '1 day' - interval '1 hour';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01099_operators_date_and_timestamp.sql",
    "error": "no viable alternative at input 'select interval '1 day' - interval '1 hour';'"
  },
  {
    "query": "SELECT INTERVAL '2 day';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01523_interval_operator_support_string_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 day';'"
  },
  {
    "query": "SELECT INTERVAL '2 days';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 days';'"
  },
  {
    "query": "SELECT INTERVAL '2 hour';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01523_interval_operator_support_string_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 hour';'"
  },
  {
    "query": "SELECT INTERVAL '2 hours';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 hours';'"
  },
  {
    "query": "SELECT INTERVAL '2 minute';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01523_interval_operator_support_string_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 minute';'"
  },
  {
    "query": "SELECT INTERVAL '2 minutes';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 minutes';'"
  },
  {
    "query": "SELECT INTERVAL '2 month';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01523_interval_operator_support_string_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 month';'"
  },
  {
    "query": "SELECT INTERVAL '2 months';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 months';'"
  },
  {
    "query": "SELECT INTERVAL '2 week';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01523_interval_operator_support_string_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 week';'"
  },
  {
    "query": "SELECT INTERVAL '2 weeks';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 weeks';'"
  },
  {
    "query": "SELECT INTERVAL '2 year';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01523_interval_operator_support_string_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 year';'"
  },
  {
    "query": "SELECT INTERVAL '2 years';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL '2 years';'"
  },
  {
    "query": "SELECT INTERVAL 1 MICROSECOND < INTERVAL 999 MICROSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1 MICROSECOND < INTERVAL 999 MICROSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1 MICROSECOND > INTERVAL 999 MICROSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1 MICROSECOND > INTERVAL 999 MICROSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1 NANOSECOND < INTERVAL 2 DAY;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1 NANOSECOND < INTERVAL 2 DAY;'"
  },
  {
    "query": "SELECT INTERVAL 1 NANOSECOND < INTERVAL 2 MONTH; -- { serverError NO_COMMON_TYPE } SELECT('Comparing microseconds');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1 NANOSECOND < INTERVAL 2 MONTH;'"
  },
  {
    "query": "SELECT INTERVAL 1 NANOSECOND > INTERVAL 2 DAY;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1 NANOSECOND > INTERVAL 2 DAY;'"
  },
  {
    "query": "SELECT INTERVAL 1000 NANOSECOND < INTERVAL 1 MICROSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1000 NANOSECOND < INTERVAL 1 MICROSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1000 NANOSECOND < INTERVAL 1500 NANOSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1000 NANOSECOND < INTERVAL 1500 NANOSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1000 NANOSECOND > INTERVAL 1500 NANOSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1000 NANOSECOND > INTERVAL 1500 NANOSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1000 NANOSECOND >= INTERVAL 1 MICROSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1000 NANOSECOND >= INTERVAL 1 MICROSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1000001 NANOSECOND < INTERVAL 1 MILLISECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1000001 NANOSECOND < INTERVAL 1 MILLISECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1000001 NANOSECOND > INTERVAL 1 MILLISECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1000001 NANOSECOND > INTERVAL 1 MILLISECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1001 MICROSECOND < INTERVAL 1 MILLISECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1001 MICROSECOND < INTERVAL 1 MILLISECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1001 MICROSECOND > INTERVAL 1 MILLISECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1001 MICROSECOND > INTERVAL 1 MILLISECOND;'"
  },
  {
    "query": "SELECT INTERVAL 1198599999 MILLISECOND < INTERVAL 2 WEEK;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1198599999 MILLISECOND < INTERVAL 2 WEEK;'"
  },
  {
    "query": "SELECT INTERVAL 1198599999 MILLISECOND > INTERVAL 2 WEEK;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1198599999 MILLISECOND > INTERVAL 2 WEEK;'"
  },
  {
    "query": "SELECT INTERVAL 1209600000000 MICROSECOND != INTERVAL 2 WEEK;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1209600000000 MICROSECOND != INTERVAL 2 WEEK;'"
  },
  {
    "query": "SELECT INTERVAL 1209600000000 MICROSECOND = INTERVAL 2 WEEK;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1209600000000 MICROSECOND = INTERVAL 2 WEEK;'"
  },
  {
    "query": "SELECT INTERVAL 144000001 MILLISECOND < INTERVAL 40 HOUR;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 144000001 MILLISECOND < INTERVAL 40 HOUR;'"
  },
  {
    "query": "SELECT INTERVAL 144000001 MILLISECOND > INTERVAL 40 HOUR;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 144000001 MILLISECOND > INTERVAL 40 HOUR;'"
  },
  {
    "query": "SELECT INTERVAL 170000 MILLISECOND < INTERVAL 3 MINUTE;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 170000 MILLISECOND < INTERVAL 3 MINUTE;'"
  },
  {
    "query": "SELECT INTERVAL 170000 MILLISECOND > INTERVAL 3 MINUTE;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 170000 MILLISECOND > INTERVAL 3 MINUTE;'"
  },
  {
    "query": "SELECT INTERVAL 1728000000 MILLISECOND != INTERVAL 20 DAY;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1728000000 MILLISECOND != INTERVAL 20 DAY;'"
  },
  {
    "query": "SELECT INTERVAL 1728000000 MILLISECOND = INTERVAL 20 DAY;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 1728000000 MILLISECOND = INTERVAL 20 DAY;'"
  },
  {
    "query": "SELECT INTERVAL 179999999 MICROSECOND < INTERVAL 3 MINUTE;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 179999999 MICROSECOND < INTERVAL 3 MINUTE;'"
  },
  {
    "query": "SELECT INTERVAL 179999999 MICROSECOND > INTERVAL 3 MINUTE;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 179999999 MICROSECOND > INTERVAL 3 MINUTE;'"
  },
  {
    "query": "SELECT INTERVAL 2 days;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2 days;'"
  },
  {
    "query": "SELECT INTERVAL 2 hours;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2 hours;'"
  },
  {
    "query": "SELECT INTERVAL 2 minutes;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2 minutes;'"
  },
  {
    "query": "SELECT INTERVAL 2 months;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2 months;'"
  },
  {
    "query": "SELECT INTERVAL 2 QUARTER = INTERVAL 6 NANOSECOND; -- { serverError NO_COMMON_TYPE } SELECT('Comparing years');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2 QUARTER = INTERVAL 6 NANOSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2 weeks;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2 weeks;'"
  },
  {
    "query": "SELECT INTERVAL 2 years;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02884_interval_operator_support_plural_literal.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2 years;'"
  },
  {
    "query": "SELECT INTERVAL 2000 MILLISECOND != INTERVAL 2 SECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000 MILLISECOND != INTERVAL 2 SECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000 MILLISECOND < INTERVAL 2 MILLISECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000 MILLISECOND < INTERVAL 2 MILLISECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000 MILLISECOND = INTERVAL 2 SECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000 MILLISECOND = INTERVAL 2 SECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000 MILLISECOND > INTERVAL 2 MILLISECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000 MILLISECOND > INTERVAL 2 MILLISECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000 NANOSECOND != INTERVAL 2000 NANOSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000 NANOSECOND != INTERVAL 2000 NANOSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000 NANOSECOND = INTERVAL 2000 NANOSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000 NANOSECOND = INTERVAL 2000 NANOSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000000 MICROSECOND != INTERVAL 2 SECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000000 MICROSECOND != INTERVAL 2 SECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000000 MICROSECOND = INTERVAL 2 SECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000000 MICROSECOND = INTERVAL 2 SECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000000001 NANOSECOND < INTERVAL 2 SECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000000001 NANOSECOND < INTERVAL 2 SECOND;'"
  },
  {
    "query": "SELECT INTERVAL 2000000001 NANOSECOND > INTERVAL 2 SECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 2000000001 NANOSECOND > INTERVAL 2 SECOND;'"
  },
  {
    "query": "SELECT INTERVAL 3600000000 MICROSECOND != INTERVAL 1 HOUR;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 3600000000 MICROSECOND != INTERVAL 1 HOUR;'"
  },
  {
    "query": "SELECT INTERVAL 3600000000 MICROSECOND = INTERVAL 1 HOUR;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 3600000000 MICROSECOND = INTERVAL 1 HOUR;'"
  },
  {
    "query": "SELECT INTERVAL 36000000000000 MICROSECOND < INTERVAL 1 QUARTER; -- { serverError NO_COMMON_TYPE } SELECT('Comparing milliseconds');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 36000000000000 MICROSECOND < INTERVAL 1 QUARTER;'"
  },
  {
    "query": "SELECT INTERVAL 36000000000000 MICROSECOND < INTERVAL 2 DAY;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 36000000000000 MICROSECOND < INTERVAL 2 DAY;'"
  },
  {
    "query": "SELECT INTERVAL 36000000000000 MICROSECOND > INTERVAL 2 DAY;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 36000000000000 MICROSECOND > INTERVAL 2 DAY;'"
  },
  {
    "query": "SELECT INTERVAL 36000000000000 MILLISECOND < INTERVAL 1 YEAR; -- { serverError NO_COMMON_TYPE } SELECT('Comparing seconds');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 36000000000000 MILLISECOND < INTERVAL 1 YEAR;'"
  },
  {
    "query": "SELECT INTERVAL 5 NANOSECOND < INTERVAL 1 WEEK;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 5 NANOSECOND < INTERVAL 1 WEEK;'"
  },
  {
    "query": "SELECT INTERVAL 5 NANOSECOND > INTERVAL 1 WEEK;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 5 NANOSECOND > INTERVAL 1 WEEK;'"
  },
  {
    "query": "SELECT INTERVAL 500 NANOSECOND < INTERVAL 300 NANOSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 500 NANOSECOND < INTERVAL 300 NANOSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 500 NANOSECOND > INTERVAL 300 NANOSECOND;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 500 NANOSECOND > INTERVAL 300 NANOSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 6 MONTH = INTERVAL 26 MICROSECOND; -- { serverError NO_COMMON_TYPE } SELECT('Comparing quarters');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 6 MONTH = INTERVAL 26 MICROSECOND;'"
  },
  {
    "query": "SELECT INTERVAL 60000000000 NANOSECOND != INTERVAL 1 MINUTE;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 60000000000 NANOSECOND != INTERVAL 1 MINUTE;'"
  },
  {
    "query": "SELECT INTERVAL 60000000000 NANOSECOND = INTERVAL 1 MINUTE;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 60000000000 NANOSECOND = INTERVAL 1 MINUTE;'"
  },
  {
    "query": "SELECT INTERVAL 7199999999999 NANOSECOND < INTERVAL 2 HOUR;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 7199999999999 NANOSECOND < INTERVAL 2 HOUR;'"
  },
  {
    "query": "SELECT INTERVAL 7199999999999 NANOSECOND > INTERVAL 2 HOUR;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_interval_data_type_comparison.sql",
    "error": "no viable alternative at input 'SELECT INTERVAL 7199999999999 NANOSECOND > INTERVAL 2 HOUR;'"
  },
  {
    "query": "SELECT intervalLengthSum(x, y) FROM values('x Int64, y Int64', (0, 10), (5, 5), (5, 6), (1, -1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02158_interval_length_sum.sql",
    "error": "no viable alternative at input 'SELECT intervalLengthSum(x, y) FROM values('x Int64, y Int64', ('"
  },
  {
    "query": "SELECT joinGet({CLICKHOUSE_DATABASE:String} || '.join_test', 'b', 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00800_versatile_storage_join.sql",
    "error": "no viable alternative at input 'SELECT joinGet({'"
  },
  {
    "query": "select json, json.^a, json.a.b.c from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.c from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.c from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.d from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.d from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.^a, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.^'"
  },
  {
    "query": "select json, json.a.b, json.a.b.c, json.a.b.c.d.e, json.a.b.b.c.d_0, json.a.b.b.c.d_1, json.a.b.b.c.d_2, json.a.b.b.c.d_3, json.a.b.b.c.d_4, json.a.r, json.a.r[], json.a.r[].c.d.e, json.a.r[].b.c.d_0, json.a.r[].b.c.d_1, json.a.r[].b.c.d_2, json.a.r[].b.c.d_3, json.a.r[].b.c.d_4, json.^a, json.a.b.^b.c, json.a.r[].^b.c from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.a.b, json.a.b.c, json.a.b.c.d'"
  },
  {
    "query": "select json, json.a.b, json.a.b.c, json.a.b.c.d.e, json.a.b.b.c.d_0, json.a.b.b.c.d_1, json.a.b.b.c.d_2, json.a.b.b.c.d_3, json.a.b.b.c.d_4, json.a.r, json.a.r[], json.a.r[].c.d.e, json.a.r[].b.c.d_0, json.a.r[].b.c.d_1, json.a.r[].b.c.d_2, json.a.r[].b.c.d_3, json.a.r[].b.c.d_4, json.^a, json.a.b.^b.c, json.a.r[].^b.c from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.a.b, json.a.b.c, json.a.b.c.d'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b.:Int64, json.d.b.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.b.b.e.:String, json.b.b.e.:Date, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b.:Int64, json.d.b.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.b.b.e.:'"
  },
  {
    "query": "select json, json.d.a, json.b.b.\\`_1\\` from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a, json.b.b.\\'"
  },
  {
    "query": "select json, json.d.a, json.b.b.\\`_26\\` from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a, json.b.b.\\'"
  },
  {
    "query": "select json, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_1\\`.:Int64, json.b.b, json.b.b.\\`_1\\`.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_1\\`.:Int64, json.b.b, json.b.b.\\`_1\\`.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_26\\`.:Int64, json.b.b, json.b.b.\\`_26\\`.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_1\\`.:Int64, json.b.b.\\`_1\\`.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_26\\`.:Int64, json.b.b.\\`_26\\`.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b.:Int64, json.d.b.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a.:'"
  },
  {
    "query": "select json, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b.:Int64, json.d.b.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.d.a.:'"
  },
  {
    "query": "select json, json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:UUID, json.a.b.e, json.a.b.e.:String, json.a.b.e.:UUID, json.b.b.\\`_0\\`, json.b.b.\\`_0\\`.:Int64, json.b.b.\\`_0\\`.:UUID, json.b.b.\\`_1\\`, json.b.b.\\`_1\\`.:Int64, json.b.b.\\`_1\\`.:UUID, json.b.b.\\`_2\\`, json.b.b.\\`_2\\`.:Int64, json.b.b.\\`_2\\`.:UUID, json.b.b.\\`_3\\`, json.b.b.\\`_3\\`.:Int64, json.b.b.\\`_3\\`.:UUID, json.b.b.\\`_4\\`, json.b.b.\\`_4\\`.:Int64,  json.b.b.\\`_4\\`.:UUID, json.b.b.d, json.b.b.d.:Int64, json.b.b.d.:UUID, json.b.b.e, json.b.b.e.:String, json.b.b.e.:UUID, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:UUID, json.d.b, json.d.b.:Int64, json.d.b.:UUID, json.d.c, json.d.c.:Date, json.d.c.:UUID, json.^n, json.^a, json.^a.b, json.^b, json.^d from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:'"
  },
  {
    "query": "select json, json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:UUID, json.a.b.e, json.a.b.e.:String, json.a.b.e.:UUID, json.b.b.\\`_0\\`, json.b.b.\\`_0\\`.:Int64, json.b.b.\\`_0\\`.:UUID, json.b.b.\\`_1\\`, json.b.b.\\`_1\\`.:Int64, json.b.b.\\`_1\\`.:UUID, json.b.b.\\`_2\\`, json.b.b.\\`_2\\`.:Int64, json.b.b.\\`_2\\`.:UUID, json.b.b.\\`_3\\`, json.b.b.\\`_3\\`.:Int64, json.b.b.\\`_3\\`.:UUID, json.b.b.\\`_4\\`, json.b.b.\\`_4\\`.:Int64,  json.b.b.\\`_4\\`.:UUID, json.b.b.d, json.b.b.d.:Int64, json.b.b.d.:UUID, json.b.b.e, json.b.b.e.:String, json.b.b.e.:UUID, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:UUID, json.d.b, json.d.b.:Int64, json.d.b.:UUID, json.d.c, json.d.c.:Date, json.d.c.:UUID, json.^n, json.^a, json.^a.b, json.^b, json.^d from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:'"
  },
  {
    "query": "select json, json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:UUID, json.a.b.e, json.a.b.e.:String, json.a.b.e.:UUID, json.b.b.\\`_25\\`, json.b.b.\\`_25\\`.:Int64, json.b.b.\\`_25\\`.:UUID, json.b.b.\\`_26\\`, json.b.b.\\`_26\\`.:Int64, json.b.b.\\`_26\\`.:UUID, json.b.b.\\`_27\\`, json.b.b.\\`_27\\`.:Int64, json.b.b.\\`_27\\`.:UUID, json.b.b.\\`_28\\`, json.b.b.\\`_28\\`.:Int64, json.b.b.\\`_28\\`.:UUID, json.b.b.\\`_29\\`, json.b.b.\\`_29\\`.:Int64,  json.b.b.\\`_29\\`.:UUID, json.b.b.d, json.b.b.d.:Int64, json.b.b.d.:UUID, json.b.b.e, json.b.b.e.:String, json.b.b.e.:UUID, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:UUID, json.d.b, json.d.b.:Int64, json.d.b.:UUID, json.d.c, json.d.c.:Date, json.d.c.:UUID, json.^n, json.^a, json.^a.b, json.^b, json.^d from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:'"
  },
  {
    "query": "select json, json.non.existing.path, json.non.existing.path.:Int64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.non.existing.path, json.non.existing.path.:'"
  },
  {
    "query": "select json, json.non.existing.path, json.non.existing.path.:Int64 from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.non.existing.path, json.non.existing.path.:'"
  },
  {
    "query": "select json, json.non.existing.path, json.non.existing.path.:Int64 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.non.existing.path, json.non.existing.path.:'"
  },
  {
    "query": "select json, json.non.existing.path.:Int64 from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json, json.non.existing.path.:'"
  },
  {
    "query": "select json, json.non.existing.path.:Int64 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json, json.non.existing.path.:'"
  },
  {
    "query": "select json.^a, json.a.b.c from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.^'"
  },
  {
    "query": "select json.^a, json.a.b.c from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.^'"
  },
  {
    "query": "select json.^a, json.a.b.d from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.^'"
  },
  {
    "query": "select json.^a, json.a.b.d from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.^'"
  },
  {
    "query": "select json.^a, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.^'"
  },
  {
    "query": "select json.^a, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.^'"
  },
  {
    "query": "select json.^a, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.^'"
  },
  {
    "query": "select json.^a, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.^'"
  },
  {
    "query": "select json.a from (select '{\"a\" : 42}'::JSON as json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03228_dynamic_subcolumns_from_subquery.sql",
    "error": "no viable alternative at input 'select json.a from (select '{\"a\" : 42}':'"
  },
  {
    "query": "select json.a from (select '{\"a\" : 42}'::JSON(a UInt32) as json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03228_dynamic_subcolumns_from_subquery.sql",
    "error": "no viable alternative at input 'select json.a from (select '{\"a\" : 42}':'"
  },
  {
    "query": "select json.a.:Int64 from (select materialize('{\"a\" : 42}')::JSON as json);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03228_dynamic_subcolumns_from_subquery.sql",
    "error": "no viable alternative at input 'select json.a.:'"
  },
  {
    "query": "select json.a.:String from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03227_dynamic_subcolumns_enumerate_streams.sql",
    "error": "no viable alternative at input 'select json.a.:'"
  },
  {
    "query": "select json.a.b, json.a.b.c, json.a.b.c.d.e, json.a.b.b.c.d_0, json.a.b.b.c.d_1, json.a.b.b.c.d_2, json.a.b.b.c.d_3, json.a.b.b.c.d_4, json.a.r, json.a.r[], json.a.r[].c.d.e, json.a.r[].b.c.d_0, json.a.r[].b.c.d_1, json.a.r[].b.c.d_2, json.a.r[].b.c.d_3, json.a.r[].b.c.d_4, json.^a, json.a.b.^b.c, json.a.r[].^b.c from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.b, json.a.b.c, json.a.b.c.d'"
  },
  {
    "query": "select json.a.b, json.a.b.c, json.a.b.c.d.e, json.a.b.b.c.d_0, json.a.b.b.c.d_1, json.a.b.b.c.d_2, json.a.b.b.c.d_3, json.a.b.b.c.d_4, json.a.r, json.a.r[], json.a.r[].c.d.e, json.a.r[].b.c.d_0, json.a.r[].b.c.d_1, json.a.r[].b.c.d_2, json.a.r[].b.c.d_3, json.a.r[].b.c.d_4, json.^a, json.a.b.^b.c, json.a.r[].^b.c from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.b, json.a.b.c, json.a.b.c.d'"
  },
  {
    "query": "select json.a.r, json.a.r[].^b, json.a.r[].^b.c, json.a.r[].b.c.d_0 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r, json.a.r[]'"
  },
  {
    "query": "select json.a.r, json.a.r[].^b, json.a.r[].^b.c, json.a.r[].b.c.d_0 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r, json.a.r[]'"
  },
  {
    "query": "select json.a.r, json.a.r[].^b, json.a.r[].^b.c, json.a.r[].b.c.d_0.:Int64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r, json.a.r[]'"
  },
  {
    "query": "select json.a.r, json.a.r[].^b, json.a.r[].^b.c, json.a.r[].b.c.d_0.:Int64 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r, json.a.r[]'"
  },
  {
    "query": "select json.a.r, json.a.r[].c.d.e, json.a.r[].b.c.d_0, json.a.r[].b.c.d_1 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r, json.a.r[]'"
  },
  {
    "query": "select json.a.r, json.a.r[].c.d.e, json.a.r[].b.c.d_0, json.a.r[].b.c.d_1 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r, json.a.r[]'"
  },
  {
    "query": "select json.a.r, json.a.r[].c.d.e.:\\`Array(Nullable(Int64))\\`, json.a.r[].b.c.d_0.:Int64, json.a.r[].b.c.d_1.:Int64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r, json.a.r[]'"
  },
  {
    "query": "select json.a.r, json.a.r[].c.d.e.:\\`Array(Nullable(Int64))\\`, json.a.r[].b.c.d_0.:Int64, json.a.r[].b.c.d_1.:Int64 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r, json.a.r[]'"
  },
  {
    "query": "select json.a.r[].^b, json.a.r[].^b.c, json.a.r[].b.c.d_0 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r[]'"
  },
  {
    "query": "select json.a.r[].^b, json.a.r[].^b.c, json.a.r[].b.c.d_0 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r[]'"
  },
  {
    "query": "select json.a.r[].^b, json.a.r[].^b.c, json.a.r[].b.c.d_0.:Int64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r[]'"
  },
  {
    "query": "select json.a.r[].^b, json.a.r[].^b.c, json.a.r[].b.c.d_0.:Int64 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r[]'"
  },
  {
    "query": "select json.a.r[].c.d.e, json.a.r[].b.c.d_0, json.a.r[].b.c.d_1 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r[]'"
  },
  {
    "query": "select json.a.r[].c.d.e, json.a.r[].b.c.d_0, json.a.r[].b.c.d_1 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r[]'"
  },
  {
    "query": "select json.a.r[].c.d.e.:\\`Array(Nullable(Int64))\\`, json.a.r[].b.c.d_0.:Int64, json.a.r[].b.c.d_1.:Int64 from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r[]'"
  },
  {
    "query": "select json.a.r[].c.d.e.:\\`Array(Nullable(Int64))\\`, json.a.r[].b.c.d_0.:Int64, json.a.r[].b.c.d_1.:Int64 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_array_of_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.a.r[]'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e, json.b.b.e.:String, json.b.b.e.:Date, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e, json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date, json.a.b.d.:Int64, json.a.b.d.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b.:Int64, json.d.b.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.b.b.e.:String, json.b.b.e.:Date, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b.:Int64, json.d.b.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.b.b.e.:'"
  },
  {
    "query": "select json.d.a, json.b.b.\\`_1\\` from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.d.a, json.b.b.\\'"
  },
  {
    "query": "select json.d.a, json.b.b.\\`_26\\` from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.d.a, json.b.b.\\'"
  },
  {
    "query": "select json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_1\\`.:Int64, json.b.b, json.b.b.\\`_1\\`.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.d.a, json.d.a.:'"
  },
  {
    "query": "select json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_26\\`.:Int64, json.b.b, json.b.b.\\`_26\\`.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.d.a, json.d.a.:'"
  },
  {
    "query": "select json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.d.a, json.d.a.:'"
  },
  {
    "query": "select json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b, json.d.b.:Int64, json.d.b.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.d.a, json.d.a.:'"
  },
  {
    "query": "select json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_1\\`.:Int64, json.b.b.\\`_1\\`.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.d.a.:'"
  },
  {
    "query": "select json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.b.b.\\`_26\\`.:Int64, json.b.b.\\`_26\\`.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.d.a.:'"
  },
  {
    "query": "select json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b.:Int64, json.d.b.:Date from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.d.a.:'"
  },
  {
    "query": "select json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:Date, json.d.b.:Int64, json.d.b.:Date from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.d.a.:'"
  },
  {
    "query": "select json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:UUID, json.a.b.e, json.a.b.e.:String, json.a.b.e.:UUID, json.b.b.\\`_0\\`, json.b.b.\\`_0\\`.:Int64, json.b.b.\\`_0\\`.:UUID, json.b.b.\\`_1\\`, json.b.b.\\`_1\\`.:Int64, json.b.b.\\`_1\\`.:UUID, json.b.b.\\`_2\\`, json.b.b.\\`_2\\`.:Int64, json.b.b.\\`_2\\`.:UUID, json.b.b.\\`_3\\`, json.b.b.\\`_3\\`.:Int64, json.b.b.\\`_3\\`.:UUID, json.b.b.\\`_4\\`, json.b.b.\\`_4\\`.:Int64,  json.b.b.\\`_4\\`.:UUID, json.b.b.d, json.b.b.d.:Int64, json.b.b.d.:UUID, json.b.b.e, json.b.b.e.:String, json.b.b.e.:UUID, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:UUID, json.d.b, json.d.b.:Int64, json.d.b.:UUID, json.d.c, json.d.c.:Date, json.d.c.:UUID, json.^n, json.^a, json.^a.b, json.^b, json.^d from test format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:'"
  },
  {
    "query": "select json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:UUID, json.a.b.e, json.a.b.e.:String, json.a.b.e.:UUID, json.b.b.\\`_0\\`, json.b.b.\\`_0\\`.:Int64, json.b.b.\\`_0\\`.:UUID, json.b.b.\\`_1\\`, json.b.b.\\`_1\\`.:Int64, json.b.b.\\`_1\\`.:UUID, json.b.b.\\`_2\\`, json.b.b.\\`_2\\`.:Int64, json.b.b.\\`_2\\`.:UUID, json.b.b.\\`_3\\`, json.b.b.\\`_3\\`.:Int64, json.b.b.\\`_3\\`.:UUID, json.b.b.\\`_4\\`, json.b.b.\\`_4\\`.:Int64,  json.b.b.\\`_4\\`.:UUID, json.b.b.d, json.b.b.d.:Int64, json.b.b.d.:UUID, json.b.b.e, json.b.b.e.:String, json.b.b.e.:UUID, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:UUID, json.d.b, json.d.b.:Int64, json.d.b.:UUID, json.d.c, json.d.c.:Date, json.d.c.:UUID, json.^n, json.^a, json.^a.b, json.^b, json.^d from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:'"
  },
  {
    "query": "select json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:Int64, json.a.b.d.:UUID, json.a.b.e, json.a.b.e.:String, json.a.b.e.:UUID, json.b.b.\\`_25\\`, json.b.b.\\`_25\\`.:Int64, json.b.b.\\`_25\\`.:UUID, json.b.b.\\`_26\\`, json.b.b.\\`_26\\`.:Int64, json.b.b.\\`_26\\`.:UUID, json.b.b.\\`_27\\`, json.b.b.\\`_27\\`.:Int64, json.b.b.\\`_27\\`.:UUID, json.b.b.\\`_28\\`, json.b.b.\\`_28\\`.:Int64, json.b.b.\\`_28\\`.:UUID, json.b.b.\\`_29\\`, json.b.b.\\`_29\\`.:Int64,  json.b.b.\\`_29\\`.:UUID, json.b.b.d, json.b.b.d.:Int64, json.b.b.d.:UUID, json.b.b.e, json.b.b.e.:String, json.b.b.e.:UUID, json.d.a, json.d.a.:\\`Array(Nullable(Int64))\\`, json.d.a.:UUID, json.d.b, json.d.b.:Int64, json.d.b.:UUID, json.d.c, json.d.c.:Date, json.d.c.:UUID, json.^n, json.^a, json.^a.b, json.^b, json.^d from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.non.existing.path, json.a.b.c, json.a.b.d, json.a.b.d.:'"
  },
  {
    "query": "select json.non.existing.path, json.non.existing.path.:Int64 from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.non.existing.path, json.non.existing.path.:'"
  },
  {
    "query": "select json.non.existing.path, json.non.existing.path.:Int64 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.non.existing.path, json.non.existing.path.:'"
  },
  {
    "query": "select json.non.existing.path.:Int64 from test order by id format JSONColumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_1_memory.sql",
    "error": "no viable alternative at input 'select json.non.existing.path.:'"
  },
  {
    "query": "select json.non.existing.path.:Int64 from test order by id format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03207_json_read_subcolumns_2_memory.sql",
    "error": "no viable alternative at input 'select json.non.existing.path.:'"
  },
  {
    "query": "SELECT JSON_QUERY('{\"hello\":1}', '\\$[\\\\'hello\\\\']');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01889_sql_json_functions.sql",
    "error": "no viable alternative at input 'SELECT JSON_QUERY('{\"hello\":1}', '\\$[\\\\'hello\\'"
  },
  {
    "query": "SELECT JSON_QUERY('{\"x\":1}', '\\$[\\\\'hello\\\\']', materialize(toLowCardinality('x')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03003_sql_json_nonsense.sql",
    "error": "no viable alternative at input 'SELECT JSON_QUERY('{\"x\":1}', '\\$[\\\\'hello\\'"
  },
  {
    "query": "select JSON_VALUE('{\"hello\":\"world\"}', '\\$.b') settings function_json_value_return_type_allow_nullable=true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01889_sql_json_functions.sql",
    "error": "no viable alternative at input 'select JSON_VALUE('{\"hello\":\"world\"}', '\\$.b') settings function_json_value_return_type_allow_nullable=true'"
  },
  {
    "query": "SELECT JSON_VALUE('{\"hello\":1}', '\\$[\\\\'hello\\\\']');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01889_sql_json_functions.sql",
    "error": "no viable alternative at input 'SELECT JSON_VALUE('{\"hello\":1}', '\\$[\\\\'hello\\'"
  },
  {
    "query": "SELECT JSON_VALUE('{\"hello\":[\"world\",\"world2\"]}', '\\$.hello') settings function_json_value_return_type_allow_complex=true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01889_sql_json_functions.sql",
    "error": "no viable alternative at input 'SELECT JSON_VALUE('{\"hello\":[\"world\",\"world2\"]}', '\\$.hello') settings function_json_value_return_type_allow_complex=true'"
  },
  {
    "query": "select JSON_VALUE('{\"hello\":{\"world\":\"!\"}}', '\\$.hello') settings function_json_value_return_type_allow_complex=true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01889_sql_json_functions.sql",
    "error": "no viable alternative at input 'select JSON_VALUE('{\"hello\":{\"world\":\"!\"}}', '\\$.hello') settings function_json_value_return_type_allow_complex=true'"
  },
  {
    "query": "select JSONAllPaths(arrayJoin(json.a[])) from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_nested_json_in_shared_data_merges.sql",
    "error": "no viable alternative at input 'select JSONAllPaths(arrayJoin(json.a[]'"
  },
  {
    "query": "select JSONDynamicPaths(arrayJoin(json.a[])) from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_nested_json_in_shared_data_merges.sql",
    "error": "no viable alternative at input 'select JSONDynamicPaths(arrayJoin(json.a[]'"
  },
  {
    "query": "SELECT JSONExtract('{\"day\": \"Thursday\"}', 'day', 'Enum8(\\\\'Sunday\\\\' = 0, \\\\'Monday\\\\' = 1, \\\\'Tuesday\\\\' = 2, \\\\'Wednesday\\\\' = 3, \\\\'Thursday\\\\' = 4, \\\\'Friday\\\\' = 5, \\\\'Saturday\\\\' = 6)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00918_json_functions.sql",
    "error": "no viable alternative at input 'SELECT JSONExtract('{\"day\": \"Thursday\"}', 'day', 'Enum8(\\\\'Sunday\\'"
  },
  {
    "query": "SELECT JSONExtract('{\"day\": 5}', 'day', 'Enum8(\\\\'Sunday\\\\' = 0, \\\\'Monday\\\\' = 1, \\\\'Tuesday\\\\' = 2, \\\\'Wednesday\\\\' = 3, \\\\'Thursday\\\\' = 4, \\\\'Friday\\\\' = 5, \\\\'Saturday\\\\' = 6)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00918_json_functions.sql",
    "error": "no viable alternative at input 'SELECT JSONExtract('{\"day\": 5}', 'day', 'Enum8(\\\\'Sunday\\'"
  },
  {
    "query": "SELECT JSONExtract('{\"hello\":[{\" wow \":\"wtf\"}]}', 'Tuple(hello Array(Tuple(\\` wow \\` String)))') AS x, x.hello, x.hello[1].\\` wow \\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03224_tuple_element_identifier.sql",
    "error": "no viable alternative at input 'SELECT JSONExtract('{\"hello\":[{\" wow \":\"wtf\"}]}', 'Tuple(hello Array(Tuple(\\` wow \\` String)))') AS x, x.hello, x.hello[1].\\'"
  },
  {
    "query": "SELECT JSONExtract('{\"hello\":[{\" wow \":\"wtf\"}]}', 'Tuple(hello Array(Tuple(\\` wow \\` String)))') AS x, x.hello, x.hello[1].\\`wow\\`; -- { serverError NOT_FOUND_COLUMN_IN_BLOCK }\nSELECT ('Hello' AS world,).world;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03224_tuple_element_identifier.sql",
    "error": "no viable alternative at input 'SELECT JSONExtract('{\"hello\":[{\" wow \":\"wtf\"}]}', 'Tuple(hello Array(Tuple(\\` wow \\` String)))') AS x, x.hello, x.hello[1].\\'"
  },
  {
    "query": "SELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x, x.hello, x.hello[1].world;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03224_tuple_element_identifier.sql",
    "error": "no viable alternative at input 'SELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x, x.hello, x.hello[1].world'"
  },
  {
    "query": "select JSONSharedDataPaths(arrayJoin(json.a[])) from test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03223_nested_json_in_shared_data_merges.sql",
    "error": "no viable alternative at input 'select JSONSharedDataPaths(arrayJoin(json.a[]'"
  },
  {
    "query": "SELECT k FROM (\nSELECT k, abs(v) AS _v\nFROM remote('127.{1,2}', view(select materialize('foo') as k, -1 as v))\nORDER BY _v ASC\nLIMIT 1 BY k\n)\nGROUP BY k;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02281_limit_by_distributed.sql",
    "error": "no viable alternative at input 'SELECT k FROM (\\nSELECT k, abs(v) AS _v\\nFROM remote('127.{1,2}', view(select materialize'"
  },
  {
    "query": "SELECT k, s FROM (SELECT 1 AS k FROM \\`system\\`.\\`one\\`) AS \\`xxx\\` ANY LEFT JOIN (SELECT 1 AS k, 'Hello' AS s) AS \\`yyy\\` USING k;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00138_table_aliases.sql",
    "error": "no viable alternative at input 'SELECT k, s FROM (SELECT 1 AS k FROM \\'"
  },
  {
    "query": "select k1, k2, sum(v) from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v), cityHash64(k1, k2)) group by k1, k2; -- optimization applied select k1, any(k2), sum(v) from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v), cityHash64(k1, k2)) group by k1; -- optimization does not applied\nselect distinct k1, k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v), cityHash64(k1, k2)); -- optimization applied\nselect distinct on (k1) k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v), cityHash64(k1, k2)); -- optimization does not applied\nselect 'window functions';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01244_optimize_distributed_group_by_sharding_key.sql",
    "error": "no viable alternative at input 'select k1, k2, sum(v) from remote('127.{1,2}', view(select 1'"
  },
  {
    "query": "SELECT key FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) ORDER BY key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02479_mysql_connect_to_self.sql",
    "error": "no viable alternative at input 'SELECT key FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout'"
  },
  {
    "query": "select key, untuple(argMax((* except (key),), v1)) from kv group by key order by key format TSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01232_untuple.sql",
    "error": "no viable alternative at input 'select key, untuple(argMax((* except ('"
  },
  {
    "query": "SELECT lagInFrame(2::UInt128, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql",
    "error": "no viable alternative at input 'SELECT lagInFrame(2:'"
  },
  {
    "query": "SELECT lagInFrame(2::UInt64, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql",
    "error": "no viable alternative at input 'SELECT lagInFrame(2:'"
  },
  {
    "query": "SELECT last_value_respect_nullsMerge(t) FROM (Select last_value_respect_nullsState(NULL::Nullable(UInt8)) as t FROM numbers(5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_states.sql",
    "error": "no viable alternative at input 'SELECT last_value_respect_nullsMerge(t) FROM (Select last_value_respect_nullsState(NULL:'"
  },
  {
    "query": "SELECT last_value_respect_nullsMerge(t) FROM (Select last_value_respect_nullsState(NULL::Nullable(UInt8)) as t FROM system.one);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_states.sql",
    "error": "no viable alternative at input 'SELECT last_value_respect_nullsMerge(t) FROM (Select last_value_respect_nullsState(NULL:'"
  },
  {
    "query": "SELECT leadInFrame(2::UInt128, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql",
    "error": "no viable alternative at input 'SELECT leadInFrame(2:'"
  },
  {
    "query": "SELECT leadInFrame(2::UInt64, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql",
    "error": "no viable alternative at input 'SELECT leadInFrame(2:'"
  },
  {
    "query": "SELECT least(1.5, 1.0::Decimal32(5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02155_binary_op_between_float_and_decimal.sql",
    "error": "no viable alternative at input 'SELECT least(1.5, 1.0:'"
  },
  {
    "query": "SELECT leftPad('abc', 0), leftPad('abc', 0::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 0), leftPad('abc', 0:'"
  },
  {
    "query": "SELECT leftPad('abc', 1), leftPad('abc', 1::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 1), leftPad('abc', 1:'"
  },
  {
    "query": "SELECT leftPad('abc', 10), leftPad('abc', 10::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 10), leftPad('abc', 10:'"
  },
  {
    "query": "SELECT leftPad('abc', 10, '*'), leftPad('abc', 10::Int32, '*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 10, '*'), leftPad('abc', 10:'"
  },
  {
    "query": "SELECT leftPad('abc', 10, '*.'),leftPad('abc', 10::Int32, '*.');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 10, '*.'),leftPad('abc', 10:'"
  },
  {
    "query": "SELECT leftPad('abc', 2), leftPad('abc', 2::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 2), leftPad('abc', 2:'"
  },
  {
    "query": "SELECT leftPad('abc', 2, '*'),  leftPad('abc', 2::Int32, '*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 2, '*'),  leftPad('abc', 2:'"
  },
  {
    "query": "SELECT leftPad('abc', 2, '*.'), leftPad('abc', 2::Int32, '*.');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 2, '*.'), leftPad('abc', 2:'"
  },
  {
    "query": "SELECT leftPad('abc', 3), leftPad('abc', 3::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 3), leftPad('abc', 3:'"
  },
  {
    "query": "SELECT leftPad('abc', 4), leftPad('abc', 4::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 4), leftPad('abc', 4:'"
  },
  {
    "query": "SELECT leftPad('abc', 4, '*'),  leftPad('abc', 4::Int32, '*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 4, '*'),  leftPad('abc', 4:'"
  },
  {
    "query": "SELECT leftPad('abc', 4, '*.'), leftPad('abc', 4::Int32, '*.');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 4, '*.'), leftPad('abc', 4:'"
  },
  {
    "query": "SELECT leftPad('abc', 5), leftPad('abc', 5::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 5), leftPad('abc', 5:'"
  },
  {
    "query": "SELECT leftPad('abc', 5, '*'),  leftPad('abc', 5::Int32, '*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 5, '*'),  leftPad('abc', 5:'"
  },
  {
    "query": "SELECT leftPad('abc', 5, '*.'), leftPad('abc', 5::Int32, '*.');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('abc', 5, '*.'), leftPad('abc', 5:'"
  },
  {
    "query": "SELECT leftPad('P0P1P2P3', 2), leftPad('P0P1P2P3', 2::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('P0P1P2P3', 2), leftPad('P0P1P2P3', 2:'"
  },
  {
    "query": "SELECT leftPad('P0P1P2P3', 4), leftPad('P0P1P2P3', 4::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPad('P0P1P2P3', 4), leftPad('P0P1P2P3', 4:'"
  },
  {
    "query": "SELECT leftPadUTF8('P0P1P2P3', 2), leftPadUTF8('P0P1P2P3', 2::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPadUTF8('P0P1P2P3', 2), leftPadUTF8('P0P1P2P3', 2:'"
  },
  {
    "query": "SELECT leftPadUTF8('P0P1P2P3', 4), leftPadUTF8('P0P1P2P3', 4::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT leftPadUTF8('P0P1P2P3', 4), leftPadUTF8('P0P1P2P3', 4:'"
  },
  {
    "query": "SELECT length(arrayElementOrNull(m2, 'aaa'::FixedString(4))) FROM t_map_03240;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03240_array_element_or_null_for_map.sql",
    "error": "no viable alternative at input 'SELECT length(arrayElementOrNull(m2, 'aaa':'"
  },
  {
    "query": "SELECT length(m2['aaa'::FixedString(4)]) FROM t_map_02014;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02014_map_different_keys.sql",
    "error": "no viable alternative at input 'SELECT length(m2['aaa':'"
  },
  {
    "query": "SELECT lifetime_min, lifetime_max FROM system.dictionaries WHERE database={CLICKHOUSE_DATABASE_1:String} AND name = 'dict1';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01033_dictionaries_lifetime.sql",
    "error": "no viable alternative at input 'SELECT lifetime_min, lifetime_max FROM system.dictionaries WHERE database={'"
  },
  {
    "query": "SELECT line,\npatterns,\narrayFold(acc, pat -> position(line, pat), patterns, 0::UInt64)\nFROM tab\nORDER BY line;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02718_array_fold.sql",
    "error": "no viable alternative at input 'SELECT line,\\npatterns,\\narrayFold(acc, pat -> position(line, pat), patterns, 0:'"
  },
  {
    "query": "SELECT line,\nsplitByNonAlpha(line),\narrayFold(\n(acc, str) -> position(line, str),\nsplitByNonAlpha(line),\n0::UInt64\n)\nFROM\ntab;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02718_array_fold.sql",
    "error": "no viable alternative at input 'SELECT line,\\nsplitByNonAlpha(line),\\narrayFold(\\n(acc, str) -> position(line, str),\\nsplitByNonAlpha(line),\\n0:'"
  },
  {
    "query": "SELECT locate('abcabc', 'ca') SETTINGS function_locate_has_mysql_compatible_argument_order = false;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00765_locate.sql",
    "error": "no viable alternative at input 'SELECT locate('abcabc', 'ca') SETTINGS function_locate_has_mysql_compatible_argument_order = false'"
  },
  {
    "query": "SELECT locate('abcabc', 'ca') SETTINGS function_locate_has_mysql_compatible_argument_order = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00765_locate.sql",
    "error": "no viable alternative at input 'SELECT locate('abcabc', 'ca') SETTINGS function_locate_has_mysql_compatible_argument_order = true'"
  },
  {
    "query": "select lower(status::String), errorCodeToName(exception_code) from system.query_views_log where\nview_name = concatWithSeparator('.', currentDatabase(), 'push_to_proxy_mv_02572') and\nview_target = concatWithSeparator('.', currentDatabase(), 'proxy_02572')\norder by event_date, event_time\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02572_materialized_views_ignore_errors.sql",
    "error": "no viable alternative at input 'select lower(status:'"
  },
  {
    "query": "SELECT m1['aaa'::FixedString(3)], m2['aaa'::FixedString(3)] FROM t_map_02014;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02014_map_different_keys.sql",
    "error": "no viable alternative at input 'SELECT m1['aaa':'"
  },
  {
    "query": "SELECT map('2020-10-10'::Date, 'v1', '2020-10-11'::Date, 'v2') AS m FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01939_type_map_json.sql",
    "error": "no viable alternative at input 'SELECT map('2020-10-10':'"
  },
  {
    "query": "SELECT map('2020-10-10'::Date, 'v1', '2020-10-11'::Date, 'v2') AS m, toJSONString(m) AS s, isValidJSON(s);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01939_type_map_json.sql",
    "error": "no viable alternative at input 'SELECT map('2020-10-10':'"
  },
  {
    "query": "select map(0.1::Float32, 4, 0.2::Float32, 5) as m, mapContains(m, 0.1::Float32), mapContains(m, 0.3::Float32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01651_map_functions.sql",
    "error": "no viable alternative at input 'select map(0.1:'"
  },
  {
    "query": "select map(0.1::Float32, 4, 0.2::Float32, 5) as m, mapKeys(m), mapValues(m);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01651_map_functions.sql",
    "error": "no viable alternative at input 'select map(0.1:'"
  },
  {
    "query": "SELECT map(11::Int128, 'v1', 22::Int128, 'v2') AS m FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01939_type_map_json.sql",
    "error": "no viable alternative at input 'SELECT map(11:'"
  },
  {
    "query": "SELECT map(11::Int128, 'v1', 22::Int128, 'v2') AS m, toJSONString(m) AS s, isValidJSON(s);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01939_type_map_json.sql",
    "error": "no viable alternative at input 'SELECT map(11:'"
  },
  {
    "query": "SELECT map(11::UInt64, 'v1', 22::UInt64, 'v2') AS m FORMAT JSONEachRow;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01939_type_map_json.sql",
    "error": "no viable alternative at input 'SELECT map(11:'"
  },
  {
    "query": "SELECT map(11::UInt64, 'v1', 22::UInt64, 'v2') AS m, toJSONString(m) AS s, isValidJSON(s);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01939_type_map_json.sql",
    "error": "no viable alternative at input 'SELECT map(11:'"
  },
  {
    "query": "select map(1::LowCardinality(UInt8), 4, 2::LowCardinality(UInt8), 5) as m, mapContains(m, 1), mapContains (m, 3), mapContains(m, 1::LowCardinality(UInt8)), mapContains(m, 3::LowCardinality(UInt8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01651_map_functions.sql",
    "error": "no viable alternative at input 'select map(1:'"
  },
  {
    "query": "select map(1::LowCardinality(UInt8), 4, 2::LowCardinality(UInt8), 5) as m, mapKeys(m), mapValues(m);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01651_map_functions.sql",
    "error": "no viable alternative at input 'select map(1:'"
  },
  {
    "query": "select mapAdd(([toFloat32(1), 2], [toFloat64(1.1), 1]), ([toFloat32(1), 2], [2.2, 1])) as res, toTypeName(res); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } select mapAdd(([1, 2], [toFloat64(1.1), 1]), ([1, 2], [1, 1])) as res, toTypeName(res); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect mapAdd((['a', 'b'], [1, 1]), ([key], [1])) from values('key String', ('b'), ('c'), ('d'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract.sql",
    "error": "no viable alternative at input 'select mapAdd((['a', 'b'], [1, 1]), ([key], [1])) from values('key String', ('"
  },
  {
    "query": "select mapAdd((cast(['a', 'b'], 'Array(FixedString(1))'), [1, 1]), ([key], [1])) as res, toTypeName(res) from values('key FixedString(1)', ('b'), ('c'), ('d'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract.sql",
    "error": "no viable alternative at input 'select mapAdd((cast(['a', 'b'], 'Array(FixedString(1))'), [1, 1]), ([key], [1])) as res, toTypeName(res) from values('key FixedString(1)', ('"
  },
  {
    "query": "select mapAdd((cast(['a', 'b'], 'Array(LowCardinality(String))'), [1, 1]), ([key], [1])) from values('key String', ('b'), ('c'), ('d'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract.sql",
    "error": "no viable alternative at input 'select mapAdd((cast(['a', 'b'], 'Array(LowCardinality(String))'), [1, 1]), ([key], [1])) from values('key String', ('"
  },
  {
    "query": "select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(Enum16(\\\\'a\\\\'=1, \\\\'b\\\\'=2)), val Array(Int16)',  (['a'], [1]), (['b'], [1]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract.sql",
    "error": "no viable alternative at input 'select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(Enum16(\\\\'a'"
  },
  {
    "query": "select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(Enum8(\\\\'a\\\\'=1, \\\\'b\\\\'=2)), val Array(Int16)',  (['a'], [1]), (['b'], [1]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract.sql",
    "error": "no viable alternative at input 'select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(Enum8(\\\\'a'"
  },
  {
    "query": "select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(UUID), val Array(Int32)', (['00000000-89ab-cdef-0123-456789abcdef'], [1]), (['11111111-89ab-cdef-0123-456789abcdef'], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract.sql",
    "error": "no viable alternative at input 'select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(UUID), val Array(Int32)', ('"
  },
  {
    "query": "SELECT mapAdd(map('Hello', 1.2::Decimal128(30), 'World', 3.4::Decimal128(30)), map('World', 5.6::Decimal128(30), 'GoodBye', -111.222::Decimal128(30)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT mapAdd(map('Hello', 1.2:'"
  },
  {
    "query": "select mapAdd(map(cast('a', 'FixedString(1)'), 1, 'b', 1), map(key, 1)) as res, toTypeName(res) from values('key String', ('b'), ('c'), ('d'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.sql",
    "error": "no viable alternative at input 'select mapAdd(map(cast('a', 'FixedString(1)'), 1, 'b', 1), map(key, 1)) as res, toTypeName(res) from values('key String', ('"
  },
  {
    "query": "select mapAdd(map(cast('a', 'LowCardinality(String)'), 1, 'b', 1), map(key, 1)) from values('key String', ('b'), ('c'), ('d'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.sql",
    "error": "no viable alternative at input 'select mapAdd(map(cast('a', 'LowCardinality(String)'), 1, 'b', 1), map(key, 1)) from values('key String', ('"
  },
  {
    "query": "select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key Enum16(\\\\'a\\\\'=1, \\\\'b\\\\'=2), val Int16',  ('a', 1), ('b', 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.sql",
    "error": "no viable alternative at input 'select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key Enum16(\\\\'a'"
  },
  {
    "query": "select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key Enum8(\\\\'a\\\\'=1, \\\\'b\\\\'=2), val Int16',  ('a', 1), ('b', 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.sql",
    "error": "no viable alternative at input 'select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key Enum8(\\\\'a'"
  },
  {
    "query": "select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key UUID, val Int32', ('00000000-89ab-cdef-0123-456789abcdef', 1), ('11111111-89ab-cdef-0123-456789abcdef', 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.sql",
    "error": "no viable alternative at input 'select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key UUID, val Int32', ('"
  },
  {
    "query": "SELECT mapAll((k, v) -> k = 0.1::Float32, map(0.1::Float32, 4, 0.2::Float32, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapAll((k, v) -> k = 0.1:'"
  },
  {
    "query": "SELECT mapAll((k, v) -> k = 0.1::Float64, map(0.1::Float64, 4, 0.2::Float64, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapAll((k, v) -> k = 0.1:'"
  },
  {
    "query": "SELECT mapConcat(map(0.1::Float32, 4), map(0.2::Float32, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapConcat(map(0.1:'"
  },
  {
    "query": "SELECT mapConcat(map(0.1::Float64, 4), map(0.2::Float64, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapConcat(map(0.1:'"
  },
  {
    "query": "SELECT mapExists((k, v) -> k = 0.1::Float32, map(0.1::Float32, 4, 0.2::Float32, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapExists((k, v) -> k = 0.1:'"
  },
  {
    "query": "SELECT mapExists((k, v) -> k = 0.1::Float64, map(0.1::Float64, 4, 0.2::Float64, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapExists((k, v) -> k = 0.1:'"
  },
  {
    "query": "SELECT mapFilter((k, v) -> k = 0.1::Float64, map(0.1::Float64, 4, 0.2::Float64, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapFilter((k, v) -> k = 0.1:'"
  },
  {
    "query": "select mapFromArrays('aa', [4, 5]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } select mapFromArrays(['aa', 'bb'], 5); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect mapFromArrays(['aa', 'bb'], [4, 5], [6, 7]); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\nselect mapFromArrays(['aa', 'bb'], [4, 5, 6]); -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }\nselect mapFromArrays([[1,2], [3,4]], [4, 5, 6]); -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }\nselect mapFromArrays(['a', 2], [4, 5]); -- { serverError NO_COMMON_TYPE}\nselect mapFromArrays([1, 2], [4, 'a']); -- { serverError NO_COMMON_TYPE}\nselect mapFromArrays(['aa', 'bb'], map('a', 4)); -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }\nselect mapFromArrays([1,null]::Array(Nullable(UInt8)), [3,4]); -- { serverError BAD_ARGUMENTS }\nselect mapFromArrays(['aa', 'bb'], map('a', 4, 'b', 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01651_map_functions.sql",
    "error": "no viable alternative at input 'select mapFromArrays([1,null]:'"
  },
  {
    "query": "select mapFromArrays([1,2]::Array(Nullable(UInt8)), [3,4]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01651_map_functions.sql",
    "error": "no viable alternative at input 'select mapFromArrays([1,2]:'"
  },
  {
    "query": "SELECT mapSort((k, v) -> k, map(0.1::Float32, 4, 0.2::Float32, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapSort((k, v) -> k, map(0.1:'"
  },
  {
    "query": "SELECT mapSort((k, v) -> k, map(0.1::Float64, 4, 0.2::Float64, 5));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02169_map_functions.sql",
    "error": "no viable alternative at input 'SELECT mapSort((k, v) -> k, map(0.1:'"
  },
  {
    "query": "SELECT mapSubtract(map('Hello', 1.2::Decimal128(30), 'World', 3.4::Decimal128(30)), map('World', 5.6::Decimal128(30), 'GoodBye', -111.222::Decimal128(30)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT mapSubtract(map('Hello', 1.2:'"
  },
  {
    "query": "SELECT materialize('{\"k\":\"v\"}'::JSON) SETTINGS extremes = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_order_by.sql",
    "error": "no viable alternative at input 'SELECT materialize('{\"k\":\"v\"}':'"
  },
  {
    "query": "SELECT materialize('{\"k\":\"v\"}'::Object('json')) SETTINGS extremes = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_order_by.sql",
    "error": "no viable alternative at input 'SELECT materialize('{\"k\":\"v\"}':'"
  },
  {
    "query": "SELECT materialize(2), substr(_table, 1, 10), s FROM merge('test_01155_atomic', '') ORDER BY _table, s; -- { serverError UNKNOWN_DATABASE } SELECT dictGet('test_01155_ordinary.dict', 'x', 'after moving tables'); -- { serverError BAD_ARGUMENTS }\nRENAME DATABASE test_01155_atomic TO test_01155_ordinary;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01155_rename_move_materialized_view.sql",
    "error": "no viable alternative at input 'RENAME DATABASE'"
  },
  {
    "query": "SELECT materialize(['Hello', 'world'])[0::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize(['Hello', 'world'])[0:'"
  },
  {
    "query": "SELECT materialize(['Hello', 'world'])[2::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize(['Hello', 'world'])[2:'"
  },
  {
    "query": "SELECT materialize(['Hello', 'world'])[3::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize(['Hello', 'world'])[3:'"
  },
  {
    "query": "SELECT materialize(['Hello'])[1::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize(['Hello'])[1:'"
  },
  {
    "query": "SELECT materialize([13, 14])[0::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([13, 14])[0:'"
  },
  {
    "query": "SELECT materialize([13, 14])[2::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([13, 14])[2:'"
  },
  {
    "query": "SELECT materialize([13, 14])[3::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([13, 14])[3:'"
  },
  {
    "query": "SELECT materialize([13])[1::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([13])[1:'"
  },
  {
    "query": "SELECT materialize([1::UInt8, 2::UInt8, 3::UInt8]) AS x, [4::UInt8, 5::UInt8, 6::UInt8] AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT materialize([1:'"
  },
  {
    "query": "SELECT materialize([['Hello'], ['world']])[0::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([['Hello'], ['world']])[0:'"
  },
  {
    "query": "SELECT materialize([['Hello'], ['world']])[2::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([['Hello'], ['world']])[2:'"
  },
  {
    "query": "SELECT materialize([['Hello'], ['world']])[3::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([['Hello'], ['world']])[3:'"
  },
  {
    "query": "SELECT materialize([['Hello']])[1::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([['Hello']])[1:'"
  },
  {
    "query": "SELECT materialize([[13], [14]])[0::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([[13], [14]])[0:'"
  },
  {
    "query": "SELECT materialize([[13], [14]])[2::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([[13], [14]])[2:'"
  },
  {
    "query": "SELECT materialize([[13], [14]])[3::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([[13], [14]])[3:'"
  },
  {
    "query": "SELECT materialize([[13]])[1::Int8];",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql",
    "error": "no viable alternative at input 'SELECT materialize([[13]])[1:'"
  },
  {
    "query": "SELECT materialize([]::Array(Float32)) AS x, []::Array(Float32) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT materialize([]:'"
  },
  {
    "query": "SELECT materialize([]::Array(UInt8)) AS x, []::Array(UInt8) AS y, dotProduct(x, y) AS res, toTypeName(res);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02708_dotProduct.sql",
    "error": "no viable alternative at input 'SELECT materialize([]:'"
  },
  {
    "query": "SELECT materialize(toLowCardinality('a\\\\0aa')), countIf(toLowCardinality('aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0'), sym = 'Red') OVER (Range BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS res FROM (SELECT CAST(CAST(number % 5, 'Enum8(\\\\'Red\\\\' = 0, \\\\'Blue\\\\' = 1, \\\\'Yellow\\\\' = 2, \\\\'Black\\\\' = 3, \\\\'White\\\\' = 4)'), 'LowCardinality(String)') AS sym FROM numbers(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02126_lc_window_functions.sql",
    "error": "no viable alternative at input 'SELECT materialize(toLowCardinality('a\\\\0aa')), countIf(toLowCardinality('aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0aaaaaaa\\\\0'), sym = 'Red') OVER (Range BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS res FROM (SELECT CAST(CAST(number % 5, 'Enum8(\\\\'Red\\'"
  },
  {
    "query": "SELECT max(\\`column_1\\`) AS \\`column_1\\`,\nmax(\\`column_2\\`) AS \\`column_2\\`,\n\\`id\\`\nFROM (\nSELECT\nmax(\\`column_1\\`) AS \\`column_1\\`,\nNULL AS \\`column_2\\`,\n\\`id\\`\nFROM \\`clickhouse_alias_issue_1\\`\nGROUP BY\n\\`id\\`\nUNION ALL\nSELECT\nNULL AS \\`column_1\\`,\nmax(\\`column_2\\`) AS \\`column_2\\`,\n\\`id\\`\nFROM \\`clickhouse_alias_issue_2\\`\nGROUP BY\n\\`id\\`\nSETTINGS prefer_column_name_to_alias=1\n) as T1\nGROUP BY \\`id\\`\nORDER BY \\`id\\` DESC\nSETTINGS prefer_column_name_to_alias=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03098_prefer_column_to_alias_subquery.sql",
    "error": "no viable alternative at input 'SELECT max(\\'"
  },
  {
    "query": "SELECT max(explain like '%Delayed%') FROM (EXPLAIN PIPELINE graph=1 SELECT sum(a) FROM remote('127.0.0.4', currentDatabase(), '02863_delayed_source') WITH TOTALS SETTINGS extremes = 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02863_delayed_source_with_totals_and_extremes.sql",
    "error": "no viable alternative at input 'SELECT max(explain like '%Delayed%') FROM (EXPLAIN PIPELINE'"
  },
  {
    "query": "SELECT max(id) OVER () AS aid FROM\n(\nSELECT materialize(toLowCardinality('aaaa')) AS id\nFROM numbers_mt(1000000)\n)\nFORMAT \\`Null\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02126_lc_window_functions.sql",
    "error": "no viable alternative at input 'SELECT max(id) OVER () AS aid FROM\\n(\\nSELECT materialize(toLowCardinality('aaaa')) AS id\\nFROM numbers_mt(1000000)\\n)\\nFORMAT \\'"
  },
  {
    "query": "SELECT max(id) OVER (PARTITION BY id) AS id FROM\n(\nSELECT materialize('aaaa') AS id\nFROM numbers_mt(1000000)\n)\nFORMAT \\`Null\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02126_lc_window_functions.sql",
    "error": "no viable alternative at input 'SELECT max(id) OVER (PARTITION BY id) AS id FROM\\n(\\nSELECT materialize('aaaa') AS id\\nFROM numbers_mt(1000000)\\n)\\nFORMAT \\'"
  },
  {
    "query": "select max(key) from tab_00612 left array join \\`n.x\\` as val where (key, val) in ((1, 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00612_pk_in_tuple.sql",
    "error": "no viable alternative at input 'select max(key) from tab_00612 left array join \\'"
  },
  {
    "query": "select max(key) from tab_00612 left array join \\`n.x\\` as val where (key, val) in ((1, 1), (2, 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00612_pk_in_tuple.sql",
    "error": "no viable alternative at input 'select max(key) from tab_00612 left array join \\'"
  },
  {
    "query": "SELECT max(n::Nullable(String)) from (Select if(number < 15 and number % 2 == 1, number * 2, NULL) as n from numbers(10, 20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT max(n:'"
  },
  {
    "query": "SELECT max(number) from (Select if(number % 2 == 1, NULL, -number::Int8) as number FROM numbers(128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT max(number) from (Select if(number % 2 == 1, NULL, -number:'"
  },
  {
    "query": "SELECT max(number::Nullable(Decimal64(3))) from numbers(11) settings max_block_size=10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT max(number:'"
  },
  {
    "query": "SELECT MAX(test_right.a) FROM test_left INNER JOIN test_right on test_left.b = test_right.b SETTINGS allow_experimental_join_right_table_sorting=true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03228_join_to_rerange_right_table.sql",
    "error": "no viable alternative at input 'SELECT MAX(test_right.a) FROM test_left INNER JOIN test_right on test_left.b = test_right.b SETTINGS allow_experimental_join_right_table_sorting=true'"
  },
  {
    "query": "SELECT MAX(test_right.a) FROM test_left LEFT JOIN test_right on test_left.b = test_right.b SETTINGS allow_experimental_join_right_table_sorting=true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03228_join_to_rerange_right_table.sql",
    "error": "no viable alternative at input 'SELECT MAX(test_right.a) FROM test_left LEFT JOIN test_right on test_left.b = test_right.b SETTINGS allow_experimental_join_right_table_sorting=true'"
  },
  {
    "query": "SELECT maxIf(number::Float64, rand() % 2 == 3) from numbers(10) settings max_threads=1, max_block_size=5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT maxIf(number:'"
  },
  {
    "query": "SELECT maxIf(number::Float64, rand() % 2 == 3) from numbers(10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT maxIf(number:'"
  },
  {
    "query": "SELECT maxIf(number::Nullable(String), number < 10) as number from numbers(10, 1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT maxIf(number:'"
  },
  {
    "query": "SELECT maxIf(number::String, number % 3), maxIf(number::String, number % 5), minIf(number::String, number % 3), minIf(number::String, number > 10) from numbers(400);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT maxIf(number:'"
  },
  {
    "query": "SELECT maxIf(number::String, number < 10) as number from numbers(10, 1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT maxIf(number:'"
  },
  {
    "query": "SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT maxMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT maxMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT maxMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT maxMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT maxMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT maxMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "select maxMap(val) from values ('val Map(String, String)',  (map('1', '1')), (map('1', '2')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select maxMap(val) from values ('val Map(String, String)',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(Date), cnt Array(Int16)',  ([1], [1]), ([1], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(Date), cnt Array(Int16)',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(DateTime(\\\\'Asia/Istanbul\\\\')), cnt Array(Int32)',  ([1], [1]), ([1], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(DateTime(\\\\'Asia'"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(Decimal(10, 2)), cnt Array(Int16)',  (['1.01'], [1]), (['1.01'], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(Decimal(10, 2)), cnt Array(Int16)',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(Enum16(\\\\'a\\\\'=1)), cnt Array(Int16)',  (['a'], [1]), (['a'], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(Enum16(\\\\'a'"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(FixedString(1)), cnt Array(FixedString(1))',  (['1'], ['1']), (['1'], ['2']));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(FixedString(1)), cnt Array(FixedString(1))',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(Float64), cnt Array(Int8)',  ([1], [1]), ([1], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(Float64), cnt Array(Int8)',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(String), cnt Array(String)',  (['1'], ['1']), (['1'], ['2']));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(String), cnt Array(String)',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(String), cnt Array(String)',  (['A'], ['']), (['B'], ['']));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(String), cnt Array(String)',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ([1], [0]), ([2], [0]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ([1], [1]), ([1], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ('"
  },
  {
    "query": "select maxMap(val, cnt) from values ('val Array(UUID), cnt Array(UUID)', \t(['01234567-89ab-cdef-0123-456789abcdef'], ['01111111-89ab-cdef-0123-456789abcdef']),\n\t(['01234567-89ab-cdef-0123-456789abcdef'], ['02222222-89ab-cdef-0123-456789abcdef']));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select maxMap(val, cnt) from values ('val Array(UUID), cnt Array(UUID)', \\t('"
  },
  {
    "query": "SELECT message LIKE '%Stack trace%' FROM system.text_log WHERE level = 'Error' AND message LIKE '%Exception%throwIf%' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \\\\'Hello\\\\', throwIf(1)%' AND query NOT LIKE '%system%' ORDER BY event_time_microseconds DESC LIMIT 1)\nORDER BY event_time_microseconds DESC LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02796_calculate_text_stack_trace.sql",
    "error": "no viable alternative at input 'SELECT message LIKE '%Stack trace%' FROM system.text_log WHERE level = 'Error' AND message LIKE '%Exception%throwIf%' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \\\\'Hello\\'"
  },
  {
    "query": "SELECT message LIKE '%Stack trace%' FROM system.text_log WHERE level = 'Error' AND message LIKE '%Exception%throwIf%' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \\\\'World\\\\', throwIf(1)%' AND query NOT LIKE '%system%' ORDER BY event_time_microseconds DESC LIMIT 1)\nORDER BY event_time_microseconds DESC LIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02796_calculate_text_stack_trace.sql",
    "error": "no viable alternative at input 'SELECT message LIKE '%Stack trace%' FROM system.text_log WHERE level = 'Error' AND message LIKE '%Exception%throwIf%' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \\\\'World\\'"
  },
  {
    "query": "SELECT min((c1, c2)), max((c1, c2)) FROM values((-5, 0), (nan, 0.), (0., 0.), (5., 5.));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT min((c1, c2)), max((c1, c2)) FROM values(('"
  },
  {
    "query": "SELECT min((c1, c2)), max((c1, c2)) FROM values((0., 0.), (5., 5.), (NULL, 0.));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT min((c1, c2)), max((c1, c2)) FROM values(('"
  },
  {
    "query": "SELECT min((c1, c2)), max((c1, c2)) FROM values((nan, 0.), (0., 0.), (5., 5.));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT min((c1, c2)), max((c1, c2)) FROM values(('"
  },
  {
    "query": "SELECT min((c1, c2)), max((c1, c2)) FROM values((NULL, 0.), (0., 0.), (5., 5.));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT min((c1, c2)), max((c1, c2)) FROM values(('"
  },
  {
    "query": "SELECT min((toDateTime('2011-01-01 00:00:00', 'Europe/Moscow') + INTERVAL number DAY) as day) as start, max(day) as end, count(1), concat(toString(toYear(day)),'_',toString(timezoneOffset(day)))as DST from numbers(365*4+1) group by DST order by start;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01699_timezoneOffset.sql",
    "error": "no viable alternative at input 'SELECT min((toDateTime('2011-01-01 00:00:00', 'Europe/Moscow') + INTERVAL number DAY) as day) as start, max(day) as end, count(1), concat(toString(toYear(day)),'_',toString(timezoneOffset(day)))as DST from numbers(365*'"
  },
  {
    "query": "SELECT min(-number::Nullable(Decimal64(3))) from numbers(11) settings max_block_size=10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT min(-number:'"
  },
  {
    "query": "SELECT min(n::Nullable(String)) from (Select if(number < 15 and number % 2 == 1, number * 2, NULL) as n from numbers(10, 20));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT min(n:'"
  },
  {
    "query": "SELECT min(number) from (Select if(number % 2 == 1, NULL, -number::Int8) as number FROM numbers(128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT min(number) from (Select if(number % 2 == 1, NULL, -number:'"
  },
  {
    "query": "SELECT MIN(val == 'US') FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ip_trie_dict WHERE prefix == '2620:0:870::/48';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ip_dictionary_long.sql",
    "error": "no viable alternative at input 'SELECT MIN(val == 'US') FROM {'"
  },
  {
    "query": "SELECT minIf((c1, c2), c2 >= 0), maxIf((c1, c2), c2 >= 0) FROM values((0., 0.), (5., 5.), (NULL, 0.));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT minIf((c1, c2), c2 >= 0), maxIf((c1, c2), c2 >= 0) FROM values(('"
  },
  {
    "query": "SELECT minIf((c1, c2), c2 >= 0), maxIf((c1, c2), c2 >= 0) FROM values((NULL, 0.), (0., 0.), (5., 5.));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT minIf((c1, c2), c2 >= 0), maxIf((c1, c2), c2 >= 0) FROM values(('"
  },
  {
    "query": "SELECT minIf((c1, c2), c2 >= 0.0), maxIf((c1, c2), c2 >= 0.0) FROM values((-5, 0), (nan, 0.), (0., 0.), (5., 5.));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT minIf((c1, c2), c2 >= 0.0), maxIf((c1, c2), c2 >= 0.0) FROM values(('"
  },
  {
    "query": "SELECT minIf((c1, c2), c2 >= 0.0), maxIf((c1, c2), c2 >= 0.0) FROM values((nan, 0.), (0., 0.), (5., 5.));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02982_minmax_nan_null_order.sql",
    "error": "no viable alternative at input 'SELECT minIf((c1, c2), c2 >= 0.0), maxIf((c1, c2), c2 >= 0.0) FROM values(('"
  },
  {
    "query": "SELECT minIf(number::Float64, rand() % 2 == 3) from numbers(10) settings max_threads=1, max_block_size=5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT minIf(number:'"
  },
  {
    "query": "SELECT minIf(number::Float64, rand() % 2 == 3) from numbers(10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT minIf(number:'"
  },
  {
    "query": "SELECT minIf(number::Nullable(String), number < 10) as number from numbers(10, 1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT minIf(number:'"
  },
  {
    "query": "SELECT minIf(number::String, number < 10) as number from numbers(10, 1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02406_minmax_behaviour.sql",
    "error": "no viable alternative at input 'SELECT minIf(number:'"
  },
  {
    "query": "SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT minMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT minMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT minMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT minMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT minMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT minMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "select minMap(val) from values ('val Map(Date, Int16)',  (map(1, 1)), (map(1, 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(Date, Int16)',  ('"
  },
  {
    "query": "select minMap(val) from values ('val Map(DateTime(\\\\'Asia/Istanbul\\\\'), Int32)',  (map(1, 1)), (map(1, 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(DateTime(\\\\'Asia'"
  },
  {
    "query": "select minMap(val) from values ('val Map(Enum16(\\\\'a\\\\'=1), Int16)',  (map('a', 1)), (map('a', 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(Enum16(\\\\'a'"
  },
  {
    "query": "select minMap(val) from values ('val Map(FixedString(1), FixedString(1))',  (map('1', '1')), (map('1', '2')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(FixedString(1), FixedString(1))',  ('"
  },
  {
    "query": "select minMap(val) from values ('val Map(Int128, Int128)',  (map(1, 1)), (map(1, 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(Int128, Int128)',  ('"
  },
  {
    "query": "select minMap(val) from values ('val Map(Int256, Int256)',  (map(1, 1)), (map(1, 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(Int256, Int256)',  ('"
  },
  {
    "query": "select minMap(val) from values ('val Map(String, String)',  (map('1', '1')), (map('1', '2')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(String, String)',  ('"
  },
  {
    "query": "select minMap(val) from values ('val Map(UInt128, UInt128)',  (map(1, 1)), (map(1, 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(UInt128, UInt128)',  ('"
  },
  {
    "query": "select minMap(val) from values ('val Map(UInt256, UInt256)',  (map(1, 1)), (map(1, 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(UInt256, UInt256)',  ('"
  },
  {
    "query": "select minMap(val) from values ('val Map(UInt64, UInt64)',  (map(1, 1)), (map(1, 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(UInt64, UInt64)',  ('"
  },
  {
    "query": "select minMap(val) from values ('val Map(UUID, Int32)', \t(map('01234567-89ab-cdef-0123-456789abcdef', 1)),\n\t(map('01234567-89ab-cdef-0123-456789abcdef', 2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01852_map_combinator.sql",
    "error": "no viable alternative at input 'select minMap(val) from values ('val Map(UUID, Int32)', \\t('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(Date), cnt Array(Int16)',  ([1], [1]), ([1], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(Date), cnt Array(Int16)',  ('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(DateTime(\\\\'Asia/Istanbul\\\\')), cnt Array(Int32)',  ([1], [1]), ([1], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(DateTime(\\\\'Asia'"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(Decimal(10, 2)), cnt Array(Int16)',  (['1.01'], [1]), (['1.01'], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(Decimal(10, 2)), cnt Array(Int16)',  ('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(Enum16(\\\\'a\\\\'=1)), cnt Array(Int16)',  (['a'], [1]), (['a'], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(Enum16(\\\\'a'"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(FixedString(1)), cnt Array(FixedString(1))',  (['1'], ['1']), (['1'], ['2']));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(FixedString(1)), cnt Array(FixedString(1))',  ('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(Float64), cnt Array(Int8)',  ([1], [1]), ([1], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(Float64), cnt Array(Int8)',  ('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(String), cnt Array(String)',  (['1'], ['1']), (['1'], ['2']));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(String), cnt Array(String)',  ('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(String), cnt Array(String)',  (['A'], ['']), (['B'], ['']));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(String), cnt Array(String)',  ('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ([1], [0]), ([2], [0]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ([1], [1]), ([1], [2]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ('"
  },
  {
    "query": "select minMap(val, cnt) from values ('val Array(UUID), cnt Array(UUID)', \t(['01234567-89ab-cdef-0123-456789abcdef'], ['01111111-89ab-cdef-0123-456789abcdef']),\n\t(['01234567-89ab-cdef-0123-456789abcdef'], ['02222222-89ab-cdef-0123-456789abcdef']));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select minMap(val, cnt) from values ('val Array(UUID), cnt Array(UUID)', \\t('"
  },
  {
    "query": "SELECT multiIf(NULL, 65536 :: UInt32, 3 :: Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02751_multiif_to_if_crash.sql",
    "error": "no viable alternative at input 'SELECT multiIf(NULL, 65536 :'"
  },
  {
    "query": "SELECT n, [number] AS inter FROM ( SELECT toFloat32(number % 10) AS n, number\nFROM numbers(10) WHERE number % 3 = 1\n) GROUP BY n, inter ORDER BY n WITH FILL FROM 0 TO 5.51 STEP 0.5 INTERPOLATE (inter AS [5]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03155_analyzer_interpolate.sql",
    "error": "no viable alternative at input 'SELECT n, [number] AS inter FROM ( SELECT toFloat32(number % 10) AS n, number\\nFROM numbers(10) WHERE number % 3 = 1\\n) GROUP BY n, inter ORDER BY n WITH FILL FROM 0 TO 5.51 STEP 0.5 INTERPOLATE (inter AS ['"
  },
  {
    "query": "SELECT n, FROM (SELECT 1 AS n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_trailing_commas.sql",
    "error": "no viable alternative at input 'SELECT n, FROM (SELECT 1'"
  },
  {
    "query": "SELECT n, number+5 AS inter FROM (  -- { serverError NOT_AN_AGGREGATE } SELECT toFloat32(number % 10) AS n, number, number*2 AS mn\nFROM numbers(10) WHERE number % 3 = 1\n) GROUP BY n, inter ORDER BY n WITH FILL FROM 0 TO 5.51 STEP 0.5 INTERPOLATE (inter AS mn * 2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03155_analyzer_interpolate.sql",
    "error": "no viable alternative at input 'SELECT n, number+5 AS inter FROM (  FROM numbers('"
  },
  {
    "query": "SELECT n, source FROM (SELECT  toDateTime64(number * 1000, 3,'Asia/Istanbul') AS n, 'original' AS source  FROM numbers(10)  WHERE (number % 3) = 1 ) ORDER BY n ASC WITH FILL STEP toDateTime64(1000, 3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01868_order_by_fill_with_datetime64.sql",
    "error": "no viable alternative at input 'SELECT n, source FROM (SELECT  toDateTime64(number * 1000, 3,'Asia/Istanbul') AS n, 'original' AS source  FROM numbers(10)  WHERE (number % 3) = 1 ) ORDER BY n ASC WITH FILL STEP toDateTime64'"
  },
  {
    "query": "SELECT n, source FROM (SELECT  toDateTime64(number * 1000, 9,'Asia/Istanbul') AS n, 'original' AS source  FROM numbers(10)  WHERE (number % 3) = 1 ) ORDER BY n ASC WITH FILL STEP toDateTime64(1000, 9);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01868_order_by_fill_with_datetime64.sql",
    "error": "no viable alternative at input 'SELECT n, source FROM (SELECT  toDateTime64(number * 1000, 9,'Asia/Istanbul') AS n, 'original' AS source  FROM numbers(10)  WHERE (number % 3) = 1 ) ORDER BY n ASC WITH FILL STEP toDateTime64'"
  },
  {
    "query": "SELECT n.null FROM t_comp_subcolumns LIMIT 10000, 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02025_subcolumns_compact_parts.sql",
    "error": "no viable alternative at input 'SELECT n.null'"
  },
  {
    "query": "SELECT n.null FROM t_nul;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01475_read_subcolumns.sql",
    "error": "no viable alternative at input 'SELECT n.null'"
  },
  {
    "query": "SELECT name\nFROM system.parts\nWHERE (database = currentDatabase()) AND (\\`table\\` = 'users_compact') AND (active = 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03161_lightweight_delete_projection.sql",
    "error": "no viable alternative at input 'SELECT name\\nFROM system.parts\\nWHERE (database = currentDatabase()) AND (\\'"
  },
  {
    "query": "SELECT name\nFROM system.parts\nWHERE (database = currentDatabase()) AND (\\`table\\` = 'users_wide') AND (active = 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03161_lightweight_delete_projection.sql",
    "error": "no viable alternative at input 'SELECT name\\nFROM system.parts\\nWHERE (database = currentDatabase()) AND (\\'"
  },
  {
    "query": "SELECT name\nFROM system.projection_parts\nWHERE (database = currentDatabase()) AND (\\`table\\` = 'tp') AND (active = 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03206_projection_merge_special_mergetree.sql",
    "error": "no viable alternative at input 'SELECT name\\nFROM system.projection_parts\\nWHERE (database = currentDatabase()) AND (\\'"
  },
  {
    "query": "SELECT name FROM system.databases WHERE name = {new_db_name:String};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02578_parameterized_rename_queries.sql",
    "error": "no viable alternative at input 'SELECT name FROM system.databases WHERE name = {'"
  },
  {
    "query": "SELECT name FROM system.dictionaries WHERE name = {new_dict_name:String};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02578_parameterized_rename_queries.sql",
    "error": "no viable alternative at input 'SELECT name FROM system.dictionaries WHERE name = {'"
  },
  {
    "query": "SELECT name FROM system.tables WHERE name = {new_tbl_name:String};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02578_parameterized_rename_queries.sql",
    "error": "no viable alternative at input 'SELECT name FROM system.tables WHERE name = {'"
  },
  {
    "query": "SELECT Name,\navgMerge(Value.\\`AggregateFunction(avg, Int64)\\`) AS Value\nFROM test_agg_variant\nGROUP BY Name;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_variant_with_aggregate_function_type.sql",
    "error": "no viable alternative at input 'SELECT Name,\\navgMerge(Value.\\'"
  },
  {
    "query": "SELECT Name,\nuniqExactMerge(Value.\\`AggregateFunction(uniqExact, Int64)\\`) AS Value\nFROM test_agg_variant\nGROUP BY Name;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_variant_with_aggregate_function_type.sql",
    "error": "no viable alternative at input 'SELECT Name,\\nuniqExactMerge(Value.\\'"
  },
  {
    "query": "SELECT Name,\nuniqExactMerge(Value.\\`AggregateFunction(uniqExact, Int64)\\`) AS ValueUniq,\navgMerge(Value.\\`AggregateFunction(avg, Int64)\\`) AS ValueAvg\nFROM test_agg_variant\nGROUP BY Name;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_variant_with_aggregate_function_type.sql",
    "error": "no viable alternative at input 'SELECT Name,\\nuniqExactMerge(Value.\\'"
  },
  {
    "query": "SELECT name, engine FROM system.tables WHERE database = {CLICKHOUSE_DATABASE:String} ORDER BY name;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT name, engine FROM system.tables WHERE database = {'"
  },
  {
    "query": "select name, host, port, index, is_expired, keeper_api_version, (connected_time between yesterday() and now() + interval 3 seconds) from system.zookeeper_connection where name!='default';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02735_system_zookeeper_connection.sql",
    "error": "no viable alternative at input 'select name, host, port, index, is_expired, keeper_api_version, (connected_time between yesterday() and now() + interval 3 seconds)'"
  },
  {
    "query": "select name, host, port, index, is_expired, keeper_api_version, (connected_time between yesterday() and now() + interval 3 seconds), (abs(session_uptime_elapsed_seconds  - zookeeperSessionUptime()) < 10), enabled_feature_flags\nfrom system.zookeeper_connection where name='default';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02735_system_zookeeper_connection.sql",
    "error": "no viable alternative at input 'select name, host, port, index, is_expired, keeper_api_version, (connected_time between yesterday() and now() + interval 3 seconds)'"
  },
  {
    "query": "SELECT name, is_frozen FROM system.parts WHERE \\`database\\` = currentDatabase() AND \\`table\\` = 'part_info';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00952_part_frozen_info.sql",
    "error": "no viable alternative at input 'SELECT name, is_frozen FROM system.parts WHERE \\'"
  },
  {
    "query": "SELECT name, parent_name\nFROM system.projection_parts\nWHERE (database = currentDatabase()) AND (\\`table\\` = 'users_compact') AND (active = 1) AND parent_name like 'all_3_3%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03161_lightweight_delete_projection.sql",
    "error": "no viable alternative at input 'SELECT name, parent_name\\nFROM system.projection_parts\\nWHERE (database = currentDatabase()) AND (\\'"
  },
  {
    "query": "SELECT name, parent_name\nFROM system.projection_parts\nWHERE (database = currentDatabase()) AND (\\`table\\` = 'users_compact') AND (active = 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03161_lightweight_delete_projection.sql",
    "error": "no viable alternative at input 'SELECT name, parent_name\\nFROM system.projection_parts\\nWHERE (database = currentDatabase()) AND (\\'"
  },
  {
    "query": "SELECT name, parent_name\nFROM system.projection_parts\nWHERE (database = currentDatabase()) AND (\\`table\\` = 'users_wide') AND (active = 1) AND parent_name like 'all_3_3%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03161_lightweight_delete_projection.sql",
    "error": "no viable alternative at input 'SELECT name, parent_name\\nFROM system.projection_parts\\nWHERE (database = currentDatabase()) AND (\\'"
  },
  {
    "query": "SELECT name, parent_name\nFROM system.projection_parts\nWHERE (database = currentDatabase()) AND (\\`table\\` = 'users_wide') AND (active = 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03161_lightweight_delete_projection.sql",
    "error": "no viable alternative at input 'SELECT name, parent_name\\nFROM system.projection_parts\\nWHERE (database = currentDatabase()) AND (\\'"
  },
  {
    "query": "SELECT name, value, changed FROM system.settings where name = 'implicit_transaction' SETTINGS implicit_transaction=True; -- { serverError NOT_IMPLEMENTED } SET implicit_transaction=True;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02345_implicit_transaction.sql",
    "error": "no viable alternative at input 'SELECT name, value, changed FROM system.settings where name = 'implicit_transaction' SETTINGS implicit_transaction=True'"
  },
  {
    "query": "SELECT nest.a, nest.b, nested.\\`nest\\`.\\`a\\`, nested.nest.b, t.nest.a, t.nest.b, t.* FROM nested AS t;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "no viable alternative at input 'SELECT nest.a, nest.b, nested.\\'"
  },
  {
    "query": "SELECT netloc('<\\\\'[%UzO');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01434_netloc_fuzz.sql",
    "error": "no viable alternative at input 'SELECT netloc('<\\\\'[%'"
  },
  {
    "query": "SELECT normalizedQueryHash('SELECT 1, 1, 1,  \\\\'abc\\\\'') = normalizedQueryHash('SELECT 2, 3');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01452_normalized_query_hash.sql",
    "error": "no viable alternative at input 'SELECT normalizedQueryHash('SELECT 1, 1, 1,  \\\\'abc\\'"
  },
  {
    "query": "SELECT normalizeQuery('SELECT 1, 1, 1,  \\\\'abc\\\\' WHERE 1 = 1 AND (1, y) LIMIT 1, 1');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01451_normalize_query.sql",
    "error": "no viable alternative at input 'SELECT normalizeQuery('SELECT 1, 1, 1,  \\\\'abc\\'"
  },
  {
    "query": "SELECT now() + INTERVAL 1::Int256 SECOND - now();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02469_interval_msan.sql",
    "error": "no viable alternative at input 'SELECT now() + INTERVAL 1:'"
  },
  {
    "query": "SELECT now() + INTERVAL 1::UInt128 SECOND - now();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02469_interval_msan.sql",
    "error": "no viable alternative at input 'SELECT now() + INTERVAL 1:'"
  },
  {
    "query": "SELECT now() + INTERVAL 1::UInt256 SECOND - now();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02469_interval_msan.sql",
    "error": "no viable alternative at input 'SELECT now() + INTERVAL 1:'"
  },
  {
    "query": "SELECT NULL AND (toDate(-2147483647, NULL) AND NULL) FROM remote('127.0.0.{1,2}', view(\nSELECT\nNULL AND NULL,\nNULL,\ntoDate(toDate('0.0001048577', toDate(NULL, 10 AND (toDate(257, 9223372036854775807, NULL) AND NULL AND NULL) AND NULL, 7, NULL), NULL, NULL) AND NULL AND -2147483648, NULL, NULL) AND NULL\nFROM system.one\nWHERE toDate(toDate(NULL, NULL, NULL), NULL)\nGROUP BY\nGROUPING SETS ((NULL))\n));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02962_analyzer_resolve_group_by_on_shards.sql",
    "error": "no viable alternative at input 'SELECT NULL AND (toDate(-2147483647, NULL) AND NULL) FROM remote('127.0.0.{1,2}', view(\\nSELECT\\nNULL'"
  },
  {
    "query": "SELECT NULL AND (toDate(-2147483647, NULL) AND NULL) FROM remote('127.0.0.{1,2}', view(\nSELECT NULL\nFROM system.one\nWHERE toDate(toDate(NULL, NULL, NULL), NULL)\nGROUP BY\nGROUPING SETS ((''))\n));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02962_analyzer_resolve_group_by_on_shards.sql",
    "error": "no viable alternative at input 'SELECT NULL AND (toDate(-2147483647, NULL) AND NULL) FROM remote('127.0.0.{1,2}', view(\\nSELECT NULL'"
  },
  {
    "query": "SELECT NULL FROM\n(\nSELECT\nNULL,\n1 AS a,\n0 :: Nullable(UInt8) AS c\nUNION ALL\nSELECT\nNULL,\n65536,\nNULL\n) AS js1\nALL LEFT JOIN\n(\nSELECT 2 :: Nullable(UInt8) AS a\n) AS js2\nUSING (a)\nORDER BY c\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02315_pmj_union_ubsan_35857.sql",
    "error": "no viable alternative at input 'SELECT NULL FROM\\n(\\nSELECT\\nNULL,\\n1 AS a,\\n0 :'"
  },
  {
    "query": "SELECT NULL,\nid,\nmax(id) OVER (Rows BETWEEN 10 PRECEDING AND UNBOUNDED FOLLOWING) AS aid\nFROM\n(\nSELECT\nNULL,\nmax(id) OVER (),\nmaterialize(toLowCardinality('')) AS id\nFROM numbers_mt(0, 1)\n)\nFORMAT \\`Null\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02126_lc_window_functions.sql",
    "error": "no viable alternative at input 'SELECT NULL,\\nid,\\nmax(id) OVER (Rows BETWEEN 10 PRECEDING AND UNBOUNDED FOLLOWING) AS aid\\nFROM\\n(\\nSELECT\\nNULL,\\nmax(id) OVER (),\\nmaterialize(toLowCardinality('')) AS id\\nFROM numbers_mt(0, 1)\\n)\\nFORMAT \\'"
  },
  {
    "query": "SELECT NULL, '' FROM (SELECT toNullable(''), NULL AS key GROUP BY GROUPING SETS ((NULL))) AS s1 ALL LEFT JOIN (SELECT '' AS key, NULL AS value GROUP BY GROUPING SETS (('')) WITH TOTALS UNION ALL SELECT NULL AS key, toNullable(NULL) AS value GROUP BY '', NULL, '' WITH TOTALS) AS s2 USING (key);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02932_group_by_null_fuzzer.sql",
    "error": "no viable alternative at input 'SELECT NULL, '' FROM (SELECT toNullable(''), NULL AS key GROUP BY GROUPING SETS ('"
  },
  {
    "query": "select number % 2 ? materialize(1)::Decimal(18, 10) : 2 FROM numbers(3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01913_if_int_decimal.sql",
    "error": "no viable alternative at input 'select number % 2 ? materialize(1)::'"
  },
  {
    "query": "SELECT number % 2 ? NULL : toNullable('2023-02-09'::Date + number) AS d FROM numbers(5) ORDER BY d ASC NULLS LAST WITH FILL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02562_with_fill_nullable.sql",
    "error": "no viable alternative at input 'SELECT number % 2 ? NULL : toNullable('2023-02-09':'"
  },
  {
    "query": "SELECT number / 8 AS width,\nbar(width, 0, 3, 3) AS b,\nbar(width - 0.001, 0, 3, 3) AS \\`b_minus\\`,\nhex(b),\nhex(b_minus)\nFROM numbers(20);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02504_bar_fractions.sql",
    "error": "no viable alternative at input 'SELECT number / 8 AS width,\\nbar(width, 0, 3, 3) AS b,\\nbar(width - 0.001, 0, 3, 3) AS \\'"
  },
  {
    "query": "select number as a from numbers(10) where a != any (select 5 from numbers(3, 3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select number as a from numbers(10) where a != any (select 5'"
  },
  {
    "query": "select number as a from numbers(10) where a == any (select number from numbers(3, 3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02007_test_any_all_operators.sql",
    "error": "no viable alternative at input 'select number as a from numbers(10) where a == any (select number from'"
  },
  {
    "query": "select number from (select number from t order by number desc offset 3) where number < 18;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02398_subquery_where_pushdown_and_limit_offset.sql",
    "error": "no viable alternative at input 'select number from (select number from t order by number desc offset'"
  },
  {
    "query": "SELECT number FROM (select number FROM t ORDER BY number OFFSET 3) WHERE number < NULL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02429_offset_pipeline_stuck_bug.sql",
    "error": "no viable alternative at input 'SELECT number FROM (select number FROM t ORDER BY number OFFSET'"
  },
  {
    "query": "SELECT number FROM numbers(100) ORDER BY number WITH FILL STEP INTERVAL 1 HOUR; -- { serverError INVALID_WITH_FILL_EXPRESSION } CREATE TABLE with_fill_date (d Date, id UInt32) ENGINE = Memory;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT number FROM numbers(100) ORDER BY number WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT number,\nYYYYMMDDToDate(1, toLowCardinality(11), max(YYYYMMDDToDate(YYYYMMDDToDate(toLowCardinality(1), 11, materialize(NULL), 19700101.1, 1, 27, 7, materialize(toUInt256(37)), 9, 19, 9), 1, toUInt128(11), NULL, 19700101.1, 1, 27, 7, 37, 9, 19, 9), toUInt256(30)) IGNORE NULLS OVER w, NULL, 19700101.1, toNullable(1), 27, materialize(7), 37, 9, 19, 9),\np,\npp,\nlagInFrame(number, number - pp) OVER w AS lag2,\nlagInFrame(number, number - pp, number * 11) OVER w AS lag,\nleadInFrame(number, number - pp, number * 11) OVER w AS lead\nFROM\n(\nSELECT\nnumber,\nintDiv(number, 5) AS p,\np * 5 AS pp\nFROM numbers(16)\n)\nWHERE toLowCardinality(1)\nWINDOW w AS (PARTITION BY p ORDER BY number ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\nORDER BY number DESC NULLS LAST;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql",
    "error": "no viable alternative at input 'SELECT number,\\nYYYYMMDDToDate(1, toLowCardinality(11), max(YYYYMMDDToDate(YYYYMMDDToDate(toLowCardinality(1), 11, materialize(NULL), 19700101.1, 1, 27, 7, materialize(toUInt256(37)), 9, 19, 9), 1, toUInt128(11), NULL, 19700101.1, 1, 27, 7, 37, 9, 19, 9), toUInt256(30)) IGNORE NULLS'"
  },
  {
    "query": "select number, count() over (w1 rows unbounded preceding) from numbers(10) window\nw0 as (partition by intDiv(number, 5) as p),\nw1 as (w0 order by mod(number, 3) as o, number)\norder by p, o, number\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01591_window_functions.sql",
    "error": "no viable alternative at input 'select number, count() over (w1'"
  },
  {
    "query": "select number, x, y from (select number from system.numbers limit 5) f any left join (select x, y from table_1) s on f.number = s.x settings additional_table_filters={'system.numbers' : 'number != 3', 'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select number, x, y from (select number from system.numbers limit 5) f any left join (select x, y from table_1) s on f.number = s.x settings additional_table_filters={'"
  },
  {
    "query": "SELECT o.a.b, o.a.c.:\\`Array(JSON)\\`.d, o.a.c.:\\`Array(JSON)\\`.e, o.a.c.:\\`Array(JSON)\\`.f FROM t_json_10 ORDER BY o.a.b;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_new_type_json_10.sql",
    "error": "no viable alternative at input 'SELECT o.a.b, o.a.c.:'"
  },
  {
    "query": "SELECT obj.arr.k1.k2, obj.arr.k1.k3.k4 FROM t_json_17 ORDER BY obj.id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_17.sql",
    "error": "no viable alternative at input 'SELECT obj.arr.k1.k2, obj.arr.k1.k3.k4'"
  },
  {
    "query": "SELECT obj.arr.k1.k3.k4 FROM t_json_17 ORDER BY obj.id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_17.sql",
    "error": "no viable alternative at input 'SELECT obj.arr.k1.k3.k4'"
  },
  {
    "query": "SELECT obj.arr.k1.k4.k5 FROM t_json_17 ORDER BY obj.id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_17.sql",
    "error": "no viable alternative at input 'SELECT obj.arr.k1.k4.k5'"
  },
  {
    "query": "SELECT obj.arr.k3, obj.arr.k1.k2, obj.arr.k1.k4.k5 FROM t_json_17 ORDER BY obj.id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_17.sql",
    "error": "no viable alternative at input 'SELECT obj.arr.k3, obj.arr.k1.k2, obj.arr.k1.k4.k5'"
  },
  {
    "query": "SELECT p.ts, e.value FROM\n(SELECT number :: Float64 AS ts FROM numbers(10)) p\nASOF  JOIN events0 e\nON p.ts >= e.begin\nORDER BY p.ts ASC;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03144_asof_join_ddb_doubles.sql",
    "error": "no viable alternative at input 'SELECT p.ts, e.value FROM\\n(SELECT number :'"
  },
  {
    "query": "SELECT p.ts, e.value FROM\n(SELECT number :: Float64 AS ts FROM numbers(10)) p\nASOF LEFT JOIN events0 e\nON p.ts >= e.begin\nORDER BY p.ts ASC\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03144_asof_join_ddb_doubles.sql",
    "error": "no viable alternative at input 'SELECT p.ts, e.value FROM\\n(SELECT number :'"
  },
  {
    "query": "SELECT PP.Key2 AS \\`ym:s:pl2\\` FROM visits1\nARRAY JOIN\n\\`ParsedParams.Key2\\` AS \\`PP.Key2\\`,\n\\`ParsedParams.Key1\\` AS \\`PP.Key1\\`,\narrayEnumerateUniq(\\`ParsedParams.Key2\\`, arrayMap(x_0 -> 1, \\`ParsedParams.Key1\\`)) AS \\`upp_==_yes_\\`,\narrayEnumerateUniq(\\`ParsedParams.Key2\\`) AS _uniq_ParsedParams\nWHERE CounterID = 100500;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00819_ast_refactoring_bugs.sql",
    "error": "no viable alternative at input 'SELECT PP.Key2 AS \\'"
  },
  {
    "query": "SELECT quantile(0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT quantile(0.5)(now():'"
  },
  {
    "query": "SELECT quantile(0.5)(now()::DateTime('UTC')) WHERE 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT quantile(0.5)(now():'"
  },
  {
    "query": "SELECT quantile(0.5)(NULL), quantile(0.9)(NULL), quantiles(0.1, 0.2)(NULL :: Nullable(UInt32)) FROM t1 WITH TOTALS;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_analyzer_aggregate_nothing_type.sql",
    "error": "no viable alternative at input 'SELECT quantile(0.5)(NULL), quantile(0.9)(NULL), quantiles(0.1, 0.2)(NULL :'"
  },
  {
    "query": "select quantile(0.5)(NULL), quantiles(0.1, 0.2)(NULL :: Nullable(UInt32)), count(NULL), sum(NULL);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_analyzer_aggregate_nothing_type.sql",
    "error": "no viable alternative at input 'select quantile(0.5)(NULL), quantiles(0.1, 0.2)(NULL :'"
  },
  {
    "query": "SELECT quantiles(0.1, 0.2)(NULL :: Nullable(UInt32)) FROM remote('127.0.0.{1,2}', numbers(3)) GROUP BY number % 2 WITH TOTALS;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_analyzer_aggregate_nothing_type.sql",
    "error": "no viable alternative at input 'SELECT quantiles(0.1, 0.2)(NULL :'"
  },
  {
    "query": "select quantiles(0.1, 0.2)(NULL :: Nullable(UInt32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_analyzer_aggregate_nothing_type.sql",
    "error": "no viable alternative at input 'select quantiles(0.1, 0.2)(NULL :'"
  },
  {
    "query": "SELECT quantiles(0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT quantiles(0.5)(now():'"
  },
  {
    "query": "SELECT quantiles(0.5)(now()::DateTime('UTC')) WHERE 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT quantiles(0.5)(now():'"
  },
  {
    "query": "SELECT quantiles(0.5, 0.9)(c1) FROM VALUES(0::Nullable(UInt8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02425_categorical_information_value_properties.sql",
    "error": "no viable alternative at input 'SELECT quantiles(0.5, 0.9)(c1) FROM VALUES(0:'"
  },
  {
    "query": "SELECT quantiles(0.5, 1.1754943508222875e-38, 0.0001, -0., 0.0001, -0., 0.0001, 0., 0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql",
    "error": "no viable alternative at input 'SELECT quantiles(0.5, 1.1754943508222875e-38, 0.0001, -0., 0.0001, -0., 0.0001, 0., 0.5)(now():'"
  },
  {
    "query": "select quantilesArray(0.5, 0.9)([NULL :: Nullable(UInt64), NULL]) AS x FROM remote('127.0.0.{1,2}', numbers(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_analyzer_aggregate_nothing_type.sql",
    "error": "no viable alternative at input 'select quantilesArray(0.5, 0.9)([NULL :'"
  },
  {
    "query": "SELECT quantilesArrayIf(0.5, 0.9)([NULL :: Nullable(UInt64)], 0) AS x FROM remote('127.0.0.{1,2}', numbers(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_analyzer_aggregate_nothing_type.sql",
    "error": "no viable alternative at input 'SELECT quantilesArrayIf(0.5, 0.9)([NULL :'"
  },
  {
    "query": "SELECT quantilesArrayIf(0.5, 0.9)([NULL :: Nullable(UInt64)], 1) AS x FROM remote('127.0.0.{1,2}', numbers(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_analyzer_aggregate_nothing_type.sql",
    "error": "no viable alternative at input 'SELECT quantilesArrayIf(0.5, 0.9)([NULL :'"
  },
  {
    "query": "SELECT quantilesIfArray(0.5, 0.9)([NULL :: Nullable(UInt64), NULL], [1, 0]) AS x FROM remote('127.0.0.{1,2}', numbers(3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_analyzer_aggregate_nothing_type.sql",
    "error": "no viable alternative at input 'SELECT quantilesIfArray(0.5, 0.9)([NULL :'"
  },
  {
    "query": "select query, formatted_query from system.query_log where current_database = currentDatabase() and query = 'select \\\\'02005_log_formatted_queries.sql\\\\' from system.one;' and event_date >= yesterday() and event_time > now() - interval 5 minute;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02005_log_formatted_queries.sql",
    "error": "no viable alternative at input 'select query, formatted_query from system.query_log where current_database = currentDatabase() and query = 'select \\\\'02005_log_formatted_queries.sql'"
  },
  {
    "query": "SELECT range(0::Nullable(Int64), 10::Nullable(Int64), 2::Nullable(Int64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02797_range_nullable.sql",
    "error": "no viable alternative at input 'SELECT range(0:'"
  },
  {
    "query": "SELECT range(0::Nullable(UInt64), 10::Nullable(UInt64), 2::Nullable(UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02797_range_nullable.sql",
    "error": "no viable alternative at input 'SELECT range(0:'"
  },
  {
    "query": "SELECT range(materialize(0), 10::Nullable(UInt64), 2::Nullable(UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02797_range_nullable.sql",
    "error": "no viable alternative at input 'SELECT range(materialize(0), 10:'"
  },
  {
    "query": "SELECT read_rows==2 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE has(s, \\\\'x Click a03 y\\\\') ORDER BY k;')\nAND type='QueryFinish'\nAND result_rows==1\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==2 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE has(s, \\\\'x Click a03 y\\'"
  },
  {
    "query": "SELECT read_rows==2 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s == \\\\'Alick a01\\\\';')\nAND type='QueryFinish'\nAND result_rows==1\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==2 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s == \\\\'Alick a01\\'"
  },
  {
    "query": "SELECT read_rows==2 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \\\\'%d= e%=%\\\\' ORDER BY k;')\nAND type='QueryFinish'\nAND result_rows==1\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==2 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \\\\'%d= e%='"
  },
  {
    "query": "SELECT read_rows==4 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \\\\'%01%\\\\' ORDER BY k;')\nAND type='QueryFinish'\nAND result_rows==2\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==4 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \\\\'%01%\\'"
  },
  {
    "query": "SELECT read_rows==4 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE multiSearchAny(s, [\\\\' a01 \\\\', \\\\' b01 \\\\']) ORDER BY k;')\nAND type='QueryFinish'\nAND result_rows==2\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==4 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE multiSearchAny(s, [\\\\' a01 \\'"
  },
  {
    "query": "SELECT read_rows==4 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE s IN (\\\\'x Alick a01 y\\\\', \\\\'x Alick a06 y\\\\') ORDER BY k;')\nAND type='QueryFinish'\nAND result_rows==2\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==4 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE s IN (\\\\'x Alick a01 y\\'"
  },
  {
    "query": "SELECT read_rows==6 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \\\\'%01%\\\\' ORDER BY k;')\nAND type='QueryFinish'\nAND result_rows==3\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==6 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \\\\'%01%\\'"
  },
  {
    "query": "SELECT read_rows==8 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE hasToken(s, \\\\'Click\\\\') ORDER BY k;')\nAND type='QueryFinish'\nAND result_rows==4\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==8 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE hasToken(s, \\\\'Click\\'"
  },
  {
    "query": "SELECT read_rows==8 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE mapContains(s, \\\\'Click\\\\') ORDER BY k;')\nAND type='QueryFinish'\nAND result_rows==4\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==8 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE mapContains(s, \\\\'Click\\'"
  },
  {
    "query": "SELECT read_rows==8 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s[\\\\'Click\\\\'] = \\\\'Click a03\\\\';')\nAND type='QueryFinish'\nAND result_rows==1\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==8 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s[\\\\'Click\\'"
  },
  {
    "query": "SELECT read_rows==8 from system.query_log WHERE query_kind ='Select'\nAND current_database = currentDatabase()\nAND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE hasToken(s, \\\\'Alick\\\\');')\nAND type='QueryFinish'\nAND result_rows==4\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_fulltext_index_search.sql",
    "error": "no viable alternative at input 'SELECT read_rows==8 from system.query_log WHERE query_kind ='Select'\\nAND current_database = currentDatabase()\\nAND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE hasToken(s, \\\\'Alick\\'"
  },
  {
    "query": "select regexpExtract(number::String || '-' || (2*number)::String, '(\\\\\\\\d+)-(\\\\\\\\d+)', 1) from numbers(3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02562_regexp_extract.sql",
    "error": "no viable alternative at input 'select regexpExtract(number:'"
  },
  {
    "query": "select regexpExtract(number::String || '-' || (2*number)::String, '(\\\\\\\\d+)-(\\\\\\\\d+)', number%3) from numbers(5);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02562_regexp_extract.sql",
    "error": "no viable alternative at input 'select regexpExtract(number:'"
  },
  {
    "query": "SELECT regionHierarchy(number::UInt32) AS arr, arrayMap(id -> regionToName(id, 'en'), arr) FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionHierarchy(number:'"
  },
  {
    "query": "SELECT regionToName(n1.number::UInt32, 'en') || (regionIn(n1.number::UInt32, n2.number::UInt32) ? ' is in ' : ' is not in ') || regionToName(n2.number::UInt32, 'en') FROM numbers(13) AS n1 CROSS JOIN numbers(13) AS n2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(n1.number:'"
  },
  {
    "query": "SELECT regionToName(number::UInt32, 'en') FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(number:'"
  },
  {
    "query": "SELECT regionToName(number::UInt32, 'en'), regionToArea(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(number:'"
  },
  {
    "query": "SELECT regionToName(number::UInt32, 'en'), regionToContinent(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(number:'"
  },
  {
    "query": "SELECT regionToName(number::UInt32, 'en'), regionToCountry(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(number:'"
  },
  {
    "query": "SELECT regionToName(number::UInt32, 'en'), regionToDistrict(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(number:'"
  },
  {
    "query": "SELECT regionToName(number::UInt32, 'en'), regionToPopulation(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(number:'"
  },
  {
    "query": "SELECT regionToName(number::UInt32, 'en'), regionToTopContinent(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(number:'"
  },
  {
    "query": "SELECT regionToName(number::UInt32, 'xy') FROM numbers(13); -- { serverError POCO_EXCEPTION } SELECT regionToName(number::UInt32, 'en'), regionToCity(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02411_legacy_geobase.sql",
    "error": "no viable alternative at input 'SELECT regionToName(number:'"
  },
  {
    "query": "SELECT reinterpret(unhex(hex(1.234567890123456789012345678901::Decimal(60, 30))), 'Decimal(60, 30)');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT reinterpret(unhex(hex(1.234567890123456789012345678901:'"
  },
  {
    "query": "SELECT repeat('aa', number) FROM numbers(10e3)\nSETTINGS max_memory_usage=4e6, max_block_size=100\nFORMAT Null; -- { serverError MEMORY_LIMIT_EXCEEDED }\nSELECT '';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01656_test_query_log_factories_info.sql",
    "error": "no viable alternative at input 'SELECT repeat('aa', number) FROM numbers(10e3)\\nSETTINGS max_memory_usage=4e6'"
  },
  {
    "query": "select replaceAll(query, '\\\\n', '\\\\\\\\n'), lower(type::String), errorCodeToName(exception_code) from system.query_log\nwhere current_database = currentDatabase()\norder by event_time_microseconds\nformat CSV;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02572_system_logs_materialized_views_ignore_errors.sql",
    "error": "no viable alternative at input 'select replaceAll(query, '\\\\n', '\\\\\\\\n'), lower(type:'"
  },
  {
    "query": "select replaceAll(trimLeft(explain), '__table1.', '') from (explain actions = 1, sorting=1, description=0 select sum(y) as s from remote('127.0.0.{1,2}', currentDatabase(), tab) group by x order by x desc ) where explain ilike '%sort%' or explain like '%ReadFromMergeTree%' or explain like '%Aggregat%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_2.sql",
    "error": "no viable alternative at input 'select replaceAll(trimLeft(explain), '__table1.', '') from (explain actions ='"
  },
  {
    "query": "select replaceAll(trimLeft(explain), '__table1.', '') from (explain actions = 1, sorting=1, description=0 select sum(y) as s from remote('127.0.0.{1,2}', currentDatabase(), tab) group by x order by x) where explain ilike '%sort%' or explain like '%ReadFromMergeTree%' or explain like '%Aggregat%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_2.sql",
    "error": "no viable alternative at input 'select replaceAll(trimLeft(explain), '__table1.', '') from (explain actions ='"
  },
  {
    "query": "select replaceAll(trimLeft(explain), '__table1.', '') from (explain actions = 1, sorting=1, description=0 select sum(y) as s from remote('127.0.0.{1,2}', currentDatabase(), tab) group by x order by x, s) where explain ilike '%sort%' or explain like '%ReadFromMergeTree%' or explain like '%Aggregat%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_2.sql",
    "error": "no viable alternative at input 'select replaceAll(trimLeft(explain), '__table1.', '') from (explain actions ='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_move_to_prewhere WHERE a AND b AND c AND NOT ignore(fat_string)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01824_move_to_prewhere_many_columns.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count(*) FROM tab WHERE b < 10 and a < 10) WHERE explain LIKE '%Prewhere%'; -- checks a first, then b (statistics used) ALTER TABLE tab DROP STATISTICS a, b;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02864_statistics_usage.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count(*) FROM tab WHERE b < 10 and a < 10) WHERE explain LIKE '%Prewhere%'; -- checks a first, then b (statistics used) ALTER TABLE tab RENAME COLUMN b TO c;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02864_statistics_usage.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count(*) FROM tab WHERE b < 10 and a < 10) WHERE explain LIKE '%Prewhere%'; -- checks a first, then b (statistics used) DROP TABLE tab;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02864_statistics_delayed_materialization_in_merge.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count(*) FROM tab WHERE b < 10 and a < 10) WHERE explain LIKE '%Prewhere%'; -- checks a first, then b (statistics used) OPTIMIZE TABLE tab FINAL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02864_statistics_usage.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count(*) FROM tab WHERE b < 10 and a < 10) WHERE explain LIKE '%Prewhere%'; -- checks a first, then b (statistics used) TRUNCATE TABLE tab;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02864_statistics_delayed_materialization_in_merge.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count(*) FROM tab WHERE b < 10 and a < 10) WHERE explain LIKE '%Prewhere%'; -- checks b first, then a (statistics not used) ALTER TABLE tab ADD STATISTICS a, b TYPE tdigest;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02864_statistics_usage.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count(*) FROM tab WHERE b < 10 and a < 10) WHERE explain LIKE '%Prewhere%'; -- checks b first, then a (statistics not used) OPTIMIZE TABLE tab FINAL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02864_statistics_delayed_materialization_in_merge.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions=1 SELECT count(*) FROM tab WHERE c < 10 and a < 10) WHERE explain LIKE '%Prewhere%'; -- checks a first, then c (statistics used) DROP TABLE IF EXISTS tab;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02864_statistics_usage.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move WHERE x > 100) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01582_move_to_prewhere_compact_parts.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02156_merge1 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%' settings enable_analyzer=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02156_storage_merge_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02156_merge1 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%' settings enable_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02156_storage_merge_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02156_merge2 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02156_storage_merge_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02156_merge3 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02156_storage_merge_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02848_mt1 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere filter%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02842_move_pk_to_end_of_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT i FROM index_append_test_test WHERE 2 * b < 100) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01625_constraints_index_append.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT i FROM index_append_test_test WHERE a < 0) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01625_constraints_index_append.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT i FROM index_append_test_test WHERE a = 0) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01625_constraints_index_append.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT i FROM index_append_test_test WHERE a >= 0) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01625_constraints_index_append.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move WHERE x1 > 100 AND x2 > 100 AND x3 > 100 AND x4 > '100') WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01582_move_to_prewhere_compact_parts.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02848_mt2 WHERE a = 3 AND b == '3' AND c < 20 AND d like '%es%') WHERE explain LIKE '%Prewhere filter%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02842_move_pk_to_end_of_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02848_mt2 WHERE a = 3 AND b == '3' AND d like '%es%') WHERE explain LIKE '%Prewhere filter%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02842_move_pk_to_end_of_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02848_mt2 WHERE a = 3 AND c < 20 AND c > 0 AND d like '%es%') WHERE explain LIKE '%Prewhere filter%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02842_move_pk_to_end_of_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02848_mt2 WHERE b == '3' AND c < 20 AND d like '%es%') WHERE explain LIKE '%Prewhere filter%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02842_move_pk_to_end_of_prewhere.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_String', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE x + y > 100) WHERE explain LIKE '%Prewhere%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE x + y > 50 and z > 400) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE x > 100) WHERE explain LIKE '%Prewhere%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE x > 50 and z > 400) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE y > 100 and z > 400) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE y > 100 and z > 400) WHERE explain LIKE '%Prewhere%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE y > 100) WHERE explain LIKE '%Prewhere%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final FINAL WHERE z > 400) WHERE explain LIKE '%Prewhere%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final WHERE x + y > 100) WHERE explain LIKE '%Prewhere%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final WHERE x > 100) WHERE explain LIKE '%Prewhere%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions=1 SELECT * FROM prewhere_move_select_final WHERE y > 100) WHERE explain LIKE '%Prewhere%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01737_move_order_key_to_prewhere_select_final.sql",
    "error": "no viable alternative at input 'SELECT replaceRegexpAll(explain, '__table1\\\\.|_UInt8|_UInt16', '') FROM (EXPLAIN actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select a from t15 group by a\n) where explain like '%Skip merging: %'\nsettings force_aggregate_partitions_independently = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select a from t16 group by a\n) where explain like '%Skip merging: %'\nsettings force_aggregate_partitions_independently = 0, max_number_of_partitions_for_independent_aggregation = 4;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select a from t17 group by a\n) where explain like '%Skip merging: %'\nsettings force_aggregate_partitions_independently = 0, max_threads = 4;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select a from t22 final group by a\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select a, b from t12 group by a, b, pi()\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select a1 from t18 group by intDiv(a, 2) as a1\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select a1 from t19 group by blockNumber() as a1\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select a1 from t20 group by rand(a) as a1\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select intDiv(a, 2) + 1 as a1 from t8 group by a1\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select intDiv(a, 2) + 1 as a1, intDiv(b, 3) * 2 as b1 from t11 group by a1, b1, pi()\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select intDiv(a, 2) + 1 as a1, intDiv(b, 3) as b1 from t10 group by a1, b1, pi()\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select intDiv(a, 2) as a1 from t7 group by a1\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select intDiv(a, 2) as a1, intDiv(b, 3) as b1 from t14 group by a1, b1, pi()\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select intDiv(a, 3) as a1 from t9 group by a1\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions=1 select s from t13 group by intDiv(a, 2) + intDiv(b, 3) as s, pi()\n) where explain like '%Skip merging: %';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02521_aggregation_by_partitions.sql",
    "error": "no viable alternative at input 'select replaceRegexpOne(explain, '^[ ]*(.*)', '\\\\\\\\1') from ( explain actions='"
  },
  {
    "query": "SELECT rightPad('abc', 0), rightPad('abc', 0::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 0), rightPad('abc', 0:'"
  },
  {
    "query": "SELECT rightPad('abc', 1), rightPad('abc', 1::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 1), rightPad('abc', 1:'"
  },
  {
    "query": "SELECT rightPad('abc', 10), rightPad('abc', 10::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 10), rightPad('abc', 10:'"
  },
  {
    "query": "SELECT rightPad('abc', 10, '*'), rightPad('abc', 10::Int32, '*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 10, '*'), rightPad('abc', 10:'"
  },
  {
    "query": "SELECT rightPad('abc', 10, '*.'), rightPad('abc', 10::Int32, '*.');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 10, '*.'), rightPad('abc', 10:'"
  },
  {
    "query": "SELECT rightPad('abc', 2), rightPad('abc', 2::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 2), rightPad('abc', 2:'"
  },
  {
    "query": "SELECT rightPad('abc', 2, '*'), rightPad('abc', 2::Int32, '*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 2, '*'), rightPad('abc', 2:'"
  },
  {
    "query": "SELECT rightPad('abc', 2, '*.'), rightPad('abc', 2::Int32, '*.');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 2, '*.'), rightPad('abc', 2:'"
  },
  {
    "query": "SELECT rightPad('abc', 3), rightPad('abc', 3::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 3), rightPad('abc', 3:'"
  },
  {
    "query": "SELECT rightPad('abc', 4), rightPad('abc', 4::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 4), rightPad('abc', 4:'"
  },
  {
    "query": "SELECT rightPad('abc', 4, '*'), rightPad('abc', 4::Int32, '*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 4, '*'), rightPad('abc', 4:'"
  },
  {
    "query": "SELECT rightPad('abc', 4, '*.'), rightPad('abc', 4::Int32, '*.');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 4, '*.'), rightPad('abc', 4:'"
  },
  {
    "query": "SELECT rightPad('abc', 5), rightPad('abc', 5::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 5), rightPad('abc', 5:'"
  },
  {
    "query": "SELECT rightPad('abc', 5, '*'), rightPad('abc', 5::Int32, '*');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 5, '*'), rightPad('abc', 5:'"
  },
  {
    "query": "SELECT rightPad('abc', 5, '*.'), rightPad('abc', 5::Int32, '*.');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('abc', 5, '*.'), rightPad('abc', 5:'"
  },
  {
    "query": "SELECT rightPad('P0P1P2P3', 2), rightPad('P0P1P2P3', 2::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('P0P1P2P3', 2), rightPad('P0P1P2P3', 2:'"
  },
  {
    "query": "SELECT rightPad('P0P1P2P3', 4), rightPad('P0P1P2P3', 4::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad('P0P1P2P3', 4), rightPad('P0P1P2P3', 4:'"
  },
  {
    "query": "SELECT rightPad(leftPad(toString(number), number::Int64, '_'), number::Int64*2, '^') FROM numbers(7);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPad(leftPad(toString(number), number:'"
  },
  {
    "query": "SELECT rightPadUTF8('P0P1P2P3', 2), rightPadUTF8('P0P1P2P3', 2::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPadUTF8('P0P1P2P3', 2), rightPadUTF8('P0P1P2P3', 2:'"
  },
  {
    "query": "SELECT rightPadUTF8('P0P1P2P3', 4), rightPadUTF8('P0P1P2P3', 4::Int32);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01940_pad_string.sql",
    "error": "no viable alternative at input 'SELECT rightPadUTF8('P0P1P2P3', 4), rightPadUTF8('P0P1P2P3', 4:'"
  },
  {
    "query": "SELECT round(1.1::Decimal(60, 30));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT round(1.1:'"
  },
  {
    "query": "SELECT round(1.1::Decimal(60, 30), 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT round(1.1:'"
  },
  {
    "query": "SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT round(1.234567890123456789012345678901:'"
  },
  {
    "query": "SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 20);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT round(1.234567890123456789012345678901:'"
  },
  {
    "query": "SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 30);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT round(1.234567890123456789012345678901:'"
  },
  {
    "query": "SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 31);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT round(1.234567890123456789012345678901:'"
  },
  {
    "query": "SELECT round(arrayJoin(categoricalInformationValue(c1, c2)), 3) FROM VALUES((0, 0), (NULL, 1), (1, 0), (1, 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02425_categorical_information_value_properties.sql",
    "error": "no viable alternative at input 'SELECT round(arrayJoin(categoricalInformationValue(c1, c2)), 3) FROM VALUES(('"
  },
  {
    "query": "SELECT round(arrayJoin(categoricalInformationValue(c1, c2)), 3) FROM VALUES((0, 0), (NULL, 2), (1, 0), (1, 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02425_categorical_information_value_properties.sql",
    "error": "no viable alternative at input 'SELECT round(arrayJoin(categoricalInformationValue(c1, c2)), 3) FROM VALUES(('"
  },
  {
    "query": "SELECT round(arrayProduct([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]), 6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT round(arrayProduct([1.2:'"
  },
  {
    "query": "SELECT round(quantileArrayMerge(0.10)((*,).1)) FROM t0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT round(quantileArrayMerge(0.10)((*,)'"
  },
  {
    "query": "SELECT round(quantileDistinctMerge(0.10)((*,).1)) FROM t1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT round(quantileDistinctMerge(0.10)((*,)'"
  },
  {
    "query": "SELECT round(quantileIfMerge(0.10)((*,).1)) FROM t3;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT round(quantileIfMerge(0.10)((*,)'"
  },
  {
    "query": "SELECT round(quantileMerge(0.10)((*,).1)) FROM t4;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT round(quantileMerge(0.10)((*,)'"
  },
  {
    "query": "SELECT round(quantileMerge(0.10)((*,).1)) FROM t8;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT round(quantileMerge(0.10)((*,)'"
  },
  {
    "query": "SELECT round(quantileOrDefaultMerge(0.10)((*,).1)) FROM t6;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT round(quantileOrDefaultMerge(0.10)((*,)'"
  },
  {
    "query": "SELECT round(quantileOrNullMerge(0.10)((*,).1)) FROM t5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01159_combinators_with_parameters.sql",
    "error": "no viable alternative at input 'SELECT round(quantileOrNullMerge(0.10)((*,)'"
  },
  {
    "query": "SELECT rows > 1000 FROM (EXPLAIN ESTIMATE SELECT sum(a) FROM t1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT rows > 1000 FROM (EXPLAIN ESTIMATE'"
  },
  {
    "query": "select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105727]::Array(Int128)) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00653_running_difference.sql",
    "error": "no viable alternative at input 'select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105727]:'"
  },
  {
    "query": "select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105727]::Array(UInt128)) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00653_running_difference.sql",
    "error": "no viable alternative at input 'select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105727]:'"
  },
  {
    "query": "select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105728]::Array(Int256)) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00653_running_difference.sql",
    "error": "no viable alternative at input 'select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105728]:'"
  },
  {
    "query": "select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105728]::Array(UInt256)) as x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00653_running_difference.sql",
    "error": "no viable alternative at input 'select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105728]:'"
  },
  {
    "query": "SELECT s FROM t1 WHERE f AND (e = 1) SETTINGS optimize_move_to_prewhere=false;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01917_prewhere_column_type.sql",
    "error": "no viable alternative at input 'SELECT s FROM t1 WHERE f AND (e = 1) SETTINGS optimize_move_to_prewhere=false'"
  },
  {
    "query": "SELECT s FROM t1 WHERE f AND (e = 1) SETTINGS optimize_move_to_prewhere=true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01917_prewhere_column_type.sql",
    "error": "no viable alternative at input 'SELECT s FROM t1 WHERE f AND (e = 1) SETTINGS optimize_move_to_prewhere=true'"
  },
  {
    "query": "SELECT second_column FROM {CLICKHOUSE_DATABASE:Identifier}.dict1 WHERE key_column = 11;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT second_column FROM {'"
  },
  {
    "query": "Select singleValueOrNull(number::Date32) FROM numbers(100000) format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02963_single_value_destructor.sql",
    "error": "no viable alternative at input 'Select singleValueOrNull(number:'"
  },
  {
    "query": "SELECT sipHash128((toUInt64(9223372036854775806), 1)) = sipHash128(1) GROUP BY sipHash128(1::UInt8), toUInt64(9223372036854775806);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash128((toUInt64(9223372036854775806), 1)) = sipHash128(1) GROUP BY sipHash128(1:'"
  },
  {
    "query": "SELECT sipHash64(());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(()'"
  },
  {
    "query": "SELECT sipHash64((), ());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(()'"
  },
  {
    "query": "SELECT sipHash64((), (1, 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(()'"
  },
  {
    "query": "SELECT sipHash64((), (1, 2), ());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(()'"
  },
  {
    "query": "SELECT sipHash64((), 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(()'"
  },
  {
    "query": "SELECT sipHash64((), 1, ());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(()'"
  },
  {
    "query": "SELECT sipHash64((), 1, materialize(()));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(()'"
  },
  {
    "query": "SELECT sipHash64((1, 2), ());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64((1, 2), ()'"
  },
  {
    "query": "SELECT sipHash64((1, 2), (), (3, 4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64((1, 2), ()'"
  },
  {
    "query": "SELECT sipHash64((1, 2), materialize(()));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64((1, 2), materialize(()'"
  },
  {
    "query": "SELECT sipHash64((1, 2), materialize(()), (3, 4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64((1, 2), materialize(()'"
  },
  {
    "query": "SELECT sipHash64(1, ());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(1, ()'"
  },
  {
    "query": "SELECT sipHash64(1, (), 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(1, ()'"
  },
  {
    "query": "SELECT sipHash64(1, materialize(()));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(1, materialize(()'"
  },
  {
    "query": "SELECT sipHash64(1, materialize(()), 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(1, materialize(()'"
  },
  {
    "query": "SELECT sipHash64(materialize(()));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(materialize(()'"
  },
  {
    "query": "SELECT sipHash64(materialize(()), (1, 2));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(materialize(()'"
  },
  {
    "query": "SELECT sipHash64(materialize(()), (1, 2), ());",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(materialize(()'"
  },
  {
    "query": "SELECT sipHash64(materialize(()), 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(materialize(()'"
  },
  {
    "query": "SELECT sipHash64(materialize(()), materialize(()));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03205_hashing_empty_tuples.sql",
    "error": "no viable alternative at input 'SELECT sipHash64(materialize(()'"
  },
  {
    "query": "SELECT sipHash64Keyed((1::UInt64, 2::UInt64), []);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed((1:'"
  },
  {
    "query": "SELECT sipHash64Keyed((1::UInt64, 2::UInt64), map([0], 1, [2], 3));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed((1:'"
  },
  {
    "query": "SELECT sipHash64Keyed((1::UInt64, 2::UInt64), mapFromArrays([], []));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed((1:'"
  },
  {
    "query": "SELECT sipHash64Keyed((2::UInt64, 2::UInt64), val) FROM sipHashKeyed_keys ORDER by val;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed((2:'"
  },
  {
    "query": "SELECT sipHash64Keyed((2::UInt64, toUInt64(2)), 4) GROUP BY toUInt64(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed((2:'"
  },
  {
    "query": "SELECT sipHash64Keyed((key0, key1), 4::UInt64) FROM sipHashKeyed_keys ORDER by key0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed((key0, key1), 4:'"
  },
  {
    "query": "SELECT sipHash64Keyed((materialize(1::UInt64), 2::UInt64), map([0], 1, [2], 3)) FROM numbers(2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed((materialize(1:'"
  },
  {
    "query": "SELECT sipHash64Keyed((toUInt64(9223372036854775806), 9223372036854775808::UInt64), char(2)) GROUP BY toUInt64(9223372036854775806);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed((toUInt64(9223372036854775806), 9223372036854775808:'"
  },
  {
    "query": "SELECT sipHash64Keyed(key, 4::UInt64) FROM tab;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02534_keyed_siphash.sql",
    "error": "no viable alternative at input 'SELECT sipHash64Keyed(key, 4:'"
  },
  {
    "query": "SELECT sleep(1) SETTINGS log_processors_profiles=true, log_queries=1, log_queries_min_type='QUERY_FINISH';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02210_processors_profile_log.sql",
    "error": "no viable alternative at input 'SELECT sleep(1) SETTINGS log_processors_profiles=true'"
  },
  {
    "query": "select sleep(8) from dist settings function_sleep_max_microseconds_per_block=8e9, prefer_localhost_replica=0, receive_timeout=7, async_socket_for_remote=0, use_hedged_requests=0 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02805_distributed_queries_timeouts.sql",
    "error": "no viable alternative at input 'select sleep(8) from dist settings function_sleep_max_microseconds_per_block=8e9'"
  },
  {
    "query": "select sleep(8) from dist settings function_sleep_max_microseconds_per_block=8e9, prefer_localhost_replica=0, receive_timeout=7, async_socket_for_remote=0, use_hedged_requests=1 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02805_distributed_queries_timeouts.sql",
    "error": "no viable alternative at input 'select sleep(8) from dist settings function_sleep_max_microseconds_per_block=8e9'"
  },
  {
    "query": "select sleep(8) from dist settings function_sleep_max_microseconds_per_block=8e9, prefer_localhost_replica=0, receive_timeout=7, async_socket_for_remote=1, use_hedged_requests=0 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02805_distributed_queries_timeouts.sql",
    "error": "no viable alternative at input 'select sleep(8) from dist settings function_sleep_max_microseconds_per_block=8e9'"
  },
  {
    "query": "select sleepEachRow(2) from url('http://localhost:8123/?param_tries={1..10}&query=' || encodeURLComponent( 'select * from system.replication_queue where database=''' || currentDatabase() || ''' and table=''mut'' and type=''ALTER_METADATA'''\n), 'LineAsString', 's String') settings max_threads=1 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02441_alter_delete_and_drop_column.sql",
    "error": "no viable alternative at input 'select sleepEachRow(2) from url('http://localhost:8123/?param_tries={1..10}&query=' ||'"
  },
  {
    "query": "select sleepEachRow(2) from url('http://localhost:8123/?param_tries={1..10}&query=' || encodeURLComponent( 'select 1 where ''MUTATE_PART'' not in (select type from system.replication_queue where database=''' || currentDatabase() || ''' and table=''mut'')'\n), 'LineAsString', 's String') settings max_threads=1 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02441_alter_delete_and_drop_column.sql",
    "error": "no viable alternative at input 'select sleepEachRow(2) from url('http://localhost:8123/?param_tries={1..10}&query=' ||'"
  },
  {
    "query": "select sleepEachRow(2) from url('http://localhost:8123/?param_tries={1..10}&query=' || encodeURLComponent( 'select value from system.zookeeper where path=''/test/02448/' || currentDatabase() || '/rmt/replicas/1'' and name=''is_lost'' and value=''0'''\n), 'LineAsString', 's String') settings max_threads=1 format Null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02448_clone_replica_lost_part.sql",
    "error": "no viable alternative at input 'select sleepEachRow(2) from url('http://localhost:8123/?param_tries={1..10}&query=' ||'"
  },
  {
    "query": "SELECT snowflakeIDToDateTime();  -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH} SELECT snowflakeIDToDateTime64();  -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nSELECT snowflakeIDToDateTime('invalid_snowflake');  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT snowflakeIDToDateTime64('invalid_snowflake');  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT snowflakeIDToDateTime(123::UInt64, 'invalid_epoch');  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT snowflakeIDToDateTime64(123::UInt64, 'invalid_epoch');  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT snowflakeIDToDateTime(123::UInt64, materialize(42));  -- {serverError ILLEGAL_COLUMN}\nSELECT snowflakeIDToDateTime64(123::UInt64, materialize(42));  -- {serverError ILLEGAL_COLUMN}\nSELECT snowflakeIDToDateTime(123::UInt64, 42, 42);  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT snowflakeIDToDateTime64(123::UInt64, 42, 42);  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT snowflakeIDToDateTime(123::UInt64, 42, 'UTC', 'too_many_args');  -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nSELECT snowflakeIDToDateTime64(123::UInt64, 42, 'UTC', 'too_many_args');  -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nSELECT '-- Return type';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01942_snowflakeIDToDateTime.sql",
    "error": "no viable alternative at input 'SELECT snowflakeIDToDateTime(123:'"
  },
  {
    "query": "SELECT source.key, max(target.key) FROM (SELECT 1 key, 'x' name) source INNER JOIN (SELECT 2 key, 'x' name) target\nON source.name = target.name\nGROUP BY source.key;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01561_aggregate_functions_of_key_with_join.sql",
    "error": "no viable alternative at input 'SELECT source.key, max(target.key) FROM (SELECT 1 key, 'x' name'"
  },
  {
    "query": "SELECT space('abc'); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } SELECT space(['abc']); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT space(('abc')); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT space(30303030303030303030303030303030::UInt64); -- { serverError TOO_LARGE_STRING_SIZE }\nSELECT 'null';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30303030303030303030303030303030:'"
  },
  {
    "query": "SELECT space(-3::Int16), length(space(-3::Int16));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(-3:'"
  },
  {
    "query": "SELECT space(-3::Int32), length(space(-3::Int32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(-3:'"
  },
  {
    "query": "SELECT space(-3::Int64), length(space(-3::Int64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(-3:'"
  },
  {
    "query": "SELECT space(-3::Int8), length(space(-3::Int8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(-3:'"
  },
  {
    "query": "SELECT space(30::Int16) FROM defaults;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30:'"
  },
  {
    "query": "SELECT space(30::Int32) FROM defaults;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30:'"
  },
  {
    "query": "SELECT space(30::Int64) FROM defaults;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30:'"
  },
  {
    "query": "SELECT space(30::Int8) FROM defaults;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30:'"
  },
  {
    "query": "SELECT space(30::UInt16) FROM defaults;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30:'"
  },
  {
    "query": "SELECT space(30::UInt32) FROM defaults;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30:'"
  },
  {
    "query": "SELECT space(30::UInt64) FROM defaults;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30:'"
  },
  {
    "query": "SELECT space(30::UInt8) FROM defaults;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(30:'"
  },
  {
    "query": "SELECT space(3::Int16), length(space(3::Int16));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(3:'"
  },
  {
    "query": "SELECT space(3::Int32), length(space(3::Int32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(3:'"
  },
  {
    "query": "SELECT space(3::Int64), length(space(3::Int64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(3:'"
  },
  {
    "query": "SELECT space(3::Int8), length(space(3::Int8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(3:'"
  },
  {
    "query": "SELECT space(3::UInt16), length(space(3::UInt16));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(3:'"
  },
  {
    "query": "SELECT space(3::UInt32), length(space(3::UInt32));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(3:'"
  },
  {
    "query": "SELECT space(3::UInt64), length(space(3::UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(3:'"
  },
  {
    "query": "SELECT space(3::UInt8), length(space(3::UInt8));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02752_space_function.sql",
    "error": "no viable alternative at input 'SELECT space(3:'"
  },
  {
    "query": "SELECT sparkbar(9)(x, y) FROM (SELECT * FROM Values('x UInt64, y UInt8', (18446744073709551615,255), (0,0), (0,0), (4036797895307271799,254)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02016_aggregation_spark_bar.sql",
    "error": "no viable alternative at input 'SELECT sparkbar(9)(x, y) FROM (SELECT * FROM Values('x UInt64, y UInt8', ('"
  },
  {
    "query": "SELECT splitByNonAlpha('It is quite a wonderful day, isn\\\\'t it?');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01889_tokenize.sql",
    "error": "no viable alternative at input 'SELECT splitByNonAlpha('It is quite a wonderful day, isn\\\\'t it?''"
  },
  {
    "query": "select splitByString(' ', trimLeft(explain))[1] from (explain pipeline SELECT DISTINCT id, v FROM t_sparse_distinct) where explain ilike '%DistinctSortedStreamTransform%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02862_sorted_distinct_sparse_fix.sql",
    "error": "no viable alternative at input 'select splitByString(' ', trimLeft(explain))[1] from (explain pipeline'"
  },
  {
    "query": "SELECT splitByWhitespace('It is quite a wonderful day, isn\\\\'t it?');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01889_tokenize.sql",
    "error": "no viable alternative at input 'SELECT splitByWhitespace('It is quite a wonderful day, isn\\\\'t it?''"
  },
  {
    "query": "SELECT sqidEncode(1::UInt8, 2::UInt16, 3::UInt32, 4::UInt64) AS sqid, sqidDecode(sqid);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_sqid.sql",
    "error": "no viable alternative at input 'SELECT sqidEncode(1:'"
  },
  {
    "query": "SELECT sqidEncode(materialize(1::UInt8), materialize(2::UInt16), materialize(3::UInt32), materialize(4::UInt64)) AS sqid, sqidDecode(sqid);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_sqid.sql",
    "error": "no viable alternative at input 'SELECT sqidEncode(materialize(1:'"
  },
  {
    "query": "select startsWith(trimLeft(explain),'Resize') as resize from (explain pipeline select * from file(data_02723.csv)) where resize;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02723_parallelize_output_setting.sql",
    "error": "no viable alternative at input 'select startsWith(trimLeft(explain),'Resize') as resize from (explain pipeline'"
  },
  {
    "query": "SELECT subDate('2022-05-07'::Date, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT subDate('2022-05-07':'"
  },
  {
    "query": "SELECT subDate('2022-05-07'::Date32, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT subDate('2022-05-07':'"
  },
  {
    "query": "SELECT subDate('2022-05-07'::DateTime, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT subDate('2022-05-07':'"
  },
  {
    "query": "SELECT subDate('2022-05-07'::DateTime64, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT subDate('2022-05-07':'"
  },
  {
    "query": "SELECT subDate('2022-05-07'::String, INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT subDate('2022-05-07':'"
  },
  {
    "query": "SELECT SUBDATE(materialize('2022-05-07'::Date), INTERVAL 5 MINUTE);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02834_add_sub_date_functions.sql",
    "error": "no viable alternative at input 'SELECT SUBDATE(materialize('2022-05-07':'"
  },
  {
    "query": "SELECT substring(CAST('foo', 'Enum8(\\\\'foo\\\\' = 1)'), 1, 1), substring(CAST('foo', 'Enum16(\\\\'foo\\\\' = 1111)'), 1, 2);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01033_function_substring.sql",
    "error": "no viable alternative at input 'SELECT substring(CAST('foo', 'Enum8(\\\\'foo\\'"
  },
  {
    "query": "SELECT substring(h3CellAreaRads2(h3_index)::String, 1, 10) FROM h3_indexes ORDER BY h3_index;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02160_h3_cell_area_rads2.sql",
    "error": "no viable alternative at input 'SELECT substring(h3CellAreaRads2(h3_index):'"
  },
  {
    "query": "SELECT subtractTupleOfIntervals('2022-10-11'::Date, (INTERVAL 1 DAY, INTERVAL 1 MONTH));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql",
    "error": "no viable alternative at input 'SELECT subtractTupleOfIntervals('2022-10-11':'"
  },
  {
    "query": "SELECT subtractTupleOfIntervals('2022-10-11'::Date, tuple(INTERVAL 1 DAY));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02457_tuple_of_intervals.sql",
    "error": "no viable alternative at input 'SELECT subtractTupleOfIntervals('2022-10-11':'"
  },
  {
    "query": "SELECT subtractYears(date, 1), subtractYears(date_time, 1) FROM VALUES('date Date, date_time DateTime', (toDate('2019-01-01'), toDateTime('2019-01-01 00:00:00')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00975_values_list.sql",
    "error": "no viable alternative at input 'SELECT subtractYears(date, 1), subtractYears(date_time, 1) FROM VALUES('date Date, date_time DateTime', ('"
  },
  {
    "query": "SELECT sum(*) FROM remote('127.0.0.4', currentDatabase(), viewExplain('EXPLAIN PIPELINE', 'graph = 1', (SELECT * FROM remote('127.0.0.4', system, one)))); -- { serverError UNKNOWN_FUNCTION } SELECT groupArray(*) FROM cluster(test_cluster_two_shards, viewExplain('EXPLAIN PIPELINE', 'graph = 1', (SELECT * FROM remote('127.0.0.4', system, one))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03213_distributed_analyzer.sql",
    "error": "no viable alternative at input 'SELECT sum(*) FROM remote('127.0.0.4', currentDatabase(), viewExplain('EXPLAIN PIPELINE', 'graph = 1', ('"
  },
  {
    "query": "select sum(*) from s3(s3_conn, filename='02731.arrow') settings remote_filesystem_read_method='read', max_download_buffer_size = 1048576;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02731_formats_s3.sql",
    "error": "no viable alternative at input 'select sum(*) from s3(s3_conn, filename='"
  },
  {
    "query": "select sum(*) from s3(s3_conn, filename='02731.parquet') settings remote_filesystem_read_method='threadpool', remote_filesystem_read_prefetch=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02731_formats_s3.sql",
    "error": "no viable alternative at input 'select sum(*) from s3(s3_conn, filename='"
  },
  {
    "query": "select sum(a), sum(b) from cluster(test_cluster_two_shards, view(select cast(number as Decimal(7, 2)) a, 0 as b from numbers(2) union all select 0, cast(number as Decimal(7, 2)) as b from numbers(2)));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_union_decimal_conversion.sql",
    "error": "no viable alternative at input 'select sum(a), sum(b) from cluster(test_cluster_two_shards, view(select cast'"
  },
  {
    "query": "SELECT sum(amount) = 100 FROM realtimebuff__fuzz_19 ORDER BY ALL; -- { serverError CANNOT_CONVERT_TYPE } SELECT sum(amount) = 100 FROM realtimebuff__fuzz_20 ORDER BY ALL; -- { serverError CANNOT_CONVERT_TYPE }\nSELECT amount FROM realtimebuff__fuzz_19 t1\nJOIN (SELECT number :: UInt32 AS amount FROM numbers(3) ) t2 ON t1.amount = t2.amount\nORDER BY ALL\nSETTINGS allow_experimental_analyzer = 0; -- { serverError UNKNOWN_IDENTIFIER }\nSELECT amount FROM realtimebuff__fuzz_19 t1\nJOIN (SELECT number :: UInt32 AS amount FROM numbers(3) ) t2 ON t1.amount = t2.amount\nORDER BY ALL\nSETTINGS allow_experimental_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_buffer_over_distributed_type_mismatch.sql",
    "error": "no viable alternative at input 'SELECT amount FROM realtimebuff__fuzz_19 t1\\nJOIN (SELECT number :'"
  },
  {
    "query": "SELECT sum(c) FROM tab SETTINGS read_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE } SELECT sum(c) FROM tab SETTINGS read_overflow_mode_leaf = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSELECT sum(c) FROM tab SETTINGS group_by_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSELECT sum(c) FROM tab SETTINGS sort_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSELECT sum(c) FROM tab SETTINGS result_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSELECT sum(c) FROM tab SETTINGS timeout_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSELECT sum(c) FROM tab SETTINGS set_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSELECT sum(c) FROM tab SETTINGS join_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSELECT sum(c) FROM tab SETTINGS transfer_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSELECT sum(c) FROM tab SETTINGS distinct_overflow_mode = 'break', use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE }\nSYSTEM DROP QUERY CACHE;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_bugs.sql",
    "error": "no viable alternative at input 'SYSTEM DROP'"
  },
  {
    "query": "SELECT sum(c),\ntoInt32((h - null::Nullable(DateTime)) / 3600) + 1 AS a\nFROM\n(\nSELECT count() AS c, h\nFROM ( SELECT now() AS h )\nWHERE toInt32((h - null::Nullable(DateTime)) / 3600) + 1 = 1\nGROUP BY h\n)\nGROUP BY a settings min_count_to_compile_expression = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02789_jit_cannot_convert_column.sql",
    "error": "no viable alternative at input 'SELECT sum(c),\\ntoInt32((h - null:'"
  },
  {
    "query": "SELECT SUM(check <> 0) FROM\n(\nSELECT (abs ((- ((sign (right_0.c1)))))) AS \\`check\\`\nFROM t0 AS left\nLEFT ANTI JOIN t0 AS right_0 ON ((left.c0)=(right_0.c1))\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03211_convert_outer_join_to_inner_join_anti_join.sql",
    "error": "no viable alternative at input 'SELECT SUM(check <> 0) FROM\\n(\\nSELECT (abs ((- ((sign (right_0.c1)))))) AS \\'"
  },
  {
    "query": "SELECT sum(divideDecimal(toDecimal64(number, 1), toDecimal64(number, 5))) FROM (select * from numbers(1000) OFFSET 1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02475_precise_decimal_arithmetics.sql",
    "error": "no viable alternative at input 'SELECT sum(divideDecimal(toDecimal64(number, 1), toDecimal64(number, 5))) FROM (select * from numbers(1000) OFFSET'"
  },
  {
    "query": "SELECT SUM(dt::int) FROM small WHERE user_email IS NULL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.sql",
    "error": "no viable alternative at input 'SELECT SUM(dt:'"
  },
  {
    "query": "SELECT sum(hasValidSizes17(obj.arr.k1.k2, obj.arr.k1.k3.k4)) == count() FROM t_json_17;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_17.sql",
    "error": "no viable alternative at input 'SELECT sum(hasValidSizes17(obj.arr.k1.k2, obj.arr.k1.k3.k4'"
  },
  {
    "query": "SELECT sum(hasValidSizes17(obj.arr.k1.k2, obj.arr.k1.k4.k5)) == count() FROM t_json_17;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01825_type_json_17.sql",
    "error": "no viable alternative at input 'SELECT sum(hasValidSizes17(obj.arr.k1.k2, obj.arr.k1.k4.k5'"
  },
  {
    "query": "SELECT sum(if(s == '', v, 0)) b from VALUES ('v Nullable(Int64), s String',(1, 'x'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03131_rewrite_sum_if_nullable.sql",
    "error": "no viable alternative at input 'SELECT sum(if(s == '', v, 0)) b from VALUES ('v Nullable(Int64), s String',('"
  },
  {
    "query": "SELECT sum(n.null) FROM t_comp_subcolumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02025_subcolumns_compact_parts.sql",
    "error": "no viable alternative at input 'SELECT sum(n.null'"
  },
  {
    "query": "SELECT sum(u) FROM\n(\nSELECT\nintDiv(number, 4096) AS k,\nuniqCombined(tuple(materialize(toLowCardinality(toNullable(16))))) AS u\nFROM numbers(4096 * 100)\nGROUP BY k\n)\nSETTINGS enable_analyzer = 1, optimize_injective_functions_inside_uniq=0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03169_optimize_injective_functions_inside_uniq_crash.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM\\n(\\nSELECT\\nintDiv(number, 4096) AS k,\\nuniqCombined(tuple(materialize(toLowCardinality(toNullable(16))))) AS u\\nFROM numbers(4096 *'"
  },
  {
    "query": "SELECT sum(u) FROM\n(\nSELECT\nintDiv(number, 4096) AS k,\nuniqCombined(tuple(materialize(toLowCardinality(toNullable(16))))) AS u\nFROM numbers(4096 * 100)\nGROUP BY k\n)\nSETTINGS enable_analyzer = 1, optimize_injective_functions_inside_uniq=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03169_optimize_injective_functions_inside_uniq_crash.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM\\n(\\nSELECT\\nintDiv(number, 4096) AS k,\\nuniqCombined(tuple(materialize(toLowCardinality(toNullable(16))))) AS u\\nFROM numbers(4096 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 16384) AS k, uniqCombined(18)(number % 16384) u FROM numbers(16384 * 100) GROUP BY k);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 16384) AS k, uniqCombined(18)(number % 16384) u FROM numbers(16384 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 16384) AS k, uniqCombined(18)(number % 16384) u FROM numbers(16384 * 100) GROUP BY k); -- { serverError MEMORY_LIMIT_EXCEEDED } SET max_memory_usage = 19660800;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 16384) AS k, uniqCombined(18)(number % 16384) u FROM numbers(16384 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 2048) AS k, uniqCombined(16)(reinterpretAsString(number % 2048)) u FROM numbers(2048 * 100) GROUP BY k);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 2048) AS k, uniqCombined(16)(reinterpretAsString(number % 2048)) u FROM numbers(2048 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 2048) AS k, uniqCombined(16)(reinterpretAsString(number % 2048)) u FROM numbers(2048 * 100) GROUP BY k); -- { serverError MEMORY_LIMIT_EXCEEDED } SET max_memory_usage = 5900000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 2048) AS k, uniqCombined(16)(reinterpretAsString(number % 2048)) u FROM numbers(2048 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(16)(number % 4096) u FROM numbers(4096 * 100) GROUP BY k);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(16)(number % 4096) u FROM numbers(4096 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(16)(number % 4096) u FROM numbers(4096 * 100) GROUP BY k); -- { serverError MEMORY_LIMIT_EXCEEDED } SET max_memory_usage = 5230000;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(16)(number % 4096) u FROM numbers(4096 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(reinterpretAsString(number % 4096)) u FROM numbers(4096 * 100) GROUP BY k);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(reinterpretAsString(number % 4096)) u FROM numbers(4096 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(reinterpretAsString(number % 4096)) u FROM numbers(4096 * 100) GROUP BY k); -- { serverError MEMORY_LIMIT_EXCEEDED } SET max_memory_usage = 9830400;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(reinterpretAsString(number % 4096)) u FROM numbers(4096 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(18)(reinterpretAsString(number % 8192)) u FROM numbers(8192 * 100) GROUP BY k);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(18)(reinterpretAsString(number % 8192)) u FROM numbers(8192 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(18)(reinterpretAsString(number % 8192)) u FROM numbers(8192 * 100) GROUP BY k); -- { serverError MEMORY_LIMIT_EXCEEDED } SET max_memory_usage = 19660800;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(18)(reinterpretAsString(number % 8192)) u FROM numbers(8192 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(number % 8192) u FROM numbers(8192 * 100) GROUP BY k);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(number % 8192) u FROM numbers(8192 *'"
  },
  {
    "query": "SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(number % 8192) u FROM numbers(8192 * 100) GROUP BY k); -- { serverError MEMORY_LIMIT_EXCEEDED } SET max_memory_usage = 9830400;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01017_uniqCombined_memory_usage.sql",
    "error": "no viable alternative at input 'SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(number % 8192) u FROM numbers(8192 *'"
  },
  {
    "query": "SELECT sum(x), count(x), avg(x) FROM (SELECT number :: Decimal32(0) AS x FROM numbers(0)) SETTINGS optimize_syntax_fuse_functions = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_fuse_sum_count.sql",
    "error": "no viable alternative at input 'SELECT sum(x), count(x), avg(x) FROM (SELECT number :'"
  },
  {
    "query": "SELECT sum(x), count(x), avg(x) FROM (SELECT number :: Decimal32(0) AS x FROM numbers(0));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_fuse_sum_count.sql",
    "error": "no viable alternative at input 'SELECT sum(x), count(x), avg(x) FROM (SELECT number :'"
  },
  {
    "query": "SELECT sum(x), count(x), avg(x), toTypeName(sum(x)), toTypeName(count(x)), toTypeName(avg(x)) FROM (SELECT number :: Decimal32(0) AS x FROM numbers(10)) SETTINGS optimize_syntax_fuse_functions = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_fuse_sum_count.sql",
    "error": "no viable alternative at input 'SELECT sum(x), count(x), avg(x), toTypeName(sum(x)), toTypeName(count(x)), toTypeName(avg(x)) FROM (SELECT number :'"
  },
  {
    "query": "SELECT sum(x), count(x), avg(x), toTypeName(sum(x)), toTypeName(count(x)), toTypeName(avg(x)) FROM (SELECT number :: Decimal32(0) AS x FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_fuse_sum_count.sql",
    "error": "no viable alternative at input 'SELECT sum(x), count(x), avg(x), toTypeName(sum(x)), toTypeName(count(x)), toTypeName(avg(x)) FROM (SELECT number :'"
  },
  {
    "query": "select sumArgMin() from numbers(100); -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH} select sumArgMin(number) from numbers(100); -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nselect sumArgMin(number, unhex('0000000000000000')::AggregateFunction(sum, UInt64)) from numbers(100); -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT sumArgMax(number, tuple(number, repeat('a', (10 * (number % 100))::Int32))) FROM numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02885_arg_min_max_combinator.sql",
    "error": "no viable alternative at input 'select sumArgMin(number, unhex('0000000000000000'):'"
  },
  {
    "query": "SELECT sumArray(arr.null), sum(arr.size0) FROM subcolumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01475_read_subcolumns_2.sql",
    "error": "no viable alternative at input 'SELECT sumArray(arr.null'"
  },
  {
    "query": "SELECT sumIf(dummy, 1)     FROM remote('127.0.0.{1,2}', view(SELECT cast(dummy AS Nullable(UInt8)) AS dummy FROM system.one));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01642_if_nullable_regression.sql",
    "error": "no viable alternative at input 'SELECT sumIf(dummy, 1)     FROM remote('127.0.0.{1,2}', view(SELECT cast'"
  },
  {
    "query": "SELECT sumIf(dummy, 1)     FROM remote('127.0.0.{1,2}', view(SELECT cast(Null  AS Nullable(UInt8))  AS dummy FROM system.one));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01642_if_nullable_regression.sql",
    "error": "no viable alternative at input 'SELECT sumIf(dummy, 1)     FROM remote('127.0.0.{1,2}', view(SELECT cast'"
  },
  {
    "query": "SELECT sumIf(dummy, dummy) FROM remote('127.0.0.{1,2}', view(SELECT cast(dummy AS Nullable(UInt8)) AS dummy FROM system.one));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01642_if_nullable_regression.sql",
    "error": "no viable alternative at input 'SELECT sumIf(dummy, dummy) FROM remote('127.0.0.{1,2}', view(SELECT cast'"
  },
  {
    "query": "SELECT sumIf(dummy, dummy) FROM remote('127.0.0.{1,2}', view(SELECT cast(Null  AS Nullable(UInt8))  AS dummy FROM system.one));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01642_if_nullable_regression.sql",
    "error": "no viable alternative at input 'SELECT sumIf(dummy, dummy) FROM remote('127.0.0.{1,2}', view(SELECT cast'"
  },
  {
    "query": "select sumIf(number::Decimal128(3), number % 10 == 0) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::Decimal128(3), number % 10) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::Decimal256(3), number % 10 == 0) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::Decimal256(3), number % 10) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::Int128, number % 10 == 0) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::Int128, number % 10) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::Int256, number % 10 == 0) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::Int256, number % 10) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::UInt128, number % 10 == 0) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::UInt128, number % 10) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::UInt256, number % 10 == 0) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "select sumIf(number::UInt256, number % 10) from numbers(1000);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02985_if_over_big_int_decimal.sql",
    "error": "no viable alternative at input 'select sumIf(number:'"
  },
  {
    "query": "SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT sumMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT sumMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT sumMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT sumMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT sumMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02480_max_map_null_totals.sql",
    "error": "no viable alternative at input 'SELECT sumMap([number % 3, number % 4 - 1], [number :'"
  },
  {
    "query": "SELECT sumMap([x],[y]) FROM values('x Float64, y Float64', (4, 1), (1, 2.3), (nan,inf), (6.7,3), (4,4), (5, 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02968_sumMap_with_nan.sql",
    "error": "no viable alternative at input 'SELECT sumMap([x],[y]) FROM values('x Float64, y Float64', ('"
  },
  {
    "query": "select sumMap(val, cnt) from ( SELECT [ CAST('a', 'Enum16(\\\\'a\\\\'=1)') ] as val, [1] as cnt );",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00502_sum_map.sql",
    "error": "no viable alternative at input 'select sumMap(val, cnt) from ( SELECT [ CAST('a', 'Enum16(\\\\'a\\'"
  },
  {
    "query": "select sumMap(val, cnt) from ( SELECT [ CAST(1, 'DateTime(\\\\'Asia/Istanbul\\\\')') ] as val, [1] as cnt );",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00502_sum_map.sql",
    "error": "no viable alternative at input 'select sumMap(val, cnt) from ( SELECT [ CAST(1, 'DateTime(\\\\'Asia/Istanbul\\'"
  },
  {
    "query": "select sumMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ([1], [0]), ([2], [0]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01280_min_map_max_map.sql",
    "error": "no viable alternative at input 'select sumMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)',  ('"
  },
  {
    "query": "SELECT sumMapFiltered([1,2,3,toInt8(-3)])(a,b) FROM values('a Array(UInt64), b Array(Int64)',([1, 2, 3], [10, 10, 10]), ([3, 4, 5], [10, 10, 10]),([4, 5, 6], [10, 10, 10]),([6, 7, 8], [10, 10, 10]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02961_sumMapFiltered_keepKey.sql",
    "error": "no viable alternative at input 'SELECT sumMapFiltered([1,2,3,toInt8(-3)])(a,b) FROM values('a Array(UInt64), b Array(Int64)',('"
  },
  {
    "query": "SELECT sumMapFiltered([1,2,3])(a,b) FROM values('a Array(Int64), b Array(Int64)',([1, 2, 3], [10, 10, 10]), ([3, 4, 5], [10, 10, 10]),([4, 5, 6], [10, 10, 10]),([6, 7, 8], [10, 10, 10]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02961_sumMapFiltered_keepKey.sql",
    "error": "no viable alternative at input 'SELECT sumMapFiltered([1,2,3])(a,b) FROM values('a Array(Int64), b Array(Int64)',('"
  },
  {
    "query": "SELECT sumMapFiltered([6.7])([x], [y]) FROM values('x Float64, y Float64', (0, 1), (1, 2.3), (nan, inf), (6.7, 3), (4, 4), (5, 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02968_sumMap_with_nan.sql",
    "error": "no viable alternative at input 'SELECT sumMapFiltered([6.7])([x], [y]) FROM values('x Float64, y Float64', ('"
  },
  {
    "query": "SELECT sumMapFilteredMerge([1, 2])(*) FROM remote('127.0.0.{1,2}', view(SELECT sumMapFilteredState([1, 2])([1, 2, 3], [10, 10, 10])));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.sql",
    "error": "no viable alternative at input 'SELECT sumMapFilteredMerge([1, 2])(*) FROM remote('127.0.0.{1,2}', view(SELECT sumMapFilteredState'"
  },
  {
    "query": "SELECT system.\\`one\\`.dummy FROM system.one;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "no viable alternative at input 'SELECT system.\\'"
  },
  {
    "query": "SELECT system.detached_parts.* EXCEPT (bytes_on_disk, \\`path\\`, disk, modification_time) FROM system.detached_parts WHERE database = currentDatabase() AND table = 'not_partitioned';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00502_custom_partitioning_local.sql",
    "error": "no viable alternative at input 'SELECT system.detached_parts.* EXCEPT ('"
  },
  {
    "query": "SELECT system.one.* FROM one AS \\`t\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "no viable alternative at input 'SELECT system.one.* FROM one AS \\'"
  },
  {
    "query": "SELECT system.one.dummy FROM \\`one\\` AS \\`t\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00467_qualified_names.sql",
    "error": "no viable alternative at input 'SELECT system.one.dummy FROM \\'"
  },
  {
    "query": "SELECT t IS NULL, t.null FROM t_tuple_null;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01872_functions_to_subcolumns_analyzer.sql",
    "error": "no viable alternative at input 'SELECT t IS NULL, t.null'"
  },
  {
    "query": "SELECT t.1.3 FROM t_tuple_numeric; -- {serverError NOT_FOUND_COLUMN_IN_BLOCK, ARGUMENT_OUT_OF_BOUND} SELECT t.4 FROM t_tuple_numeric; -- {serverError NOT_FOUND_COLUMN_IN_BLOCK, ARGUMENT_OUT_OF_BOUND}\nSELECT \\`t\\`.\\`1\\`.\\`1\\`, \\`t\\`.\\`1\\`.\\`2\\`, \\`t\\`.\\`2\\` FROM t_tuple_numeric; -- {serverError UNKNOWN_IDENTIFIER, ARGUMENT_OUT_OF_BOUND}\nDROP TABLE t_tuple_numeric;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql",
    "error": "no viable alternative at input 'SELECT \\'"
  },
  {
    "query": "SELECT t.a.size0, t.a.null, t.u, t.s, t.s.null FROM subcolumns;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01475_read_subcolumns_2.sql",
    "error": "no viable alternative at input 'SELECT t.a.size0, t.a.null'"
  },
  {
    "query": "SELECT t.t.t.* FROM system.tables WHERE database = currentDatabase(); --{serverError INVALID_IDENTIFIER} ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02963_invalid_identifier.sql",
    "error": "no viable alternative at input 'SELECT t.t.t.*'"
  },
  {
    "query": "SELECT t.t2.t3.t4.t5.s1.s2, t.t2.s3.s4.s5 FROM t_nested_with_dots;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02191_nested_with_dots.sql",
    "error": "no viable alternative at input 'SELECT t.t2.t3.t4.t5'"
  },
  {
    "query": "SELECT t.t2.t3.t4.t5.s1.s2, t.t2.t3.t4.t5.u1.u2 FROM t_nested_with_dots;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02191_nested_with_dots.sql",
    "error": "no viable alternative at input 'SELECT t.t2.t3.t4.t5'"
  },
  {
    "query": "SELECT t1.id FROM raw_data_parametrized(id_from = 0, id_to = 50000) t1\nORDER BY t1.id;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03033_analyzer_parametrized_view_alias.sql",
    "error": "no viable alternative at input 'SELECT t1.id FROM raw_data_parametrized(id_from ='"
  },
  {
    "query": "SELECT t1.pk, t2.\\`x.y\\` FROM test1 t1\nLEFT JOIN test2 t2\n\ton t1.pk = t2.pk;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03082_analyzer_left_join_correct_column.sql",
    "error": "no viable alternative at input 'SELECT t1.pk, t2.\\'"
  },
  {
    "query": "SELECT t1.x, t2.x, y FROM (SELECT x, y FROM VALUES ('x UInt16, y UInt16', (0,1))) AS t1,\n(SELECT x, z FROM VALUES ('x UInt16, z UInt16', (2,3))) AS t2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_1.sql",
    "error": "no viable alternative at input 'SELECT t1.x, t2.x, y FROM (SELECT x, y FROM VALUES ('x UInt16, y UInt16', ('"
  },
  {
    "query": "SELECT t2.* FROM ( SELECT t1.* FROM test_grouping_sets_predicate t1 GROUP BY GROUPING SETS ( (day_, type_1), (day_) ) ) t2\nWHERE day_ = '2023-01-05'\nORDER BY ALL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03150_grouping_sets_use_nulls_pushdown.sql",
    "error": "no viable alternative at input 'SELECT t2.* FROM ( SELECT t1.* FROM test_grouping_sets_predicate t1 GROUP BY GROUPING SETS ('"
  },
  {
    "query": "SELECT t2.\\`1b1\\` FROM t1 JOIN t2 ON a1 = b1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02096_join_unusual_identifier_begin.sql",
    "error": "no viable alternative at input 'SELECT t2.\\'"
  },
  {
    "query": "SELECT t2.amount + 1 FROM (SELECT number :: UInt32 AS amount FROM numbers(300) ) t1 JOIN realtimebuff__fuzz_19 t2 ON t1.amount = t2.amount\nORDER BY ALL\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_buffer_over_distributed_type_mismatch.sql",
    "error": "no viable alternative at input 'SELECT t2.amount + 1 FROM (SELECT number :'"
  },
  {
    "query": "SELECT t2.amount + 1 FROM (SELECT number :: UInt32 AS amount FROM numbers(300) ) t1 JOIN realtimebuff__fuzz_19 t2 USING (amount)\nORDER BY ALL\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03208_buffer_over_distributed_type_mismatch.sql",
    "error": "no viable alternative at input 'SELECT t2.amount + 1 FROM (SELECT number :'"
  },
  {
    "query": "select t2.name from remote('127.0.0.2', currentDatabase(), 'local_table') as t1 left join {CLICKHOUSE_DATABASE:Identifier}.other_table as t2 -- FIXME: doesn't work properly on remote without explicit database prefix\non t1.oth_id = t2.id\norder by t2.name;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00857_global_joinsavel_table_alias.sql",
    "error": "no viable alternative at input 'select t2.name from remote('127.0.0.2', currentDatabase(), 'local_table') as t1 left join {'"
  },
  {
    "query": "SELECT tb1.*,tb2.* FROM\n(\nwith tmp0 as (select k1,k2,d1 from tmp_a),\ntmp_s as (select k1,k2,d0 from tmp_b),\ntmp1 as (select tmp0.*,tmp_s.d0 from tmp0 left join tmp_s on tmp0.k1=tmp_s.k1 and tmp0.k2=tmp_s.k2)\nselect * from tmp1\n) as tb1\nLEFT JOIN\n(\nwith tmp0 as (select k1,k2,d2 from tmp_a),\ntmp_s as (select k1,k2,d0 from tmp_b),\ntmp1 as (select tmp0.*,tmp_s.d0 from tmp0 left join tmp_s on tmp0.k1=tmp_s.k1 and tmp0.k2=tmp_s.k2)\nselect * from tmp1\n) as tb2\nON tb1.k1=tb2.k1 AND tb1.k2=tb2.k2\nORDER BY k1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03143_cte_scope.sql",
    "error": "no viable alternative at input 'SELECT tb1.*,tb2.* FROM\\n(\\nwith tmp0 as ('"
  },
  {
    "query": "SELECT tb1.owner_id AS owner_id,\ntype\nFROM\n(\nSELECT number AS owner_id\nFROM numbers(100)\n) AS tb1\nCROSS JOIN values('type varchar', 'type1', 'type2', 'type3') AS pt\nLEFT JOIN\n(\nSELECT tb2.owner_id AS owner_id\nFROM\n(\nSELECT number AS owner_id\nFROM numbers(100)\nGROUP BY owner_id\n) AS tb2\n) AS merged USING (owner_id)\nWHERE tb1.owner_id = merged.owner_id\nGROUP BY\ntb1.owner_id,\ntype\nFORMAT \\`Null\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03099_analyzer_multi_join.sql",
    "error": "no viable alternative at input 'SELECT tb1.owner_id AS owner_id,\\ntype\\nFROM\\n(\\nSELECT number AS owner_id\\nFROM numbers(100)\\n) AS tb1\\nCROSS JOIN values('type varchar', 'type1', 'type2', 'type3') AS pt\\nLEFT JOIN\\n(\\nSELECT tb2.owner_id AS owner_id\\nFROM\\n(\\nSELECT number AS owner_id\\nFROM numbers(100)\\nGROUP BY owner_id\\n) AS tb2\\n) AS merged USING (owner_id)\\nWHERE tb1.owner_id = merged.owner_id\\nGROUP BY\\ntb1.owner_id,\\ntype\\nFORMAT \\'"
  },
  {
    "query": "SELECT third_column FROM {CLICKHOUSE_DATABASE:Identifier}.dict1 WHERE key_column = 12;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT third_column FROM {'"
  },
  {
    "query": "select this is too many words for an alias; -- { clientError SYNTAX_ERROR } OPTIMIZE TABLE values_01564 DEDUPLICATE BY; -- { clientError SYNTAX_ERROR }\nOPTIMIZE TABLE values_01564 DEDUPLICATE BY a EXCEPT a; -- { clientError SYNTAX_ERROR }\nselect 'a' || distinct one || 'c' from system.one; -- { clientError SYNTAX_ERROR }\nCREATE TABLE t0 (c0 String, c1 Int32) ENGINE = Memory() ;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01564_test_hint_woes.sql",
    "error": "no viable alternative at input 'select this is too'"
  },
  {
    "query": "SELECT throwIf(1) SETTINGS use_query_cache = true; -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } SELECT COUNT(*) FROM system.query_cache;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_exception_handling.sql",
    "error": "no viable alternative at input 'SELECT throwIf(1) SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT throwIf(number == 0) FROM numbers(100) SETTINGS implicit_transaction=True; -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } ROLLBACK;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02345_implicit_transaction.sql",
    "error": "no viable alternative at input 'SELECT throwIf(number == 0) FROM numbers(100) SETTINGS implicit_transaction=True'"
  },
  {
    "query": "SELECT throwIf(number == 0) FROM numbers(100); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } SELECT throwIf(number == 0) FROM numbers(100); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO }\nSELECT throwIf(number == 0) FROM numbers(100); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO }\nSELECT throwIf(number == 0) FROM numbers(100); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO }\nSET implicit_transaction=False;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02345_implicit_transaction.sql",
    "error": "no viable alternative at input 'SET implicit_transaction=False'"
  },
  {
    "query": "SELECT time, round(exp_smooth, 10), bar(exp_smooth, -9223372036854775807, 1048575, 50) AS bar FROM (SELECT 2 OR (number = 0) OR (number >= 1) AS value, number AS time, exponentialTimeDecayedSum(2147483646)(value, time) OVER (RANGE BETWEEN CURRENT ROW AND CURRENT ROW) AS exp_smooth FROM numbers(1) WHERE 10) WHERE 25;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02569_order_by_aggregation_result.sql",
    "error": "no viable alternative at input 'SELECT time, round(exp_smooth, 10), bar(exp_smooth, -9223372036854775807, 1048575, 50) AS bar FROM (SELECT 2 OR (number = 0) OR (number >= 1) AS value, number AS time, exponentialTimeDecayedSum(2147483646)(value, time) OVER'"
  },
  {
    "query": "SELECT TIMESTAMP_SUB (SELECT ILIKE INTO OUTFILE , accurateCast ) FROM TIMESTAMP_SUB ( MINUTE , ) GROUP BY accurateCast; -- { clientError SYNTAX_ERROR } ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02472_segfault_expression_parser.sql",
    "error": "no viable alternative at input 'SELECT TIMESTAMP_SUB (SELECT ILIKE INTO OUTFILE'"
  },
  {
    "query": "SELECT toDate('2022-02-01') AS d1 FROM numbers(18) AS number\nORDER BY d1 ASC WITH FILL FROM toDateTime('2022-02-01') TO toDateTime('2022-07-01') STEP toIntervalMonth(1); -- { serverError INVALID_WITH_FILL_EXPRESSION }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02366_with_fill_date.sql",
    "error": "no viable alternative at input 'SELECT toDate('2022-02-01') AS d1 FROM numbers(18) AS number\\nORDER BY d1 ASC WITH FILL FROM toDateTime'"
  },
  {
    "query": "SELECT toDate(hour) AS day,\n\\`metric.names\\`,\nsum(\\`metric.values\\`)\nFROM remote('127.0.0.{1,2}', currentDatabase(), hourly)\nARRAY JOIN metric\nGROUP BY\nday,\nmetric.names\nORDER BY metric.names;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03156_analyzer_array_join_distributed.sql",
    "error": "no viable alternative at input 'SELECT toDate(hour) AS day,\\n\\'"
  },
  {
    "query": "select toDateOrDefault('1xx', '2023-05-30'::Date);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01746_convert_type_with_default.sql",
    "error": "no viable alternative at input 'select toDateOrDefault('1xx', '2023-05-30':'"
  },
  {
    "query": "select toDateOrDefault('2023-05-30', '2000-01-01'::Date);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01746_convert_type_with_default.sql",
    "error": "no viable alternative at input 'select toDateOrDefault('2023-05-30', '2000-01-01':'"
  },
  {
    "query": "select toDateOrDefault(-1, '2023-05-30'::Date);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01746_convert_type_with_default.sql",
    "error": "no viable alternative at input 'select toDateOrDefault(-1, '2023-05-30':'"
  },
  {
    "query": "select toDateOrDefault(19507, '2000-01-01'::Date);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01746_convert_type_with_default.sql",
    "error": "no viable alternative at input 'select toDateOrDefault(19507, '2000-01-01':'"
  },
  {
    "query": "SELECT toDateTime(foo.server_time, 'UTC') FROM foo SEMI JOIN bar USING (dimension_1) WHERE toDate(foo.server_time, 'UTC') <= toDate('2020-04-30');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01582_any_join_supertype.sql",
    "error": "no viable alternative at input 'SELECT toDateTime(foo.server_time, 'UTC') FROM foo SEMI JOIN'"
  },
  {
    "query": "select toDateTime64('3000-01-01 12:00:00.12345', 0) + interval 0 nanosecond; -- { serverError DECIMAL_OVERFLOW } select toDateTime64('3000-01-01 12:00:00.12345', 0) + interval 0 microsecond;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00514_interval_operators.sql",
    "error": "no viable alternative at input 'select toDateTime64('3000-01-01 12:00:00.12345', 0) + interval 0 nanosecond;'"
  },
  {
    "query": "select toDateTimeOrDefault('1xxx', 'UTC', '2023-05-30 14:38:20'::DateTime('UTC'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01746_convert_type_with_default.sql",
    "error": "no viable alternative at input 'select toDateTimeOrDefault('1xxx', 'UTC', '2023-05-30 14:38:20':'"
  },
  {
    "query": "select toDateTimeOrDefault(-1, 'UTC', '2023-05-30 14:38:20'::DateTime('UTC'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01746_convert_type_with_default.sql",
    "error": "no viable alternative at input 'select toDateTimeOrDefault(-1, 'UTC', '2023-05-30 14:38:20':'"
  },
  {
    "query": "SELECT today() + INTERVAL 1::Int128 DAY - today();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02469_interval_msan.sql",
    "error": "no viable alternative at input 'SELECT today() + INTERVAL 1:'"
  },
  {
    "query": "SELECT today() + INTERVAL 1::Int256 DAY - today();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02469_interval_msan.sql",
    "error": "no viable alternative at input 'SELECT today() + INTERVAL 1:'"
  },
  {
    "query": "SELECT today() + INTERVAL 1::UInt128 DAY - today();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02469_interval_msan.sql",
    "error": "no viable alternative at input 'SELECT today() + INTERVAL 1:'"
  },
  {
    "query": "SELECT today() + INTERVAL 1::UInt256 DAY - today();",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02469_interval_msan.sql",
    "error": "no viable alternative at input 'SELECT today() + INTERVAL 1:'"
  },
  {
    "query": "SELECT today() AS a ORDER BY a ASC WITH FILL FROM now() - toIntervalMonth(1) TO now() + toIntervalDay(1) STEP 82600; -- { serverError INVALID_WITH_FILL_EXPRESSION }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02561_with_fill_date_datetime_incompatible.sql",
    "error": "no viable alternative at input 'SELECT today() AS a ORDER BY a ASC WITH FILL FROM now'"
  },
  {
    "query": "SELECT toDayOfWeek(invalid) FROM \\`tab\\`; -- { serverError CANNOT_PARSE_DATETIME } SELECT toWeek(invalid) FROM \\`tab\\`; -- { serverError CANNOT_PARSE_DATETIME }\nSELECT toYearWeek(invalid) FROM \\`tab\\`; -- { serverError CANNOT_PARSE_DATETIME }\nDROP TABLE tab;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01661_week_functions_string_args.sql",
    "error": "no viable alternative at input 'SELECT toDayOfWeek(invalid) FROM \\'"
  },
  {
    "query": "SELECT toDecimal128OrDefault('Hello', 3, 123.456::Decimal128(3)) AS x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02410_to_decimal_or_default.sql",
    "error": "no viable alternative at input 'SELECT toDecimal128OrDefault('Hello', 3, 123.456:'"
  },
  {
    "query": "SELECT toDecimal128OrDefault(333, 3, 123.456::Decimal128(3)) AS x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02410_to_decimal_or_default.sql",
    "error": "no viable alternative at input 'SELECT toDecimal128OrDefault(333, 3, 123.456:'"
  },
  {
    "query": "SELECT toDecimal256OrDefault('Hello', 3, 123.456::Decimal256(3)) AS x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02410_to_decimal_or_default.sql",
    "error": "no viable alternative at input 'SELECT toDecimal256OrDefault('Hello', 3, 123.456:'"
  },
  {
    "query": "SELECT toDecimal256OrDefault(444, 3, 123.456::Decimal256(3)) AS x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02410_to_decimal_or_default.sql",
    "error": "no viable alternative at input 'SELECT toDecimal256OrDefault(444, 3, 123.456:'"
  },
  {
    "query": "SELECT toDecimal32OrDefault('Hello', 3, 123.456::Decimal32(3)) AS x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02410_to_decimal_or_default.sql",
    "error": "no viable alternative at input 'SELECT toDecimal32OrDefault('Hello', 3, 123.456:'"
  },
  {
    "query": "SELECT toDecimal32OrDefault(111, 3, 123.456::Decimal32(3)) AS x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02410_to_decimal_or_default.sql",
    "error": "no viable alternative at input 'SELECT toDecimal32OrDefault(111, 3, 123.456:'"
  },
  {
    "query": "SELECT toDecimal64OrDefault('Hello', 3, 123.456::Decimal64(3)) AS x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02410_to_decimal_or_default.sql",
    "error": "no viable alternative at input 'SELECT toDecimal64OrDefault('Hello', 3, 123.456:'"
  },
  {
    "query": "SELECT toDecimal64OrDefault(222, 3, 123.456::Decimal64(3)) AS x, toTypeName(x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02410_to_decimal_or_default.sql",
    "error": "no viable alternative at input 'SELECT toDecimal64OrDefault(222, 3, 123.456:'"
  },
  {
    "query": "SELECT toDecimalString('128.78932312332132985464'::Decimal128(20), 20);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_to_decimal_string.sql",
    "error": "no viable alternative at input 'SELECT toDecimalString('128.78932312332132985464':'"
  },
  {
    "query": "SELECT toDecimalString(-32.345::Decimal32(3), 3);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_to_decimal_string.sql",
    "error": "no viable alternative at input 'SELECT toDecimalString(-32.345:'"
  },
  {
    "query": "SELECT toDecimalString(-64.123::Float32, 10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_to_decimal_string.sql",
    "error": "no viable alternative at input 'SELECT toDecimalString(-64.123:'"
  },
  {
    "query": "SELECT toDecimalString(-64.234::Float64, 10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_to_decimal_string.sql",
    "error": "no viable alternative at input 'SELECT toDecimalString(-64.234:'"
  },
  {
    "query": "SELECT toDecimalString(2, 77);  -- more digits required than exist SELECT toDecimalString(2.123456, 2);  -- rounding\nSELECT toDecimalString(-2, 77);  -- more digits required than exist\nSELECT toDecimalString(-2.123456, 2);  -- rounding\nSELECT toDecimalString(2.9876, 60);  -- more digits required than exist (took 60 as it is float by default)\nSELECT toDecimalString(2.1456, 2);  -- rounding\nSELECT toDecimalString(-2.9876, 60);  -- more digits required than exist\nSELECT toDecimalString(-2.1456, 2);  -- rounding\nSELECT toDecimalString(64.123::Float32, 10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_to_decimal_string.sql",
    "error": "no viable alternative at input 'SELECT toDecimalString(64.123:'"
  },
  {
    "query": "SELECT toDecimalString(32.345::Decimal32(3), 77);  -- more digits required than exist SELECT toDecimalString(32.456::Decimal32(3), 2);  -- rounding\nSELECT toDecimalString('-64.5671232345'::Decimal64(10), 10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_to_decimal_string.sql",
    "error": "no viable alternative at input 'SELECT toDecimalString(32.345:'"
  },
  {
    "query": "SELECT toDecimalString(64.234::Float64, 10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_to_decimal_string.sql",
    "error": "no viable alternative at input 'SELECT toDecimalString(64.234:'"
  },
  {
    "query": "SELECT toFixedString(toFixedString(toLowCardinality(toFixedString('--------------------', toNullable(20))), toLowCardinality(20)), 20),\n*\nFROM executable('data String', SETTINGS max_command_execution_time = 100); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03006_analyzer_executable_table_function.sql",
    "error": "no viable alternative at input 'SELECT toFixedString(toFixedString(toLowCardinality(toFixedString('--------------------', toNullable(20))), toLowCardinality(20)), 20),\\n*\\nFROM executable('data String', SETTINGS max_command_execution_time'"
  },
  {
    "query": "select toJSONString(c)\nfrom\n(\nselect\ncast(\n(number:: String, null, (number:: String, null)),\n'Tuple(a Nullable(String), b Nullable(Int64), c Tuple(x Nullable(String), y Nullable(Float64)))'\n) as c\nfrom\nnumbers(3)\n)\nsettings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02902_json_skip_null_values.sql",
    "error": "no viable alternative at input 'select toJSONString(c)\\nfrom\\n(\\nselect\\ncast(\\n(number:'"
  },
  {
    "query": "select toJSONString(c)\nfrom\n(\nselect\ncast(\n(number:: String, null, (number:: String, null)),\n'Tuple(a Nullable(String), b Nullable(Int64), c Tuple(x Nullable(String), y Nullable(Float64)))'\n) as c\nfrom\nnumbers(3)\n)\nsettings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02902_json_skip_null_values.sql",
    "error": "no viable alternative at input 'select toJSONString(c)\\nfrom\\n(\\nselect\\ncast(\\n(number:'"
  },
  {
    "query": "SELECT toNullable('2023-02-09'::Date + number * 10) AS d FROM numbers(2) ORDER BY d WITH FILL;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02562_with_fill_nullable.sql",
    "error": "no viable alternative at input 'SELECT toNullable('2023-02-09':'"
  },
  {
    "query": "SELECT toNullable(toNullable(materialize(_CAST(30, 'LowCardinality(UInt8)')))) AS \\`toNullable(toNullable(materialize(toLowCardinality(30))))\\`,\n_CAST(0, 'Date') AS \\`makeDate(-1980.1, -1980.1, 10)\\`,\n_CAST(30, 'LowCardinality(UInt8)') AS \\`toLowCardinality(30)\\`,\n30 AS \\`30\\`,\nmakeDate(materialize(_CAST(30, 'LowCardinality(UInt8)')), 10, _CAST(30, 'Nullable(UInt8)')) AS \\`makeDate(materialize(toLowCardinality(30)), 10, toNullable(toNullable(30)))\\`,\n-1980.1 AS \\`-1980.1\\`\nFROM system.one AS __table1\nGROUP BY\n_CAST(30, 'Nullable(UInt8)'),\n-1980.1,\nmaterialize(30),\n_CAST(30, 'Nullable(UInt8)')\nWITH CUBE\nWITH TOTALS\nSETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03014_analyzer_groupby_fuzz_60317.sql",
    "error": "no viable alternative at input 'SELECT toNullable(toNullable(materialize(_CAST(30, 'LowCardinality(UInt8)')))) AS \\'"
  },
  {
    "query": "SELECT topK('102.4') FROM remote('127.0.0.{1,2}', view(SELECT NULL FROM system.one WHERE dummy = 1));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02984_topk_empty_merge.sql",
    "error": "no viable alternative at input 'SELECT topK('102.4') FROM remote('127.0.0.{1,2}', view(SELECT NULL'"
  },
  {
    "query": "SELECT toStartOfDay(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 10 DAY LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfDay(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT toStartOfDay(d64) as d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL 10 DAY LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfDay(d64) as d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT toStartOfHour(c1) AS _c1,\nc2\nFROM values((toDateTime('2020-01-01 01:01:01'), 999), (toDateTime('2020-01-01 01:01:59'), 1))\nORDER BY\n_c1 ASC,\nc2 ASC\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01321_monotonous_functions_in_order_by_bug.sql",
    "error": "no viable alternative at input 'SELECT toStartOfHour(c1) AS _c1,\\nc2\\nFROM values(('"
  },
  {
    "query": "SELECT toStartOfHour(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 6 HOUR LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfHour(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT toStartOfHour(d64) as d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL 6 HOUR LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfHour(d64) as d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL'"
  },
  {
    "query": "select toStartOfInterval(toDate32('2022-09-16'), INTERVAL 1 HOUR); -- {  serverError ILLEGAL_TYPE_OF_ARGUMENT } select toStartOfInterval(toDate32('2022-09-16'), INTERVAL 1 MINUTE); -- {  serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect toStartOfInterval(toDate32('2022-09-16'), INTERVAL 1 SECOND); -- {  serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect toStartOfInterval(toDate32('2022-09-16'), INTERVAL 1 MILLISECOND); -- {  serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect toStartOfInterval(toDate32('2022-09-16'), INTERVAL 1 MICROSECOND); -- {  serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect toStartOfInterval(toDate32('2022-09-16'), INTERVAL 1 NANOSECOND); -- {  serverError ILLEGAL_TYPE_OF_ARGUMENT }\nselect date_trunc('YEAR', toDate32('2022-09-16'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03230_date_trunc_and_to_start_of_interval_on_date32.sql",
    "error": "no viable alternative at input 'select toStartOfInterval(toDate32('2022-09-16'), INTERVAL 1 MILLISECOND)'"
  },
  {
    "query": "select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123', 3), INTERVAL 1 MILLISECOND); -- In normal range, source scale matches result select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.12', 2), INTERVAL 1 MILLISECOND); -- In normal range, source scale less than result\nselect toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123456', 6), INTERVAL 1 MILLISECOND); -- In normal range, source scale greater than result\nselect toStartOfInterval(a, INTERVAL 1 MILLISECOND) from ( select toDateTime64('1980-12-12 12:12:12.123456', 6) AS a ); -- Non-constant argument\nselect toStartOfInterval(toDateTime64('1930-12-12 12:12:12.123', 3), INTERVAL 1 MILLISECOND); -- Below normal range, source scale matches result\nselect toStartOfInterval(toDateTime64('1930-12-12 12:12:12.12', 2), INTERVAL 1 MILLISECOND); -- Below normal range, source scale less than result\nselect toStartOfInterval(toDateTime64('1930-12-12 12:12:12.123456', 6), INTERVAL 1 MILLISECOND); -- Below normal range, source scale greater than result\nselect toStartOfInterval(toDateTime64('2220-12-12 12:12:12.123', 3), INTERVAL 1 MILLISECOND); -- Above normal range, source scale matches result\nselect toStartOfInterval(toDateTime64('2220-12-12 12:12:12.12', 2), INTERVAL 1 MILLISECOND); -- Above normal range, source scale less than result\nselect toStartOfInterval(toDateTime64('2220-12-12 12:12:12.123456', 6), INTERVAL 1 MILLISECOND); -- Above normal range, source scale greater than result\nSELECT 'test add[...]seconds()';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02207_subseconds_intervals.sql",
    "error": "no viable alternative at input 'select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123', 3), INTERVAL 1 MILLISECOND)'"
  },
  {
    "query": "select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123456', 6), INTERVAL 1 MICROSECOND); -- In normal range, source scale matches result select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.1234', 4), INTERVAL 1 MICROSECOND); -- In normal range, source scale less than result\nselect toStartOfInterval(toDateTime64('1980-12-12 12:12:12.12345678', 8), INTERVAL 1 MICROSECOND); -- In normal range, source scale greater than result\nselect toStartOfInterval(a, INTERVAL 1 MICROSECOND) from ( select toDateTime64('1980-12-12 12:12:12.12345678', 8) AS a ); -- Non-constant argument\nselect toStartOfInterval(toDateTime64('1930-12-12 12:12:12.123456', 6), INTERVAL 1 MICROSECOND); -- Below normal range, source scale matches result\nselect toStartOfInterval(toDateTime64('1930-12-12 12:12:12.1234', 4), INTERVAL 1 MICROSECOND); -- Below normal range, source scale less than result\nselect toStartOfInterval(toDateTime64('1930-12-12 12:12:12.12345678', 8), INTERVAL 1 MICROSECOND); -- Below normal range, source scale greater than result\nselect toStartOfInterval(toDateTime64('2220-12-12 12:12:12.123456', 6), INTERVAL 1 MICROSECOND); -- Above normal range, source scale matches result\nselect toStartOfInterval(toDateTime64('2220-12-12 12:12:12.1234', 4), INTERVAL 1 MICROSECOND); -- Above normal range, source scale less than result\nselect toStartOfInterval(toDateTime64('2220-12-12 12:12:12.12345678', 8), INTERVAL 1 MICROSECOND); -- Above normal range, source scale greater than result\nSELECT '- test milliseconds';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02207_subseconds_intervals.sql",
    "error": "no viable alternative at input 'select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123456', 6), INTERVAL 1 MICROSECOND)'"
  },
  {
    "query": "select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123456789', 9), INTERVAL 1 NANOSECOND); -- In normal range, source scale matches result select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.1234567', 7), INTERVAL 1 NANOSECOND); -- In normal range, source scale less than result\nselect toStartOfInterval(a, INTERVAL 1 NANOSECOND) from ( select toDateTime64('1980-12-12 12:12:12.123456789', 9) AS a ); -- Non-constant argument\nselect toStartOfInterval(toDateTime64('1930-12-12 12:12:12.123456789', 9), INTERVAL 1 NANOSECOND); -- Below normal range, source scale matches result\nselect toStartOfInterval(toDateTime64('1930-12-12 12:12:12.1234567', 7), INTERVAL 1 NANOSECOND); -- Below normal range, source scale less than result\nselect toStartOfInterval(toDateTime64('2220-12-12 12:12:12.123456789', 9), INTERVAL 1 NANOSECOND); -- Above normal range, source scale matches result\nselect toStartOfInterval(toDateTime64('2220-12-12 12:12:12.1234567', 7), INTERVAL 1 NANOSECOND); -- Above normal range, source scale less than result\nSELECT '- test microseconds';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02207_subseconds_intervals.sql",
    "error": "no viable alternative at input 'select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123456789', 9), INTERVAL 1 NANOSECOND)'"
  },
  {
    "query": "SELECT toStartOfMinute(some_time) AS ts FROM\n(\nSELECT toDateTime('2021-07-07 15:21:05') AS some_time\n)\nORDER BY ts ASC WITH FILL FROM toDateTime('2021-07-07 15:21:00') TO toDateTime('2021-07-07 15:21:15') STEP 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02016_order_by_with_fill_monotonic_functions_removal.sql",
    "error": "no viable alternative at input 'SELECT toStartOfMinute(some_time) AS ts FROM\\n(\\nSELECT toDateTime('2021-07-07 15:21:05') AS some_time\\n)\\nORDER BY ts ASC WITH FILL FROM toDateTime'"
  },
  {
    "query": "SELECT toStartOfMonth(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL FROM toDate('2020-01-01')\nTO toDate('2021-01-01')\nSTEP INTERVAL 3 MONTH;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfMonth(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL FROM toDate'"
  },
  {
    "query": "SELECT toStartOfMonth(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 MONTH LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfMonth(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT toStartOfMonth(d) as d, id, count() FROM with_fill_date GROUP BY d, id\nORDER BY\nd WITH FILL\nFROM toDate('2020-01-01')\nTO toDate('2020-05-01')\nSTEP INTERVAL 1 MONTH,\nid WITH FILL FROM 1 TO 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfMonth(d) as d, id, count() FROM with_fill_date GROUP BY d, id\\nORDER BY\\nd WITH FILL\\nFROM toDate'"
  },
  {
    "query": "SELECT toStartOfMonth(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL FROM toDate('2020-01-01')\nTO toDate('2021-01-01')\nSTEP INTERVAL 3 MONTH;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfMonth(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL FROM toDate'"
  },
  {
    "query": "SELECT toStartOfMonth(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL 1 MONTH LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfMonth(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT toStartOfWeek(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 WEEK LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfWeek(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT toStartOfWeek(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL 1 WEEK LIMIT 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02112_with_fill_interval.sql",
    "error": "no viable alternative at input 'SELECT toStartOfWeek(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL'"
  },
  {
    "query": "SELECT toString(1710612085::DateTime);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT toString(1710612085:'"
  },
  {
    "query": "SELECT toString(1710612085::DateTime, 'America/Los_Angeles');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT toString(1710612085:'"
  },
  {
    "query": "SELECT toString(1710612085::DateTime, tz) FROM Values('tz String', 'Europe/Amsterdam', 'America/Los_Angeles');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT toString(1710612085:'"
  },
  {
    "query": "SELECT toTypeName((*,)) FROM multiword_types SETTINGS enable_named_columns_in_function_tuple = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01144_multiword_data_types.sql",
    "error": "no viable alternative at input 'SELECT toTypeName((*,)'"
  },
  {
    "query": "SELECT toTypeName((*,)) FROM unsigned_types SETTINGS enable_named_columns_in_function_tuple = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01144_multiword_data_types.sql",
    "error": "no viable alternative at input 'SELECT toTypeName((*,)'"
  },
  {
    "query": "SELECT toTypeName((1,)), (1,);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01021_tuple_parser.sql",
    "error": "no viable alternative at input 'SELECT toTypeName((1,)'"
  },
  {
    "query": "SELECT toTypeName([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT toTypeName([1.2:'"
  },
  {
    "query": "SELECT toTypeName(a) FROM (SELECT number as a FROM numbers(11)) t1 PASTE JOIN (select number as a from numbers(10)) t2 SETTINGS join_use_nulls = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02933_paste_join.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(a) FROM (SELECT number as a FROM numbers(11)) t1 PASTE JOIN (select number as a from numbers(10)) t2 SETTINGS'"
  },
  {
    "query": "SELECT toTypeName(any(number) RESPECT NULLS) from numbers(1) SETTINGS aggregate_functions_null_for_empty = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(any(number) RESPECT NULLS'"
  },
  {
    "query": "SELECT toTypeName(anyOrNull(number) RESPECT NULLS) from numbers(1);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(anyOrNull(number) RESPECT NULLS'"
  },
  {
    "query": "SELECT toTypeName(arrayProduct([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(arrayProduct([1.2:'"
  },
  {
    "query": "SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int128))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]:'"
  },
  {
    "query": "SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int8))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]:'"
  },
  {
    "query": "SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(UInt128))));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]:'"
  },
  {
    "query": "SELECT toTypeName(arraySum([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02685_decimal256_various.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(arraySum([1.2:'"
  },
  {
    "query": "SELECT toTypeName(bitCount(1::Int128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02736_bit_count_big_int.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(bitCount(1:'"
  },
  {
    "query": "SELECT toTypeName(bitCount(1::Int256));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02736_bit_count_big_int.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(bitCount(1:'"
  },
  {
    "query": "SELECT toTypeName(bitCount(1::UInt128));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02736_bit_count_big_int.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(bitCount(1:'"
  },
  {
    "query": "SELECT toTypeName(bitCount(1::UInt256));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02736_bit_count_big_int.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(bitCount(1:'"
  },
  {
    "query": "SELECT toTypeName(CAST('a', 'Enum(\\\\'a\\\\' = 2, \\\\'b\\\\' = 127)'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00962_enumNotExect.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(CAST('a', 'Enum(\\\\'a\\'"
  },
  {
    "query": "SELECT toTypeName(CAST('a', 'Enum(\\\\'a\\\\' = 2, \\\\'b\\\\' = 128)'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00962_enumNotExect.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(CAST('a', 'Enum(\\\\'a\\'"
  },
  {
    "query": "SELECT toTypeName(d), toTypeName(dt), toTypeName(dtm)\nFROM generateRandom('d Date, dt DateTime(\\\\'UTC\\\\'), dtm DateTime(\\\\'UTC\\\\')')\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(d), toTypeName(dt), toTypeName(dtm)\\nFROM generateRandom('d Date, dt DateTime(\\\\'UTC'"
  },
  {
    "query": "SELECT toTypeName(dt64), toTypeName(dts64), toTypeName(dtms64)\nFROM generateRandom('dt64 DateTime64(3, \\\\'UTC\\\\'), dts64 DateTime64(6, \\\\'UTC\\\\'), dtms64 DateTime64(6 ,\\\\'UTC\\\\')')\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(dt64), toTypeName(dts64), toTypeName(dtms64)\\nFROM generateRandom('dt64 DateTime64(3, \\\\'UTC'"
  },
  {
    "query": "SELECT toTypeName(first_valueIfState(number, isNull(number)) RESPECT NULLS) from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(first_valueIfState(number, isNull(number)) RESPECT NULLS'"
  },
  {
    "query": "SELECT toTypeName(getSubcolumn(tuple('str')::Tuple(a LowCardinality(String)), 'a')) ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03237_get_subcolumn_low_cardinality_column.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(getSubcolumn(tuple('str'):'"
  },
  {
    "query": "SELECT toTypeName(i)\nFROM generateRandom('i Array(Nullable(Enum8(\\\\'hello\\\\' = 1, \\\\'world\\\\' = 5)))')\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(i)\\nFROM generateRandom('i Array(Nullable(Enum8(\\\\'hello'"
  },
  {
    "query": "SELECT toTypeName(i)\nFROM generateRandom('i Enum8(\\\\'hello\\\\' = 1, \\\\'world\\\\' = 5)')\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(i)\\nFROM generateRandom('i Enum8(\\\\'hello'"
  },
  {
    "query": "SELECT toTypeName(i)s\nFROM generateRandom('i Nullable(Enum16(\\\\'h\\\\' = 1, \\\\'w\\\\' = 5 , \\\\'o\\\\' = -200))')\nLIMIT 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01087_table_function_generate.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(i)s\\nFROM generateRandom('i Nullable(Enum16(\\\\'h'"
  },
  {
    "query": "SELECT toTypeName(last_valueIfState(number, isNull(number)) RESPECT NULLS) from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02922_respect_nulls_extensive.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(last_valueIfState(number, isNull(number)) RESPECT NULLS'"
  },
  {
    "query": "select toTypeName(res), if(0, [1,2,3], 'str_1'::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(0, [1,2,3], 'str_1':'"
  },
  {
    "query": "select toTypeName(res), if(0, [1,2,3], materialize('str_1')::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(0, [1,2,3], materialize('str_1'):'"
  },
  {
    "query": "select toTypeName(res), if(0, materialize([1,2,3]), 'str_1'::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(0, materialize([1,2,3]), 'str_1':'"
  },
  {
    "query": "select toTypeName(res), if(0, range(number + 1), ('str_' || toString(number))::Nullable(String)) as res from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(0, range(number + 1), ('str_' || toString(number)):'"
  },
  {
    "query": "select toTypeName(res), if(1, [1,2,3], 'str_1'::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(1, [1,2,3], 'str_1':'"
  },
  {
    "query": "select toTypeName(res), if(1, [1,2,3], materialize('str_1')::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(1, [1,2,3], materialize('str_1'):'"
  },
  {
    "query": "select toTypeName(res), if(1, materialize([1,2,3]), 'str_1'::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(1, materialize([1,2,3]), 'str_1':'"
  },
  {
    "query": "select toTypeName(res), if(1, range(number + 1), ('str_' || toString(number))::Nullable(String)) as res from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(1, range(number + 1), ('str_' || toString(number)):'"
  },
  {
    "query": "select toTypeName(res), if(materialize(NULL::Nullable(UInt8)), [1,2,3], 'str_1') as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(materialize(NULL:'"
  },
  {
    "query": "select toTypeName(res), if(materialize(NULL::Nullable(UInt8)), [1,2,3], 'str_1'::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(materialize(NULL:'"
  },
  {
    "query": "select toTypeName(res), if(materialize(NULL::Nullable(UInt8)), [1,2,3], materialize('str_1')) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(materialize(NULL:'"
  },
  {
    "query": "select toTypeName(res), if(materialize(NULL::Nullable(UInt8)), [1,2,3], materialize('str_1')::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(materialize(NULL:'"
  },
  {
    "query": "select toTypeName(res), if(materialize(NULL::Nullable(UInt8)), materialize([1,2,3]), 'str_1') as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(materialize(NULL:'"
  },
  {
    "query": "select toTypeName(res), if(materialize(NULL::Nullable(UInt8)), materialize([1,2,3]), 'str_1'::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(materialize(NULL:'"
  },
  {
    "query": "select toTypeName(res), if(materialize(NULL::Nullable(UInt8)), range(number + 1), 'str_' || toString(number)) as res from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(materialize(NULL:'"
  },
  {
    "query": "select toTypeName(res), if(materialize(NULL::Nullable(UInt8)), range(number + 1), ('str_' || toString(number))::Nullable(String)) as res from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(materialize(NULL:'"
  },
  {
    "query": "select toTypeName(res), if(NULL, [1,2,3], 'str_1'::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(NULL, [1,2,3], 'str_1':'"
  },
  {
    "query": "select toTypeName(res), if(NULL, [1,2,3], materialize('str_1')::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(NULL, [1,2,3], materialize('str_1'):'"
  },
  {
    "query": "select toTypeName(res), if(NULL, materialize([1,2,3]), 'str_1'::Nullable(String)) as res;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(NULL, materialize([1,2,3]), 'str_1':'"
  },
  {
    "query": "select toTypeName(res), if(NULL, range(number + 1), ('str_' || toString(number))::Nullable(String)) as res from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(NULL, range(number + 1), ('str_' || toString(number)):'"
  },
  {
    "query": "select toTypeName(res), if(number % 2, range(number + 1), ('str_' || toString(number))::LowCardinality(Nullable(String))) as res from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(number % 2, range(number + 1), ('str_' || toString(number)):'"
  },
  {
    "query": "select toTypeName(res), if(number % 2, range(number + 1), ('str_' || toString(number))::LowCardinality(String)) as res from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(number % 2, range(number + 1), ('str_' || toString(number)):'"
  },
  {
    "query": "select toTypeName(res), if(number % 2, range(number + 1), ('str_' || toString(number))::Nullable(String)) as res from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), if(number % 2, range(number + 1), ('str_' || toString(number)):'"
  },
  {
    "query": "select toTypeName(res), multiIf(number % 3 == 0, range(number + 1), number % 3 == 1, number,  ('str_' || toString(number))::Nullable(String)) as res from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), multiIf(number % 3 == 0, range(number + 1), number % 3 == 1, number,  ('str_' || toString(number)):'"
  },
  {
    "query": "select toTypeName(res), multiIf(number % 3 == 0, range(number + 1), number % 3 == 1, number, ('str_' || toString(number))::LowCardinality(Nullable(String))) as res from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), multiIf(number % 3 == 0, range(number + 1), number % 3 == 1, number, ('str_' || toString(number)):'"
  },
  {
    "query": "select toTypeName(res), multiIf(number % 3 == 0, range(number + 1), number % 3 == 1, number, ('str_' || toString(number))::LowCardinality(String)) as res from numbers(6);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02944_variant_as_common_type_analyzer.sql",
    "error": "no viable alternative at input 'select toTypeName(res), multiIf(number % 3 == 0, range(number + 1), number % 3 == 1, number, ('str_' || toString(number)):'"
  },
  {
    "query": "SELECT toTypeName(snowflakeIDToDateTime(123::UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01942_snowflakeIDToDateTime.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(snowflakeIDToDateTime(123:'"
  },
  {
    "query": "SELECT toTypeName(snowflakeIDToDateTime64(123::UInt64));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01942_snowflakeIDToDateTime.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(snowflakeIDToDateTime64(123:'"
  },
  {
    "query": "SELECT toTypeName(sumCount(number::Int8)), sumCount(number::Int8) FROM numbers(120);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(number:'"
  },
  {
    "query": "SELECT toTypeName(sumCount(number::UInt8)), sumCount(number::UInt8) FROM numbers(250);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(number:'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n\t(\nSELECT '9007199254740992'::LowCardinality(UInt64) AS v\nUNION ALL\nSELECT '1'::LowCardinality(UInt64) AS v\nUNION ALL\nSELECT '1'::LowCardinality(UInt64) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n\\t(\\nSELECT '9007199254740992':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '16777216'::Float32 AS v\nUNION ALL\nSELECT '1'::Float32 AS v\nUNION ALL\nSELECT '1'::Float32 AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '16777216':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '16777216'::LowCardinality(Float32) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Float32) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Float32) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '16777216':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '16777216'::LowCardinality(Nullable(Float32)) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Nullable(Float32)) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Nullable(Float32)) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '16777216':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '16777216'::Nullable(Float32) AS v\nUNION ALL\nSELECT '1'::Nullable(Float32) AS v\nUNION ALL\nSELECT '1'::Nullable(Float32) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '16777216':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '9007199254740992'::Float64 AS v\nUNION ALL\nSELECT '1'::Float64 AS v\nUNION ALL SELECT '1'::Float64 AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '9007199254740992':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '9007199254740992'::LowCardinality(Float64) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Float64) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Float64) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '9007199254740992':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '9007199254740992'::LowCardinality(Nullable(Float64)) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Nullable(Float64)) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Nullable(Float64)) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '9007199254740992':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '9007199254740992'::LowCardinality(Nullable(UInt64)) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Nullable(UInt64)) AS v\nUNION ALL\nSELECT '1'::LowCardinality(Nullable(UInt64)) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '9007199254740992':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '9007199254740992'::Nullable(Float64) AS v\nUNION ALL\nSELECT '1'::Nullable(Float64) AS v\nUNION ALL\nSELECT '1'::Nullable(Float64) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '9007199254740992':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '9007199254740992'::Nullable(UInt64) AS v\nUNION ALL\nSELECT '1'::Nullable(UInt64) AS v\nUNION ALL\nSELECT '1'::Nullable(UInt64) AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '9007199254740992':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\nSELECT v FROM\n(\nSELECT '9007199254740992'::UInt64 AS v\nUNION ALL\nSELECT '1'::UInt64 AS v\nUNION ALL SELECT '1'::UInt64 AS v\n)\nORDER BY v\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (\\nSELECT v FROM\\n(\\nSELECT '9007199254740992':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1'::Int128 AS v FROM numbers(100));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1'::Int256 AS v FROM numbers(100));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1'::UInt128 AS v FROM numbers(100));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1'::UInt256 AS v FROM numbers(100));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1.001'::Decimal(3, 3) AS v FROM numbers(100));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1.001':'"
  },
  {
    "query": "SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT 'a'::String AS v); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT now()::DateTime AS v); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT sumCountIf(n, n > 10) FROM (SELECT number AS n FROM system.numbers LIMIT 100 );",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02119_sumcount.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT 'a':'"
  },
  {
    "query": "SELECT toTypeName(topKDistinctState(toNullable(10))(toString(number)) IGNORE NULLS) FROM numbers(100) GROUP BY tuple((map((materialize(toNullable(1)), 2), 4, (3, 4), 5), 3)), map((1, 2), 4, (3, 4), toNullable(5)) WITH CUBE WITH TOTALS FORMAT Null ",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03173_distinct_combinator_alignment.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(topKDistinctState(toNullable(10))(toString(number)) IGNORE NULLS'"
  },
  {
    "query": "SELECT toTypeName(variantType(v::Variant(UInt64, String, Array(UInt64), Date))) from test limit 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02981_variant_type_function.sql",
    "error": "no viable alternative at input 'SELECT toTypeName(variantType(v:'"
  },
  {
    "query": "select toTypeName(x), x FROM m_table SETTINGS additional_table_filters = {'m_table':'x != 4'}, optimize_move_to_prewhere=1, enable_analyzer=1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03033_analyzer_merge_engine_filter_push_down.sql",
    "error": "no viable alternative at input 'select toTypeName(x), x FROM m_table SETTINGS additional_table_filters = {'"
  },
  {
    "query": "SELECT toTypeName({id: Int64}), toTypeName({arr: Array(UInt8)}), toTypeName({map_2: Map(String, UInt8)}), toTypeName({mul_arr: Array(Array(UInt8))}), toTypeName({map_arr: Map(UInt8, Array(UInt8))}), toTypeName({map_map_arr: Map(String, Map(String, Array(UInt8)))});",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT toTypeName({'"
  },
  {
    "query": "SELECT toTypeName({num:UInt64}), toTypeName({str:String}), toTypeName({date:DateTime}), toTypeName({map:Map(UUID, Array(Float32))});",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT toTypeName({'"
  },
  {
    "query": "SELECT toUInt64(dense_rank(1) OVER (ORDER BY 100 ASC GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) FROM numbers(10); -- { serverError NOT_IMPLEMENTED } SET enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02478_window_frame_type_groups.sql",
    "error": "no viable alternative at input 'SELECT toUInt64(dense_rank(1) OVER (ORDER BY 100 ASC GROUPS'"
  },
  {
    "query": "SELECT toUInt8(assumeNotNull(cast(cast(NULL, 'Nullable(String)'), 'Nullable(Enum8(\\\\'Hello\\\\' = 1))')));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01761_cast_to_enum_nullable.sql",
    "error": "no viable alternative at input 'SELECT toUInt8(assumeNotNull(cast(cast(NULL, 'Nullable(String)'), 'Nullable(Enum8(\\\\'Hello\\'"
  },
  {
    "query": "SELECT toUInt8OrNull('123'::FixedString(4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT toUInt8OrNull('123':'"
  },
  {
    "query": "SELECT toUInt8OrNull('123\\\\0'::FixedString(4));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03011_definitive_guide_to_cast.sql",
    "error": "no viable alternative at input 'SELECT toUInt8OrNull('123\\\\0':'"
  },
  {
    "query": "SELECT transform(name, ['a', 'b'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02832_transform_fixed_string_no_default.sql",
    "error": "no viable alternative at input 'SELECT transform(name, ['a', 'b'], ['', NULL]) AS name FROM (SELECT 'test':'"
  },
  {
    "query": "SELECT transform(name, ['a', 'test'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02832_transform_fixed_string_no_default.sql",
    "error": "no viable alternative at input 'SELECT transform(name, ['a', 'test'], ['', NULL]) AS name FROM (SELECT 'test':'"
  },
  {
    "query": "SELECT transform(name, ['test', 'b'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02832_transform_fixed_string_no_default.sql",
    "error": "no viable alternative at input 'SELECT transform(name, ['test', 'b'], ['', NULL]) AS name FROM (SELECT 'test':'"
  },
  {
    "query": "SELECT transform(number, [], [], 'Hello ' || number::String) FROM numbers(10);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02799_transform_empty_arrays.sql",
    "error": "no viable alternative at input 'SELECT transform(number, [], [], 'Hello ' || number:'"
  },
  {
    "query": "SELECT transform(number, NULL, ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } EXPLAIN SYNTAX SELECT transform(number, NULL, ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nEXPLAIN QUERY TREE run_passes = 1 SELECT transform(number, NULL, ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSET optimize_if_transform_strings_to_enum = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02497_if_transform_strings_to_enum.sql",
    "error": "no viable alternative at input 'EXPLAIN QUERY TREE run_passes'"
  },
  {
    "query": "SELECT translate('aaa'::FixedString(10), 'a','A');",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02981_translate_fixedstring.sql",
    "error": "no viable alternative at input 'SELECT translate('aaa':'"
  },
  {
    "query": "SELECT translate(number::String::FixedString(1), '0','A') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02981_translate_fixedstring.sql",
    "error": "no viable alternative at input 'SELECT translate(number:'"
  },
  {
    "query": "SELECT trim(BOTH 'a' arg_1 FROM 'abca' arg_2), arg_1, arg_2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_special_operator_parse_alias_check.sql",
    "error": "no viable alternative at input 'SELECT trim(BOTH 'a' arg_1'"
  },
  {
    "query": "SELECT trim(BOTH 'a' AS arg_1 FROM 'abca' AS arg_2), arg_1, arg_2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_special_operator_parse_alias_check.sql",
    "error": "no viable alternative at input 'SELECT trim(BOTH 'a' AS'"
  },
  {
    "query": "SELECT trim(explain) == 'Asterisk' FROM (EXPLAIN AST SELECT * FROM system.numbers LIMIT 10) WHERE explain LIKE '%Asterisk%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02421_explain_subquery.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) == 'Asterisk' FROM (EXPLAIN AST'"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE endsWith(message, ' eady')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE endsWith(message, 'eady')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE match(message, ' xyz ')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE match(message, 'no')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', ' yz '])\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', 'yz'])\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, ['ce', 'no'])\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv i')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE endsWith(message, ' eady')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE endsWith(message, 'eady')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE match(message, ' xyz ')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE match(message, 'no')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', ' yz '])\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', 'yz'])\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, ['ce', 'no'])\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv i')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM (\nEXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv')\n)\nWHERE explain LIKE '%Parts:%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM (\\nEXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(explain) FROM ( EXPLAIN indexes = 1 SELECT * FROM skip_table WHERE v = 125) WHERE explain like '%Name%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03000_minmax_index_first.sql",
    "error": "no viable alternative at input 'SELECT trim(explain) FROM ( EXPLAIN indexes ='"
  },
  {
    "query": "SELECT trim(LEADING 'a' arg_1 FROM 'abca' arg_2), arg_1, arg_2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_special_operator_parse_alias_check.sql",
    "error": "no viable alternative at input 'SELECT trim(LEADING 'a' arg_1'"
  },
  {
    "query": "SELECT trim(LEADING 'a' arg_1 FROM 'abca'), arg_1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_special_operator_parse_alias_check.sql",
    "error": "no viable alternative at input 'SELECT trim(LEADING 'a' arg_1'"
  },
  {
    "query": "SELECT trim(LEADING 'a' AS arg_1 FROM 'abca' AS arg_2), arg_1, arg_2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_special_operator_parse_alias_check.sql",
    "error": "no viable alternative at input 'SELECT trim(LEADING 'a' AS'"
  },
  {
    "query": "SELECT trim(LEADING 'a' AS arg_1 FROM 'abca'), arg_1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_special_operator_parse_alias_check.sql",
    "error": "no viable alternative at input 'SELECT trim(LEADING 'a' AS'"
  },
  {
    "query": "SELECT trim(TRAILING 'a' arg_1 FROM 'abca' arg_2), arg_1, arg_2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_special_operator_parse_alias_check.sql",
    "error": "no viable alternative at input 'SELECT trim(TRAILING 'a' arg_1'"
  },
  {
    "query": "SELECT trim(TRAILING 'a' AS arg_1 FROM 'abca' AS arg_2), arg_1, arg_2;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02267_special_operator_parse_alias_check.sql",
    "error": "no viable alternative at input 'SELECT trim(TRAILING 'a' AS'"
  },
  {
    "query": "SELECT trimBoth(explain) FROM\n(\nEXPLAIN actions=1 SELECT\ncheck_start_time,\ncheck_name,\ntest_name,\ntest_status,\ncheck_status\nFROM checks\nWHERE 1 AND (test_status != 'SKIPPED') AND (test_status != 'OK') AND (check_status != 'success') AND (test_name ILIKE '%parallel_replicas%')\nORDER BY\ncheck_start_time DESC,\ncheck_name ASC,\ntest_name ASC\nSETTINGS query_plan_read_in_order = 1, optimize_read_in_order = 1, max_parallel_replicas = 1\n)\nWHERE explain LIKE '%InReverseOrder%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03231_pr_reverse_in_order.sql",
    "error": "no viable alternative at input 'SELECT trimBoth(explain) FROM\\n(\\nEXPLAIN actions='"
  },
  {
    "query": "select trimBoth(explain) from (explain pipeline select distinct a from t) where explain like '%InOrder%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02676_distinct_reading_in_order_analyzer.sql",
    "error": "no viable alternative at input 'select trimBoth(explain) from (explain pipeline'"
  },
  {
    "query": "select trimBoth(explain) from (explain select count() from m3) where explain like '%ReadFromPreparedSource (Optimized trivial count)%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02674_trivial_count_analyzer.sql",
    "error": "no viable alternative at input 'select trimBoth(explain) from (explain select'"
  },
  {
    "query": "select trimBoth(explain) from (explain select count() from replacing_m3) where explain like '%ReadFromPreparedSource (Optimized trivial count)%';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02674_trivial_count_analyzer.sql",
    "error": "no viable alternative at input 'select trimBoth(explain) from (explain select'"
  },
  {
    "query": "select trimLeft(explain) from (explain SELECT count(1) FROM checks WHERE test_name IS NOT NULL) where explain like '%ReadFromPreparedSource%' SETTINGS enable_analyzer = 1, enable_parallel_replicas = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03164_early_constant_folding_analyzer.sql",
    "error": "no viable alternative at input 'select trimLeft(explain) from (explain SELECT'"
  },
  {
    "query": "SELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 11 MONTH) OVER (PARTITION BY metric ORDER BY ts, metric ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS deriv FROM nnd; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } SELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 12 QUARTER) OVER (PARTITION BY metric ORDER BY ts, metric ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS deriv FROM nnd; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 13 YEAR) OVER (PARTITION BY metric ORDER BY ts, metric ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS deriv FROM nnd; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT ts, metric, nonNegativeDerivative(metric, 1, INTERVAL 3 NANOSECOND) OVER (PARTITION BY metric ORDER BY ts, metric ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS deriv FROM nnd; -- { serverError BAD_ARGUMENTS }\nSELECT ts, metric, nonNegativeDerivative('string not datetime', ts, INTERVAL 3 NANOSECOND) OVER (PARTITION BY metric ORDER BY ts, metric ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS deriv FROM nnd; -- { serverError BAD_ARGUMENTS }\nSELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 3 NANOSECOND, id) OVER (PARTITION BY metric ORDER BY ts, metric ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS deriv FROM nnd; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\nSELECT ts, metric, nonNegativeDerivative(metric) OVER (PARTITION BY metric ORDER BY ts, metric ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS deriv FROM nnd; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\nDROP TABLE IF EXISTS nnd;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_non_negative_derivative.sql",
    "error": "no viable alternative at input 'SELECT ts, metric, nonNegativeDerivative(metric, 1, INTERVAL 3 NANOSECOND)'"
  },
  {
    "query": "SELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 3 NANOSECOND) OVER (PARTITION BY id>3 ORDER BY ts, metric ASC Rows BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS deriv FROM nnd;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_non_negative_derivative.sql",
    "error": "no viable alternative at input 'SELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 3 NANOSECOND)'"
  },
  {
    "query": "SELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 4 MICROSECOND) OVER (PARTITION BY id>3 ORDER BY ts, metric ASC Rows BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS deriv FROM nnd;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_non_negative_derivative.sql",
    "error": "no viable alternative at input 'SELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 4 MICROSECOND)'"
  },
  {
    "query": "SELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 5 MILLISECOND) OVER (PARTITION BY id>3 ORDER BY ts, metric ASC Rows BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS deriv FROM nnd;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_non_negative_derivative.sql",
    "error": "no viable alternative at input 'SELECT ts, metric, nonNegativeDerivative(metric, ts, INTERVAL 5 MILLISECOND)'"
  },
  {
    "query": "SELECT tuple(), 0 FROM numbers(1) SETTINGS use_query_cache = true;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02494_query_cache_empty_tuple.sql",
    "error": "no viable alternative at input 'SELECT tuple(), 0 FROM numbers(1) SETTINGS use_query_cache = true'"
  },
  {
    "query": "SELECT tuple(1, 'a').*;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_4.sql",
    "error": "no viable alternative at input 'SELECT tuple(1, 'a').*'"
  },
  {
    "query": "SELECT u, s FROM t INNER JOIN ( SELECT number :: Int32 AS u FROM numbers(10) ) AS t1\nUSING (u)\nWHERE u != 2\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02988_join_using_prewhere_pushdown.sql",
    "error": "no viable alternative at input 'SELECT u, s FROM t INNER JOIN ( SELECT number :'"
  },
  {
    "query": "SELECT u, s, toTypeName(u) FROM t FULL JOIN ( SELECT number :: UInt32 AS u FROM numbers(10) ) AS t1\nUSING (u)\nWHERE u == 2\nORDER BY 1\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02988_join_using_prewhere_pushdown.sql",
    "error": "no viable alternative at input 'SELECT u, s, toTypeName(u) FROM t FULL JOIN ( SELECT number :'"
  },
  {
    "query": "select uniqExact(m) from (select number, (number / 2)::UInt64 as m from numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02152_count_distinct_optimization.sql",
    "error": "no viable alternative at input 'select uniqExact(m) from (select number, (number / 2):'"
  },
  {
    "query": "select untuple((* except (b),)) from (select 1 a, 2 b, 3 c);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01232_untuple.sql",
    "error": "no viable alternative at input 'select untuple((* except ('"
  },
  {
    "query": "SELECT untuple((1, 2, 3, b)) AS \\`ut\\`, untuple((NULL, 3, 2, a)) AS \\`ut2\\` FROM (SELECT 1 AS a, NULL AS b) FORMAT TSVWithNames;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02113_untuple_func_alias.sql",
    "error": "no viable alternative at input 'SELECT untuple((1, 2, 3, b)) AS \\'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(a Int)) x, untuple(tuple('s')::Tuple(a String)) y FORMAT Vertical SETTINGS enable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(a Int)) x, untuple(tuple('s')::Tuple(a String)) y FORMAT Vertical SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(a Int)) x, untuple(tuple(1)::Tuple(a Int)) x FORMAT Vertical SETTINGS enable_analyzer = 0; -- { serverError DUPLICATE_COLUMN } SELECT untuple(tuple(1)::Tuple(a Int)) x, untuple(tuple(1)::Tuple(a Int)) x FORMAT Vertical SETTINGS enable_analyzer = 1; -- Bug: doesn't throw an exception\nSELECT '-- untuple() alias';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(a Int)), untuple(tuple('s')::Tuple(a String)) FORMAT Vertical SETTINGS enable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(a Int)), untuple(tuple('s')::Tuple(a String)) FORMAT Vertical SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(a Int)), untuple(tuple(1)::Tuple(a Int)) FORMAT Vertical SETTINGS enable_analyzer = 0; -- { serverError DUPLICATE_COLUMN } SELECT untuple(tuple(1)::Tuple(a Int)), untuple(tuple(1)::Tuple(a Int)) FORMAT Vertical SETTINGS enable_analyzer = 1; -- Bug: doesn't throw an exception\nSELECT '-- tuple element alias + untuple() alias';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(Int)) x, untuple(tuple('s')::Tuple(String)) y FORMAT Vertical SETTINGS enable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(Int)) x, untuple(tuple('s')::Tuple(String)) y FORMAT Vertical SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(Int)) x, untuple(tuple(1)::Tuple(Int)) x FORMAT Vertical SETTINGS enable_analyzer = 0; -- { serverError DUPLICATE_COLUMN } SELECT untuple(tuple(1)::Tuple(Int)) x, untuple(tuple(1)::Tuple(Int)) x FORMAT Vertical SETTINGS enable_analyzer = 1; -- Bug: doesn't throw an exception\nSELECT '-- no aliases';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(Int)), untuple(tuple('s')::Tuple(String)) FORMAT Vertical SETTINGS enable_analyzer = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(Int)), untuple(tuple('s')::Tuple(String)) FORMAT Vertical SETTINGS enable_analyzer = 1;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT untuple(tuple(1)::Tuple(Int)), untuple(tuple(1)::Tuple(Int)) FORMAT Vertical SETTINGS enable_analyzer = 0; -- { serverError DUPLICATE_COLUMN } SELECT untuple(tuple(1)::Tuple(Int)), untuple(tuple(1)::Tuple(Int)) FORMAT Vertical SETTINGS enable_analyzer = 1; -- Bug: doesn't throw an exception\nSELECT '-- tuple() loses the column names (would be good to fix, see #36773)';",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02890_untuple_column_names.sql",
    "error": "no viable alternative at input 'SELECT untuple(tuple(1):'"
  },
  {
    "query": "SELECT UserID,\nUserID = 0,\nif(UserID = 0, 'delete', 'leave')\nFROM VALUES('UserID Nullable(UInt8)', (2), (0), (NULL));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01374_if_nullable_filimonov.sql",
    "error": "no viable alternative at input 'SELECT UserID,\\nUserID = 0,\\nif(UserID = 0, 'delete', 'leave')\\nFROM VALUES('UserID Nullable(UInt8)', ('"
  },
  {
    "query": "SELECT v_date AS vDate,\nround(sum(v_share)) AS v_sum\nFROM\n(\nWITH\n(\nSELECT rand() % 10000\n) AS dummy_1,\n(\nSELECT rand() % 10000\n) AS dummy_2,\n(\nSELECT rand() % 10000\n) AS dummy_3,\n_v AS\n(\nSELECT\nxxHash64(rand()) % 100000 AS d_id,\ntoDate(parseDateTimeBestEffort('2022-01-01') + (rand() % 2600000)) AS v_date\nFROM numbers(1000000)\nORDER BY d_id ASC\n),\n_i AS\n(\nSELECT xxHash64(rand()) % 40000 AS d_id\nFROM numbers(1000000)\n),\nnot_i AS\n(\nSELECT\nNULL AS v_date,\nd_id,\n0 AS v_share\nFROM _i\nLIMIT 100\n)\nSELECT *\nFROM\n(\nSELECT\nd_id,\nv_date,\nv_share\nFROM not_i\nUNION ALL\nSELECT\nd_id,\nv_date,\n1 AS v_share\nFROM\n(\nSELECT\nd_id,\narrayJoin(groupArray(v_date)) AS v_date\nFROM\n(\nSELECT\nv_date,\nd_id\nFROM _v\nUNION ALL\nSELECT\nNULL AS v_date,\nd_id\nFROM _i\n)\nGROUP BY d_id\n)\n)\nWHERE (v_date >= '2022-05-08') AND (v_date <= '2022-06-07')\n)\nGROUP BY vDate\nORDER BY vDate ASC\nSETTINGS enable_analyzer = 1; -- the query times out if enable_analyzer = 0\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03093_bug37909_query_does_not_finish.sql",
    "error": "no viable alternative at input 'SELECT v_date AS vDate,\\nround(sum(v_share)) AS v_sum\\nFROM\\n(\\nWITH\\n(\\nSELECT rand() % 10000\\n) AS dummy_1,\\n(\\nSELECT rand() % 10000\\n) AS dummy_2,\\n(\\nSELECT rand() % 10000\\n) AS dummy_3,\\n_v AS\\n('"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 0.5, 50) AS bar\nFROM\n(\nSELECT\n(number % 5) = 0 AS value,\nnumber AS time,\nexponentialTimeDecayedAvg(100)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 0.5, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number % 5) = 0 AS value,\\nnumber AS time,\\nexponentialTimeDecayedAvg(100)(value, time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 1, 50) AS bar\nFROM\n(\nSELECT\n(number % 5) = 0 AS value,\nnumber AS time,\nexponentialMovingAverage(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 1, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number % 5) = 0 AS value,\\nnumber AS time,\\nexponentialMovingAverage(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 1, 50) AS bar\nFROM\n(\nSELECT\n(number % 5) = 0 AS value,\nnumber AS time,\nexponentialTimeDecayedMax(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 1, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number % 5) = 0 AS value,\\nnumber AS time,\\nexponentialTimeDecayedMax(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 1, 50) AS bar\nFROM\n(\nSELECT\n(number % 5) = 0 AS value,\nnumber AS time,\nexponentialTimeDecayedSum(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 1, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number % 5) = 0 AS value,\\nnumber AS time,\\nexponentialTimeDecayedSum(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 1, 50) AS bar\nFROM\n(\nSELECT\n(number = 0) OR (number >= 25) AS value,\nnumber AS time,\nexponentialMovingAverage(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 1, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number = 0) OR (number >= 25) AS value,\\nnumber AS time,\\nexponentialMovingAverage(10)(value, time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 10, 50) AS bar\nFROM\n(\nSELECT\n(number = 0) OR (number >= 25) AS value,\nnumber AS time,\nexponentialTimeDecayedCount(5)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 10, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number = 0) OR (number >= 25) AS value,\\nnumber AS time,\\nexponentialTimeDecayedCount(5)(time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 10, 50) AS bar\nFROM\n(\nSELECT\n(number = 0) OR (number >= 25) AS value,\nnumber AS time,\nexponentialTimeDecayedMax(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 10, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number = 0) OR (number >= 25) AS value,\\nnumber AS time,\\nexponentialTimeDecayedMax(10)(value, time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 10, 50) AS bar\nFROM\n(\nSELECT\n(number = 0) OR (number >= 25) AS value,\nnumber AS time,\nexponentialTimeDecayedSum(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 10, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number = 0) OR (number >= 25) AS value,\\nnumber AS time,\\nexponentialTimeDecayedSum(10)(value, time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 20, 50) AS bar\nFROM\n(\nSELECT\n(number % 5) = 0 AS value,\nnumber AS time,\nexponentialTimeDecayedCount(10)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 20, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number % 5) = 0 AS value,\\nnumber AS time,\\nexponentialTimeDecayedCount(10)(time) OVER'"
  },
  {
    "query": "SELECT value,\ntime,\nround(exp_smooth, 3),\nbar(exp_smooth, 0, 5, 50) AS bar\nFROM\n(\nSELECT\n(number = 0) OR (number >= 25) AS value,\nnumber AS time,\nexponentialTimeDecayedAvg(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth\nFROM numbers(50)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value,\\ntime,\\nround(exp_smooth, 3),\\nbar(exp_smooth, 0, 5, 50) AS bar\\nFROM\\n(\\nSELECT\\n(number = 0) OR (number >= 25) AS value,\\nnumber AS time,\\nexponentialTimeDecayedAvg(10)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialMovingAverage(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialMovingAverage(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialMovingAverage(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialMovingAverage(10)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedAvg(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedAvg(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedAvg(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedAvg(10)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedCount(1)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedCount(1)(time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedCount(10)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedCount(10)(time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedMax(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedMax(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedMax(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedMax(10)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedSum(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedSum(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedSum(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedSum(10)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialMovingAverage(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialMovingAverage(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedAvg(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedAvg(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedCount(1)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedCount(1)(time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedMax(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedMax(1)(value, time) OVER'"
  },
  {
    "query": "SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedSum(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedSum(1)(value, time) OVER'"
  },
  {
    "query": "select variantElement((number % 2 ? NULL : 'str_' || toString(number))::LowCardinality(Nullable(String))::Variant(LowCardinality(String), UInt64), 'LowCardinality(String)') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement((number % 2 ? NULL : 'str_' || toString(number)):'"
  },
  {
    "query": "select variantElement((number % 2 ? NULL : number)::Variant(Array(UInt64), UInt64), 'Array(UInt64)') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement((number % 2 ? NULL : number):'"
  },
  {
    "query": "select variantElement((number % 2 ? NULL : number)::Variant(String, UInt64), 'String') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement((number % 2 ? NULL : number):'"
  },
  {
    "query": "select variantElement((number % 2 ? NULL : number)::Variant(String, UInt64), 'UInt64') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement((number % 2 ? NULL : number):'"
  },
  {
    "query": "select variantElement([[(number % 2 ? NULL : number)::Variant(String, UInt64)]], 'UInt64') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement([[(number % 2 ? NULL : number):'"
  },
  {
    "query": "select variantElement(NULL::LowCardinality(Nullable(String))::Variant(LowCardinality(String), UInt64), 'LowCardinality(String)') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement(NULL:'"
  },
  {
    "query": "select variantElement(NULL::Variant(Array(UInt64), UInt64), 'Array(UInt64)') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement(NULL:'"
  },
  {
    "query": "select variantElement(NULL::Variant(String, UInt64), 'UInt64') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement(NULL:'"
  },
  {
    "query": "select variantElement(number::Variant(String, UInt64), 'String') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement(number:'"
  },
  {
    "query": "select variantElement(number::Variant(String, UInt64), 'UInt64') from numbers(4);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02943_variant_element.sql",
    "error": "no viable alternative at input 'select variantElement(number:'"
  },
  {
    "query": "SELECT variantType() FROM test; -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH} SELECT variantType(v, v) FROM test; -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nSELECT variantType(v.String) FROM test; -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT variantType(v::Variant(UInt64, String, Array(UInt64), Date)) as type FROM test;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02981_variant_type_function.sql",
    "error": "no viable alternative at input 'SELECT variantType(v:'"
  },
  {
    "query": "SELECT view(SELECT 1); -- { clientError SYNTAX_ERROR } SELECT sumIf(dummy, dummy) FROM remote('127.0.0.{1,2}', numbers(2, 100), view(SELECT CAST(NULL, 'Nullable(UInt8)') AS dummy FROM system.one)); -- { serverError UNKNOWN_FUNCTION }\n",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01715_table_function_view_fix.sql",
    "error": "no viable alternative at input 'SELECT view(SELECT 1'"
  },
  {
    "query": "SELECT x + 1 FROM tab WHERE (x + 1::LowCardinality(UInt8)) <= -9223372036854775808 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT x + 1 FROM tab WHERE (x + 1:'"
  },
  {
    "query": "SELECT x + 1 FROM tab where plus(x, 1::LowCardinality(Nullable(UInt8))) <= 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT x + 1 FROM tab where plus(x, 1:'"
  },
  {
    "query": "SELECT x + 1 FROM tab where plus(x, 1::LowCardinality(Nullable(UInt8))) <= toDateTime('2022-02-02') + 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT x + 1 FROM tab where plus(x, 1:'"
  },
  {
    "query": "SELECT x + 1 FROM tab where plus(x, 1::LowCardinality(UInt8)) <= 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT x + 1 FROM tab where plus(x, 1:'"
  },
  {
    "query": "SELECT x + 1 FROM tab where plus(x, 1::LowCardinality(UInt8)) <= toDateTime('2022-02-02') + 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT x + 1 FROM tab where plus(x, 1:'"
  },
  {
    "query": "SELECT x + 1 FROM tab where plus(x, 1::Nullable(UInt8)) <= 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT x + 1 FROM tab where plus(x, 1:'"
  },
  {
    "query": "SELECT x + 1 FROM tab where plus(x, 1::Nullable(UInt8)) <= toDateTime('2022-02-02') + 2 order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02461_mullable_pk_monotonicity_bug.sql",
    "error": "no viable alternative at input 'SELECT x + 1 FROM tab where plus(x, 1:'"
  },
  {
    "query": "SELECT x FROM\n(\nSELECT\nx,\n\\`1\\`\nFROM\n(\nSELECT x, 1 FROM test_00744\n)\nALL INNER JOIN\n(\nSELECT\ncount(),\n1\nFROM test_00744\n) jss2 USING (\\`1\\`)\nLIMIT 10\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00744_join_not_found_column.sql",
    "error": "no viable alternative at input 'SELECT x FROM\\n(\\nSELECT\\nx,\\n\\'"
  },
  {
    "query": "SELECT x FROM numbers(5 AS x);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_4.sql",
    "error": "no viable alternative at input 'SELECT x FROM numbers(5 AS'"
  },
  {
    "query": "select x from table_1 prewhere x != 2 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select x from table_1 prewhere x != 2 settings additional_table_filters={'"
  },
  {
    "query": "select x from table_1 prewhere x != 2 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select x from table_1 prewhere x != 2 where x != 2 settings additional_table_filters={'"
  },
  {
    "query": "select x from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select x from table_1 prewhere x != 4 settings additional_table_filters={'"
  },
  {
    "query": "select x from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select x from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'"
  },
  {
    "query": "select x from table_1 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select x from table_1 settings additional_table_filters={'"
  },
  {
    "query": "select x from table_1 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select x from table_1 where x != 2 settings additional_table_filters={'"
  },
  {
    "query": "select x from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select x from table_1 where x != 3 settings additional_table_filters={'"
  },
  {
    "query": "SELECT x,\n\\`1\\`\nFROM\n(\nSELECT x, 1 FROM test_00744\n)\nALL INNER JOIN\n(\nSELECT\ncount(),\n1\nFROM test_00744\n) js2 USING (\\`1\\`)\nLIMIT 10;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00744_join_not_found_column.sql",
    "error": "no viable alternative at input 'SELECT x,\\n\\'"
  },
  {
    "query": "SELECT x,\nt,\nround(max, 12)\nFROM\n(\nSELECT\nd[1] AS x,\nd[2] AS t,\nexponentialTimeDecayedMax(100)(-x, t) OVER w AS max\nFROM\n(\nSELECT [[2, 1], [1, 2], [10, 3], [4, 4], [5, 5], [1, 6], [10, 7], [10, 8], [10, 9], [9.81, 10], [9.9, 11]] AS d\n)\nARRAY JOIN d\nWINDOW w AS (ORDER BY 1 ASC Rows BETWEEN 2 PRECEDING AND 2 FOLLOWING)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT x,\\nt,\\nround(max, 12)\\nFROM\\n(\\nSELECT\\nd[1] AS x,\\nd[2] AS t,\\nexponentialTimeDecayedMax(100)(-x, t) OVER'"
  },
  {
    "query": "SELECT x,\nt,\nround(sum, 12),\nround(max, 12),\nround(count, 12),\nround(avg, 12)\nFROM\n(\nSELECT\nd[1] AS x,\nd[2] AS t,\nexponentialTimeDecayedSum(100)(x, t) OVER w AS sum,\nexponentialTimeDecayedMax(100)(x, t) OVER w AS max,\nexponentialTimeDecayedCount(100)(t) OVER w AS count,\nexponentialTimeDecayedAvg(100)(x, t) OVER w AS avg\nFROM\n(\nSELECT [[2, 1], [1, 2], [0, 3], [4, 4], [5, 5], [1, 6], [0, 7], [10, 8]] AS d\n)\nARRAY JOIN d\nWINDOW w AS (ORDER BY 1 ASC Rows BETWEEN 2 PRECEDING AND 2 FOLLOWING)\n);",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT x,\\nt,\\nround(sum, 12),\\nround(max, 12),\\nround(count, 12),\\nround(avg, 12)\\nFROM\\n(\\nSELECT\\nd[1] AS x,\\nd[2] AS t,\\nexponentialTimeDecayedSum(100)(x, t) OVER'"
  },
  {
    "query": "SELECT x,\nt,\nround(sum, 12),\nround(max, 12),\nround(count, 12),\nround(avg, 12)\nFROM\n(\nSELECT\nsin(number) AS x,\nnumber AS t,\nexponentialTimeDecayedSum(100)(x, t) OVER w AS sum,\nexponentialTimeDecayedMax(100)(x, t) OVER w AS max,\nexponentialTimeDecayedCount(100)(t) OVER w AS count,\nexponentialTimeDecayedAvg(100)(x, t) OVER w AS avg\nFROM numbers(1000000)\nWINDOW w AS (ORDER BY 1 ASC Rows BETWEEN 2 PRECEDING AND 2 FOLLOWING)\n)\nFORMAT \\`Null\\`;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02020_exponential_smoothing.sql",
    "error": "no viable alternative at input 'SELECT x,\\nt,\\nround(sum, 12),\\nround(max, 12),\\nround(count, 12),\\nround(avg, 12)\\nFROM\\n(\\nSELECT\\nsin(number) AS x,\\nnumber AS t,\\nexponentialTimeDecayedSum(100)(x, t) OVER'"
  },
  {
    "query": "SELECT x, a FROM (SELECT arrayJoin(['Hello', 'Goodbye']) AS x, [1, 2, 3] AS arr) ARRAY JOIN; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH } SELECT x, a FROM (SELECT arrayJoin(['Hello', 'Goodbye']) AS x, [1, 2, 3] AS arr) ARRAY JOIN arr AS a;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00011_array_join_alias.sql",
    "error": "no viable alternative at input 'SELECT x, a FROM (SELECT arrayJoin(['Hello', 'Goodbye']) AS x, [1, 2, 3] AS arr) ARRAY JOIN;'"
  },
  {
    "query": "SELECT x, bitCount(x), hex(reinterpretAsString(x)) FROM VALUES ('x Float64', (1), (-1), (inf));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01066_bit_count.sql",
    "error": "no viable alternative at input 'SELECT x, bitCount(x), hex(reinterpretAsString(x)) FROM VALUES ('x Float64', ('"
  },
  {
    "query": "SELECT x, s, z FROM VALUES('x UInt64, s String, z ALIAS concat(toString(x), \\\\': \\\\', s)', (1, 'hello'), (2, 'world'));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/00978_table_function_values_alias.sql",
    "error": "no viable alternative at input 'SELECT x, s, z FROM VALUES('x UInt64, s String, z ALIAS concat(toString(x), \\\\':'"
  },
  {
    "query": "SELECT x, sum(number), count(), FROM ( SELECT t1.x, t2.number\nFROM t1\nCROSS JOIN numbers_mt(10_000_000) t2\nWHERE number <= x\n)\nGROUP BY ALL\nORDER BY x\n;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03151_external_cross_join.sql",
    "error": "no viable alternative at input 'SELECT x, sum(number), count(), FROM ( SELECT t1.x'"
  },
  {
    "query": "select x, y, d, d.String, d.UInt64, d.\\`Tuple(a UInt64)\\`.a from test order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03040_dynamic_type_alters_2_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select x, y, d, d.String, d.UInt64, d.\\'"
  },
  {
    "query": "select x, y, d, d.String, d.UInt64, d.Date, d.\\`Tuple(a UInt64)\\`.a from test order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03040_dynamic_type_alters_2_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select x, y, d, d.String, d.UInt64, d.Date, d.\\'"
  },
  {
    "query": "select x, y, d1, d1.String, d1.UInt64, d1.Date, d1.\\`Tuple(a UInt64)\\`.a from test order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03040_dynamic_type_alters_2_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select x, y, d1, d1.String, d1.UInt64, d1.Date, d1.\\'"
  },
  {
    "query": "select x, y, d1, d1.String, d1.UInt64, d1.Date, d1.\\`Tuple(a UInt64)\\`.a, d1.\\`Array(Dynamic)\\`.UInt64, d1.\\`Array(Dynamic)\\`.String, d1.\\`Array(Dynamic)\\`.Date from test order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03040_dynamic_type_alters_2_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select x, y, d1, d1.String, d1.UInt64, d1.Date, d1.\\'"
  },
  {
    "query": "select x, y, d2, d2.String, d2.UInt64, d2.Date, d2.\\`Tuple(a UInt64)\\`.a, d2.\\`Array(Dynamic)\\`.UInt64, d2.\\`Array(Dynamic)\\`.String, d2.\\`Array(Dynamic)\\`.Date, from test order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03040_dynamic_type_alters_2_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select x, y, d2, d2.String, d2.UInt64, d2.Date, d2.\\'"
  },
  {
    "query": "select x, y, y.UInt64, y.String, y.\\`Tuple(a UInt64)\\`.a, d.String, d.UInt64, d.Date, d.\\`Tuple(a UInt64)\\`.a from test order by x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03040_dynamic_type_alters_1_wide_merge_tree.sql",
    "error": "no viable alternative at input 'select x, y, y.UInt64, y.String, y.\\'"
  },
  {
    "query": "SELECT x[0] FROM\n(\nSELECT\nA,\navgMap(CAST(arrayMap(x -> (x, 1), r), 'Map(UInt8,Int64)')) AS x\nFROM remote('127.{1,1}', view(\nSELECT\nnumber AS A,\nrange(150) AS r\nFROM numbers(60)\nWHERE (A % 2) = shardNum()\n))\nGROUP BY A\nLIMIT 100000000\n)\nWHERE A = 41\nSETTINGS prefer_localhost_replica = 0, distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 0, group_by_two_level_threshold_bytes = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02351_Map_combinator_dist.sql",
    "error": "no viable alternative at input 'SELECT x[0] FROM\\n(\\nSELECT\\nA,\\navgMap(CAST(arrayMap(x -> (x, 1), r), 'Map(UInt8,Int64)')) AS x\\nFROM remote('127.{1,1}', view(\\nSELECT\\nnumber'"
  },
  {
    "query": "SELECT x[0] FROM\n(\nSELECT\nA,\nmaxMap(CAST(arrayMap(x -> (x, 1), r), 'Map(UInt8,Int64)')) AS x\nFROM remote('127.{1,1}', view(\nSELECT\nnumber AS A,\nrange(150) AS r\nFROM numbers(60)\nWHERE (A % 2) = shardNum()\n))\nGROUP BY A\nLIMIT 100000000\n)\nWHERE A = 41\nSETTINGS prefer_localhost_replica = 0, distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 0, group_by_two_level_threshold_bytes = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02351_Map_combinator_dist.sql",
    "error": "no viable alternative at input 'SELECT x[0] FROM\\n(\\nSELECT\\nA,\\nmaxMap(CAST(arrayMap(x -> (x, 1), r), 'Map(UInt8,Int64)')) AS x\\nFROM remote('127.{1,1}', view(\\nSELECT\\nnumber'"
  },
  {
    "query": "SELECT x[0] FROM\n(\nSELECT\nA,\nminMap(CAST(arrayMap(x -> (x, 1), r), 'Map(UInt8,Int64)')) AS x\nFROM remote('127.{1,1}', view(\nSELECT\nnumber AS A,\nrange(150) AS r\nFROM numbers(60)\nWHERE (A % 2) = shardNum()\n))\nGROUP BY A\nLIMIT 100000000\n)\nWHERE A = 41\nSETTINGS prefer_localhost_replica = 0, distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 0, group_by_two_level_threshold_bytes = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02351_Map_combinator_dist.sql",
    "error": "no viable alternative at input 'SELECT x[0] FROM\\n(\\nSELECT\\nA,\\nminMap(CAST(arrayMap(x -> (x, 1), r), 'Map(UInt8,Int64)')) AS x\\nFROM remote('127.{1,1}', view(\\nSELECT\\nnumber'"
  },
  {
    "query": "SELECT x[67] FROM\n(\nSELECT\nA,\nsumMap(CAST(arrayMap(x -> (x, 1), r), 'Map(UInt8,Int64)')) AS x\nFROM remote('127.{1,1}', view(\nSELECT\nnumber AS A,\nrange(150) AS r\nFROM numbers(60)\nWHERE (A % 2) = shardNum()\n))\nGROUP BY A\nLIMIT 100000000\n)\nWHERE A = 53\nSETTINGS prefer_localhost_replica = 0, distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 0, group_by_two_level_threshold_bytes = 0;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02351_Map_combinator_dist.sql",
    "error": "no viable alternative at input 'SELECT x[67] FROM\\n(\\nSELECT\\nA,\\nsumMap(CAST(arrayMap(x -> (x, 1), r), 'Map(UInt8,Int64)')) AS x\\nFROM remote('127.{1,1}', view(\\nSELECT\\nnumber'"
  },
  {
    "query": "select y from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select y from table_1 prewhere x != 4 settings additional_table_filters={'"
  },
  {
    "query": "select y from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select y from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'"
  },
  {
    "query": "select y from table_1 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select y from table_1 settings additional_table_filters={'"
  },
  {
    "query": "select y from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02346_additional_filters.sql",
    "error": "no viable alternative at input 'select y from table_1 where x != 3 settings additional_table_filters={'"
  },
  {
    "query": "SELECT {arr_arr_arr: Array(Array(Array(String)))}, toTypeName({arr_arr_arr: Array(Array(Array(String)))});",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "SELECT {arr_map_tuple: Array(Map(UInt64, Tuple(Int16, DateTime, String)))}, toTypeName({arr_map_tuple: Array(Map(UInt64, Tuple(Int16, DateTime, String)))});",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "SELECT {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`.* FROM {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`\nLEFT JOIN {CLICKHOUSE_DATABASE_1:Identifier}.\\`2-1\\` ON {CLICKHOUSE_DATABASE:Identifier}.\\`1-1\\`.field = {CLICKHOUSE_DATABASE_1:Identifier}.\\`2-1\\`.field\nLEFT JOIN {CLICKHOUSE_DATABASE_1:Identifier}.\\`3-1\\` ON {CLICKHOUSE_DATABASE_1:Identifier}.\\`2-1\\`.field = {CLICKHOUSE_DATABASE_1:Identifier}.\\`3-1\\`.field;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03092_analyzer_same_table_name_in_different_databases.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "select {CLICKHOUSE_DATABASE:Identifier}.a.i\nfrom\n{CLICKHOUSE_DATABASE:Identifier}.a,\n{CLICKHOUSE_DATABASE:Identifier}.a as x;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03088_analyzer_ambiguous_column_multi_call.sql",
    "error": "no viable alternative at input 'select {'"
  },
  {
    "query": "SELECT {CLICKHOUSE_DATABASE:Identifier}.table.column FROM table;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/03101_analyzer_identifiers_1.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "SELECT {CLICKHOUSE_DATABASE:String} || '.dict3' as n, dictGet(n, 'some_column', toUInt64(12));",
    "fileName": "../ClickHouse/tests/queries/0_stateless/01018_ddl_dictionaries_select.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "SELECT {col:Identifier} FROM {db:Identifier}.{tbl:Identifier} LIMIT 1 OFFSET 5;",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "SELECT {id: Int64}, {arr: Array(UInt8)}, {map_2: Map(String, UInt8)}, {mul_arr: Array(Array(UInt8))}, {map_arr: Map(UInt8, Array(UInt8))}, {map_map_arr: Map(String, Map(String, Array(UInt8)))};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "SELECT {map_arr_tuple_map: Map(String, Array(Tuple(UInt8, Map(UInt32, Int64))))}, toTypeName({map_arr_tuple_map: Map(String, Array(Tuple(UInt8, Map(UInt32, Int64))))});",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "SELECT {num:UInt64}, {str:String}, {date:DateTime}, {map:Map(UUID, Array(Float32))};",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT {'"
  },
  {
    "query": "SELECT {tuple_tuple_tuple: Tuple(Tuple(Tuple(Int32, String, UUID, Float32)))}, toTypeName({tuple_tuple_tuple: Tuple(Tuple(Tuple(Int32, String, UUID, Float32)))});",
    "fileName": "../ClickHouse/tests/queries/0_stateless/02476_query_parameters_without_serialisation.sql",
    "error": "no viable alternative at input 'SELECT {'"
  }
]