[{"query":"CREATE TABLE left (x UUID) ORDER BY tuple();","fileName":"../ClickHouse/tests/queries/0_stateless/03206_is_null_constant_result_old_analyzer_bug.sql","error":"mismatched input 'ORDER' expecting <EOF>"},{"query":"CREATE TABLE right (x UUID) ORDER BY tuple();","fileName":"../ClickHouse/tests/queries/0_stateless/03206_is_null_constant_result_old_analyzer_bug.sql","error":"mismatched input 'ORDER' expecting <EOF>"},{"query":"create table b empty as a;","fileName":"../ClickHouse/tests/queries/0_stateless/03168_inconsistent_ast_formatting.sql","error":"mismatched input 'empty' expecting <EOF>"},{"query":"CREATE VIEW tab_v AS SELECT t1.type AS type,\nsum(t1.val) AS sval,\ntoStartOfDay(t1.dt) AS sday,\nanyLast(sval) OVER w AS lval\nFROM tab AS t1\nGROUP BY\ntype,\nsday\nWINDOW w AS (PARTITION BY type);","fileName":"../ClickHouse/tests/queries/0_stateless/03151_redundant_distinct_with_window.sql","error":"mismatched input 'WINDOW' expecting <EOF>"},{"query":"CREATE TABLE test_table_1 (\nid UInt64,\nvalue String\n) ENGINE=MergeTree ORDER BY id\nSETTINGS index_granularity = 16 # We have number of granules in the \\`EXPLAIN\\` output in reference file\n;","fileName":"../ClickHouse/tests/queries/0_stateless/03130_convert_outer_join_to_inner_join.sql","error":"mismatched input 'We' expecting <EOF>"},{"query":"create table t2 engine = MergeTree()\norder by tuple()\nas\nselect 1 as user_id, 'website' as event_source, '2023-01-01 00:00:00'::DateTime as timestamp;","fileName":"../ClickHouse/tests/queries/0_stateless/03084_analyzer_join_column_alias.sql","error":"mismatched input ':' expecting <EOF>"},{"query":"CREATE TABLE base (a Int32) ENGINE = TinyLog COMMENT 'original comment';","fileName":"../ClickHouse/tests/queries/0_stateless/03033_create_as_copies_comment.sql","error":"mismatched input 'COMMENT' expecting <EOF>"},{"query":"CREATE TABLE copy_with_comment AS base COMMENT 'new comment';","fileName":"../ClickHouse/tests/queries/0_stateless/03033_create_as_copies_comment.sql","error":"mismatched input 'COMMENT' expecting <EOF>"},{"query":"CREATE TABLE ttl_group_by_bug (key UInt32, ts DateTime, value UInt32, min_value UInt32 default value, max_value UInt32 default value)\nENGINE = MergeTree()\nORDER BY (key, toStartOfInterval(ts, toIntervalMinute(3)), ts)\nTTL ts + INTERVAL 5 MINUTE GROUP BY key, toStartOfInterval(ts, toIntervalMinute(3))\nSET value = sum(value), min_value = min(min_value), max_value = max(max_value),  ts=min(toStartOfInterval(ts, toIntervalMinute(3)));","fileName":"../ClickHouse/tests/queries/0_stateless/02949_ttl_group_by_bug.sql","error":"mismatched input 'GROUP' expecting <EOF>"},{"query":"create or replace table t_temp ( a UInt32,\ntimestamp DateTime\n)\nengine = MergeTree\norder by a\nTTL timestamp + INTERVAL 2 SECOND WHERE a in (select number from system.numbers limit 100_000);","fileName":"../ClickHouse/tests/queries/0_stateless/02932_set_ttl_where.sql","error":"mismatched input 'WHERE' expecting <EOF>"},{"query":"CREATE VIEW fx_5m AS SELECT\nsymbol,\ntoStartOfInterval(dt_close, INTERVAL 300 SECOND) AS dt_close,\nargMin(open, dt_close) open,\nmax(high) high,\nmin(low) low,\nargMax(close, dt_close) close,\nsum(volume) volume\nFROM fx_1m\nGROUP BY symbol, dt_close;","fileName":"../ClickHouse/tests/queries/0_stateless/02796_projection_date_filter_on_view.sql","error":"mismatched input 'volume' expecting <EOF>"},{"query":"CREATE TABLE test_table_string (\nkey String,\nvalue UInt16\n) ENGINE=Memory() AS SELECT 'foo' || number::String, number FROM numbers(1e5);","fileName":"../ClickHouse/tests/queries/0_stateless/02740_hashed_dictionary_load_factor_smoke.sql","error":"mismatched input ':' expecting <EOF>"},{"query":"CREATE TABLE test2 (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test', 'replica-{server_uuid}') ORDER BY x; -- { serverError REPLICA_ALREADY_EXISTS } SELECT getMacro('server_uuid'); -- { serverError NO_ELEMENTS_IN_CONFIG }\nDROP TABLE test SYNC;","fileName":"../ClickHouse/tests/queries/0_stateless/02711_server_uuid_macro.sql","error":"mismatched input 'SYNC' expecting <EOF>"},{"query":"CREATE DATABASE IF NOT EXISTS replicated_database_test ENGINE = Replicated('some/path/' || currentDatabase() || '/replicated_database_test', 'shard_1', 'replica_1') SETTINGS max_broken_tables_ratio=1;","fileName":"../ClickHouse/tests/queries/0_stateless/02483_add_engine_full_column_to_system_databases.sql","error":"mismatched input 'SETTINGS' expecting <EOF>"},{"query":"CREATE TABLE test_table_string (\nkey String,\nvalue UInt16\n) ENGINE=Memory() AS SELECT 'foo' || number::String, number FROM numbers(1e5);","fileName":"../ClickHouse/tests/queries/0_stateless/02391_hashed_dictionary_shards.sql","error":"mismatched input ':' expecting <EOF>"},{"query":"create table t engine=Memory empty; -- { clientError SYNTAX_ERROR } create table t engine=Memory empty as; -- { clientError SYNTAX_ERROR }\ncreate table t engine=Memory as; -- { clientError SYNTAX_ERROR }\ncreate table t engine=Memory empty as select 1;","fileName":"../ClickHouse/tests/queries/0_stateless/02343_create_empty_as_select.sql","error":"mismatched input 'empty' expecting <EOF>"},{"query":"CREATE TABLE test_optimize_exception (date Date) PARTITION BY toYYYYMM(date) ORDER BY date;","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'PARTITION' expecting <EOF>"},{"query":"CREATE TABLE table_02184 (x UInt8) PARTITION BY x; --{serverError BAD_ARGUMENTS} CREATE TABLE table_02184 (x UInt8) ORDER BY x;","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'PARTITION' expecting <EOF>"},{"query":"CREATE TABLE table_02184 (x UInt8) PRIMARY KEY x;","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'PRIMARY' expecting <EOF>"},{"query":"CREATE TABLE numbers2 ORDER BY intHash32(number) SAMPLE BY intHash32(number) AS SELECT number FROM numbers(10);","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'ORDER' expecting <EOF>"},{"query":"CREATE TABLE test_table (EventDate Date, CounterID UInt32,  UserID UInt64,  EventTime DateTime('America/Los_Angeles'), UTCEventTime DateTime('UTC')) PARTITION BY EventDate PRIMARY KEY CounterID;","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'PARTITION' expecting <EOF>"},{"query":"CREATE TABLE table_02184 (x UInt8, y int, PRIMARY KEY (x)) PRIMARY KEY y; -- {clientError BAD_ARGUMENTS} CREATE TABLE mt (a UInt64, b Nullable(String), PRIMARY KEY (a, coalesce(b, 'test')), INDEX b_index b TYPE set(123) GRANULARITY 1);","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'PRIMARY' expecting <EOF>"},{"query":"CREATE TEMPORARY TABLE tmp2 (n int) ORDER BY n; -- {serverError BAD_ARGUMENTS} CREATE TEMPORARY TABLE tmp2 (n int, PRIMARY KEY (n)); -- {serverError BAD_ARGUMENTS}\nCREATE TABLE log (n int);","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'ORDER' expecting <EOF>"},{"query":"CREATE TABLE mem ORDER BY n AS SELECT 1 as n; -- {serverError BAD_ARGUMENTS} SET default_table_engine = 'MergeTree';","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'ORDER' expecting <EOF>"},{"query":"CREATE TABLE mt ORDER BY n AS SELECT 1 as n;","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'ORDER' expecting <EOF>"},{"query":"CREATE TABLE kek (n int) SETTINGS log_queries=1;","fileName":"../ClickHouse/tests/queries/0_stateless/02184_default_table_engine.sql","error":"mismatched input 'SETTINGS' expecting <EOF>"},{"query":"CREATE TABLE t_merge AS t ENGINE = Merge('02111_modify_table_comment', 't')\nCOMMENT 'this is a Merge table';","fileName":"../ClickHouse/tests/queries/0_stateless/02111_modify_table_comment.sql","error":"mismatched input 'COMMENT' expecting <EOF>"},{"query":"create view my_view as select * replace arrayMap(x -> x + 1,\\`Object.Key\\`) as \\`Object.Key\\` from my_table;","fileName":"../ClickHouse/tests/queries/0_stateless/01913_fix_column_transformer_replace_format.sql","error":"mismatched input 'replace' expecting <EOF>"},{"query":"CREATE TABLE test_ttl_group_by01763 (key UInt32, ts DateTime, value UInt32, min_value UInt32 default value, max_value UInt32 default value)\nENGINE = MergeTree() PARTITION BY toYYYYMM(ts)\nORDER BY (key, toStartOfInterval(ts, toIntervalMinute(3)), ts) \nTTL ts + INTERVAL 5 MINUTE GROUP BY key, toStartOfInterval(ts, toIntervalMinute(3)) \nSET value = sum(value), min_value = min(min_value), max_value = max(max_value),  ts=min(toStartOfInterval(ts, toIntervalMinute(3)));","fileName":"../ClickHouse/tests/queries/0_stateless/01763_long_ttl_group_by.sql","error":"mismatched input 'GROUP' expecting <EOF>"},{"query":"CREATE TABLE full_duplicates  ( pk Int32, sk Int32, val UInt32, partition_key UInt32, mat UInt32 MATERIALIZED 12345, alias UInt32 ALIAS 2,\nPRIMARY KEY (pk)\n) ENGINE=MergeTree\nPARTITION BY (partition_key + 1) -- ensure that column in expression is properly handled when deduplicating. See [1] below.\nORDER BY (pk, toString(sk * 10)); -- silly order key to ensure that key column is checked even when it is a part of expression. See [1] below.\nOPTIMIZE TABLE full_duplicates DEDUPLICATE BY pk, sk, val, mat, alias; -- { serverError NO_SUCH_COLUMN_IN_TABLE } -- alias column is present\nOPTIMIZE TABLE full_duplicates DEDUPLICATE BY sk, val; -- { serverError THERE_IS_NO_COLUMN } -- primary key column is missing\nOPTIMIZE TABLE full_duplicates DEDUPLICATE BY * EXCEPT(pk, sk, val, mat, alias, partition_key); -- { serverError EMPTY_LIST_OF_COLUMNS_QUERIED } -- list is empty\nOPTIMIZE TABLE full_duplicates DEDUPLICATE BY * EXCEPT(pk); -- { serverError THERE_IS_NO_COLUMN } -- primary key column is missing [1]\nOPTIMIZE TABLE full_duplicates DEDUPLICATE BY * EXCEPT(sk); -- { serverError THERE_IS_NO_COLUMN } -- sorting key column is missing [1]\nOPTIMIZE TABLE full_duplicates DEDUPLICATE BY * EXCEPT(partition_key); -- { serverError THERE_IS_NO_COLUMN } -- partitioning column is missing [1]\nOPTIMIZE TABLE full_duplicates DEDUPLICATE BY; -- { clientError SYNTAX_ERROR } -- empty list is a syntax error\nOPTIMIZE TABLE partial_duplicates DEDUPLICATE BY pk,sk,val,mat EXCEPT mat; -- { clientError SYNTAX_ERROR } -- invalid syntax\nOPTIMIZE TABLE partial_duplicates DEDUPLICATE BY pk APPLY(pk + 1); -- { clientError SYNTAX_ERROR } -- APPLY column transformer is not supported\nOPTIMIZE TABLE partial_duplicates DEDUPLICATE BY pk REPLACE(pk + 1); -- { clientError SYNTAX_ERROR } -- REPLACE column transformer is not supported\nSELECT 'OLD DEDUPLICATE';","fileName":"../ClickHouse/tests/queries/0_stateless/01581_deduplicate_by_columns_local.sql","error":"mismatched input 'BY' expecting <EOF>"},{"query":"CREATE TABLE derived_metrics_local (\ntimestamp DateTime,\nbytes UInt64\n)\nENGINE=SummingMergeTree()\nPARTITION BY toYYYYMMDD(timestamp)\nORDER BY (toStartOfHour(timestamp), timestamp)\nTTL toStartOfHour(timestamp) + INTERVAL 1 HOUR GROUP BY toStartOfHour(timestamp)\nSET bytes=max(bytes);","fileName":"../ClickHouse/tests/queries/0_stateless/01506_ttl_same_with_order_by.sql","error":"mismatched input 'GROUP' expecting <EOF>"},{"query":"CREATE TABLE derived_metrics_local  (\ntimestamp DateTime,\ntimestamp_h DateTime materialized toStartOfHour(timestamp),\nbytes UInt64\n)\nENGINE=SummingMergeTree()\nPARTITION BY toYYYYMMDD(timestamp)\nORDER BY (timestamp_h, timestamp)\nTTL toStartOfHour(timestamp) + INTERVAL 1 HOUR GROUP BY timestamp_h\nSET bytes=max(bytes), timestamp = toStartOfHour(any(timestamp));","fileName":"../ClickHouse/tests/queries/0_stateless/01506_ttl_same_with_order_by.sql","error":"mismatched input 'GROUP' expecting <EOF>"},{"query":"CREATE TABLE recompression_table (\ndt DateTime,\nkey UInt64,\nvalue String\n) ENGINE MergeTree()\nORDER BY tuple()\nPARTITION BY key\nTTL dt + INTERVAL 1 MONTH RECOMPRESS CODEC(ZSTD(17)), dt + INTERVAL 1 YEAR RECOMPRESS CODEC(LZ4HC(10))\nSETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0;","fileName":"../ClickHouse/tests/queries/0_stateless/01465_ttl_recompression.sql","error":"mismatched input 'CODEC' expecting <EOF>"},{"query":"CREATE TABLE recompression_table_compact (\ndt DateTime,\nkey UInt64,\nvalue String\n) ENGINE MergeTree()\nORDER BY tuple()\nPARTITION BY key\nTTL dt + INTERVAL 1 MONTH RECOMPRESS CODEC(ZSTD(17)), dt + INTERVAL 1 YEAR RECOMPRESS CODEC(LZ4HC(10))\nSETTINGS min_rows_for_wide_part = 10000;","fileName":"../ClickHouse/tests/queries/0_stateless/01465_ttl_recompression.sql","error":"mismatched input 'CODEC' expecting <EOF>"},{"query":"create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by x set y = max(y); -- { serverError BAD_TTL_EXPRESSION} create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by b set y = max(y); -- { serverError BAD_TTL_EXPRESSION}\ncreate table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a, b, x set y = max(y); -- { serverError BAD_TTL_EXPRESSION}\ncreate table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a, b set y = max(y), y = max(y); -- { serverError BAD_TTL_EXPRESSION}\n","fileName":"../ClickHouse/tests/queries/0_stateless/01280_ttl_where_group_by_negative.sql","error":"mismatched input 'group' expecting <EOF>"},{"query":"create table m (n int) engine=Memory; -- { serverError NOT_IMPLEMENTED } commit; -- { serverError INVALID_TRANSACTION } -- after 48\nrollback;","fileName":"../ClickHouse/tests/queries/0_stateless/01173_transaction_control_queries.sql","error":"mismatched input 'rollback' expecting <EOF>"},{"query":"CREATE TABLE auto_assign_enum2 (x enum('a' = -1000, 'b', 'c' = -99)) ENGINE=MergeTree() order by x; -- { serverError UNEXPECTED_AST_STRUCTURE } CREATE TABLE auto_assign_enum2 (x Enum8(\n'00' = -128 ,'01','02','03','04','05','06','07','08','09','0A','0B','0C','0D','0E','0F',\n'10','11','12','13','14','15','16','17','18','19','1A','1B','1C','1D','1E','1F',\n'20','21','22','23','24','25','26','27','28','29','2A','2B','2C','2D','2E','2F',\n'30','31','32','33','34','35','36','37','38','39','3A','3B','3C','3D','3E','3F',\n'40','41','42','43','44','45','46','47','48','49','4A','4B','4C','4D','4E','4F',\n'50','51','52','53','54','55','56','57','58','59','5A','5B','5C','5D','5E','5F',\n'60','61','62','63','64','65','66','67','68','69','6A','6B','6C','6D','6E','6F',\n'70','71','72','73','74','75','76','77','78','79','7A','7B','7C','7D','7E','7F'\n)) ENGINE=MergeTree() order by x;","fileName":"../ClickHouse/tests/queries/0_stateless/00757_enum_defaults.sql","error":"mismatched input ''00'' expecting <EOF>"}]