import { Lexer as LexerType, Parser as ParserType, Token, TokenStream } from 'antlr4ng';
import { CursorPosition, GetParseTree, LexerConstructor, ParserConstructor, SqlAutocompleteResult, SymbolTableVisitor, TableContextSuggestion } from './autocomplete-types';
interface TableQueryPositionBase {
    start: number;
    end: number;
}
export interface TableQueryPosition extends TableQueryPositionBase {
    type: 'from' | 'alter' | 'insert' | 'update';
    joinTableQueryPosition?: TableQueryPositionBase;
    selectTableQueryPosition?: TableQueryPositionBase;
}
export interface TokenDictionary {
    SPACE: number;
    FROM: number;
    OPENING_BRACKET: number;
    CLOSING_BRACKET: number;
    ALTER: number;
    INSERT: number;
    UPDATE: number;
    JOIN: number;
    SEMICOLON: number;
    SELECT: number;
}
export declare function getTableQueryPosition(tokenStream: TokenStream, tokenIndex: number, dictionary: TokenDictionary): TableQueryPosition | undefined;
export declare function getPreviousToken(tokenStream: TokenStream, dictionary: TokenDictionary, tokenIndex: number, tokenType: number): Token | undefined;
interface ContextSuggestions {
    tableContextSuggestion?: TableContextSuggestion;
    suggestColumnAliases?: SqlAutocompleteResult['suggestColumnAliases'];
}
export declare function getContextSuggestions<L extends LexerType, P extends ParserType>(Lexer: LexerConstructor<L>, Parser: ParserConstructor<P>, symbolTableVisitor: SymbolTableVisitor, tokenDictionary: TokenDictionary, getParseTree: GetParseTree<P>, tokenStream: TokenStream, cursor: CursorPosition, query: string, explicitlyParseJoin?: boolean): ContextSuggestions;
export {};
