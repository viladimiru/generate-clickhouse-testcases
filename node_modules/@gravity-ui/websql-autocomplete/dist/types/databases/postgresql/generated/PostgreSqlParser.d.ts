import PostgreSqlParserBase from '../grammar/PostgreSqlParserBase.js';
import * as antlr from "antlr4ng";
import { PostgreSqlParserVisitor } from "./PostgreSqlParserVisitor.js";
export declare class PostgreSqlParser extends PostgreSqlParserBase {
    static readonly Dollar = 1;
    static readonly OPEN_PAREN = 2;
    static readonly CLOSE_PAREN = 3;
    static readonly OPEN_BRACKET = 4;
    static readonly CLOSE_BRACKET = 5;
    static readonly COMMA = 6;
    static readonly SEMI = 7;
    static readonly COLON = 8;
    static readonly STAR = 9;
    static readonly EQUAL = 10;
    static readonly DOT = 11;
    static readonly PLUS = 12;
    static readonly MINUS = 13;
    static readonly SLASH = 14;
    static readonly CARET = 15;
    static readonly LT = 16;
    static readonly GT = 17;
    static readonly LESS_LESS = 18;
    static readonly GREATER_GREATER = 19;
    static readonly COLON_EQUALS = 20;
    static readonly LESS_EQUALS = 21;
    static readonly EQUALS_GREATER = 22;
    static readonly GREATER_EQUALS = 23;
    static readonly DOT_DOT = 24;
    static readonly NOT_EQUALS = 25;
    static readonly TYPECAST = 26;
    static readonly PERCENT = 27;
    static readonly PARAM = 28;
    static readonly Operator = 29;
    static readonly ALL = 30;
    static readonly ANALYSE = 31;
    static readonly ANALYZE = 32;
    static readonly AND = 33;
    static readonly ANY = 34;
    static readonly ARRAY = 35;
    static readonly AS = 36;
    static readonly ASC = 37;
    static readonly ASYMMETRIC = 38;
    static readonly BOTH = 39;
    static readonly CASE = 40;
    static readonly CAST = 41;
    static readonly CHECK = 42;
    static readonly COLLATE = 43;
    static readonly COLUMN = 44;
    static readonly CONSTRAINT = 45;
    static readonly CREATE = 46;
    static readonly CURRENT_CATALOG = 47;
    static readonly CURRENT_DATE = 48;
    static readonly CURRENT_ROLE = 49;
    static readonly CURRENT_TIME = 50;
    static readonly CURRENT_TIMESTAMP = 51;
    static readonly CURRENT_USER = 52;
    static readonly DEFAULT = 53;
    static readonly DEFERRABLE = 54;
    static readonly DESC = 55;
    static readonly DISTINCT = 56;
    static readonly DO = 57;
    static readonly ELSE = 58;
    static readonly EXCEPT = 59;
    static readonly FALSE_P = 60;
    static readonly FETCH = 61;
    static readonly FOR = 62;
    static readonly FOREIGN = 63;
    static readonly FROM = 64;
    static readonly GRANT = 65;
    static readonly GROUP_P = 66;
    static readonly HAVING = 67;
    static readonly IN_P = 68;
    static readonly INITIALLY = 69;
    static readonly INTERSECT = 70;
    static readonly INTO = 71;
    static readonly LATERAL_P = 72;
    static readonly LEADING = 73;
    static readonly LIMIT = 74;
    static readonly LOCALTIME = 75;
    static readonly LOCALTIMESTAMP = 76;
    static readonly NOT = 77;
    static readonly NULL_P = 78;
    static readonly OFFSET = 79;
    static readonly ON = 80;
    static readonly ONLY = 81;
    static readonly OR = 82;
    static readonly ORDER = 83;
    static readonly PLACING = 84;
    static readonly PRIMARY = 85;
    static readonly REFERENCES = 86;
    static readonly RETURNING = 87;
    static readonly SELECT = 88;
    static readonly SESSION_USER = 89;
    static readonly SOME = 90;
    static readonly SYMMETRIC = 91;
    static readonly TABLE = 92;
    static readonly THEN = 93;
    static readonly TO = 94;
    static readonly TRAILING = 95;
    static readonly TRUE_P = 96;
    static readonly UNION = 97;
    static readonly UNIQUE = 98;
    static readonly USER = 99;
    static readonly USING = 100;
    static readonly VARIADIC = 101;
    static readonly WHEN = 102;
    static readonly WHERE = 103;
    static readonly WINDOW = 104;
    static readonly WITH = 105;
    static readonly AUTHORIZATION = 106;
    static readonly BINARY = 107;
    static readonly COLLATION = 108;
    static readonly CONCURRENTLY = 109;
    static readonly CROSS = 110;
    static readonly CURRENT_SCHEMA = 111;
    static readonly FREEZE = 112;
    static readonly FULL = 113;
    static readonly ILIKE = 114;
    static readonly INNER_P = 115;
    static readonly IS = 116;
    static readonly ISNULL = 117;
    static readonly JOIN = 118;
    static readonly LEFT = 119;
    static readonly LIKE = 120;
    static readonly NATURAL = 121;
    static readonly NOTNULL = 122;
    static readonly OUTER_P = 123;
    static readonly OVER = 124;
    static readonly OVERLAPS = 125;
    static readonly RIGHT = 126;
    static readonly SIMILAR = 127;
    static readonly VERBOSE = 128;
    static readonly ABORT_P = 129;
    static readonly ABSOLUTE_P = 130;
    static readonly ACCESS = 131;
    static readonly ACTION = 132;
    static readonly ADD_P = 133;
    static readonly ADMIN = 134;
    static readonly AFTER = 135;
    static readonly AGGREGATE = 136;
    static readonly ALSO = 137;
    static readonly ALTER = 138;
    static readonly ALWAYS = 139;
    static readonly ASSERTION = 140;
    static readonly ASSIGNMENT = 141;
    static readonly AT = 142;
    static readonly ATTRIBUTE = 143;
    static readonly BACKWARD = 144;
    static readonly BEFORE = 145;
    static readonly BEGIN_P = 146;
    static readonly BY = 147;
    static readonly CACHE = 148;
    static readonly CALLED = 149;
    static readonly CASCADE = 150;
    static readonly CASCADED = 151;
    static readonly CATALOG = 152;
    static readonly CHAIN = 153;
    static readonly CHARACTERISTICS = 154;
    static readonly CHECKPOINT = 155;
    static readonly CLASS = 156;
    static readonly CLOSE = 157;
    static readonly CLUSTER = 158;
    static readonly COMMENT = 159;
    static readonly COMMENTS = 160;
    static readonly COMMIT = 161;
    static readonly COMMITTED = 162;
    static readonly CONFIGURATION = 163;
    static readonly CONNECTION = 164;
    static readonly CONSTRAINTS = 165;
    static readonly CONTENT_P = 166;
    static readonly CONTINUE_P = 167;
    static readonly CONVERSION_P = 168;
    static readonly COPY = 169;
    static readonly COST = 170;
    static readonly CSV = 171;
    static readonly CURSOR = 172;
    static readonly CYCLE = 173;
    static readonly DATA_P = 174;
    static readonly DATABASE = 175;
    static readonly DAY_P = 176;
    static readonly DEALLOCATE = 177;
    static readonly DECLARE = 178;
    static readonly DEFAULTS = 179;
    static readonly DEFERRED = 180;
    static readonly DEFINER = 181;
    static readonly DELETE_P = 182;
    static readonly DELIMITER = 183;
    static readonly DELIMITERS = 184;
    static readonly DICTIONARY = 185;
    static readonly DISABLE_P = 186;
    static readonly DISCARD = 187;
    static readonly DOCUMENT_P = 188;
    static readonly DOMAIN_P = 189;
    static readonly DOUBLE_P = 190;
    static readonly DROP = 191;
    static readonly EACH = 192;
    static readonly ENABLE_P = 193;
    static readonly ENCODING = 194;
    static readonly ENCRYPTED = 195;
    static readonly ENUM_P = 196;
    static readonly ESCAPE = 197;
    static readonly EVENT = 198;
    static readonly EXCLUDE = 199;
    static readonly EXCLUDING = 200;
    static readonly EXCLUSIVE = 201;
    static readonly EXECUTE = 202;
    static readonly EXPLAIN = 203;
    static readonly EXTENSION = 204;
    static readonly EXTERNAL = 205;
    static readonly FAMILY = 206;
    static readonly FIRST_P = 207;
    static readonly FOLLOWING = 208;
    static readonly FORCE = 209;
    static readonly FORWARD = 210;
    static readonly FUNCTION = 211;
    static readonly FUNCTIONS = 212;
    static readonly GLOBAL = 213;
    static readonly GRANTED = 214;
    static readonly HANDLER = 215;
    static readonly HEADER_P = 216;
    static readonly HOLD = 217;
    static readonly HOUR_P = 218;
    static readonly IDENTITY_P = 219;
    static readonly IF_P = 220;
    static readonly IMMEDIATE = 221;
    static readonly IMMUTABLE = 222;
    static readonly IMPLICIT_P = 223;
    static readonly INCLUDING = 224;
    static readonly INCREMENT = 225;
    static readonly INDEX = 226;
    static readonly INDEXES = 227;
    static readonly INHERIT = 228;
    static readonly INHERITS = 229;
    static readonly INLINE_P = 230;
    static readonly INSENSITIVE = 231;
    static readonly INSERT = 232;
    static readonly INSTEAD = 233;
    static readonly INVOKER = 234;
    static readonly ISOLATION = 235;
    static readonly KEY = 236;
    static readonly LABEL = 237;
    static readonly LANGUAGE = 238;
    static readonly LARGE_P = 239;
    static readonly LAST_P = 240;
    static readonly LEAKPROOF = 241;
    static readonly LEVEL = 242;
    static readonly LISTEN = 243;
    static readonly LOAD = 244;
    static readonly LOCAL = 245;
    static readonly LOCATION = 246;
    static readonly LOCK_P = 247;
    static readonly MAPPING = 248;
    static readonly MATCH = 249;
    static readonly MATCHED = 250;
    static readonly MATERIALIZED = 251;
    static readonly MAXVALUE = 252;
    static readonly MERGE = 253;
    static readonly MINUTE_P = 254;
    static readonly MINVALUE = 255;
    static readonly MODE = 256;
    static readonly MONTH_P = 257;
    static readonly MOVE = 258;
    static readonly NAME_P = 259;
    static readonly NAMES = 260;
    static readonly NEXT = 261;
    static readonly NO = 262;
    static readonly NOTHING = 263;
    static readonly NOTIFY = 264;
    static readonly NOWAIT = 265;
    static readonly NULLS_P = 266;
    static readonly OBJECT_P = 267;
    static readonly OF = 268;
    static readonly OFF = 269;
    static readonly OIDS = 270;
    static readonly OPERATOR = 271;
    static readonly OPTION = 272;
    static readonly OPTIONS = 273;
    static readonly OWNED = 274;
    static readonly OWNER = 275;
    static readonly PARSER = 276;
    static readonly PARTIAL = 277;
    static readonly PARTITION = 278;
    static readonly PASSING = 279;
    static readonly PASSWORD = 280;
    static readonly PLANS = 281;
    static readonly PRECEDING = 282;
    static readonly PREPARE = 283;
    static readonly PREPARED = 284;
    static readonly PRESERVE = 285;
    static readonly PRIOR = 286;
    static readonly PRIVILEGES = 287;
    static readonly PROCEDURAL = 288;
    static readonly PROCEDURE = 289;
    static readonly PROGRAM = 290;
    static readonly QUOTE = 291;
    static readonly RANGE = 292;
    static readonly READ = 293;
    static readonly REASSIGN = 294;
    static readonly RECHECK = 295;
    static readonly RECURSIVE = 296;
    static readonly REF = 297;
    static readonly REFRESH = 298;
    static readonly REINDEX = 299;
    static readonly RELATIVE_P = 300;
    static readonly RELEASE = 301;
    static readonly RENAME = 302;
    static readonly REPEATABLE = 303;
    static readonly REPLACE = 304;
    static readonly REPLICA = 305;
    static readonly RESET = 306;
    static readonly RESTART = 307;
    static readonly RESTRICT = 308;
    static readonly RETURNS = 309;
    static readonly REVOKE = 310;
    static readonly ROLE = 311;
    static readonly ROLLBACK = 312;
    static readonly ROWS = 313;
    static readonly RULE = 314;
    static readonly SAVEPOINT = 315;
    static readonly SCHEMA = 316;
    static readonly SCROLL = 317;
    static readonly SEARCH = 318;
    static readonly SECOND_P = 319;
    static readonly SECURITY = 320;
    static readonly SEQUENCE = 321;
    static readonly SEQUENCES = 322;
    static readonly SERIALIZABLE = 323;
    static readonly SERVER = 324;
    static readonly SESSION = 325;
    static readonly SET = 326;
    static readonly SHARE = 327;
    static readonly SHOW = 328;
    static readonly SIMPLE = 329;
    static readonly SNAPSHOT = 330;
    static readonly STABLE = 331;
    static readonly STANDALONE_P = 332;
    static readonly START = 333;
    static readonly STATEMENT = 334;
    static readonly STATISTICS = 335;
    static readonly STDIN = 336;
    static readonly STDOUT = 337;
    static readonly STORAGE = 338;
    static readonly STRICT_P = 339;
    static readonly STRIP_P = 340;
    static readonly SYSID = 341;
    static readonly SYSTEM_P = 342;
    static readonly TABLES = 343;
    static readonly TABLESPACE = 344;
    static readonly TEMP = 345;
    static readonly TEMPLATE = 346;
    static readonly TEMPORARY = 347;
    static readonly TEXT_P = 348;
    static readonly TRANSACTION = 349;
    static readonly TRIGGER = 350;
    static readonly TRUNCATE = 351;
    static readonly TRUSTED = 352;
    static readonly TYPE_P = 353;
    static readonly TYPES_P = 354;
    static readonly UNBOUNDED = 355;
    static readonly UNCOMMITTED = 356;
    static readonly UNENCRYPTED = 357;
    static readonly UNKNOWN = 358;
    static readonly UNLISTEN = 359;
    static readonly UNLOGGED = 360;
    static readonly UNTIL = 361;
    static readonly UPDATE = 362;
    static readonly VACUUM = 363;
    static readonly VALID = 364;
    static readonly VALIDATE = 365;
    static readonly VALIDATOR = 366;
    static readonly VARYING = 367;
    static readonly VERSION_P = 368;
    static readonly VIEW = 369;
    static readonly VOLATILE = 370;
    static readonly WHITESPACE_P = 371;
    static readonly WITHOUT = 372;
    static readonly WORK = 373;
    static readonly WRAPPER = 374;
    static readonly WRITE = 375;
    static readonly XML_P = 376;
    static readonly YEAR_P = 377;
    static readonly YES_P = 378;
    static readonly ZONE = 379;
    static readonly BETWEEN = 380;
    static readonly BIGINT = 381;
    static readonly BIT = 382;
    static readonly BOOLEAN_P = 383;
    static readonly CHAR_P = 384;
    static readonly CHARACTER = 385;
    static readonly COALESCE = 386;
    static readonly DEC = 387;
    static readonly DECIMAL_P = 388;
    static readonly EXISTS = 389;
    static readonly EXTRACT = 390;
    static readonly FLOAT_P = 391;
    static readonly GREATEST = 392;
    static readonly INOUT = 393;
    static readonly INT_P = 394;
    static readonly INTEGER = 395;
    static readonly INTERVAL = 396;
    static readonly LEAST = 397;
    static readonly NATIONAL = 398;
    static readonly NCHAR = 399;
    static readonly NONE = 400;
    static readonly NULLIF = 401;
    static readonly NUMERIC = 402;
    static readonly OVERLAY = 403;
    static readonly POSITION = 404;
    static readonly PRECISION = 405;
    static readonly REAL = 406;
    static readonly ROW = 407;
    static readonly SETOF = 408;
    static readonly SMALLINT = 409;
    static readonly SUBSTRING = 410;
    static readonly TIME = 411;
    static readonly TIMESTAMP = 412;
    static readonly TREAT = 413;
    static readonly TRIM = 414;
    static readonly VALUES = 415;
    static readonly VARCHAR = 416;
    static readonly XMLATTRIBUTES = 417;
    static readonly XMLCOMMENT = 418;
    static readonly XMLAGG = 419;
    static readonly XML_IS_WELL_FORMED = 420;
    static readonly XML_IS_WELL_FORMED_DOCUMENT = 421;
    static readonly XML_IS_WELL_FORMED_CONTENT = 422;
    static readonly XPATH = 423;
    static readonly XPATH_EXISTS = 424;
    static readonly XMLCONCAT = 425;
    static readonly XMLELEMENT = 426;
    static readonly XMLEXISTS = 427;
    static readonly XMLFOREST = 428;
    static readonly XMLPARSE = 429;
    static readonly XMLPI = 430;
    static readonly XMLROOT = 431;
    static readonly XMLSERIALIZE = 432;
    static readonly CALL = 433;
    static readonly CURRENT_P = 434;
    static readonly ATTACH = 435;
    static readonly DETACH = 436;
    static readonly EXPRESSION = 437;
    static readonly GENERATED = 438;
    static readonly LOGGED = 439;
    static readonly STORED = 440;
    static readonly INCLUDE = 441;
    static readonly ROUTINE = 442;
    static readonly TRANSFORM = 443;
    static readonly IMPORT_P = 444;
    static readonly POLICY = 445;
    static readonly METHOD = 446;
    static readonly REFERENCING = 447;
    static readonly NEW = 448;
    static readonly OLD = 449;
    static readonly VALUE_P = 450;
    static readonly SUBSCRIPTION = 451;
    static readonly PUBLICATION = 452;
    static readonly OUT_P = 453;
    static readonly END_P = 454;
    static readonly ROUTINES = 455;
    static readonly SCHEMAS = 456;
    static readonly PROCEDURES = 457;
    static readonly INPUT_P = 458;
    static readonly SUPPORT = 459;
    static readonly PARALLEL = 460;
    static readonly SQL_P = 461;
    static readonly DEPENDS = 462;
    static readonly OVERRIDING = 463;
    static readonly CONFLICT = 464;
    static readonly SKIP_P = 465;
    static readonly LOCKED = 466;
    static readonly TIES = 467;
    static readonly ROLLUP = 468;
    static readonly CUBE = 469;
    static readonly GROUPING = 470;
    static readonly SETS = 471;
    static readonly TABLESAMPLE = 472;
    static readonly ORDINALITY = 473;
    static readonly XMLTABLE = 474;
    static readonly COLUMNS = 475;
    static readonly XMLNAMESPACES = 476;
    static readonly ROWTYPE = 477;
    static readonly NORMALIZED = 478;
    static readonly WITHIN = 479;
    static readonly FILTER = 480;
    static readonly GROUPS = 481;
    static readonly OTHERS = 482;
    static readonly NFC = 483;
    static readonly NFD = 484;
    static readonly NFKC = 485;
    static readonly NFKD = 486;
    static readonly UESCAPE = 487;
    static readonly VIEWS = 488;
    static readonly NORMALIZE = 489;
    static readonly DUMP = 490;
    static readonly PRINT_STRICT_PARAMS = 491;
    static readonly VARIABLE_CONFLICT = 492;
    static readonly ERROR = 493;
    static readonly USE_VARIABLE = 494;
    static readonly USE_COLUMN = 495;
    static readonly ALIAS = 496;
    static readonly CONSTANT = 497;
    static readonly PERFORM = 498;
    static readonly GET = 499;
    static readonly DIAGNOSTICS = 500;
    static readonly STACKED = 501;
    static readonly ELSIF = 502;
    static readonly WHILE = 503;
    static readonly REVERSE = 504;
    static readonly FOREACH = 505;
    static readonly SLICE = 506;
    static readonly EXIT = 507;
    static readonly RETURN = 508;
    static readonly QUERY = 509;
    static readonly RAISE = 510;
    static readonly SQLSTATE = 511;
    static readonly DEBUG = 512;
    static readonly LOG = 513;
    static readonly INFO = 514;
    static readonly NOTICE = 515;
    static readonly WARNING = 516;
    static readonly EXCEPTION = 517;
    static readonly ASSERT = 518;
    static readonly LOOP = 519;
    static readonly OPEN = 520;
    static readonly ABS = 521;
    static readonly CBRT = 522;
    static readonly CEIL = 523;
    static readonly CEILING = 524;
    static readonly DEGREES = 525;
    static readonly DIV = 526;
    static readonly EXP = 527;
    static readonly FACTORIAL = 528;
    static readonly FLOOR = 529;
    static readonly GCD = 530;
    static readonly LCM = 531;
    static readonly LN = 532;
    static readonly LOG10 = 533;
    static readonly MIN_SCALE = 534;
    static readonly MOD = 535;
    static readonly PI = 536;
    static readonly POWER = 537;
    static readonly RADIANS = 538;
    static readonly ROUND = 539;
    static readonly SCALE = 540;
    static readonly SIGN = 541;
    static readonly SQRT = 542;
    static readonly TRIM_SCALE = 543;
    static readonly TRUNC = 544;
    static readonly WIDTH_BUCKET = 545;
    static readonly RANDOM = 546;
    static readonly SETSEED = 547;
    static readonly ACOS = 548;
    static readonly ACOSD = 549;
    static readonly ASIN = 550;
    static readonly ASIND = 551;
    static readonly ATAN = 552;
    static readonly ATAND = 553;
    static readonly ATAN2 = 554;
    static readonly ATAN2D = 555;
    static readonly COS = 556;
    static readonly COSD = 557;
    static readonly COT = 558;
    static readonly COTD = 559;
    static readonly SIN = 560;
    static readonly SIND = 561;
    static readonly TAN = 562;
    static readonly TAND = 563;
    static readonly SINH = 564;
    static readonly COSH = 565;
    static readonly TANH = 566;
    static readonly ASINH = 567;
    static readonly ACOSH = 568;
    static readonly ATANH = 569;
    static readonly BIT_LENGTH = 570;
    static readonly CHAR_LENGTH = 571;
    static readonly CHARACTER_LENGTH = 572;
    static readonly LOWER = 573;
    static readonly OCTET_LENGTH = 574;
    static readonly UPPER = 575;
    static readonly ASCII = 576;
    static readonly BTRIM = 577;
    static readonly CHR = 578;
    static readonly CONCAT = 579;
    static readonly CONCAT_WS = 580;
    static readonly FORMAT = 581;
    static readonly INITCAP = 582;
    static readonly LENGTH = 583;
    static readonly LPAD = 584;
    static readonly LTRIM = 585;
    static readonly MD5 = 586;
    static readonly PARSE_IDENT = 587;
    static readonly PG_CLIENT_ENCODING = 588;
    static readonly QUOTE_IDENT = 589;
    static readonly QUOTE_LITERAL = 590;
    static readonly QUOTE_NULLABLE = 591;
    static readonly REGEXP_COUNT = 592;
    static readonly REGEXP_INSTR = 593;
    static readonly REGEXP_LIKE = 594;
    static readonly REGEXP_MATCH = 595;
    static readonly REGEXP_MATCHES = 596;
    static readonly REGEXP_REPLACE = 597;
    static readonly REGEXP_SPLIT_TO_ARRAY = 598;
    static readonly REGEXP_SPLIT_TO_TABLE = 599;
    static readonly REGEXP_SUBSTR = 600;
    static readonly REPEAT = 601;
    static readonly RPAD = 602;
    static readonly RTRIM = 603;
    static readonly SPLIT_PART = 604;
    static readonly STARTS_WITH = 605;
    static readonly STRING_TO_ARRAY = 606;
    static readonly STRING_TO_TABLE = 607;
    static readonly STRPOS = 608;
    static readonly SUBSTR = 609;
    static readonly TO_ASCII = 610;
    static readonly TO_HEX = 611;
    static readonly TRANSLATE = 612;
    static readonly UNISTR = 613;
    static readonly AGE = 614;
    static readonly CLOCK_TIMESTAMP = 615;
    static readonly DATE_BIN = 616;
    static readonly DATE_PART = 617;
    static readonly DATE_TRUNC = 618;
    static readonly ISFINITE = 619;
    static readonly JUSTIFY_DAYS = 620;
    static readonly JUSTIFY_HOURS = 621;
    static readonly JUSTIFY_INTERVAL = 622;
    static readonly MAKE_DATE = 623;
    static readonly MAKE_INTERVAL = 624;
    static readonly MAKE_TIME = 625;
    static readonly MAKE_TIMESTAMP = 626;
    static readonly MAKE_TIMESTAMPTZ = 627;
    static readonly NOW = 628;
    static readonly STATEMENT_TIMESTAMP = 629;
    static readonly TIMEOFDAY = 630;
    static readonly TRANSACTION_TIMESTAMP = 631;
    static readonly TO_TIMESTAMP = 632;
    static readonly TO_CHAR = 633;
    static readonly TO_DATE = 634;
    static readonly TO_NUMBER = 635;
    static readonly Identifier = 636;
    static readonly QuotedIdentifier = 637;
    static readonly UnterminatedQuotedIdentifier = 638;
    static readonly InvalidQuotedIdentifier = 639;
    static readonly InvalidUnterminatedQuotedIdentifier = 640;
    static readonly UnicodeQuotedIdentifier = 641;
    static readonly UnterminatedUnicodeQuotedIdentifier = 642;
    static readonly InvalidUnicodeQuotedIdentifier = 643;
    static readonly InvalidUnterminatedUnicodeQuotedIdentifier = 644;
    static readonly StringConstant = 645;
    static readonly UnterminatedStringConstant = 646;
    static readonly UnicodeEscapeStringConstant = 647;
    static readonly UnterminatedUnicodeEscapeStringConstant = 648;
    static readonly BeginDollarStringConstant = 649;
    static readonly BinaryStringConstant = 650;
    static readonly UnterminatedBinaryStringConstant = 651;
    static readonly InvalidBinaryStringConstant = 652;
    static readonly InvalidUnterminatedBinaryStringConstant = 653;
    static readonly HexadecimalStringConstant = 654;
    static readonly UnterminatedHexadecimalStringConstant = 655;
    static readonly InvalidHexadecimalStringConstant = 656;
    static readonly InvalidUnterminatedHexadecimalStringConstant = 657;
    static readonly Integral = 658;
    static readonly NumericFail = 659;
    static readonly Numeric = 660;
    static readonly PLSQLVARIABLENAME = 661;
    static readonly PLSQLIDENTIFIER = 662;
    static readonly Whitespace = 663;
    static readonly Newline = 664;
    static readonly LineComment = 665;
    static readonly BlockComment = 666;
    static readonly UnterminatedBlockComment = 667;
    static readonly MetaCommand = 668;
    static readonly EndMetaCommand = 669;
    static readonly ErrorCharacter = 670;
    static readonly EscapeStringConstant = 671;
    static readonly UnterminatedEscapeStringConstant = 672;
    static readonly InvalidEscapeStringConstant = 673;
    static readonly InvalidUnterminatedEscapeStringConstant = 674;
    static readonly AfterEscapeStringConstantMode_NotContinued = 675;
    static readonly AfterEscapeStringConstantWithNewlineMode_NotContinued = 676;
    static readonly DollarText = 677;
    static readonly EndDollarStringConstant = 678;
    static readonly AfterEscapeStringConstantWithNewlineMode_Continued = 679;
    static readonly RULE_root = 0;
    static readonly RULE_plsqlRoot = 1;
    static readonly RULE_statements = 2;
    static readonly RULE_statement = 3;
    static readonly RULE_plsqlConsoleCommand = 4;
    static readonly RULE_callStatement = 5;
    static readonly RULE_optionalWith = 6;
    static readonly RULE_optionalRoleList = 7;
    static readonly RULE_alterOptionalRoleList = 8;
    static readonly RULE_alterRoleElemement = 9;
    static readonly RULE_createRoleElement = 10;
    static readonly RULE_createRoleStatement = 11;
    static readonly RULE_alterRoleStatement = 12;
    static readonly RULE_optionalInDatabase = 13;
    static readonly RULE_alterRoleSetStatement = 14;
    static readonly RULE_dropRoleStatement = 15;
    static readonly RULE_addOrDrop = 16;
    static readonly RULE_createSchemaStatement = 17;
    static readonly RULE_optionalSchemaName = 18;
    static readonly RULE_optionalSchemaList = 19;
    static readonly RULE_schemaStatement = 20;
    static readonly RULE_variableSetStatement = 21;
    static readonly RULE_setStatementEnding = 22;
    static readonly RULE_genericSetClause = 23;
    static readonly RULE_setStatementMore = 24;
    static readonly RULE_variableName = 25;
    static readonly RULE_variableList = 26;
    static readonly RULE_variableValue = 27;
    static readonly RULE_isoLevel = 28;
    static readonly RULE_booleanOrString = 29;
    static readonly RULE_zoneValue = 30;
    static readonly RULE_optionalEncoding = 31;
    static readonly RULE_nonReservedWordOrSconst = 32;
    static readonly RULE_variableResetStatement = 33;
    static readonly RULE_resetClauseRest = 34;
    static readonly RULE_genericResetClause = 35;
    static readonly RULE_setResetClause = 36;
    static readonly RULE_functionSetResetClause = 37;
    static readonly RULE_variableShowStatement = 38;
    static readonly RULE_setConstraintsStatement = 39;
    static readonly RULE_constraintsSetList = 40;
    static readonly RULE_constraintsSetMode = 41;
    static readonly RULE_checkpointStatement = 42;
    static readonly RULE_discardStatement = 43;
    static readonly RULE_alterTableStatement = 44;
    static readonly RULE_alterTableCommands = 45;
    static readonly RULE_partitionCommand = 46;
    static readonly RULE_indexPartitionCommand = 47;
    static readonly RULE_alterTableCommand = 48;
    static readonly RULE_alterColumnDefault = 49;
    static readonly RULE_optionalDropBehavior = 50;
    static readonly RULE_optionalCollateClause = 51;
    static readonly RULE_alterUsing = 52;
    static readonly RULE_replicaIdentity = 53;
    static readonly RULE_relOptions = 54;
    static readonly RULE_optionalRelOptions = 55;
    static readonly RULE_relOptionList = 56;
    static readonly RULE_relOptionElem = 57;
    static readonly RULE_alterIdentityColumnOptionList = 58;
    static readonly RULE_alterIdentityColumnOption = 59;
    static readonly RULE_partitionBoundSpecification = 60;
    static readonly RULE_hashPartitionBoundElement = 61;
    static readonly RULE_hashPartitionBound = 62;
    static readonly RULE_alterCompositeTypeStatement = 63;
    static readonly RULE_alterTypeCommands = 64;
    static readonly RULE_alterTypeCommand = 65;
    static readonly RULE_closePortalStatement = 66;
    static readonly RULE_copyStatement = 67;
    static readonly RULE_fromOrTo = 68;
    static readonly RULE_copyFileName = 69;
    static readonly RULE_copyOptions = 70;
    static readonly RULE_copyOptionsItem = 71;
    static readonly RULE_copyDelimiter = 72;
    static readonly RULE_copyGenericOptionList = 73;
    static readonly RULE_copyGenericOptionElem = 74;
    static readonly RULE_copyGenericOptionArgument = 75;
    static readonly RULE_createStatement = 76;
    static readonly RULE_temporaryOption = 77;
    static readonly RULE_optionalTableElementList = 78;
    static readonly RULE_optionalTypedTableElementList = 79;
    static readonly RULE_tableElementList = 80;
    static readonly RULE_typedTableElementList = 81;
    static readonly RULE_tableElement = 82;
    static readonly RULE_typedTableElement = 83;
    static readonly RULE_columnDefinition = 84;
    static readonly RULE_columnOptions = 85;
    static readonly RULE_columnQualifierList = 86;
    static readonly RULE_columnConstraint = 87;
    static readonly RULE_columnConstraintElement = 88;
    static readonly RULE_generatedWhen = 89;
    static readonly RULE_constraintAttribute = 90;
    static readonly RULE_tableLikeClause = 91;
    static readonly RULE_tableLikeOptionList = 92;
    static readonly RULE_tableLikeOption = 93;
    static readonly RULE_tableConstraint = 94;
    static readonly RULE_constraintElement = 95;
    static readonly RULE_columnListWithParentheses = 96;
    static readonly RULE_columnList = 97;
    static readonly RULE_columnElement = 98;
    static readonly RULE_optionalColumnListInclude = 99;
    static readonly RULE_matchClause = 100;
    static readonly RULE_exclusionConstraintList = 101;
    static readonly RULE_exclusionConstraintElement = 102;
    static readonly RULE_exclusionWhereClause = 103;
    static readonly RULE_keyActions = 104;
    static readonly RULE_onKeyUpdateClause = 105;
    static readonly RULE_onKeyDeleteClause = 106;
    static readonly RULE_keyAction = 107;
    static readonly RULE_inheritClause = 108;
    static readonly RULE_optionalPartitionSpecification = 109;
    static readonly RULE_partitionSpecification = 110;
    static readonly RULE_partitionElements = 111;
    static readonly RULE_partitionElement = 112;
    static readonly RULE_optionalTableAccessMethodClause = 113;
    static readonly RULE_with = 114;
    static readonly RULE_onCommitOption = 115;
    static readonly RULE_optionalTablespace = 116;
    static readonly RULE_usingIndexTablespace = 117;
    static readonly RULE_existingIndex = 118;
    static readonly RULE_createStatsStatement = 119;
    static readonly RULE_alterStatsStatement = 120;
    static readonly RULE_createAsStatement = 121;
    static readonly RULE_createAsTarget = 122;
    static readonly RULE_withData = 123;
    static readonly RULE_createMaterializedViewStatement = 124;
    static readonly RULE_createMaterializedViewTarget = 125;
    static readonly RULE_refreshMaterializedViewStatement = 126;
    static readonly RULE_createSequenceStatement = 127;
    static readonly RULE_alterSequenceStatement = 128;
    static readonly RULE_optionalParenthesizedSeqOptionsList = 129;
    static readonly RULE_sequenceOptionList = 130;
    static readonly RULE_sequenceOptionItem = 131;
    static readonly RULE_numericOnly = 132;
    static readonly RULE_numericOnlyList = 133;
    static readonly RULE_createProcedureLangStatement = 134;
    static readonly RULE_handlerName = 135;
    static readonly RULE_optionalInlineHandler = 136;
    static readonly RULE_validatorClause = 137;
    static readonly RULE_optionalProcedural = 138;
    static readonly RULE_createTablespaceStatement = 139;
    static readonly RULE_optionalTablespaceOwner = 140;
    static readonly RULE_dropTablespaceStatement = 141;
    static readonly RULE_createExtensionStatement = 142;
    static readonly RULE_createExtensionOptionItem = 143;
    static readonly RULE_alterExtensionStatement = 144;
    static readonly RULE_alterExtensionOptionItem = 145;
    static readonly RULE_alterExtensionContentsStatement = 146;
    static readonly RULE_createForeignDataWrapperStatement = 147;
    static readonly RULE_forwardOption = 148;
    static readonly RULE_forwardOptions = 149;
    static readonly RULE_alterForeignDataWrapperStatement = 150;
    static readonly RULE_createGenericOptions = 151;
    static readonly RULE_genericOptionList = 152;
    static readonly RULE_alterGenericOptions = 153;
    static readonly RULE_alterGenericOptionList = 154;
    static readonly RULE_alterGenericOptionElem = 155;
    static readonly RULE_genericOptionElement = 156;
    static readonly RULE_genericOptionName = 157;
    static readonly RULE_genericOptionArgument = 158;
    static readonly RULE_createForeignServerStatement = 159;
    static readonly RULE_optionalType = 160;
    static readonly RULE_foreignServerVersion = 161;
    static readonly RULE_alterForeignServerStatement = 162;
    static readonly RULE_createForeignTableStatement = 163;
    static readonly RULE_importForeignSchemaStatement = 164;
    static readonly RULE_importQualificationType = 165;
    static readonly RULE_importQualification = 166;
    static readonly RULE_createUserMappingStatement = 167;
    static readonly RULE_authIdentifier = 168;
    static readonly RULE_dropUserMappingStatement = 169;
    static readonly RULE_alterUserMappingStatement = 170;
    static readonly RULE_createPolicyStatement = 171;
    static readonly RULE_alterPolicyStatement = 172;
    static readonly RULE_rowSecurityOptionalExpression = 173;
    static readonly RULE_rowSecurityOptionalWithCheck = 174;
    static readonly RULE_rowSecurityOptionalToUser = 175;
    static readonly RULE_rowSecurityDefaultPermissive = 176;
    static readonly RULE_rowSecurityDefaultForCmd = 177;
    static readonly RULE_rowSecurityCommand = 178;
    static readonly RULE_createAccessMethodStatement = 179;
    static readonly RULE_accessMethodType = 180;
    static readonly RULE_createTriggerStatement = 181;
    static readonly RULE_triggerActionTime = 182;
    static readonly RULE_triggerEvents = 183;
    static readonly RULE_triggerOneEvent = 184;
    static readonly RULE_triggerReferencing = 185;
    static readonly RULE_triggerTransitions = 186;
    static readonly RULE_triggerTransition = 187;
    static readonly RULE_transitionOldOrNew = 188;
    static readonly RULE_transitionRowOrTable = 189;
    static readonly RULE_transitionRelName = 190;
    static readonly RULE_triggerForSpec = 191;
    static readonly RULE_triggerForType = 192;
    static readonly RULE_triggerWhen = 193;
    static readonly RULE_functionOrProcedure = 194;
    static readonly RULE_triggerFunctionArguments = 195;
    static readonly RULE_triggerFunctionArgument = 196;
    static readonly RULE_optionalConstraintFromTable = 197;
    static readonly RULE_constraintAttributeSpecification = 198;
    static readonly RULE_constraintAttributeElement = 199;
    static readonly RULE_createEventTriggerStatement = 200;
    static readonly RULE_eventTriggerWhenList = 201;
    static readonly RULE_eventTriggerWhenItem = 202;
    static readonly RULE_eventTriggerValueList = 203;
    static readonly RULE_alterEventTriggerStatement = 204;
    static readonly RULE_enableTrigger = 205;
    static readonly RULE_createAssertionStatement = 206;
    static readonly RULE_defineStatement = 207;
    static readonly RULE_definition = 208;
    static readonly RULE_definitionElement = 209;
    static readonly RULE_definitionArgument = 210;
    static readonly RULE_oldAggregateDefinition = 211;
    static readonly RULE_oldAggregateElement = 212;
    static readonly RULE_enumValueList = 213;
    static readonly RULE_alterEnumStatement = 214;
    static readonly RULE_optionalIfNotExists = 215;
    static readonly RULE_createOperatorClassStatement = 216;
    static readonly RULE_operatorClassItemList = 217;
    static readonly RULE_operatorClassItem = 218;
    static readonly RULE_optionalOperatorFamily = 219;
    static readonly RULE_operatorClassPurpose = 220;
    static readonly RULE_createOperatorFamilyStatement = 221;
    static readonly RULE_alterOperatorFamilyStatement = 222;
    static readonly RULE_operatorClassDropList = 223;
    static readonly RULE_operatorClassDrop = 224;
    static readonly RULE_dropOperatorClassStatement = 225;
    static readonly RULE_dropOperatorFamilyStatement = 226;
    static readonly RULE_dropOwnedStatement = 227;
    static readonly RULE_reassignOwnedStatement = 228;
    static readonly RULE_dropStatement = 229;
    static readonly RULE_objectTypeAnyName = 230;
    static readonly RULE_objectTypeName = 231;
    static readonly RULE_dropTypeName = 232;
    static readonly RULE_objectTypeNameOnAnyName = 233;
    static readonly RULE_anyNameList = 234;
    static readonly RULE_anyName = 235;
    static readonly RULE_attributes = 236;
    static readonly RULE_typeNameList = 237;
    static readonly RULE_truncateStatement = 238;
    static readonly RULE_optionalRestartSequences = 239;
    static readonly RULE_commentStatement = 240;
    static readonly RULE_commentText = 241;
    static readonly RULE_securityLabelStatement = 242;
    static readonly RULE_optionalProvider = 243;
    static readonly RULE_securityLabel = 244;
    static readonly RULE_fetchStatement = 245;
    static readonly RULE_fetchArguments = 246;
    static readonly RULE_fromOrIn = 247;
    static readonly RULE_optionalFromOrIn = 248;
    static readonly RULE_grantStatement = 249;
    static readonly RULE_revokeStatement = 250;
    static readonly RULE_privileges = 251;
    static readonly RULE_privilegeList = 252;
    static readonly RULE_privilege = 253;
    static readonly RULE_privilegeTarget = 254;
    static readonly RULE_granteeList = 255;
    static readonly RULE_grantee = 256;
    static readonly RULE_optionalWithGrantOption = 257;
    static readonly RULE_grantPrivilegeStatement = 258;
    static readonly RULE_revokePrivilegeStatement = 259;
    static readonly RULE_optionalGrantAdminOption = 260;
    static readonly RULE_optionalGrantedBy = 261;
    static readonly RULE_alterDefaultPrivilegesStatement = 262;
    static readonly RULE_defultPrivilegeOption = 263;
    static readonly RULE_defaultPrivelegeAction = 264;
    static readonly RULE_defultPrivilegeTarget = 265;
    static readonly RULE_indexStatement = 266;
    static readonly RULE_optionalAccessMethodClause = 267;
    static readonly RULE_indexParameters = 268;
    static readonly RULE_indexElemOptions = 269;
    static readonly RULE_indexElement = 270;
    static readonly RULE_optionalInclude = 271;
    static readonly RULE_optionalCollate = 272;
    static readonly RULE_optionalClass = 273;
    static readonly RULE_optionalAscOrDesc = 274;
    static readonly RULE_optionalNullsOrder = 275;
    static readonly RULE_createFunctionStatement = 276;
    static readonly RULE_optionalOrReplace = 277;
    static readonly RULE_functionArgumentsList = 278;
    static readonly RULE_functionWithArgumentTypesList = 279;
    static readonly RULE_functionWithArgumentTypes = 280;
    static readonly RULE_functionArgumentsWithDefaultsList = 281;
    static readonly RULE_functionArgumentWithDefault = 282;
    static readonly RULE_functionArgument = 283;
    static readonly RULE_argumentClass = 284;
    static readonly RULE_parameterName = 285;
    static readonly RULE_functionReturn = 286;
    static readonly RULE_functionType = 287;
    static readonly RULE_aggregateArguments = 288;
    static readonly RULE_aggregateArgumentsList = 289;
    static readonly RULE_aggregateWithArgumentTypes = 290;
    static readonly RULE_aggregateWithArgumentTypesList = 291;
    static readonly RULE_createFunctionOptionList = 292;
    static readonly RULE_commonFunctionOptionItem = 293;
    static readonly RULE_createFunctionOptionItem = 294;
    static readonly RULE_functionAs = 295;
    static readonly RULE_transformTypeList = 296;
    static readonly RULE_optionalDefinition = 297;
    static readonly RULE_tableFunctionColumn = 298;
    static readonly RULE_tableFunctionColumnList = 299;
    static readonly RULE_alterFunctionStatement = 300;
    static readonly RULE_removeFunctionStatement = 301;
    static readonly RULE_removeAggregateStatement = 302;
    static readonly RULE_removeOperatorStatement = 303;
    static readonly RULE_operatorArgumentTypes = 304;
    static readonly RULE_anyOperator = 305;
    static readonly RULE_operatorWithArgumentTypesList = 306;
    static readonly RULE_operatorWithArgumentTypes = 307;
    static readonly RULE_doStatement = 308;
    static readonly RULE_doStatementOptionsList = 309;
    static readonly RULE_doStatementOptionItem = 310;
    static readonly RULE_createCastStatement = 311;
    static readonly RULE_castContext = 312;
    static readonly RULE_dropCastStatement = 313;
    static readonly RULE_optionalIfExists = 314;
    static readonly RULE_createTransformStatement = 315;
    static readonly RULE_transformElementList = 316;
    static readonly RULE_dropTransformStatement = 317;
    static readonly RULE_reindexStatement = 318;
    static readonly RULE_reindexTargetType = 319;
    static readonly RULE_reindexOptionList = 320;
    static readonly RULE_reindexOptionElement = 321;
    static readonly RULE_alterTablespaceStatement = 322;
    static readonly RULE_renameStatement = 323;
    static readonly RULE_optionalColumn = 324;
    static readonly RULE_optionalSetData = 325;
    static readonly RULE_alterObjectDependsStatement = 326;
    static readonly RULE_alterObjectSchemaStatement = 327;
    static readonly RULE_alterOperatorStatement = 328;
    static readonly RULE_operatorDefinitionList = 329;
    static readonly RULE_operatorDefinitionElement = 330;
    static readonly RULE_operatorDefinitionArgument = 331;
    static readonly RULE_alterTypeStatement = 332;
    static readonly RULE_alterOwnerStatement = 333;
    static readonly RULE_createPublicationStatement = 334;
    static readonly RULE_optionalPublicationForTables = 335;
    static readonly RULE_publicationForTables = 336;
    static readonly RULE_alterPublicationStatement = 337;
    static readonly RULE_createSubscriptionStatement = 338;
    static readonly RULE_publicationNameList = 339;
    static readonly RULE_publicationNameItem = 340;
    static readonly RULE_alterSubscriptionStatement = 341;
    static readonly RULE_dropSubscriptionStatement = 342;
    static readonly RULE_ruleStatement = 343;
    static readonly RULE_ruleActionList = 344;
    static readonly RULE_ruleActionMulti = 345;
    static readonly RULE_ruleActionStatement = 346;
    static readonly RULE_ruleActionStatementOrEmpty = 347;
    static readonly RULE_event = 348;
    static readonly RULE_optionalInstead = 349;
    static readonly RULE_notifyStatement = 350;
    static readonly RULE_notifyPayload = 351;
    static readonly RULE_listenStatement = 352;
    static readonly RULE_unlistenStatement = 353;
    static readonly RULE_transactionStatement = 354;
    static readonly RULE_optionalTransaction = 355;
    static readonly RULE_transactionModeItem = 356;
    static readonly RULE_transactionModeList = 357;
    static readonly RULE_optionalTransactionChain = 358;
    static readonly RULE_viewStatement = 359;
    static readonly RULE_optionalCheckOption = 360;
    static readonly RULE_loadStatement = 361;
    static readonly RULE_createDatabaseStatement = 362;
    static readonly RULE_createDatabaseOptionList = 363;
    static readonly RULE_createDatabaseOptionItem = 364;
    static readonly RULE_createDatabaseOptionName = 365;
    static readonly RULE_alterDatabaseStatement = 366;
    static readonly RULE_alterDatabaseSetStatement = 367;
    static readonly RULE_dropDatabaseStatement = 368;
    static readonly RULE_alterCollationStatement = 369;
    static readonly RULE_alterSystemStatement = 370;
    static readonly RULE_createDomainStatement = 371;
    static readonly RULE_alterDomainStatement = 372;
    static readonly RULE_alterDomainCommand = 373;
    static readonly RULE_optionalAs = 374;
    static readonly RULE_altertsDictionaryStatement = 375;
    static readonly RULE_altertsConfigurationStatement = 376;
    static readonly RULE_createConversionStatement = 377;
    static readonly RULE_clusterStatement = 378;
    static readonly RULE_clusterIndexSpecification = 379;
    static readonly RULE_vacuumStatement = 380;
    static readonly RULE_analyzeStatement = 381;
    static readonly RULE_vacuumAnalyzeOptionList = 382;
    static readonly RULE_analyzeKeyword = 383;
    static readonly RULE_vacuumAnalyzeOptionElement = 384;
    static readonly RULE_vacuumAnalyzeOptionName = 385;
    static readonly RULE_vacuumAnalyzeOptionArgument = 386;
    static readonly RULE_optionalVerbose = 387;
    static readonly RULE_optionalNameList = 388;
    static readonly RULE_vacuumRelation = 389;
    static readonly RULE_optionalVacuumRelationList = 390;
    static readonly RULE_explainStatement = 391;
    static readonly RULE_explainableStatement = 392;
    static readonly RULE_explainOptionElement = 393;
    static readonly RULE_explainOptionName = 394;
    static readonly RULE_explainOptionArgument = 395;
    static readonly RULE_prepareStatement = 396;
    static readonly RULE_prepareTypeClause = 397;
    static readonly RULE_preparableStatement = 398;
    static readonly RULE_executeStatement = 399;
    static readonly RULE_executeParameterClause = 400;
    static readonly RULE_deallocateStatement = 401;
    static readonly RULE_insertStatement = 402;
    static readonly RULE_insertTarget = 403;
    static readonly RULE_insertRest = 404;
    static readonly RULE_overrideKind = 405;
    static readonly RULE_insertColumnList = 406;
    static readonly RULE_insertColumnItem = 407;
    static readonly RULE_optionalOnConflict = 408;
    static readonly RULE_optionalConflictExpr = 409;
    static readonly RULE_returningClause = 410;
    static readonly RULE_mergeStatement = 411;
    static readonly RULE_mergeInsertClause = 412;
    static readonly RULE_mergeUpdateClause = 413;
    static readonly RULE_mergeDeleteClause = 414;
    static readonly RULE_deleteStatement = 415;
    static readonly RULE_usingClause = 416;
    static readonly RULE_lockStatement = 417;
    static readonly RULE_optionalLock = 418;
    static readonly RULE_lockType = 419;
    static readonly RULE_optionalNowait = 420;
    static readonly RULE_optionalNowaitOrSkip = 421;
    static readonly RULE_updateStatement = 422;
    static readonly RULE_setClauseList = 423;
    static readonly RULE_setClause = 424;
    static readonly RULE_setTarget = 425;
    static readonly RULE_declareCursorStatement = 426;
    static readonly RULE_cursorName = 427;
    static readonly RULE_optionalHold = 428;
    static readonly RULE_selectStatement = 429;
    static readonly RULE_selectWithParenthesis = 430;
    static readonly RULE_selectWithoutParenthesis = 431;
    static readonly RULE_selectClause = 432;
    static readonly RULE_simpleSelectIntersect = 433;
    static readonly RULE_simpleSelectStart = 434;
    static readonly RULE_simpleSelectPramary = 435;
    static readonly RULE_withClause = 436;
    static readonly RULE_commonTableExpression = 437;
    static readonly RULE_optionalMaterialized = 438;
    static readonly RULE_intoClause = 439;
    static readonly RULE_optionalTemporaryTableName = 440;
    static readonly RULE_optionalTable = 441;
    static readonly RULE_allOrDistinct = 442;
    static readonly RULE_distinctClause = 443;
    static readonly RULE_allClause = 444;
    static readonly RULE_optionalSortClause = 445;
    static readonly RULE_sortClause = 446;
    static readonly RULE_sortByList = 447;
    static readonly RULE_sortBy = 448;
    static readonly RULE_selectLimit = 449;
    static readonly RULE_optionalSelectLimit = 450;
    static readonly RULE_limitClause = 451;
    static readonly RULE_offsetClause = 452;
    static readonly RULE_selectLimitValue = 453;
    static readonly RULE_selectOffsetValue = 454;
    static readonly RULE_selectFetchFirstValue = 455;
    static readonly RULE_anyConst = 456;
    static readonly RULE_rowOrRows = 457;
    static readonly RULE_firstOrNext = 458;
    static readonly RULE_groupClause = 459;
    static readonly RULE_groupByList = 460;
    static readonly RULE_groupByItem = 461;
    static readonly RULE_havingClause = 462;
    static readonly RULE_forLockingClause = 463;
    static readonly RULE_forLockingItem = 464;
    static readonly RULE_forLockingStrength = 465;
    static readonly RULE_lockedRelationsList = 466;
    static readonly RULE_valuesClause = 467;
    static readonly RULE_fromClause = 468;
    static readonly RULE_fromList = 469;
    static readonly RULE_nonAnsiJoin = 470;
    static readonly RULE_tableReference = 471;
    static readonly RULE_aliasClause = 472;
    static readonly RULE_optionalAliasClause = 473;
    static readonly RULE_tableAliasClause = 474;
    static readonly RULE_functionAliasClause = 475;
    static readonly RULE_joinType = 476;
    static readonly RULE_joinQualifier = 477;
    static readonly RULE_viewName = 478;
    static readonly RULE_relationExpression = 479;
    static readonly RULE_relationExpressionList = 480;
    static readonly RULE_relationExpressionOptionalAlias = 481;
    static readonly RULE_tableSampleClause = 482;
    static readonly RULE_functionTable = 483;
    static readonly RULE_rowsFromItem = 484;
    static readonly RULE_optionalColumnDefinitionList = 485;
    static readonly RULE_optionalOrdinality = 486;
    static readonly RULE_whereClause = 487;
    static readonly RULE_whereOrCurrentClause = 488;
    static readonly RULE_optionalTableFunctionElementList = 489;
    static readonly RULE_tableFunctionElementList = 490;
    static readonly RULE_tableFunctionElement = 491;
    static readonly RULE_xmlTable = 492;
    static readonly RULE_xmlTableColumnElement = 493;
    static readonly RULE_xmlTableColumnOptionList = 494;
    static readonly RULE_xmlTableColumnOptionElement = 495;
    static readonly RULE_xmlNamespaceList = 496;
    static readonly RULE_xmlNamespaceElement = 497;
    static readonly RULE_typeName = 498;
    static readonly RULE_simpleTypeName = 499;
    static readonly RULE_constTypeName = 500;
    static readonly RULE_genericType = 501;
    static readonly RULE_optionalTypeModifiers = 502;
    static readonly RULE_numeric = 503;
    static readonly RULE_optionalFloat = 504;
    static readonly RULE_bit = 505;
    static readonly RULE_constBit = 506;
    static readonly RULE_bitWithLength = 507;
    static readonly RULE_bitWithoutLength = 508;
    static readonly RULE_character = 509;
    static readonly RULE_constCharacter = 510;
    static readonly RULE_characterChar = 511;
    static readonly RULE_optionalVarying = 512;
    static readonly RULE_constDateTime = 513;
    static readonly RULE_constInterval = 514;
    static readonly RULE_optionalTimezone = 515;
    static readonly RULE_optionalInterval = 516;
    static readonly RULE_intervalSecond = 517;
    static readonly RULE_optionalEscape = 518;
    static readonly RULE_expression1 = 519;
    static readonly RULE_expression1Qualifier = 520;
    static readonly RULE_expression1LessLess = 521;
    static readonly RULE_expression1Or = 522;
    static readonly RULE_expression1And = 523;
    static readonly RULE_expression1Between = 524;
    static readonly RULE_expression1In = 525;
    static readonly RULE_expression1UnaryNot = 526;
    static readonly RULE_expression1IsNull = 527;
    static readonly RULE_expression1IsNot = 528;
    static readonly RULE_expression1Compare = 529;
    static readonly RULE_expression1Like = 530;
    static readonly RULE_expression1qualifierOperator = 531;
    static readonly RULE_expression1UnaryQualifierOperator = 532;
    static readonly RULE_expression1Add = 533;
    static readonly RULE_expressionMultiply = 534;
    static readonly RULE_expression1Caret = 535;
    static readonly RULE_expression1UnarySign = 536;
    static readonly RULE_expression1AtTimeZone = 537;
    static readonly RULE_expression1Collate = 538;
    static readonly RULE_expression1Typecast = 539;
    static readonly RULE_expression2 = 540;
    static readonly RULE_expression3 = 541;
    static readonly RULE_plsqlVariableName = 542;
    static readonly RULE_functionApplication = 543;
    static readonly RULE_functionExpression = 544;
    static readonly RULE_functionExpressionWindowless = 545;
    static readonly RULE_functionExpressionCommonSubexpr = 546;
    static readonly RULE_xmlRootVersion = 547;
    static readonly RULE_optionalXmlRootStandalone = 548;
    static readonly RULE_xmlAttributes = 549;
    static readonly RULE_xmlAttributeList = 550;
    static readonly RULE_xmlAttributeElement = 551;
    static readonly RULE_documentOrContent = 552;
    static readonly RULE_xmlWhitespaceOption = 553;
    static readonly RULE_xmlExistsArgument = 554;
    static readonly RULE_xmlPassingMech = 555;
    static readonly RULE_withinGroupClause = 556;
    static readonly RULE_filterClause = 557;
    static readonly RULE_windowClause = 558;
    static readonly RULE_windowDefinitionList = 559;
    static readonly RULE_windowDefinition = 560;
    static readonly RULE_overClause = 561;
    static readonly RULE_windowSpecification = 562;
    static readonly RULE_optionalExistingWindowName = 563;
    static readonly RULE_optionalPartitionClause = 564;
    static readonly RULE_optionalFrameClause = 565;
    static readonly RULE_frameExtent = 566;
    static readonly RULE_frameBound = 567;
    static readonly RULE_optionalWindowExclusionClause = 568;
    static readonly RULE_row = 569;
    static readonly RULE_explicitRow = 570;
    static readonly RULE_implicitRow = 571;
    static readonly RULE_subType = 572;
    static readonly RULE_allOperator = 573;
    static readonly RULE_mathOperator = 574;
    static readonly RULE_operatorQualifier = 575;
    static readonly RULE_allOperatorQualifier = 576;
    static readonly RULE_subqueryOperator = 577;
    static readonly RULE_expressionList = 578;
    static readonly RULE_functionArgumentList = 579;
    static readonly RULE_functionArgumentExpression = 580;
    static readonly RULE_typeList = 581;
    static readonly RULE_arrayExpression = 582;
    static readonly RULE_arrayExpressionList = 583;
    static readonly RULE_extractList = 584;
    static readonly RULE_extractArgument = 585;
    static readonly RULE_unicodeNormalForm = 586;
    static readonly RULE_overlayList = 587;
    static readonly RULE_positionList = 588;
    static readonly RULE_substrList = 589;
    static readonly RULE_trimList = 590;
    static readonly RULE_inExpression = 591;
    static readonly RULE_caseExpression = 592;
    static readonly RULE_whenClauseList = 593;
    static readonly RULE_whenClause = 594;
    static readonly RULE_caseDefault = 595;
    static readonly RULE_caseArg = 596;
    static readonly RULE_columnReference = 597;
    static readonly RULE_indirectionElement = 598;
    static readonly RULE_indirection = 599;
    static readonly RULE_optionalIndirection = 600;
    static readonly RULE_optionalTargetList = 601;
    static readonly RULE_targetList = 602;
    static readonly RULE_targetElement = 603;
    static readonly RULE_qualifiedNameList = 604;
    static readonly RULE_databaseName = 605;
    static readonly RULE_databaseNameList = 606;
    static readonly RULE_schemaName = 607;
    static readonly RULE_schemaNameList = 608;
    static readonly RULE_indexName = 609;
    static readonly RULE_indexNameList = 610;
    static readonly RULE_triggerName = 611;
    static readonly RULE_constraintName = 612;
    static readonly RULE_sequenceName = 613;
    static readonly RULE_sequenceNameList = 614;
    static readonly RULE_qualifiedName = 615;
    static readonly RULE_nameList = 616;
    static readonly RULE_name = 617;
    static readonly RULE_attributeName = 618;
    static readonly RULE_fileName = 619;
    static readonly RULE_functionName = 620;
    static readonly RULE_aExpressionConst = 621;
    static readonly RULE_xconst = 622;
    static readonly RULE_bconst = 623;
    static readonly RULE_fconst = 624;
    static readonly RULE_iconst = 625;
    static readonly RULE_sconst = 626;
    static readonly RULE_anySconst = 627;
    static readonly RULE_optionalUescape = 628;
    static readonly RULE_signedIconst = 629;
    static readonly RULE_roleName = 630;
    static readonly RULE_roleNameList = 631;
    static readonly RULE_columnId = 632;
    static readonly RULE_tableAlias = 633;
    static readonly RULE_typeFunctionName = 634;
    static readonly RULE_nonReservedWord = 635;
    static readonly RULE_columnLabel = 636;
    static readonly RULE_identifier = 637;
    static readonly RULE_plsqlIdentifier = 638;
    static readonly RULE_unreservedKeyword = 639;
    static readonly RULE_columnNameKeyword = 640;
    static readonly RULE_typeFunctionNameKeyword = 641;
    static readonly RULE_reservedKeyword = 642;
    static readonly RULE_builtinFunctionName = 643;
    static readonly RULE_plsqlFunction = 644;
    static readonly RULE_computeOptions = 645;
    static readonly RULE_computeOption = 646;
    static readonly RULE_sharp = 647;
    static readonly RULE_optionValue = 648;
    static readonly RULE_optionalSemi = 649;
    static readonly RULE_plsqlBlock = 650;
    static readonly RULE_declareSection = 651;
    static readonly RULE_declareStart = 652;
    static readonly RULE_declareStatements = 653;
    static readonly RULE_labelDeclaration = 654;
    static readonly RULE_declareStatement = 655;
    static readonly RULE_declareStatement2 = 656;
    static readonly RULE_optionalScrollable = 657;
    static readonly RULE_declareCursorQuery = 658;
    static readonly RULE_declareCursorArgs = 659;
    static readonly RULE_declareCursorArglist = 660;
    static readonly RULE_declareCursorArg = 661;
    static readonly RULE_declareIsOrFor = 662;
    static readonly RULE_declareAliasItem = 663;
    static readonly RULE_declareVarname = 664;
    static readonly RULE_declareConst = 665;
    static readonly RULE_declareDatatype = 666;
    static readonly RULE_declareCollate = 667;
    static readonly RULE_declareNotNull = 668;
    static readonly RULE_declareDefaultValue = 669;
    static readonly RULE_declareDefaultKey = 670;
    static readonly RULE_assignOperator = 671;
    static readonly RULE_procedureSection = 672;
    static readonly RULE_proceduralStatement = 673;
    static readonly RULE_statementPerform = 674;
    static readonly RULE_statementCall = 675;
    static readonly RULE_optionalExpressionList = 676;
    static readonly RULE_statementAssign = 677;
    static readonly RULE_statementGetDiagram = 678;
    static readonly RULE_optionalGetDiagramArea = 679;
    static readonly RULE_getDiagramList = 680;
    static readonly RULE_getDiagramListItem = 681;
    static readonly RULE_getDiagramItem = 682;
    static readonly RULE_getDiagramTarget = 683;
    static readonly RULE_assignVariable = 684;
    static readonly RULE_statementIf = 685;
    static readonly RULE_statementElsifs = 686;
    static readonly RULE_statementElse = 687;
    static readonly RULE_statementCase = 688;
    static readonly RULE_optionalExpressionUntilWhen = 689;
    static readonly RULE_caseWhenList = 690;
    static readonly RULE_caseWhen = 691;
    static readonly RULE_optionalCaseElse = 692;
    static readonly RULE_statementLoop = 693;
    static readonly RULE_statementWhile = 694;
    static readonly RULE_statementFor = 695;
    static readonly RULE_forControl = 696;
    static readonly RULE_optionalForUsingExpression = 697;
    static readonly RULE_optionalCursorParameters = 698;
    static readonly RULE_optionalReverse = 699;
    static readonly RULE_optionalByExpression = 700;
    static readonly RULE_forVariable = 701;
    static readonly RULE_statementForeachA = 702;
    static readonly RULE_foreachSlice = 703;
    static readonly RULE_statementExit = 704;
    static readonly RULE_exitType = 705;
    static readonly RULE_statementReturn = 706;
    static readonly RULE_optionalReturnResult = 707;
    static readonly RULE_statementRaise = 708;
    static readonly RULE_optionalStatementRaiseLevel = 709;
    static readonly RULE_optionalRaiseList = 710;
    static readonly RULE_optionalRaiseUsing = 711;
    static readonly RULE_optionalRaiseUsingElement = 712;
    static readonly RULE_statementAssert = 713;
    static readonly RULE_optionalStatementAssertMessage = 714;
    static readonly RULE_loopBody = 715;
    static readonly RULE_statementExecSql = 716;
    static readonly RULE_statementDynExecute = 717;
    static readonly RULE_optionalExecuteUsing = 718;
    static readonly RULE_optionalExecuteUsingList = 719;
    static readonly RULE_optionalExecuteInto = 720;
    static readonly RULE_statementOpen = 721;
    static readonly RULE_optionalOpenBoundListItem = 722;
    static readonly RULE_statementFetch = 723;
    static readonly RULE_intoTarget = 724;
    static readonly RULE_optionalCursorFrom = 725;
    static readonly RULE_optionalFetchDirection = 726;
    static readonly RULE_statementMove = 727;
    static readonly RULE_statementClose = 728;
    static readonly RULE_statementNull = 729;
    static readonly RULE_statementCommit = 730;
    static readonly RULE_statementRollback = 731;
    static readonly RULE_plsqlOptionalTransactionChain = 732;
    static readonly RULE_statementSet = 733;
    static readonly RULE_cursorVariable = 734;
    static readonly RULE_exceptionSection = 735;
    static readonly RULE_procedureExceptions = 736;
    static readonly RULE_procedureException = 737;
    static readonly RULE_procedureConditions = 738;
    static readonly RULE_procedureCondition = 739;
    static readonly RULE_optionalBlockLabel = 740;
    static readonly RULE_optionalLoopLabel = 741;
    static readonly RULE_optionalLabel = 742;
    static readonly RULE_optionalExitCondition = 743;
    static readonly RULE_anyIdentifier = 744;
    static readonly RULE_plsqlUnreservedKeyword = 745;
    static readonly RULE_sqlExpression = 746;
    static readonly RULE_expressionUntilThen = 747;
    static readonly RULE_expressionUntilSemi = 748;
    static readonly RULE_expressionUntilRightbracket = 749;
    static readonly RULE_expressionUntilLoop = 750;
    static readonly RULE_makeExecuteSqlStatement = 751;
    static readonly RULE_optionalReturningClauseInto = 752;
    static readonly RULE_roleOrAliases = 753;
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly ruleNames: string[];
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException;
    constructor(input: antlr.TokenStream);
    root(): RootContext;
    plsqlRoot(): PlsqlRootContext;
    statements(): StatementsContext;
    statement(): StatementContext;
    plsqlConsoleCommand(): PlsqlConsoleCommandContext;
    callStatement(): CallStatementContext;
    optionalWith(): OptionalWithContext;
    optionalRoleList(): OptionalRoleListContext;
    alterOptionalRoleList(): AlterOptionalRoleListContext;
    alterRoleElemement(): AlterRoleElemementContext;
    createRoleElement(): CreateRoleElementContext;
    createRoleStatement(): CreateRoleStatementContext;
    alterRoleStatement(): AlterRoleStatementContext;
    optionalInDatabase(): OptionalInDatabaseContext;
    alterRoleSetStatement(): AlterRoleSetStatementContext;
    dropRoleStatement(): DropRoleStatementContext;
    addOrDrop(): AddOrDropContext;
    createSchemaStatement(): CreateSchemaStatementContext;
    optionalSchemaName(): OptionalSchemaNameContext;
    optionalSchemaList(): OptionalSchemaListContext;
    schemaStatement(): SchemaStatementContext;
    variableSetStatement(): VariableSetStatementContext;
    setStatementEnding(): SetStatementEndingContext;
    genericSetClause(): GenericSetClauseContext;
    setStatementMore(): SetStatementMoreContext;
    variableName(): VariableNameContext;
    variableList(): VariableListContext;
    variableValue(): VariableValueContext;
    isoLevel(): IsoLevelContext;
    booleanOrString(): BooleanOrStringContext;
    zoneValue(): ZoneValueContext;
    optionalEncoding(): OptionalEncodingContext;
    nonReservedWordOrSconst(): NonReservedWordOrSconstContext;
    variableResetStatement(): VariableResetStatementContext;
    resetClauseRest(): ResetClauseRestContext;
    genericResetClause(): GenericResetClauseContext;
    setResetClause(): SetResetClauseContext;
    functionSetResetClause(): FunctionSetResetClauseContext;
    variableShowStatement(): VariableShowStatementContext;
    setConstraintsStatement(): SetConstraintsStatementContext;
    constraintsSetList(): ConstraintsSetListContext;
    constraintsSetMode(): ConstraintsSetModeContext;
    checkpointStatement(): CheckpointStatementContext;
    discardStatement(): DiscardStatementContext;
    alterTableStatement(): AlterTableStatementContext;
    alterTableCommands(): AlterTableCommandsContext;
    partitionCommand(): PartitionCommandContext;
    indexPartitionCommand(): IndexPartitionCommandContext;
    alterTableCommand(): AlterTableCommandContext;
    alterColumnDefault(): AlterColumnDefaultContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    optionalCollateClause(): OptionalCollateClauseContext;
    alterUsing(): AlterUsingContext;
    replicaIdentity(): ReplicaIdentityContext;
    relOptions(): RelOptionsContext;
    optionalRelOptions(): OptionalRelOptionsContext;
    relOptionList(): RelOptionListContext;
    relOptionElem(): RelOptionElemContext;
    alterIdentityColumnOptionList(): AlterIdentityColumnOptionListContext;
    alterIdentityColumnOption(): AlterIdentityColumnOptionContext;
    partitionBoundSpecification(): PartitionBoundSpecificationContext;
    hashPartitionBoundElement(): HashPartitionBoundElementContext;
    hashPartitionBound(): HashPartitionBoundContext;
    alterCompositeTypeStatement(): AlterCompositeTypeStatementContext;
    alterTypeCommands(): AlterTypeCommandsContext;
    alterTypeCommand(): AlterTypeCommandContext;
    closePortalStatement(): ClosePortalStatementContext;
    copyStatement(): CopyStatementContext;
    fromOrTo(): FromOrToContext;
    copyFileName(): CopyFileNameContext;
    copyOptions(): CopyOptionsContext;
    copyOptionsItem(): CopyOptionsItemContext;
    copyDelimiter(): CopyDelimiterContext;
    copyGenericOptionList(): CopyGenericOptionListContext;
    copyGenericOptionElem(): CopyGenericOptionElemContext;
    copyGenericOptionArgument(): CopyGenericOptionArgumentContext;
    createStatement(): CreateStatementContext;
    temporaryOption(): TemporaryOptionContext;
    optionalTableElementList(): OptionalTableElementListContext;
    optionalTypedTableElementList(): OptionalTypedTableElementListContext;
    tableElementList(): TableElementListContext;
    typedTableElementList(): TypedTableElementListContext;
    tableElement(): TableElementContext;
    typedTableElement(): TypedTableElementContext;
    columnDefinition(): ColumnDefinitionContext;
    columnOptions(): ColumnOptionsContext;
    columnQualifierList(): ColumnQualifierListContext;
    columnConstraint(): ColumnConstraintContext;
    columnConstraintElement(): ColumnConstraintElementContext;
    generatedWhen(): GeneratedWhenContext;
    constraintAttribute(): ConstraintAttributeContext;
    tableLikeClause(): TableLikeClauseContext;
    tableLikeOptionList(): TableLikeOptionListContext;
    tableLikeOption(): TableLikeOptionContext;
    tableConstraint(): TableConstraintContext;
    constraintElement(): ConstraintElementContext;
    columnListWithParentheses(): ColumnListWithParenthesesContext;
    columnList(): ColumnListContext;
    columnElement(): ColumnElementContext;
    optionalColumnListInclude(): OptionalColumnListIncludeContext;
    matchClause(): MatchClauseContext;
    exclusionConstraintList(): ExclusionConstraintListContext;
    exclusionConstraintElement(): ExclusionConstraintElementContext;
    exclusionWhereClause(): ExclusionWhereClauseContext;
    keyActions(): KeyActionsContext;
    onKeyUpdateClause(): OnKeyUpdateClauseContext;
    onKeyDeleteClause(): OnKeyDeleteClauseContext;
    keyAction(): KeyActionContext;
    inheritClause(): InheritClauseContext;
    optionalPartitionSpecification(): OptionalPartitionSpecificationContext;
    partitionSpecification(): PartitionSpecificationContext;
    partitionElements(): PartitionElementsContext;
    partitionElement(): PartitionElementContext;
    optionalTableAccessMethodClause(): OptionalTableAccessMethodClauseContext;
    with_(): WithContext;
    onCommitOption(): OnCommitOptionContext;
    optionalTablespace(): OptionalTablespaceContext;
    usingIndexTablespace(): UsingIndexTablespaceContext;
    existingIndex(): ExistingIndexContext;
    createStatsStatement(): CreateStatsStatementContext;
    alterStatsStatement(): AlterStatsStatementContext;
    createAsStatement(): CreateAsStatementContext;
    createAsTarget(): CreateAsTargetContext;
    withData(): WithDataContext;
    createMaterializedViewStatement(): CreateMaterializedViewStatementContext;
    createMaterializedViewTarget(): CreateMaterializedViewTargetContext;
    refreshMaterializedViewStatement(): RefreshMaterializedViewStatementContext;
    createSequenceStatement(): CreateSequenceStatementContext;
    alterSequenceStatement(): AlterSequenceStatementContext;
    optionalParenthesizedSeqOptionsList(): OptionalParenthesizedSeqOptionsListContext;
    sequenceOptionList(): SequenceOptionListContext;
    sequenceOptionItem(): SequenceOptionItemContext;
    numericOnly(): NumericOnlyContext;
    numericOnlyList(): NumericOnlyListContext;
    createProcedureLangStatement(): CreateProcedureLangStatementContext;
    handlerName(): HandlerNameContext;
    optionalInlineHandler(): OptionalInlineHandlerContext;
    validatorClause(): ValidatorClauseContext;
    optionalProcedural(): OptionalProceduralContext;
    createTablespaceStatement(): CreateTablespaceStatementContext;
    optionalTablespaceOwner(): OptionalTablespaceOwnerContext;
    dropTablespaceStatement(): DropTablespaceStatementContext;
    createExtensionStatement(): CreateExtensionStatementContext;
    createExtensionOptionItem(): CreateExtensionOptionItemContext;
    alterExtensionStatement(): AlterExtensionStatementContext;
    alterExtensionOptionItem(): AlterExtensionOptionItemContext;
    alterExtensionContentsStatement(): AlterExtensionContentsStatementContext;
    createForeignDataWrapperStatement(): CreateForeignDataWrapperStatementContext;
    forwardOption(): ForwardOptionContext;
    forwardOptions(): ForwardOptionsContext;
    alterForeignDataWrapperStatement(): AlterForeignDataWrapperStatementContext;
    createGenericOptions(): CreateGenericOptionsContext;
    genericOptionList(): GenericOptionListContext;
    alterGenericOptions(): AlterGenericOptionsContext;
    alterGenericOptionList(): AlterGenericOptionListContext;
    alterGenericOptionElem(): AlterGenericOptionElemContext;
    genericOptionElement(): GenericOptionElementContext;
    genericOptionName(): GenericOptionNameContext;
    genericOptionArgument(): GenericOptionArgumentContext;
    createForeignServerStatement(): CreateForeignServerStatementContext;
    optionalType(): OptionalTypeContext;
    foreignServerVersion(): ForeignServerVersionContext;
    alterForeignServerStatement(): AlterForeignServerStatementContext;
    createForeignTableStatement(): CreateForeignTableStatementContext;
    importForeignSchemaStatement(): ImportForeignSchemaStatementContext;
    importQualificationType(): ImportQualificationTypeContext;
    importQualification(): ImportQualificationContext;
    createUserMappingStatement(): CreateUserMappingStatementContext;
    authIdentifier(): AuthIdentifierContext;
    dropUserMappingStatement(): DropUserMappingStatementContext;
    alterUserMappingStatement(): AlterUserMappingStatementContext;
    createPolicyStatement(): CreatePolicyStatementContext;
    alterPolicyStatement(): AlterPolicyStatementContext;
    rowSecurityOptionalExpression(): RowSecurityOptionalExpressionContext;
    rowSecurityOptionalWithCheck(): RowSecurityOptionalWithCheckContext;
    rowSecurityOptionalToUser(): RowSecurityOptionalToUserContext;
    rowSecurityDefaultPermissive(): RowSecurityDefaultPermissiveContext;
    rowSecurityDefaultForCmd(): RowSecurityDefaultForCmdContext;
    rowSecurityCommand(): RowSecurityCommandContext;
    createAccessMethodStatement(): CreateAccessMethodStatementContext;
    accessMethodType(): AccessMethodTypeContext;
    createTriggerStatement(): CreateTriggerStatementContext;
    triggerActionTime(): TriggerActionTimeContext;
    triggerEvents(): TriggerEventsContext;
    triggerOneEvent(): TriggerOneEventContext;
    triggerReferencing(): TriggerReferencingContext;
    triggerTransitions(): TriggerTransitionsContext;
    triggerTransition(): TriggerTransitionContext;
    transitionOldOrNew(): TransitionOldOrNewContext;
    transitionRowOrTable(): TransitionRowOrTableContext;
    transitionRelName(): TransitionRelNameContext;
    triggerForSpec(): TriggerForSpecContext;
    triggerForType(): TriggerForTypeContext;
    triggerWhen(): TriggerWhenContext;
    functionOrProcedure(): FunctionOrProcedureContext;
    triggerFunctionArguments(): TriggerFunctionArgumentsContext;
    triggerFunctionArgument(): TriggerFunctionArgumentContext;
    optionalConstraintFromTable(): OptionalConstraintFromTableContext;
    constraintAttributeSpecification(): ConstraintAttributeSpecificationContext;
    constraintAttributeElement(): ConstraintAttributeElementContext;
    createEventTriggerStatement(): CreateEventTriggerStatementContext;
    eventTriggerWhenList(): EventTriggerWhenListContext;
    eventTriggerWhenItem(): EventTriggerWhenItemContext;
    eventTriggerValueList(): EventTriggerValueListContext;
    alterEventTriggerStatement(): AlterEventTriggerStatementContext;
    enableTrigger(): EnableTriggerContext;
    createAssertionStatement(): CreateAssertionStatementContext;
    defineStatement(): DefineStatementContext;
    definition(): DefinitionContext;
    definitionElement(): DefinitionElementContext;
    definitionArgument(): DefinitionArgumentContext;
    oldAggregateDefinition(): OldAggregateDefinitionContext;
    oldAggregateElement(): OldAggregateElementContext;
    enumValueList(): EnumValueListContext;
    alterEnumStatement(): AlterEnumStatementContext;
    optionalIfNotExists(): OptionalIfNotExistsContext;
    createOperatorClassStatement(): CreateOperatorClassStatementContext;
    operatorClassItemList(): OperatorClassItemListContext;
    operatorClassItem(): OperatorClassItemContext;
    optionalOperatorFamily(): OptionalOperatorFamilyContext;
    operatorClassPurpose(): OperatorClassPurposeContext;
    createOperatorFamilyStatement(): CreateOperatorFamilyStatementContext;
    alterOperatorFamilyStatement(): AlterOperatorFamilyStatementContext;
    operatorClassDropList(): OperatorClassDropListContext;
    operatorClassDrop(): OperatorClassDropContext;
    dropOperatorClassStatement(): DropOperatorClassStatementContext;
    dropOperatorFamilyStatement(): DropOperatorFamilyStatementContext;
    dropOwnedStatement(): DropOwnedStatementContext;
    reassignOwnedStatement(): ReassignOwnedStatementContext;
    dropStatement(): DropStatementContext;
    objectTypeAnyName(): ObjectTypeAnyNameContext;
    objectTypeName(): ObjectTypeNameContext;
    dropTypeName(): DropTypeNameContext;
    objectTypeNameOnAnyName(): ObjectTypeNameOnAnyNameContext;
    anyNameList(): AnyNameListContext;
    anyName(): AnyNameContext;
    attributes(): AttributesContext;
    typeNameList(): TypeNameListContext;
    truncateStatement(): TruncateStatementContext;
    optionalRestartSequences(): OptionalRestartSequencesContext;
    commentStatement(): CommentStatementContext;
    commentText(): CommentTextContext;
    securityLabelStatement(): SecurityLabelStatementContext;
    optionalProvider(): OptionalProviderContext;
    securityLabel(): SecurityLabelContext;
    fetchStatement(): FetchStatementContext;
    fetchArguments(): FetchArgumentsContext;
    fromOrIn(): FromOrInContext;
    optionalFromOrIn(): OptionalFromOrInContext;
    grantStatement(): GrantStatementContext;
    revokeStatement(): RevokeStatementContext;
    privileges(): PrivilegesContext;
    privilegeList(): PrivilegeListContext;
    privilege(): PrivilegeContext;
    privilegeTarget(): PrivilegeTargetContext;
    granteeList(): GranteeListContext;
    grantee(): GranteeContext;
    optionalWithGrantOption(): OptionalWithGrantOptionContext;
    grantPrivilegeStatement(): GrantPrivilegeStatementContext;
    revokePrivilegeStatement(): RevokePrivilegeStatementContext;
    optionalGrantAdminOption(): OptionalGrantAdminOptionContext;
    optionalGrantedBy(): OptionalGrantedByContext;
    alterDefaultPrivilegesStatement(): AlterDefaultPrivilegesStatementContext;
    defultPrivilegeOption(): DefultPrivilegeOptionContext;
    defaultPrivelegeAction(): DefaultPrivelegeActionContext;
    defultPrivilegeTarget(): DefultPrivilegeTargetContext;
    indexStatement(): IndexStatementContext;
    optionalAccessMethodClause(): OptionalAccessMethodClauseContext;
    indexParameters(): IndexParametersContext;
    indexElemOptions(): IndexElemOptionsContext;
    indexElement(): IndexElementContext;
    optionalInclude(): OptionalIncludeContext;
    optionalCollate(): OptionalCollateContext;
    optionalClass(): OptionalClassContext;
    optionalAscOrDesc(): OptionalAscOrDescContext;
    optionalNullsOrder(): OptionalNullsOrderContext;
    createFunctionStatement(): CreateFunctionStatementContext;
    optionalOrReplace(): OptionalOrReplaceContext;
    functionArgumentsList(): FunctionArgumentsListContext;
    functionWithArgumentTypesList(): FunctionWithArgumentTypesListContext;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext;
    functionArgumentsWithDefaultsList(): FunctionArgumentsWithDefaultsListContext;
    functionArgumentWithDefault(): FunctionArgumentWithDefaultContext;
    functionArgument(): FunctionArgumentContext;
    argumentClass(): ArgumentClassContext;
    parameterName(): ParameterNameContext;
    functionReturn(): FunctionReturnContext;
    functionType(): FunctionTypeContext;
    aggregateArguments(): AggregateArgumentsContext;
    aggregateArgumentsList(): AggregateArgumentsListContext;
    aggregateWithArgumentTypes(): AggregateWithArgumentTypesContext;
    aggregateWithArgumentTypesList(): AggregateWithArgumentTypesListContext;
    createFunctionOptionList(): CreateFunctionOptionListContext;
    commonFunctionOptionItem(): CommonFunctionOptionItemContext;
    createFunctionOptionItem(): CreateFunctionOptionItemContext;
    functionAs(): FunctionAsContext;
    transformTypeList(): TransformTypeListContext;
    optionalDefinition(): OptionalDefinitionContext;
    tableFunctionColumn(): TableFunctionColumnContext;
    tableFunctionColumnList(): TableFunctionColumnListContext;
    alterFunctionStatement(): AlterFunctionStatementContext;
    removeFunctionStatement(): RemoveFunctionStatementContext;
    removeAggregateStatement(): RemoveAggregateStatementContext;
    removeOperatorStatement(): RemoveOperatorStatementContext;
    operatorArgumentTypes(): OperatorArgumentTypesContext;
    anyOperator(): AnyOperatorContext;
    operatorWithArgumentTypesList(): OperatorWithArgumentTypesListContext;
    operatorWithArgumentTypes(): OperatorWithArgumentTypesContext;
    doStatement(): DoStatementContext;
    doStatementOptionsList(): DoStatementOptionsListContext;
    doStatementOptionItem(): DoStatementOptionItemContext;
    createCastStatement(): CreateCastStatementContext;
    castContext(): CastContextContext;
    dropCastStatement(): DropCastStatementContext;
    optionalIfExists(): OptionalIfExistsContext;
    createTransformStatement(): CreateTransformStatementContext;
    transformElementList(): TransformElementListContext;
    dropTransformStatement(): DropTransformStatementContext;
    reindexStatement(): ReindexStatementContext;
    reindexTargetType(): ReindexTargetTypeContext;
    reindexOptionList(): ReindexOptionListContext;
    reindexOptionElement(): ReindexOptionElementContext;
    alterTablespaceStatement(): AlterTablespaceStatementContext;
    renameStatement(): RenameStatementContext;
    optionalColumn(): OptionalColumnContext;
    optionalSetData(): OptionalSetDataContext;
    alterObjectDependsStatement(): AlterObjectDependsStatementContext;
    alterObjectSchemaStatement(): AlterObjectSchemaStatementContext;
    alterOperatorStatement(): AlterOperatorStatementContext;
    operatorDefinitionList(): OperatorDefinitionListContext;
    operatorDefinitionElement(): OperatorDefinitionElementContext;
    operatorDefinitionArgument(): OperatorDefinitionArgumentContext;
    alterTypeStatement(): AlterTypeStatementContext;
    alterOwnerStatement(): AlterOwnerStatementContext;
    createPublicationStatement(): CreatePublicationStatementContext;
    optionalPublicationForTables(): OptionalPublicationForTablesContext;
    publicationForTables(): PublicationForTablesContext;
    alterPublicationStatement(): AlterPublicationStatementContext;
    createSubscriptionStatement(): CreateSubscriptionStatementContext;
    publicationNameList(): PublicationNameListContext;
    publicationNameItem(): PublicationNameItemContext;
    alterSubscriptionStatement(): AlterSubscriptionStatementContext;
    dropSubscriptionStatement(): DropSubscriptionStatementContext;
    ruleStatement(): RuleStatementContext;
    ruleActionList(): RuleActionListContext;
    ruleActionMulti(): RuleActionMultiContext;
    ruleActionStatement(): RuleActionStatementContext;
    ruleActionStatementOrEmpty(): RuleActionStatementOrEmptyContext;
    event(): EventContext;
    optionalInstead(): OptionalInsteadContext;
    notifyStatement(): NotifyStatementContext;
    notifyPayload(): NotifyPayloadContext;
    listenStatement(): ListenStatementContext;
    unlistenStatement(): UnlistenStatementContext;
    transactionStatement(): TransactionStatementContext;
    optionalTransaction(): OptionalTransactionContext;
    transactionModeItem(): TransactionModeItemContext;
    transactionModeList(): TransactionModeListContext;
    optionalTransactionChain(): OptionalTransactionChainContext;
    viewStatement(): ViewStatementContext;
    optionalCheckOption(): OptionalCheckOptionContext;
    loadStatement(): LoadStatementContext;
    createDatabaseStatement(): CreateDatabaseStatementContext;
    createDatabaseOptionList(): CreateDatabaseOptionListContext;
    createDatabaseOptionItem(): CreateDatabaseOptionItemContext;
    createDatabaseOptionName(): CreateDatabaseOptionNameContext;
    alterDatabaseStatement(): AlterDatabaseStatementContext;
    alterDatabaseSetStatement(): AlterDatabaseSetStatementContext;
    dropDatabaseStatement(): DropDatabaseStatementContext;
    alterCollationStatement(): AlterCollationStatementContext;
    alterSystemStatement(): AlterSystemStatementContext;
    createDomainStatement(): CreateDomainStatementContext;
    alterDomainStatement(): AlterDomainStatementContext;
    alterDomainCommand(): AlterDomainCommandContext;
    optionalAs(): OptionalAsContext;
    altertsDictionaryStatement(): AltertsDictionaryStatementContext;
    altertsConfigurationStatement(): AltertsConfigurationStatementContext;
    createConversionStatement(): CreateConversionStatementContext;
    clusterStatement(): ClusterStatementContext;
    clusterIndexSpecification(): ClusterIndexSpecificationContext;
    vacuumStatement(): VacuumStatementContext;
    analyzeStatement(): AnalyzeStatementContext;
    vacuumAnalyzeOptionList(): VacuumAnalyzeOptionListContext;
    analyzeKeyword(): AnalyzeKeywordContext;
    vacuumAnalyzeOptionElement(): VacuumAnalyzeOptionElementContext;
    vacuumAnalyzeOptionName(): VacuumAnalyzeOptionNameContext;
    vacuumAnalyzeOptionArgument(): VacuumAnalyzeOptionArgumentContext;
    optionalVerbose(): OptionalVerboseContext;
    optionalNameList(): OptionalNameListContext;
    vacuumRelation(): VacuumRelationContext;
    optionalVacuumRelationList(): OptionalVacuumRelationListContext;
    explainStatement(): ExplainStatementContext;
    explainableStatement(): ExplainableStatementContext;
    explainOptionElement(): ExplainOptionElementContext;
    explainOptionName(): ExplainOptionNameContext;
    explainOptionArgument(): ExplainOptionArgumentContext;
    prepareStatement(): PrepareStatementContext;
    prepareTypeClause(): PrepareTypeClauseContext;
    preparableStatement(): PreparableStatementContext;
    executeStatement(): ExecuteStatementContext;
    executeParameterClause(): ExecuteParameterClauseContext;
    deallocateStatement(): DeallocateStatementContext;
    insertStatement(): InsertStatementContext;
    insertTarget(): InsertTargetContext;
    insertRest(): InsertRestContext;
    overrideKind(): OverrideKindContext;
    insertColumnList(): InsertColumnListContext;
    insertColumnItem(): InsertColumnItemContext;
    optionalOnConflict(): OptionalOnConflictContext;
    optionalConflictExpr(): OptionalConflictExprContext;
    returningClause(): ReturningClauseContext;
    mergeStatement(): MergeStatementContext;
    mergeInsertClause(): MergeInsertClauseContext;
    mergeUpdateClause(): MergeUpdateClauseContext;
    mergeDeleteClause(): MergeDeleteClauseContext;
    deleteStatement(): DeleteStatementContext;
    usingClause(): UsingClauseContext;
    lockStatement(): LockStatementContext;
    optionalLock(): OptionalLockContext;
    lockType(): LockTypeContext;
    optionalNowait(): OptionalNowaitContext;
    optionalNowaitOrSkip(): OptionalNowaitOrSkipContext;
    updateStatement(): UpdateStatementContext;
    setClauseList(): SetClauseListContext;
    setClause(): SetClauseContext;
    setTarget(): SetTargetContext;
    declareCursorStatement(): DeclareCursorStatementContext;
    cursorName(): CursorNameContext;
    optionalHold(): OptionalHoldContext;
    selectStatement(): SelectStatementContext;
    selectWithParenthesis(): SelectWithParenthesisContext;
    selectWithoutParenthesis(): SelectWithoutParenthesisContext;
    selectClause(): SelectClauseContext;
    simpleSelectIntersect(): SimpleSelectIntersectContext;
    simpleSelectStart(): SimpleSelectStartContext;
    simpleSelectPramary(): SimpleSelectPramaryContext;
    withClause(): WithClauseContext;
    commonTableExpression(): CommonTableExpressionContext;
    optionalMaterialized(): OptionalMaterializedContext;
    intoClause(): IntoClauseContext;
    optionalTemporaryTableName(): OptionalTemporaryTableNameContext;
    optionalTable(): OptionalTableContext;
    allOrDistinct(): AllOrDistinctContext;
    distinctClause(): DistinctClauseContext;
    allClause(): AllClauseContext;
    optionalSortClause(): OptionalSortClauseContext;
    sortClause(): SortClauseContext;
    sortByList(): SortByListContext;
    sortBy(): SortByContext;
    selectLimit(): SelectLimitContext;
    optionalSelectLimit(): OptionalSelectLimitContext;
    limitClause(): LimitClauseContext;
    offsetClause(): OffsetClauseContext;
    selectLimitValue(): SelectLimitValueContext;
    selectOffsetValue(): SelectOffsetValueContext;
    selectFetchFirstValue(): SelectFetchFirstValueContext;
    anyConst(): AnyConstContext;
    rowOrRows(): RowOrRowsContext;
    firstOrNext(): FirstOrNextContext;
    groupClause(): GroupClauseContext;
    groupByList(): GroupByListContext;
    groupByItem(): GroupByItemContext;
    havingClause(): HavingClauseContext;
    forLockingClause(): ForLockingClauseContext;
    forLockingItem(): ForLockingItemContext;
    forLockingStrength(): ForLockingStrengthContext;
    lockedRelationsList(): LockedRelationsListContext;
    valuesClause(): ValuesClauseContext;
    fromClause(): FromClauseContext;
    fromList(): FromListContext;
    nonAnsiJoin(): NonAnsiJoinContext;
    tableReference(): TableReferenceContext;
    aliasClause(): AliasClauseContext;
    optionalAliasClause(): OptionalAliasClauseContext;
    tableAliasClause(): TableAliasClauseContext;
    functionAliasClause(): FunctionAliasClauseContext;
    joinType(): JoinTypeContext;
    joinQualifier(): JoinQualifierContext;
    viewName(): ViewNameContext;
    relationExpression(): RelationExpressionContext;
    relationExpressionList(): RelationExpressionListContext;
    relationExpressionOptionalAlias(): RelationExpressionOptionalAliasContext;
    tableSampleClause(): TableSampleClauseContext;
    functionTable(): FunctionTableContext;
    rowsFromItem(): RowsFromItemContext;
    optionalColumnDefinitionList(): OptionalColumnDefinitionListContext;
    optionalOrdinality(): OptionalOrdinalityContext;
    whereClause(): WhereClauseContext;
    whereOrCurrentClause(): WhereOrCurrentClauseContext;
    optionalTableFunctionElementList(): OptionalTableFunctionElementListContext;
    tableFunctionElementList(): TableFunctionElementListContext;
    tableFunctionElement(): TableFunctionElementContext;
    xmlTable(): XmlTableContext;
    xmlTableColumnElement(): XmlTableColumnElementContext;
    xmlTableColumnOptionList(): XmlTableColumnOptionListContext;
    xmlTableColumnOptionElement(): XmlTableColumnOptionElementContext;
    xmlNamespaceList(): XmlNamespaceListContext;
    xmlNamespaceElement(): XmlNamespaceElementContext;
    typeName(): TypeNameContext;
    simpleTypeName(): SimpleTypeNameContext;
    constTypeName(): ConstTypeNameContext;
    genericType(): GenericTypeContext;
    optionalTypeModifiers(): OptionalTypeModifiersContext;
    numeric(): NumericContext;
    optionalFloat(): OptionalFloatContext;
    bit(): BitContext;
    constBit(): ConstBitContext;
    bitWithLength(): BitWithLengthContext;
    bitWithoutLength(): BitWithoutLengthContext;
    character(): CharacterContext;
    constCharacter(): ConstCharacterContext;
    characterChar(): CharacterCharContext;
    optionalVarying(): OptionalVaryingContext;
    constDateTime(): ConstDateTimeContext;
    constInterval(): ConstIntervalContext;
    optionalTimezone(): OptionalTimezoneContext;
    optionalInterval(): OptionalIntervalContext;
    intervalSecond(): IntervalSecondContext;
    optionalEscape(): OptionalEscapeContext;
    expression1(): Expression1Context;
    expression1Qualifier(): Expression1QualifierContext;
    expression1LessLess(): Expression1LessLessContext;
    expression1Or(): Expression1OrContext;
    expression1And(): Expression1AndContext;
    expression1Between(): Expression1BetweenContext;
    expression1In(): Expression1InContext;
    expression1UnaryNot(): Expression1UnaryNotContext;
    expression1IsNull(): Expression1IsNullContext;
    expression1IsNot(): Expression1IsNotContext;
    expression1Compare(): Expression1CompareContext;
    expression1Like(): Expression1LikeContext;
    expression1qualifierOperator(): Expression1qualifierOperatorContext;
    expression1UnaryQualifierOperator(): Expression1UnaryQualifierOperatorContext;
    expression1Add(): Expression1AddContext;
    expressionMultiply(): ExpressionMultiplyContext;
    expression1Caret(): Expression1CaretContext;
    expression1UnarySign(): Expression1UnarySignContext;
    expression1AtTimeZone(): Expression1AtTimeZoneContext;
    expression1Collate(): Expression1CollateContext;
    expression1Typecast(): Expression1TypecastContext;
    expression2(): Expression2Context;
    expression2(_p: number): Expression2Context;
    expression3(): Expression3Context;
    plsqlVariableName(): PlsqlVariableNameContext;
    functionApplication(): FunctionApplicationContext;
    functionExpression(): FunctionExpressionContext;
    functionExpressionWindowless(): FunctionExpressionWindowlessContext;
    functionExpressionCommonSubexpr(): FunctionExpressionCommonSubexprContext;
    xmlRootVersion(): XmlRootVersionContext;
    optionalXmlRootStandalone(): OptionalXmlRootStandaloneContext;
    xmlAttributes(): XmlAttributesContext;
    xmlAttributeList(): XmlAttributeListContext;
    xmlAttributeElement(): XmlAttributeElementContext;
    documentOrContent(): DocumentOrContentContext;
    xmlWhitespaceOption(): XmlWhitespaceOptionContext;
    xmlExistsArgument(): XmlExistsArgumentContext;
    xmlPassingMech(): XmlPassingMechContext;
    withinGroupClause(): WithinGroupClauseContext;
    filterClause(): FilterClauseContext;
    windowClause(): WindowClauseContext;
    windowDefinitionList(): WindowDefinitionListContext;
    windowDefinition(): WindowDefinitionContext;
    overClause(): OverClauseContext;
    windowSpecification(): WindowSpecificationContext;
    optionalExistingWindowName(): OptionalExistingWindowNameContext;
    optionalPartitionClause(): OptionalPartitionClauseContext;
    optionalFrameClause(): OptionalFrameClauseContext;
    frameExtent(): FrameExtentContext;
    frameBound(): FrameBoundContext;
    optionalWindowExclusionClause(): OptionalWindowExclusionClauseContext;
    row(): RowContext;
    explicitRow(): ExplicitRowContext;
    implicitRow(): ImplicitRowContext;
    subType(): SubTypeContext;
    allOperator(): AllOperatorContext;
    mathOperator(): MathOperatorContext;
    operatorQualifier(): OperatorQualifierContext;
    allOperatorQualifier(): AllOperatorQualifierContext;
    subqueryOperator(): SubqueryOperatorContext;
    expressionList(): ExpressionListContext;
    functionArgumentList(): FunctionArgumentListContext;
    functionArgumentExpression(): FunctionArgumentExpressionContext;
    typeList(): TypeListContext;
    arrayExpression(): ArrayExpressionContext;
    arrayExpressionList(): ArrayExpressionListContext;
    extractList(): ExtractListContext;
    extractArgument(): ExtractArgumentContext;
    unicodeNormalForm(): UnicodeNormalFormContext;
    overlayList(): OverlayListContext;
    positionList(): PositionListContext;
    substrList(): SubstrListContext;
    trimList(): TrimListContext;
    inExpression(): InExpressionContext;
    caseExpression(): CaseExpressionContext;
    whenClauseList(): WhenClauseListContext;
    whenClause(): WhenClauseContext;
    caseDefault(): CaseDefaultContext;
    caseArg(): CaseArgContext;
    columnReference(): ColumnReferenceContext;
    indirectionElement(): IndirectionElementContext;
    indirection(): IndirectionContext;
    optionalIndirection(): OptionalIndirectionContext;
    optionalTargetList(): OptionalTargetListContext;
    targetList(): TargetListContext;
    targetElement(): TargetElementContext;
    qualifiedNameList(): QualifiedNameListContext;
    databaseName(): DatabaseNameContext;
    databaseNameList(): DatabaseNameListContext;
    schemaName(): SchemaNameContext;
    schemaNameList(): SchemaNameListContext;
    indexName(): IndexNameContext;
    indexNameList(): IndexNameListContext;
    triggerName(): TriggerNameContext;
    constraintName(): ConstraintNameContext;
    sequenceName(): SequenceNameContext;
    sequenceNameList(): SequenceNameListContext;
    qualifiedName(): QualifiedNameContext;
    nameList(): NameListContext;
    name(): NameContext;
    attributeName(): AttributeNameContext;
    fileName(): FileNameContext;
    functionName(): FunctionNameContext;
    aExpressionConst(): AExpressionConstContext;
    xconst(): XconstContext;
    bconst(): BconstContext;
    fconst(): FconstContext;
    iconst(): IconstContext;
    sconst(): SconstContext;
    anySconst(): AnySconstContext;
    optionalUescape(): OptionalUescapeContext;
    signedIconst(): SignedIconstContext;
    roleName(): RoleNameContext;
    roleNameList(): RoleNameListContext;
    columnId(): ColumnIdContext;
    tableAlias(): TableAliasContext;
    typeFunctionName(): TypeFunctionNameContext;
    nonReservedWord(): NonReservedWordContext;
    columnLabel(): ColumnLabelContext;
    identifier(): IdentifierContext;
    plsqlIdentifier(): PlsqlIdentifierContext;
    unreservedKeyword(): UnreservedKeywordContext;
    columnNameKeyword(): ColumnNameKeywordContext;
    typeFunctionNameKeyword(): TypeFunctionNameKeywordContext;
    reservedKeyword(): ReservedKeywordContext;
    builtinFunctionName(): BuiltinFunctionNameContext;
    plsqlFunction(): PlsqlFunctionContext;
    computeOptions(): ComputeOptionsContext;
    computeOption(): ComputeOptionContext;
    sharp(): SharpContext;
    optionValue(): OptionValueContext;
    optionalSemi(): OptionalSemiContext;
    plsqlBlock(): PlsqlBlockContext;
    declareSection(): DeclareSectionContext;
    declareStart(): DeclareStartContext;
    declareStatements(): DeclareStatementsContext;
    labelDeclaration(): LabelDeclarationContext;
    declareStatement(): DeclareStatementContext;
    declareStatement2(): DeclareStatement2Context;
    optionalScrollable(): OptionalScrollableContext;
    declareCursorQuery(): DeclareCursorQueryContext;
    declareCursorArgs(): DeclareCursorArgsContext;
    declareCursorArglist(): DeclareCursorArglistContext;
    declareCursorArg(): DeclareCursorArgContext;
    declareIsOrFor(): DeclareIsOrForContext;
    declareAliasItem(): DeclareAliasItemContext;
    declareVarname(): DeclareVarnameContext;
    declareConst(): DeclareConstContext;
    declareDatatype(): DeclareDatatypeContext;
    declareCollate(): DeclareCollateContext;
    declareNotNull(): DeclareNotNullContext;
    declareDefaultValue(): DeclareDefaultValueContext;
    declareDefaultKey(): DeclareDefaultKeyContext;
    assignOperator(): AssignOperatorContext;
    procedureSection(): ProcedureSectionContext;
    proceduralStatement(): ProceduralStatementContext;
    statementPerform(): StatementPerformContext;
    statementCall(): StatementCallContext;
    optionalExpressionList(): OptionalExpressionListContext;
    statementAssign(): StatementAssignContext;
    statementGetDiagram(): StatementGetDiagramContext;
    optionalGetDiagramArea(): OptionalGetDiagramAreaContext;
    getDiagramList(): GetDiagramListContext;
    getDiagramListItem(): GetDiagramListItemContext;
    getDiagramItem(): GetDiagramItemContext;
    getDiagramTarget(): GetDiagramTargetContext;
    assignVariable(): AssignVariableContext;
    statementIf(): StatementIfContext;
    statementElsifs(): StatementElsifsContext;
    statementElse(): StatementElseContext;
    statementCase(): StatementCaseContext;
    optionalExpressionUntilWhen(): OptionalExpressionUntilWhenContext;
    caseWhenList(): CaseWhenListContext;
    caseWhen(): CaseWhenContext;
    optionalCaseElse(): OptionalCaseElseContext;
    statementLoop(): StatementLoopContext;
    statementWhile(): StatementWhileContext;
    statementFor(): StatementForContext;
    forControl(): ForControlContext;
    optionalForUsingExpression(): OptionalForUsingExpressionContext;
    optionalCursorParameters(): OptionalCursorParametersContext;
    optionalReverse(): OptionalReverseContext;
    optionalByExpression(): OptionalByExpressionContext;
    forVariable(): ForVariableContext;
    statementForeachA(): StatementForeachAContext;
    foreachSlice(): ForeachSliceContext;
    statementExit(): StatementExitContext;
    exitType(): ExitTypeContext;
    statementReturn(): StatementReturnContext;
    optionalReturnResult(): OptionalReturnResultContext;
    statementRaise(): StatementRaiseContext;
    optionalStatementRaiseLevel(): OptionalStatementRaiseLevelContext;
    optionalRaiseList(): OptionalRaiseListContext;
    optionalRaiseUsing(): OptionalRaiseUsingContext;
    optionalRaiseUsingElement(): OptionalRaiseUsingElementContext;
    statementAssert(): StatementAssertContext;
    optionalStatementAssertMessage(): OptionalStatementAssertMessageContext;
    loopBody(): LoopBodyContext;
    statementExecSql(): StatementExecSqlContext;
    statementDynExecute(): StatementDynExecuteContext;
    optionalExecuteUsing(): OptionalExecuteUsingContext;
    optionalExecuteUsingList(): OptionalExecuteUsingListContext;
    optionalExecuteInto(): OptionalExecuteIntoContext;
    statementOpen(): StatementOpenContext;
    optionalOpenBoundListItem(): OptionalOpenBoundListItemContext;
    statementFetch(): StatementFetchContext;
    intoTarget(): IntoTargetContext;
    optionalCursorFrom(): OptionalCursorFromContext;
    optionalFetchDirection(): OptionalFetchDirectionContext;
    statementMove(): StatementMoveContext;
    statementClose(): StatementCloseContext;
    statementNull(): StatementNullContext;
    statementCommit(): StatementCommitContext;
    statementRollback(): StatementRollbackContext;
    plsqlOptionalTransactionChain(): PlsqlOptionalTransactionChainContext;
    statementSet(): StatementSetContext;
    cursorVariable(): CursorVariableContext;
    exceptionSection(): ExceptionSectionContext;
    procedureExceptions(): ProcedureExceptionsContext;
    procedureException(): ProcedureExceptionContext;
    procedureConditions(): ProcedureConditionsContext;
    procedureCondition(): ProcedureConditionContext;
    optionalBlockLabel(): OptionalBlockLabelContext;
    optionalLoopLabel(): OptionalLoopLabelContext;
    optionalLabel(): OptionalLabelContext;
    optionalExitCondition(): OptionalExitConditionContext;
    anyIdentifier(): AnyIdentifierContext;
    plsqlUnreservedKeyword(): PlsqlUnreservedKeywordContext;
    sqlExpression(): SqlExpressionContext;
    expressionUntilThen(): ExpressionUntilThenContext;
    expressionUntilSemi(): ExpressionUntilSemiContext;
    expressionUntilRightbracket(): ExpressionUntilRightbracketContext;
    expressionUntilLoop(): ExpressionUntilLoopContext;
    makeExecuteSqlStatement(): MakeExecuteSqlStatementContext;
    optionalReturningClauseInto(): OptionalReturningClauseIntoContext;
    roleOrAliases(): RoleOrAliasesContext;
    sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean;
    private expression2_sempred;
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): antlr.ATN;
    private static readonly vocabulary;
    get vocabulary(): antlr.Vocabulary;
    private static readonly decisionsToDFA;
}
export declare class RootContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EOF(): antlr.TerminalNode;
    statements(): StatementsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PlsqlRootContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    plsqlFunction(): PlsqlFunctionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    statement(): StatementContext;
    SEMI(): antlr.TerminalNode | null;
    statements(): StatementsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alterEventTriggerStatement(): AlterEventTriggerStatementContext | null;
    alterCollationStatement(): AlterCollationStatementContext | null;
    alterDatabaseStatement(): AlterDatabaseStatementContext | null;
    alterDatabaseSetStatement(): AlterDatabaseSetStatementContext | null;
    alterDefaultPrivilegesStatement(): AlterDefaultPrivilegesStatementContext | null;
    alterDomainStatement(): AlterDomainStatementContext | null;
    alterEnumStatement(): AlterEnumStatementContext | null;
    alterExtensionStatement(): AlterExtensionStatementContext | null;
    alterExtensionContentsStatement(): AlterExtensionContentsStatementContext | null;
    alterForeignDataWrapperStatement(): AlterForeignDataWrapperStatementContext | null;
    alterForeignServerStatement(): AlterForeignServerStatementContext | null;
    alterFunctionStatement(): AlterFunctionStatementContext | null;
    alterObjectDependsStatement(): AlterObjectDependsStatementContext | null;
    alterObjectSchemaStatement(): AlterObjectSchemaStatementContext | null;
    alterOwnerStatement(): AlterOwnerStatementContext | null;
    alterOperatorStatement(): AlterOperatorStatementContext | null;
    alterTypeStatement(): AlterTypeStatementContext | null;
    alterPolicyStatement(): AlterPolicyStatementContext | null;
    alterSequenceStatement(): AlterSequenceStatementContext | null;
    alterSystemStatement(): AlterSystemStatementContext | null;
    alterTableStatement(): AlterTableStatementContext | null;
    alterTablespaceStatement(): AlterTablespaceStatementContext | null;
    alterCompositeTypeStatement(): AlterCompositeTypeStatementContext | null;
    alterPublicationStatement(): AlterPublicationStatementContext | null;
    alterRoleSetStatement(): AlterRoleSetStatementContext | null;
    alterRoleStatement(): AlterRoleStatementContext | null;
    alterSubscriptionStatement(): AlterSubscriptionStatementContext | null;
    alterStatsStatement(): AlterStatsStatementContext | null;
    altertsConfigurationStatement(): AltertsConfigurationStatementContext | null;
    altertsDictionaryStatement(): AltertsDictionaryStatementContext | null;
    alterUserMappingStatement(): AlterUserMappingStatementContext | null;
    analyzeStatement(): AnalyzeStatementContext | null;
    callStatement(): CallStatementContext | null;
    checkpointStatement(): CheckpointStatementContext | null;
    closePortalStatement(): ClosePortalStatementContext | null;
    clusterStatement(): ClusterStatementContext | null;
    commentStatement(): CommentStatementContext | null;
    setConstraintsStatement(): SetConstraintsStatementContext | null;
    copyStatement(): CopyStatementContext | null;
    createAccessMethodStatement(): CreateAccessMethodStatementContext | null;
    createAsStatement(): CreateAsStatementContext | null;
    createAssertionStatement(): CreateAssertionStatementContext | null;
    createCastStatement(): CreateCastStatementContext | null;
    createConversionStatement(): CreateConversionStatementContext | null;
    createDomainStatement(): CreateDomainStatementContext | null;
    createExtensionStatement(): CreateExtensionStatementContext | null;
    createForeignDataWrapperStatement(): CreateForeignDataWrapperStatementContext | null;
    createForeignServerStatement(): CreateForeignServerStatementContext | null;
    createForeignTableStatement(): CreateForeignTableStatementContext | null;
    createFunctionStatement(): CreateFunctionStatementContext | null;
    createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null;
    createOperatorClassStatement(): CreateOperatorClassStatementContext | null;
    createOperatorFamilyStatement(): CreateOperatorFamilyStatementContext | null;
    createPublicationStatement(): CreatePublicationStatementContext | null;
    alterOperatorFamilyStatement(): AlterOperatorFamilyStatementContext | null;
    createPolicyStatement(): CreatePolicyStatementContext | null;
    createProcedureLangStatement(): CreateProcedureLangStatementContext | null;
    createSchemaStatement(): CreateSchemaStatementContext | null;
    createSequenceStatement(): CreateSequenceStatementContext | null;
    createStatement(): CreateStatementContext | null;
    createSubscriptionStatement(): CreateSubscriptionStatementContext | null;
    createStatsStatement(): CreateStatsStatementContext | null;
    createTablespaceStatement(): CreateTablespaceStatementContext | null;
    createTransformStatement(): CreateTransformStatementContext | null;
    createTriggerStatement(): CreateTriggerStatementContext | null;
    createEventTriggerStatement(): CreateEventTriggerStatementContext | null;
    createRoleStatement(): CreateRoleStatementContext | null;
    createUserMappingStatement(): CreateUserMappingStatementContext | null;
    createDatabaseStatement(): CreateDatabaseStatementContext | null;
    deallocateStatement(): DeallocateStatementContext | null;
    declareCursorStatement(): DeclareCursorStatementContext | null;
    defineStatement(): DefineStatementContext | null;
    deleteStatement(): DeleteStatementContext | null;
    discardStatement(): DiscardStatementContext | null;
    doStatement(): DoStatementContext | null;
    dropCastStatement(): DropCastStatementContext | null;
    dropOperatorClassStatement(): DropOperatorClassStatementContext | null;
    dropOperatorFamilyStatement(): DropOperatorFamilyStatementContext | null;
    dropOwnedStatement(): DropOwnedStatementContext | null;
    dropStatement(): DropStatementContext | null;
    dropSubscriptionStatement(): DropSubscriptionStatementContext | null;
    dropTablespaceStatement(): DropTablespaceStatementContext | null;
    dropTransformStatement(): DropTransformStatementContext | null;
    dropRoleStatement(): DropRoleStatementContext | null;
    dropUserMappingStatement(): DropUserMappingStatementContext | null;
    dropDatabaseStatement(): DropDatabaseStatementContext | null;
    executeStatement(): ExecuteStatementContext | null;
    explainStatement(): ExplainStatementContext | null;
    fetchStatement(): FetchStatementContext | null;
    grantStatement(): GrantStatementContext | null;
    grantPrivilegeStatement(): GrantPrivilegeStatementContext | null;
    importForeignSchemaStatement(): ImportForeignSchemaStatementContext | null;
    indexStatement(): IndexStatementContext | null;
    insertStatement(): InsertStatementContext | null;
    mergeStatement(): MergeStatementContext | null;
    listenStatement(): ListenStatementContext | null;
    refreshMaterializedViewStatement(): RefreshMaterializedViewStatementContext | null;
    loadStatement(): LoadStatementContext | null;
    lockStatement(): LockStatementContext | null;
    notifyStatement(): NotifyStatementContext | null;
    prepareStatement(): PrepareStatementContext | null;
    reassignOwnedStatement(): ReassignOwnedStatementContext | null;
    reindexStatement(): ReindexStatementContext | null;
    removeAggregateStatement(): RemoveAggregateStatementContext | null;
    removeFunctionStatement(): RemoveFunctionStatementContext | null;
    removeOperatorStatement(): RemoveOperatorStatementContext | null;
    renameStatement(): RenameStatementContext | null;
    revokeStatement(): RevokeStatementContext | null;
    revokePrivilegeStatement(): RevokePrivilegeStatementContext | null;
    ruleStatement(): RuleStatementContext | null;
    securityLabelStatement(): SecurityLabelStatementContext | null;
    selectStatement(): SelectStatementContext | null;
    transactionStatement(): TransactionStatementContext | null;
    truncateStatement(): TruncateStatementContext | null;
    unlistenStatement(): UnlistenStatementContext | null;
    updateStatement(): UpdateStatementContext | null;
    vacuumStatement(): VacuumStatementContext | null;
    variableResetStatement(): VariableResetStatementContext | null;
    variableSetStatement(): VariableSetStatementContext | null;
    variableShowStatement(): VariableShowStatementContext | null;
    viewStatement(): ViewStatementContext | null;
    plsqlConsoleCommand(): PlsqlConsoleCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PlsqlConsoleCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MetaCommand(): antlr.TerminalNode;
    EndMetaCommand(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CallStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CALL(): antlr.TerminalNode;
    functionApplication(): FunctionApplicationContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalWithContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalRoleListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    createRoleElement(): CreateRoleElementContext[];
    createRoleElement(i: number): CreateRoleElementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterOptionalRoleListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alterRoleElemement(): AlterRoleElemementContext[];
    alterRoleElemement(i: number): AlterRoleElemementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterRoleElemementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PASSWORD(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    NULL_P(): antlr.TerminalNode | null;
    ENCRYPTED(): antlr.TerminalNode | null;
    UNENCRYPTED(): antlr.TerminalNode | null;
    INHERIT(): antlr.TerminalNode | null;
    CONNECTION(): antlr.TerminalNode | null;
    LIMIT(): antlr.TerminalNode | null;
    signedIconst(): SignedIconstContext | null;
    VALID(): antlr.TerminalNode | null;
    UNTIL(): antlr.TerminalNode | null;
    roleOrAliases(): RoleOrAliasesContext | null;
    roleNameList(): RoleNameListContext | null;
    identifier(): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateRoleElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alterRoleElemement(): AlterRoleElemementContext | null;
    SYSID(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    ADMIN(): antlr.TerminalNode | null;
    roleNameList(): RoleNameListContext | null;
    roleOrAliases(): RoleOrAliasesContext | null;
    IN_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateRoleStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    roleOrAliases(): RoleOrAliasesContext;
    roleName(): RoleNameContext;
    optionalWith(): OptionalWithContext;
    optionalRoleList(): OptionalRoleListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterRoleStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    roleOrAliases(): RoleOrAliasesContext;
    roleName(): RoleNameContext;
    optionalWith(): OptionalWithContext;
    alterOptionalRoleList(): AlterOptionalRoleListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalInDatabaseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IN_P(): antlr.TerminalNode | null;
    DATABASE(): antlr.TerminalNode | null;
    databaseName(): DatabaseNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterRoleSetStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    roleOrAliases(): RoleOrAliasesContext;
    roleName(): RoleNameContext;
    optionalInDatabase(): OptionalInDatabaseContext;
    setResetClause(): SetResetClauseContext;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropRoleStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    roleOrAliases(): RoleOrAliasesContext;
    roleNameList(): RoleNameListContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AddOrDropContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ADD_P(): antlr.TerminalNode | null;
    DROP(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateSchemaStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    SCHEMA(): antlr.TerminalNode;
    optionalSchemaList(): OptionalSchemaListContext;
    optionalSchemaName(): OptionalSchemaNameContext | null;
    AUTHORIZATION(): antlr.TerminalNode | null;
    roleName(): RoleNameContext | null;
    columnId(): ColumnIdContext | null;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalSchemaNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalSchemaListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    schemaStatement(): SchemaStatementContext[];
    schemaStatement(i: number): SchemaStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SchemaStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    createStatement(): CreateStatementContext | null;
    indexStatement(): IndexStatementContext | null;
    createSequenceStatement(): CreateSequenceStatementContext | null;
    createTriggerStatement(): CreateTriggerStatementContext | null;
    grantStatement(): GrantStatementContext | null;
    viewStatement(): ViewStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VariableSetStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    setStatementEnding(): SetStatementEndingContext;
    LOCAL(): antlr.TerminalNode | null;
    SESSION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SetStatementEndingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TRANSACTION(): antlr.TerminalNode | null;
    transactionModeList(): TransactionModeListContext | null;
    SESSION(): antlr.TerminalNode | null;
    CHARACTERISTICS(): antlr.TerminalNode | null;
    AS(): antlr.TerminalNode | null;
    setStatementMore(): SetStatementMoreContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GenericSetClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    variableName(): VariableNameContext;
    variableList(): VariableListContext;
    TO(): antlr.TerminalNode | null;
    EQUAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SetStatementMoreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    genericSetClause(): GenericSetClauseContext | null;
    variableName(): VariableNameContext | null;
    FROM(): antlr.TerminalNode | null;
    CURRENT_P(): antlr.TerminalNode | null;
    TIME(): antlr.TerminalNode | null;
    ZONE(): antlr.TerminalNode | null;
    zoneValue(): ZoneValueContext | null;
    CATALOG(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaName(): SchemaNameContext | null;
    NAMES(): antlr.TerminalNode | null;
    optionalEncoding(): OptionalEncodingContext | null;
    roleOrAliases(): RoleOrAliasesContext | null;
    nonReservedWordOrSconst(): NonReservedWordOrSconstContext | null;
    SESSION(): antlr.TerminalNode | null;
    AUTHORIZATION(): antlr.TerminalNode | null;
    XML_P(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    documentOrContent(): DocumentOrContentContext | null;
    TRANSACTION(): antlr.TerminalNode | null;
    SNAPSHOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VariableNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext[];
    columnId(i: number): ColumnIdContext | null;
    DOT(): antlr.TerminalNode[];
    DOT(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VariableListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    variableValue(): VariableValueContext[];
    variableValue(i: number): VariableValueContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VariableValueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    booleanOrString(): BooleanOrStringContext | null;
    numericOnly(): NumericOnlyContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IsoLevelContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    READ(): antlr.TerminalNode | null;
    UNCOMMITTED(): antlr.TerminalNode | null;
    COMMITTED(): antlr.TerminalNode | null;
    REPEATABLE(): antlr.TerminalNode | null;
    SERIALIZABLE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class BooleanOrStringContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TRUE_P(): antlr.TerminalNode | null;
    FALSE_P(): antlr.TerminalNode | null;
    ON(): antlr.TerminalNode | null;
    nonReservedWordOrSconst(): NonReservedWordOrSconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ZoneValueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext | null;
    identifier(): IdentifierContext | null;
    constInterval(): ConstIntervalContext | null;
    optionalInterval(): OptionalIntervalContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    numericOnly(): NumericOnlyContext | null;
    DEFAULT(): antlr.TerminalNode | null;
    LOCAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalEncodingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext | null;
    DEFAULT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NonReservedWordOrSconstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    nonReservedWord(): NonReservedWordContext | null;
    sconst(): SconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VariableResetStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RESET(): antlr.TerminalNode;
    resetClauseRest(): ResetClauseRestContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ResetClauseRestContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    genericResetClause(): GenericResetClauseContext | null;
    TIME(): antlr.TerminalNode | null;
    ZONE(): antlr.TerminalNode | null;
    TRANSACTION(): antlr.TerminalNode | null;
    ISOLATION(): antlr.TerminalNode | null;
    LEVEL(): antlr.TerminalNode | null;
    SESSION(): antlr.TerminalNode | null;
    AUTHORIZATION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GenericResetClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    variableName(): VariableNameContext | null;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SetResetClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode | null;
    setStatementEnding(): SetStatementEndingContext | null;
    variableResetStatement(): VariableResetStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionSetResetClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode | null;
    setStatementMore(): SetStatementMoreContext | null;
    variableResetStatement(): VariableResetStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VariableShowStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SHOW(): antlr.TerminalNode;
    variableName(): VariableNameContext | null;
    TIME(): antlr.TerminalNode | null;
    ZONE(): antlr.TerminalNode | null;
    TRANSACTION(): antlr.TerminalNode | null;
    ISOLATION(): antlr.TerminalNode | null;
    LEVEL(): antlr.TerminalNode | null;
    SESSION(): antlr.TerminalNode | null;
    AUTHORIZATION(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SetConstraintsStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    CONSTRAINTS(): antlr.TerminalNode;
    constraintsSetList(): ConstraintsSetListContext;
    constraintsSetMode(): ConstraintsSetModeContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstraintsSetListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALL(): antlr.TerminalNode | null;
    qualifiedNameList(): QualifiedNameListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstraintsSetModeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DEFERRED(): antlr.TerminalNode | null;
    IMMEDIATE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CheckpointStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CHECKPOINT(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DiscardStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DISCARD(): antlr.TerminalNode;
    ALL(): antlr.TerminalNode | null;
    TEMP(): antlr.TerminalNode | null;
    TEMPORARY(): antlr.TerminalNode | null;
    PLANS(): antlr.TerminalNode | null;
    SEQUENCES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterTableStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TABLE(): antlr.TerminalNode | null;
    relationExpression(): RelationExpressionContext | null;
    alterTableCommands(): AlterTableCommandsContext | null;
    partitionCommand(): PartitionCommandContext | null;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    IN_P(): antlr.TerminalNode | null;
    TABLESPACE(): antlr.TerminalNode[];
    TABLESPACE(i: number): antlr.TerminalNode | null;
    name(): NameContext[];
    name(i: number): NameContext | null;
    SET(): antlr.TerminalNode | null;
    optionalNowait(): OptionalNowaitContext | null;
    OWNED(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    roleNameList(): RoleNameListContext | null;
    INDEX(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    indexPartitionCommand(): IndexPartitionCommandContext | null;
    VIEW(): antlr.TerminalNode | null;
    viewName(): ViewNameContext | null;
    MATERIALIZED(): antlr.TerminalNode | null;
    qualifiedName(): QualifiedNameContext | null;
    FOREIGN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterTableCommandsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alterTableCommand(): AlterTableCommandContext[];
    alterTableCommand(i: number): AlterTableCommandContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PartitionCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ATTACH(): antlr.TerminalNode | null;
    PARTITION(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    partitionBoundSpecification(): PartitionBoundSpecificationContext | null;
    DETACH(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndexPartitionCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ATTACH(): antlr.TerminalNode;
    PARTITION(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterTableCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ADD_P(): antlr.TerminalNode | null;
    columnDefinition(): ColumnDefinitionContext | null;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    COLUMN(): antlr.TerminalNode | null;
    ALTER(): antlr.TerminalNode | null;
    optionalColumn(): OptionalColumnContext | null;
    columnId(): ColumnIdContext[];
    columnId(i: number): ColumnIdContext | null;
    alterColumnDefault(): AlterColumnDefaultContext | null;
    DROP(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    SET(): antlr.TerminalNode | null;
    EXPRESSION(): antlr.TerminalNode | null;
    STATISTICS(): antlr.TerminalNode | null;
    signedIconst(): SignedIconstContext | null;
    iconst(): IconstContext | null;
    relOptions(): RelOptionsContext | null;
    RESET(): antlr.TerminalNode | null;
    STORAGE(): antlr.TerminalNode | null;
    GENERATED(): antlr.TerminalNode | null;
    generatedWhen(): GeneratedWhenContext | null;
    AS(): antlr.TerminalNode | null;
    IDENTITY_P(): antlr.TerminalNode | null;
    optionalParenthesizedSeqOptionsList(): OptionalParenthesizedSeqOptionsListContext | null;
    alterIdentityColumnOptionList(): AlterIdentityColumnOptionListContext | null;
    optionalDropBehavior(): OptionalDropBehaviorContext | null;
    optionalSetData(): OptionalSetDataContext | null;
    TYPE_P(): antlr.TerminalNode | null;
    typeName(): TypeNameContext | null;
    optionalCollateClause(): OptionalCollateClauseContext | null;
    alterUsing(): AlterUsingContext | null;
    alterGenericOptions(): AlterGenericOptionsContext | null;
    tableConstraint(): TableConstraintContext | null;
    CONSTRAINT(): antlr.TerminalNode | null;
    constraintName(): ConstraintNameContext | null;
    constraintAttributeElement(): ConstraintAttributeElementContext[];
    constraintAttributeElement(i: number): ConstraintAttributeElementContext | null;
    VALIDATE(): antlr.TerminalNode | null;
    WITHOUT(): antlr.TerminalNode | null;
    OIDS(): antlr.TerminalNode | null;
    CLUSTER(): antlr.TerminalNode | null;
    ON(): antlr.TerminalNode | null;
    name(): NameContext | null;
    LOGGED(): antlr.TerminalNode | null;
    UNLOGGED(): antlr.TerminalNode | null;
    ENABLE_P(): antlr.TerminalNode | null;
    TRIGGER(): antlr.TerminalNode | null;
    triggerName(): TriggerNameContext | null;
    ALWAYS(): antlr.TerminalNode | null;
    REPLICA(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    USER(): antlr.TerminalNode | null;
    DISABLE_P(): antlr.TerminalNode | null;
    RULE(): antlr.TerminalNode | null;
    INHERIT(): antlr.TerminalNode | null;
    qualifiedName(): QualifiedNameContext | null;
    NO(): antlr.TerminalNode | null;
    OF(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    OWNER(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    roleName(): RoleNameContext | null;
    TABLESPACE(): antlr.TerminalNode | null;
    replicaIdentity(): ReplicaIdentityContext | null;
    ROW(): antlr.TerminalNode | null;
    LEVEL(): antlr.TerminalNode | null;
    SECURITY(): antlr.TerminalNode | null;
    FORCE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterColumnDefaultContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode;
    expression1(): Expression1Context | null;
    DROP(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalDropBehaviorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CASCADE(): antlr.TerminalNode | null;
    RESTRICT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalCollateClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COLLATE(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterUsingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ReplicaIdentityContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NOTHING(): antlr.TerminalNode | null;
    FULL(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    INDEX(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RelOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode;
    relOptionList(): RelOptionListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalRelOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    relOptions(): RelOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RelOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    relOptionElem(): RelOptionElemContext[];
    relOptionElem(i: number): RelOptionElemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RelOptionElemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnLabel(): ColumnLabelContext[];
    columnLabel(i: number): ColumnLabelContext | null;
    EQUAL(): antlr.TerminalNode | null;
    definitionArgument(): DefinitionArgumentContext | null;
    DOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterIdentityColumnOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alterIdentityColumnOption(): AlterIdentityColumnOptionContext[];
    alterIdentityColumnOption(i: number): AlterIdentityColumnOptionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterIdentityColumnOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RESTART(): antlr.TerminalNode | null;
    optionalWith(): OptionalWithContext | null;
    numericOnly(): NumericOnlyContext | null;
    SET(): antlr.TerminalNode | null;
    sequenceOptionItem(): SequenceOptionItemContext | null;
    GENERATED(): antlr.TerminalNode | null;
    generatedWhen(): GeneratedWhenContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PartitionBoundSpecificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode | null;
    VALUES(): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode[];
    OPEN_PAREN(i: number): antlr.TerminalNode | null;
    hashPartitionBound(): HashPartitionBoundContext | null;
    CLOSE_PAREN(): antlr.TerminalNode[];
    CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    IN_P(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext[];
    expressionList(i: number): ExpressionListContext | null;
    FROM(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class HashPartitionBoundElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    nonReservedWord(): NonReservedWordContext;
    iconst(): IconstContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class HashPartitionBoundContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    hashPartitionBoundElement(): HashPartitionBoundElementContext[];
    hashPartitionBoundElement(i: number): HashPartitionBoundElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterCompositeTypeStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TYPE_P(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    alterTypeCommands(): AlterTypeCommandsContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterTypeCommandsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alterTypeCommand(): AlterTypeCommandContext[];
    alterTypeCommand(i: number): AlterTypeCommandContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterTypeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ADD_P(): antlr.TerminalNode | null;
    ATTRIBUTE(): antlr.TerminalNode;
    tableFunctionElement(): TableFunctionElementContext | null;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    DROP(): antlr.TerminalNode | null;
    columnId(): ColumnIdContext | null;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    ALTER(): antlr.TerminalNode | null;
    optionalSetData(): OptionalSetDataContext | null;
    TYPE_P(): antlr.TerminalNode | null;
    typeName(): TypeNameContext | null;
    optionalCollateClause(): OptionalCollateClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ClosePortalStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CLOSE(): antlr.TerminalNode;
    cursorName(): CursorNameContext | null;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CopyStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COPY(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext | null;
    columnListWithParentheses(): ColumnListWithParenthesesContext | null;
    fromOrTo(): FromOrToContext | null;
    copyFileName(): CopyFileNameContext;
    copyDelimiter(): CopyDelimiterContext | null;
    optionalWith(): OptionalWithContext;
    copyOptions(): CopyOptionsContext;
    whereClause(): WhereClauseContext | null;
    BINARY(): antlr.TerminalNode | null;
    PROGRAM(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    preparableStatement(): PreparableStatementContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FromOrToContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FROM(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CopyFileNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext | null;
    STDIN(): antlr.TerminalNode | null;
    STDOUT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CopyOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    copyOptionsItem(): CopyOptionsItemContext[];
    copyOptionsItem(i: number): CopyOptionsItemContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    copyGenericOptionList(): CopyGenericOptionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CopyOptionsItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BINARY(): antlr.TerminalNode | null;
    FREEZE(): antlr.TerminalNode | null;
    DELIMITER(): antlr.TerminalNode | null;
    optionalAs(): OptionalAsContext | null;
    sconst(): SconstContext | null;
    NULL_P(): antlr.TerminalNode | null;
    CSV(): antlr.TerminalNode | null;
    HEADER_P(): antlr.TerminalNode | null;
    QUOTE(): antlr.TerminalNode | null;
    ESCAPE(): antlr.TerminalNode | null;
    FORCE(): antlr.TerminalNode | null;
    columnList(): ColumnListContext | null;
    STAR(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    ENCODING(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CopyDelimiterContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DELIMITERS(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    USING(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CopyGenericOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    copyGenericOptionElem(): CopyGenericOptionElemContext[];
    copyGenericOptionElem(i: number): CopyGenericOptionElemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CopyGenericOptionElemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnLabel(): ColumnLabelContext;
    copyGenericOptionArgument(): CopyGenericOptionArgumentContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CopyGenericOptionArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    booleanOrString(): BooleanOrStringContext[];
    booleanOrString(i: number): BooleanOrStringContext | null;
    numericOnly(): NumericOnlyContext | null;
    STAR(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    temporaryOption(): TemporaryOptionContext;
    TABLE(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext[];
    qualifiedName(i: number): QualifiedNameContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    optionalTableElementList(): OptionalTableElementListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    inheritClause(): InheritClauseContext | null;
    optionalPartitionSpecification(): OptionalPartitionSpecificationContext | null;
    optionalTableAccessMethodClause(): OptionalTableAccessMethodClauseContext | null;
    with(): WithContext | null;
    onCommitOption(): OnCommitOptionContext | null;
    optionalTablespace(): OptionalTablespaceContext | null;
    OF(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    optionalTypedTableElementList(): OptionalTypedTableElementListContext | null;
    PARTITION(): antlr.TerminalNode | null;
    partitionBoundSpecification(): PartitionBoundSpecificationContext | null;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TemporaryOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TEMPORARY(): antlr.TerminalNode | null;
    TEMP(): antlr.TerminalNode | null;
    LOCAL(): antlr.TerminalNode | null;
    GLOBAL(): antlr.TerminalNode | null;
    UNLOGGED(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTableElementListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableElementList(): TableElementListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTypedTableElementListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    typedTableElementList(): TypedTableElementListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableElementListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableElement(): TableElementContext[];
    tableElement(i: number): TableElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TypedTableElementListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    typedTableElement(): TypedTableElementContext[];
    typedTableElement(i: number): TypedTableElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableConstraint(): TableConstraintContext | null;
    tableLikeClause(): TableLikeClauseContext | null;
    columnDefinition(): ColumnDefinitionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TypedTableElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnOptions(): ColumnOptionsContext | null;
    tableConstraint(): TableConstraintContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnDefinitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    typeName(): TypeNameContext;
    createGenericOptions(): CreateGenericOptionsContext;
    columnQualifierList(): ColumnQualifierListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    columnQualifierList(): ColumnQualifierListContext;
    WITH(): antlr.TerminalNode | null;
    OPTIONS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnQualifierListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnConstraint(): ColumnConstraintContext[];
    columnConstraint(i: number): ColumnConstraintContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnConstraintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CONSTRAINT(): antlr.TerminalNode | null;
    name(): NameContext | null;
    columnConstraintElement(): ColumnConstraintElementContext | null;
    constraintAttribute(): ConstraintAttributeContext | null;
    COLLATE(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnConstraintElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NOT(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    UNIQUE(): antlr.TerminalNode | null;
    optionalDefinition(): OptionalDefinitionContext | null;
    usingIndexTablespace(): UsingIndexTablespaceContext | null;
    PRIMARY(): antlr.TerminalNode | null;
    KEY(): antlr.TerminalNode | null;
    CHECK(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    INHERIT(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    expression2(): Expression2Context | null;
    GENERATED(): antlr.TerminalNode | null;
    generatedWhen(): GeneratedWhenContext | null;
    AS(): antlr.TerminalNode | null;
    IDENTITY_P(): antlr.TerminalNode | null;
    optionalParenthesizedSeqOptionsList(): OptionalParenthesizedSeqOptionsListContext | null;
    STORED(): antlr.TerminalNode | null;
    REFERENCES(): antlr.TerminalNode | null;
    qualifiedName(): QualifiedNameContext | null;
    columnListWithParentheses(): ColumnListWithParenthesesContext | null;
    matchClause(): MatchClauseContext | null;
    keyActions(): KeyActionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GeneratedWhenContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALWAYS(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstraintAttributeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DEFERRABLE(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    INITIALLY(): antlr.TerminalNode | null;
    DEFERRED(): antlr.TerminalNode | null;
    IMMEDIATE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableLikeClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LIKE(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    tableLikeOptionList(): TableLikeOptionListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableLikeOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableLikeOption(): TableLikeOptionContext[];
    tableLikeOption(i: number): TableLikeOptionContext | null;
    INCLUDING(): antlr.TerminalNode[];
    INCLUDING(i: number): antlr.TerminalNode | null;
    EXCLUDING(): antlr.TerminalNode[];
    EXCLUDING(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableLikeOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMENTS(): antlr.TerminalNode | null;
    CONSTRAINTS(): antlr.TerminalNode | null;
    DEFAULTS(): antlr.TerminalNode | null;
    IDENTITY_P(): antlr.TerminalNode | null;
    GENERATED(): antlr.TerminalNode | null;
    INDEXES(): antlr.TerminalNode | null;
    STATISTICS(): antlr.TerminalNode | null;
    STORAGE(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableConstraintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CONSTRAINT(): antlr.TerminalNode | null;
    name(): NameContext | null;
    constraintElement(): ConstraintElementContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstraintElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CHECK(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    constraintAttributeSpecification(): ConstraintAttributeSpecificationContext | null;
    UNIQUE(): antlr.TerminalNode | null;
    columnList(): ColumnListContext | null;
    optionalColumnListInclude(): OptionalColumnListIncludeContext | null;
    optionalDefinition(): OptionalDefinitionContext | null;
    usingIndexTablespace(): UsingIndexTablespaceContext | null;
    existingIndex(): ExistingIndexContext | null;
    PRIMARY(): antlr.TerminalNode | null;
    KEY(): antlr.TerminalNode | null;
    EXCLUDE(): antlr.TerminalNode | null;
    optionalAccessMethodClause(): OptionalAccessMethodClauseContext | null;
    exclusionConstraintList(): ExclusionConstraintListContext | null;
    exclusionWhereClause(): ExclusionWhereClauseContext | null;
    FOREIGN(): antlr.TerminalNode | null;
    REFERENCES(): antlr.TerminalNode | null;
    qualifiedName(): QualifiedNameContext | null;
    columnListWithParentheses(): ColumnListWithParenthesesContext | null;
    matchClause(): MatchClauseContext | null;
    keyActions(): KeyActionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnListWithParenthesesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    columnList(): ColumnListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnElement(): ColumnElementContext[];
    columnElement(i: number): ColumnElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalColumnListIncludeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INCLUDE(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    columnList(): ColumnListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class MatchClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MATCH(): antlr.TerminalNode | null;
    FULL(): antlr.TerminalNode | null;
    PARTIAL(): antlr.TerminalNode | null;
    SIMPLE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExclusionConstraintListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    exclusionConstraintElement(): ExclusionConstraintElementContext[];
    exclusionConstraintElement(i: number): ExclusionConstraintElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExclusionConstraintElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    indexElement(): IndexElementContext;
    WITH(): antlr.TerminalNode;
    anyOperator(): AnyOperatorContext | null;
    OPERATOR(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExclusionWhereClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHERE(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class KeyActionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    onKeyUpdateClause(): OnKeyUpdateClauseContext | null;
    onKeyDeleteClause(): OnKeyDeleteClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OnKeyUpdateClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON(): antlr.TerminalNode;
    UPDATE(): antlr.TerminalNode;
    keyAction(): KeyActionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OnKeyDeleteClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON(): antlr.TerminalNode;
    DELETE_P(): antlr.TerminalNode;
    keyAction(): KeyActionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class KeyActionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NO(): antlr.TerminalNode | null;
    ACTION(): antlr.TerminalNode | null;
    RESTRICT(): antlr.TerminalNode | null;
    CASCADE(): antlr.TerminalNode | null;
    SET(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class InheritClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INHERITS(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    qualifiedNameList(): QualifiedNameListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalPartitionSpecificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    partitionSpecification(): PartitionSpecificationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PartitionSpecificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PARTITION(): antlr.TerminalNode;
    BY(): antlr.TerminalNode;
    columnId(): ColumnIdContext;
    OPEN_PAREN(): antlr.TerminalNode;
    partitionElements(): PartitionElementsContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PartitionElementsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    partitionElement(): PartitionElementContext[];
    partitionElement(i: number): PartitionElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PartitionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext | null;
    optionalCollate(): OptionalCollateContext;
    optionalClass(): OptionalClassContext;
    functionExpressionWindowless(): FunctionExpressionWindowlessContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTableAccessMethodClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    name(): NameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WithContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    relOptions(): RelOptionsContext | null;
    WITHOUT(): antlr.TerminalNode | null;
    OIDS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OnCommitOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON(): antlr.TerminalNode | null;
    COMMIT(): antlr.TerminalNode | null;
    DROP(): antlr.TerminalNode | null;
    DELETE_P(): antlr.TerminalNode | null;
    ROWS(): antlr.TerminalNode | null;
    PRESERVE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTablespaceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLESPACE(): antlr.TerminalNode | null;
    name(): NameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class UsingIndexTablespaceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    INDEX(): antlr.TerminalNode | null;
    TABLESPACE(): antlr.TerminalNode | null;
    name(): NameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExistingIndexContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode;
    INDEX(): antlr.TerminalNode;
    indexName(): IndexNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateStatsStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    STATISTICS(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    optionalNameList(): OptionalNameListContext;
    ON(): antlr.TerminalNode;
    expressionList(): ExpressionListContext;
    FROM(): antlr.TerminalNode;
    fromList(): FromListContext;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterStatsStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    STATISTICS(): antlr.TerminalNode[];
    STATISTICS(i: number): antlr.TerminalNode | null;
    anyName(): AnyNameContext;
    SET(): antlr.TerminalNode;
    signedIconst(): SignedIconstContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateAsStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    temporaryOption(): TemporaryOptionContext;
    TABLE(): antlr.TerminalNode;
    createAsTarget(): CreateAsTargetContext;
    AS(): antlr.TerminalNode;
    selectStatement(): SelectStatementContext;
    withData(): WithDataContext;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateAsTargetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext;
    columnListWithParentheses(): ColumnListWithParenthesesContext;
    optionalTableAccessMethodClause(): OptionalTableAccessMethodClauseContext;
    with(): WithContext;
    onCommitOption(): OnCommitOptionContext;
    optionalTablespace(): OptionalTablespaceContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WithDataContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    DATA_P(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateMaterializedViewStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    MATERIALIZED(): antlr.TerminalNode;
    VIEW(): antlr.TerminalNode;
    createMaterializedViewTarget(): CreateMaterializedViewTargetContext;
    AS(): antlr.TerminalNode;
    selectStatement(): SelectStatementContext;
    withData(): WithDataContext;
    UNLOGGED(): antlr.TerminalNode | null;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateMaterializedViewTargetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext;
    columnListWithParentheses(): ColumnListWithParenthesesContext;
    optionalTableAccessMethodClause(): OptionalTableAccessMethodClauseContext;
    optionalRelOptions(): OptionalRelOptionsContext;
    optionalTablespace(): OptionalTablespaceContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RefreshMaterializedViewStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REFRESH(): antlr.TerminalNode;
    MATERIALIZED(): antlr.TerminalNode;
    VIEW(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    withData(): WithDataContext;
    CONCURRENTLY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateSequenceStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    temporaryOption(): TemporaryOptionContext;
    SEQUENCE(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    sequenceOptionList(): SequenceOptionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterSequenceStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    SEQUENCE(): antlr.TerminalNode;
    sequenceName(): SequenceNameContext;
    sequenceOptionList(): SequenceOptionListContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalParenthesizedSeqOptionsListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    sequenceOptionList(): SequenceOptionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SequenceOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sequenceOptionItem(): SequenceOptionItemContext[];
    sequenceOptionItem(i: number): SequenceOptionItemContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SequenceOptionItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AS(): antlr.TerminalNode | null;
    simpleTypeName(): SimpleTypeNameContext | null;
    CACHE(): antlr.TerminalNode | null;
    numericOnly(): NumericOnlyContext | null;
    CYCLE(): antlr.TerminalNode | null;
    INCREMENT(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    MAXVALUE(): antlr.TerminalNode | null;
    MINVALUE(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    OWNED(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    SEQUENCE(): antlr.TerminalNode | null;
    NAME_P(): antlr.TerminalNode | null;
    START(): antlr.TerminalNode | null;
    optionalWith(): OptionalWithContext | null;
    RESTART(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NumericOnlyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    fconst(): FconstContext | null;
    PLUS(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode | null;
    signedIconst(): SignedIconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NumericOnlyListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    numericOnly(): NumericOnlyContext[];
    numericOnly(i: number): NumericOnlyContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateProcedureLangStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    optionalOrReplace(): OptionalOrReplaceContext;
    optionalProcedural(): OptionalProceduralContext;
    LANGUAGE(): antlr.TerminalNode;
    name(): NameContext;
    TRUSTED(): antlr.TerminalNode | null;
    HANDLER(): antlr.TerminalNode | null;
    handlerName(): HandlerNameContext | null;
    optionalInlineHandler(): OptionalInlineHandlerContext | null;
    validatorClause(): ValidatorClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class HandlerNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext;
    attributes(): AttributesContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalInlineHandlerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INLINE_P(): antlr.TerminalNode | null;
    handlerName(): HandlerNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ValidatorClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VALIDATOR(): antlr.TerminalNode;
    handlerName(): HandlerNameContext | null;
    NO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalProceduralContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PROCEDURAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateTablespaceStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    TABLESPACE(): antlr.TerminalNode;
    name(): NameContext;
    optionalTablespaceOwner(): OptionalTablespaceOwnerContext;
    LOCATION(): antlr.TerminalNode;
    sconst(): SconstContext;
    optionalRelOptions(): OptionalRelOptionsContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTablespaceOwnerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OWNER(): antlr.TerminalNode | null;
    roleName(): RoleNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropTablespaceStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    TABLESPACE(): antlr.TerminalNode;
    name(): NameContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateExtensionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    EXTENSION(): antlr.TerminalNode;
    name(): NameContext;
    optionalWith(): OptionalWithContext;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    createExtensionOptionItem(): CreateExtensionOptionItemContext[];
    createExtensionOptionItem(i: number): CreateExtensionOptionItemContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateExtensionOptionItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SCHEMA(): antlr.TerminalNode | null;
    schemaName(): SchemaNameContext | null;
    VERSION_P(): antlr.TerminalNode | null;
    nonReservedWordOrSconst(): NonReservedWordOrSconstContext | null;
    FROM(): antlr.TerminalNode | null;
    CASCADE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterExtensionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    EXTENSION(): antlr.TerminalNode;
    name(): NameContext;
    UPDATE(): antlr.TerminalNode;
    alterExtensionOptionItem(): AlterExtensionOptionItemContext[];
    alterExtensionOptionItem(i: number): AlterExtensionOptionItemContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterExtensionOptionItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TO(): antlr.TerminalNode;
    nonReservedWordOrSconst(): NonReservedWordOrSconstContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterExtensionContentsStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    EXTENSION(): antlr.TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext | null;
    addOrDrop(): AddOrDropContext;
    objectTypeName(): ObjectTypeNameContext | null;
    ROLE(): antlr.TerminalNode | null;
    roleName(): RoleNameContext | null;
    DATABASE(): antlr.TerminalNode | null;
    databaseName(): DatabaseNameContext | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaName(): SchemaNameContext | null;
    INDEX(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    objectTypeAnyName(): ObjectTypeAnyNameContext | null;
    anyName(): AnyNameContext | null;
    SEQUENCE(): antlr.TerminalNode | null;
    sequenceName(): SequenceNameContext | null;
    AGGREGATE(): antlr.TerminalNode | null;
    aggregateWithArgumentTypes(): AggregateWithArgumentTypesContext | null;
    CAST(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    AS(): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    OPERATOR(): antlr.TerminalNode | null;
    operatorWithArgumentTypes(): OperatorWithArgumentTypesContext | null;
    CLASS(): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    FAMILY(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    TRANSFORM(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    LANGUAGE(): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateForeignDataWrapperStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    FOREIGN(): antlr.TerminalNode;
    DATA_P(): antlr.TerminalNode;
    WRAPPER(): antlr.TerminalNode;
    name(): NameContext;
    createGenericOptions(): CreateGenericOptionsContext;
    forwardOptions(): ForwardOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForwardOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HANDLER(): antlr.TerminalNode | null;
    handlerName(): HandlerNameContext | null;
    NO(): antlr.TerminalNode | null;
    VALIDATOR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForwardOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    forwardOption(): ForwardOptionContext[];
    forwardOption(i: number): ForwardOptionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterForeignDataWrapperStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    FOREIGN(): antlr.TerminalNode;
    DATA_P(): antlr.TerminalNode;
    WRAPPER(): antlr.TerminalNode;
    name(): NameContext;
    alterGenericOptions(): AlterGenericOptionsContext | null;
    forwardOptions(): ForwardOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateGenericOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPTIONS(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    genericOptionList(): GenericOptionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GenericOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    genericOptionElement(): GenericOptionElementContext[];
    genericOptionElement(i: number): GenericOptionElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterGenericOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPTIONS(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode;
    alterGenericOptionList(): AlterGenericOptionListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterGenericOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alterGenericOptionElem(): AlterGenericOptionElemContext[];
    alterGenericOptionElem(i: number): AlterGenericOptionElemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterGenericOptionElemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    genericOptionElement(): GenericOptionElementContext | null;
    SET(): antlr.TerminalNode | null;
    ADD_P(): antlr.TerminalNode | null;
    DROP(): antlr.TerminalNode | null;
    genericOptionName(): GenericOptionNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GenericOptionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    genericOptionName(): GenericOptionNameContext;
    genericOptionArgument(): GenericOptionArgumentContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GenericOptionNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnLabel(): ColumnLabelContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GenericOptionArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateForeignServerStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    SERVER(): antlr.TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext | null;
    optionalType(): OptionalTypeContext;
    FOREIGN(): antlr.TerminalNode;
    DATA_P(): antlr.TerminalNode;
    WRAPPER(): antlr.TerminalNode;
    createGenericOptions(): CreateGenericOptionsContext;
    foreignServerVersion(): ForeignServerVersionContext | null;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TYPE_P(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForeignServerVersionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VERSION_P(): antlr.TerminalNode;
    sconst(): SconstContext | null;
    NULL_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterForeignServerStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    SERVER(): antlr.TerminalNode;
    name(): NameContext;
    alterGenericOptions(): AlterGenericOptionsContext | null;
    foreignServerVersion(): ForeignServerVersionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateForeignTableStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    FOREIGN(): antlr.TerminalNode;
    TABLE(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext[];
    qualifiedName(i: number): QualifiedNameContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    optionalTableElementList(): OptionalTableElementListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    inheritClause(): InheritClauseContext | null;
    SERVER(): antlr.TerminalNode;
    name(): NameContext;
    createGenericOptions(): CreateGenericOptionsContext;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    PARTITION(): antlr.TerminalNode | null;
    OF(): antlr.TerminalNode | null;
    optionalTypedTableElementList(): OptionalTypedTableElementListContext | null;
    partitionBoundSpecification(): PartitionBoundSpecificationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ImportForeignSchemaStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IMPORT_P(): antlr.TerminalNode;
    FOREIGN(): antlr.TerminalNode;
    SCHEMA(): antlr.TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext | null;
    importQualification(): ImportQualificationContext;
    FROM(): antlr.TerminalNode;
    SERVER(): antlr.TerminalNode;
    INTO(): antlr.TerminalNode;
    createGenericOptions(): CreateGenericOptionsContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ImportQualificationTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LIMIT(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    EXCEPT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ImportQualificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    importQualificationType(): ImportQualificationTypeContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    relationExpressionList(): RelationExpressionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateUserMappingStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    USER(): antlr.TerminalNode;
    MAPPING(): antlr.TerminalNode;
    FOR(): antlr.TerminalNode;
    authIdentifier(): AuthIdentifierContext;
    SERVER(): antlr.TerminalNode;
    name(): NameContext;
    createGenericOptions(): CreateGenericOptionsContext;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AuthIdentifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    roleName(): RoleNameContext | null;
    USER(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropUserMappingStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    USER(): antlr.TerminalNode;
    MAPPING(): antlr.TerminalNode;
    FOR(): antlr.TerminalNode;
    authIdentifier(): AuthIdentifierContext;
    SERVER(): antlr.TerminalNode;
    name(): NameContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterUserMappingStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    USER(): antlr.TerminalNode;
    MAPPING(): antlr.TerminalNode;
    FOR(): antlr.TerminalNode;
    authIdentifier(): AuthIdentifierContext;
    SERVER(): antlr.TerminalNode;
    name(): NameContext;
    alterGenericOptions(): AlterGenericOptionsContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreatePolicyStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    POLICY(): antlr.TerminalNode;
    name(): NameContext;
    ON(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    rowSecurityDefaultPermissive(): RowSecurityDefaultPermissiveContext;
    rowSecurityDefaultForCmd(): RowSecurityDefaultForCmdContext;
    rowSecurityOptionalToUser(): RowSecurityOptionalToUserContext;
    rowSecurityOptionalExpression(): RowSecurityOptionalExpressionContext;
    rowSecurityOptionalWithCheck(): RowSecurityOptionalWithCheckContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterPolicyStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    POLICY(): antlr.TerminalNode;
    name(): NameContext;
    ON(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    rowSecurityOptionalToUser(): RowSecurityOptionalToUserContext;
    rowSecurityOptionalExpression(): RowSecurityOptionalExpressionContext;
    rowSecurityOptionalWithCheck(): RowSecurityOptionalWithCheckContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowSecurityOptionalExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowSecurityOptionalWithCheckContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    CHECK(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowSecurityOptionalToUserContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TO(): antlr.TerminalNode | null;
    roleNameList(): RoleNameListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowSecurityDefaultPermissiveContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AS(): antlr.TerminalNode | null;
    identifier(): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowSecurityDefaultForCmdContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode | null;
    rowSecurityCommand(): RowSecurityCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowSecurityCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALL(): antlr.TerminalNode | null;
    SELECT(): antlr.TerminalNode | null;
    INSERT(): antlr.TerminalNode | null;
    UPDATE(): antlr.TerminalNode | null;
    DELETE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateAccessMethodStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    ACCESS(): antlr.TerminalNode;
    METHOD(): antlr.TerminalNode;
    name(): NameContext;
    TYPE_P(): antlr.TerminalNode;
    accessMethodType(): AccessMethodTypeContext;
    HANDLER(): antlr.TerminalNode;
    handlerName(): HandlerNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AccessMethodTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INDEX(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateTriggerStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    TRIGGER(): antlr.TerminalNode;
    name(): NameContext;
    triggerActionTime(): TriggerActionTimeContext | null;
    triggerEvents(): TriggerEventsContext;
    ON(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    triggerReferencing(): TriggerReferencingContext | null;
    triggerForSpec(): TriggerForSpecContext | null;
    triggerWhen(): TriggerWhenContext;
    EXECUTE(): antlr.TerminalNode;
    functionOrProcedure(): FunctionOrProcedureContext;
    functionName(): FunctionNameContext;
    OPEN_PAREN(): antlr.TerminalNode;
    triggerFunctionArguments(): TriggerFunctionArgumentsContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    CONSTRAINT(): antlr.TerminalNode | null;
    AFTER(): antlr.TerminalNode | null;
    optionalConstraintFromTable(): OptionalConstraintFromTableContext | null;
    constraintAttributeSpecification(): ConstraintAttributeSpecificationContext | null;
    FOR(): antlr.TerminalNode | null;
    EACH(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerActionTimeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BEFORE(): antlr.TerminalNode | null;
    AFTER(): antlr.TerminalNode | null;
    INSTEAD(): antlr.TerminalNode | null;
    OF(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerEventsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    triggerOneEvent(): TriggerOneEventContext[];
    triggerOneEvent(i: number): TriggerOneEventContext | null;
    OR(): antlr.TerminalNode[];
    OR(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerOneEventContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INSERT(): antlr.TerminalNode | null;
    DELETE_P(): antlr.TerminalNode | null;
    UPDATE(): antlr.TerminalNode | null;
    OF(): antlr.TerminalNode | null;
    columnList(): ColumnListContext | null;
    TRUNCATE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerReferencingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REFERENCING(): antlr.TerminalNode | null;
    triggerTransitions(): TriggerTransitionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerTransitionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    triggerTransition(): TriggerTransitionContext[];
    triggerTransition(i: number): TriggerTransitionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerTransitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    transitionOldOrNew(): TransitionOldOrNewContext;
    transitionRowOrTable(): TransitionRowOrTableContext;
    optionalAs(): OptionalAsContext;
    transitionRelName(): TransitionRelNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TransitionOldOrNewContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NEW(): antlr.TerminalNode | null;
    OLD(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TransitionRowOrTableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLE(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TransitionRelNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerForSpecContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode | null;
    triggerForType(): TriggerForTypeContext | null;
    EACH(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerForTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROW(): antlr.TerminalNode | null;
    STATEMENT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerWhenContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionOrProcedureContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FUNCTION(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerFunctionArgumentsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    triggerFunctionArgument(): TriggerFunctionArgumentContext[];
    triggerFunctionArgument(i: number): TriggerFunctionArgumentContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerFunctionArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    iconst(): IconstContext | null;
    fconst(): FconstContext | null;
    sconst(): SconstContext | null;
    columnLabel(): ColumnLabelContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalConstraintFromTableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FROM(): antlr.TerminalNode | null;
    qualifiedName(): QualifiedNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstraintAttributeSpecificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    constraintAttributeElement(): ConstraintAttributeElementContext[];
    constraintAttributeElement(i: number): ConstraintAttributeElementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstraintAttributeElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NOT(): antlr.TerminalNode | null;
    DEFERRABLE(): antlr.TerminalNode | null;
    INITIALLY(): antlr.TerminalNode | null;
    IMMEDIATE(): antlr.TerminalNode | null;
    DEFERRED(): antlr.TerminalNode | null;
    VALID(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    INHERIT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateEventTriggerStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    EVENT(): antlr.TerminalNode;
    TRIGGER(): antlr.TerminalNode;
    name(): NameContext;
    ON(): antlr.TerminalNode;
    columnLabel(): ColumnLabelContext;
    EXECUTE(): antlr.TerminalNode;
    functionOrProcedure(): FunctionOrProcedureContext;
    functionName(): FunctionNameContext;
    OPEN_PAREN(): antlr.TerminalNode;
    CLOSE_PAREN(): antlr.TerminalNode;
    WHEN(): antlr.TerminalNode | null;
    eventTriggerWhenList(): EventTriggerWhenListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class EventTriggerWhenListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    eventTriggerWhenItem(): EventTriggerWhenItemContext[];
    eventTriggerWhenItem(i: number): EventTriggerWhenItemContext | null;
    AND(): antlr.TerminalNode[];
    AND(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class EventTriggerWhenItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    IN_P(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode;
    eventTriggerValueList(): EventTriggerValueListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class EventTriggerValueListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext[];
    sconst(i: number): SconstContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterEventTriggerStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    EVENT(): antlr.TerminalNode;
    TRIGGER(): antlr.TerminalNode;
    name(): NameContext;
    enableTrigger(): EnableTriggerContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class EnableTriggerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ENABLE_P(): antlr.TerminalNode | null;
    REPLICA(): antlr.TerminalNode | null;
    ALWAYS(): antlr.TerminalNode | null;
    DISABLE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateAssertionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    ASSERTION(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    CHECK(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode;
    expression1(): Expression1Context;
    CLOSE_PAREN(): antlr.TerminalNode;
    constraintAttributeSpecification(): ConstraintAttributeSpecificationContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DefineStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    optionalOrReplace(): OptionalOrReplaceContext | null;
    AGGREGATE(): antlr.TerminalNode | null;
    functionName(): FunctionNameContext | null;
    aggregateArguments(): AggregateArgumentsContext | null;
    definition(): DefinitionContext | null;
    oldAggregateDefinition(): OldAggregateDefinitionContext | null;
    OPERATOR(): antlr.TerminalNode | null;
    anyOperator(): AnyOperatorContext | null;
    TYPE_P(): antlr.TerminalNode | null;
    anyName(): AnyNameContext[];
    anyName(i: number): AnyNameContext | null;
    AS(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    optionalTableFunctionElementList(): OptionalTableFunctionElementListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    ENUM_P(): antlr.TerminalNode | null;
    enumValueList(): EnumValueListContext | null;
    RANGE(): antlr.TerminalNode | null;
    TEXT_P(): antlr.TerminalNode | null;
    SEARCH(): antlr.TerminalNode | null;
    PARSER(): antlr.TerminalNode | null;
    DICTIONARY(): antlr.TerminalNode | null;
    TEMPLATE(): antlr.TerminalNode | null;
    CONFIGURATION(): antlr.TerminalNode | null;
    COLLATION(): antlr.TerminalNode | null;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    FROM(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DefinitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode;
    definitionElement(): DefinitionElementContext[];
    definitionElement(i: number): DefinitionElementContext | null;
    CLOSE_PAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DefinitionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnLabel(): ColumnLabelContext;
    EQUAL(): antlr.TerminalNode | null;
    definitionArgument(): DefinitionArgumentContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DefinitionArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionType(): FunctionTypeContext | null;
    reservedKeyword(): ReservedKeywordContext | null;
    allOperatorQualifier(): AllOperatorQualifierContext | null;
    numericOnly(): NumericOnlyContext | null;
    sconst(): SconstContext | null;
    NONE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OldAggregateDefinitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode;
    oldAggregateElement(): OldAggregateElementContext[];
    oldAggregateElement(i: number): OldAggregateElementContext | null;
    CLOSE_PAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OldAggregateElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    EQUAL(): antlr.TerminalNode;
    definitionArgument(): DefinitionArgumentContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class EnumValueListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext[];
    sconst(i: number): SconstContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterEnumStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TYPE_P(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    ADD_P(): antlr.TerminalNode | null;
    VALUE_P(): antlr.TerminalNode;
    optionalIfNotExists(): OptionalIfNotExistsContext | null;
    sconst(): SconstContext[];
    sconst(i: number): SconstContext | null;
    BEFORE(): antlr.TerminalNode | null;
    AFTER(): antlr.TerminalNode | null;
    RENAME(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalIfNotExistsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateOperatorClassStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    OPERATOR(): antlr.TerminalNode;
    CLASS(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    FOR(): antlr.TerminalNode;
    TYPE_P(): antlr.TerminalNode;
    typeName(): TypeNameContext;
    USING(): antlr.TerminalNode;
    name(): NameContext;
    optionalOperatorFamily(): OptionalOperatorFamilyContext;
    AS(): antlr.TerminalNode;
    operatorClassItemList(): OperatorClassItemListContext;
    DEFAULT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorClassItemListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    operatorClassItem(): OperatorClassItemContext[];
    operatorClassItem(i: number): OperatorClassItemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorClassItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPERATOR(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    anyOperator(): AnyOperatorContext | null;
    operatorClassPurpose(): OperatorClassPurposeContext | null;
    RECHECK(): antlr.TerminalNode | null;
    operatorWithArgumentTypes(): OperatorWithArgumentTypesContext | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    typeList(): TypeListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    STORAGE(): antlr.TerminalNode | null;
    typeName(): TypeNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalOperatorFamilyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FAMILY(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorClassPurposeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode | null;
    SEARCH(): antlr.TerminalNode | null;
    ORDER(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateOperatorFamilyStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    OPERATOR(): antlr.TerminalNode;
    FAMILY(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    USING(): antlr.TerminalNode;
    name(): NameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterOperatorFamilyStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    OPERATOR(): antlr.TerminalNode;
    FAMILY(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    USING(): antlr.TerminalNode;
    name(): NameContext;
    ADD_P(): antlr.TerminalNode | null;
    operatorClassItemList(): OperatorClassItemListContext | null;
    DROP(): antlr.TerminalNode | null;
    operatorClassDropList(): OperatorClassDropListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorClassDropListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    operatorClassDrop(): OperatorClassDropContext[];
    operatorClassDrop(i: number): OperatorClassDropContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorClassDropContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPERATOR(): antlr.TerminalNode | null;
    iconst(): IconstContext;
    OPEN_PAREN(): antlr.TerminalNode;
    typeList(): TypeListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    FUNCTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropOperatorClassStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    OPERATOR(): antlr.TerminalNode;
    CLASS(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    USING(): antlr.TerminalNode;
    name(): NameContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropOperatorFamilyStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    OPERATOR(): antlr.TerminalNode;
    FAMILY(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    USING(): antlr.TerminalNode;
    name(): NameContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropOwnedStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    OWNED(): antlr.TerminalNode;
    BY(): antlr.TerminalNode;
    roleNameList(): RoleNameListContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ReassignOwnedStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REASSIGN(): antlr.TerminalNode;
    OWNED(): antlr.TerminalNode;
    BY(): antlr.TerminalNode;
    roleNameList(): RoleNameListContext;
    TO(): antlr.TerminalNode;
    roleName(): RoleNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    objectTypeAnyName(): ObjectTypeAnyNameContext | null;
    anyNameList(): AnyNameListContext | null;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    SEQUENCE(): antlr.TerminalNode | null;
    sequenceNameList(): SequenceNameListContext | null;
    INDEX(): antlr.TerminalNode | null;
    indexNameList(): IndexNameListContext | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaNameList(): SchemaNameListContext | null;
    dropTypeName(): DropTypeNameContext | null;
    nameList(): NameListContext | null;
    objectTypeNameOnAnyName(): ObjectTypeNameOnAnyNameContext | null;
    name(): NameContext | null;
    ON(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    TRIGGER(): antlr.TerminalNode | null;
    triggerName(): TriggerNameContext | null;
    TYPE_P(): antlr.TerminalNode | null;
    typeNameList(): TypeNameListContext | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    CONCURRENTLY(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ObjectTypeAnyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLE(): antlr.TerminalNode | null;
    VIEW(): antlr.TerminalNode | null;
    MATERIALIZED(): antlr.TerminalNode | null;
    FOREIGN(): antlr.TerminalNode | null;
    COLLATION(): antlr.TerminalNode | null;
    CONVERSION_P(): antlr.TerminalNode | null;
    STATISTICS(): antlr.TerminalNode | null;
    TEXT_P(): antlr.TerminalNode | null;
    SEARCH(): antlr.TerminalNode | null;
    PARSER(): antlr.TerminalNode | null;
    DICTIONARY(): antlr.TerminalNode | null;
    TEMPLATE(): antlr.TerminalNode | null;
    CONFIGURATION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ObjectTypeNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    dropTypeName(): DropTypeNameContext | null;
    SUBSCRIPTION(): antlr.TerminalNode | null;
    TABLESPACE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropTypeNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ACCESS(): antlr.TerminalNode | null;
    METHOD(): antlr.TerminalNode | null;
    EVENT(): antlr.TerminalNode | null;
    TRIGGER(): antlr.TerminalNode | null;
    EXTENSION(): antlr.TerminalNode | null;
    FOREIGN(): antlr.TerminalNode | null;
    DATA_P(): antlr.TerminalNode | null;
    WRAPPER(): antlr.TerminalNode | null;
    optionalProcedural(): OptionalProceduralContext | null;
    LANGUAGE(): antlr.TerminalNode | null;
    PUBLICATION(): antlr.TerminalNode | null;
    SERVER(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ObjectTypeNameOnAnyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    POLICY(): antlr.TerminalNode | null;
    RULE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AnyNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anyName(): AnyNameContext[];
    anyName(i: number): AnyNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AnyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    attributes(): AttributesContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AttributesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DOT(): antlr.TerminalNode[];
    DOT(i: number): antlr.TerminalNode | null;
    attributeName(): AttributeNameContext[];
    attributeName(i: number): AttributeNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TypeNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TruncateStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TRUNCATE(): antlr.TerminalNode;
    optionalTable(): OptionalTableContext;
    relationExpressionList(): RelationExpressionListContext;
    optionalRestartSequences(): OptionalRestartSequencesContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalRestartSequencesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CONTINUE_P(): antlr.TerminalNode | null;
    IDENTITY_P(): antlr.TerminalNode | null;
    RESTART(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CommentStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMENT(): antlr.TerminalNode;
    ON(): antlr.TerminalNode[];
    ON(i: number): antlr.TerminalNode | null;
    objectTypeAnyName(): ObjectTypeAnyNameContext | null;
    anyName(): AnyNameContext | null;
    IS(): antlr.TerminalNode;
    commentText(): CommentTextContext;
    SEQUENCE(): antlr.TerminalNode | null;
    sequenceName(): SequenceNameContext | null;
    INDEX(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    COLUMN(): antlr.TerminalNode | null;
    objectTypeName(): ObjectTypeNameContext | null;
    name(): NameContext | null;
    ROLE(): antlr.TerminalNode | null;
    roleName(): RoleNameContext | null;
    DATABASE(): antlr.TerminalNode | null;
    databaseName(): DatabaseNameContext | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaName(): SchemaNameContext | null;
    TYPE_P(): antlr.TerminalNode | null;
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    AGGREGATE(): antlr.TerminalNode | null;
    aggregateWithArgumentTypes(): AggregateWithArgumentTypesContext | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    OPERATOR(): antlr.TerminalNode | null;
    operatorWithArgumentTypes(): OperatorWithArgumentTypesContext | null;
    CONSTRAINT(): antlr.TerminalNode | null;
    constraintName(): ConstraintNameContext | null;
    objectTypeNameOnAnyName(): ObjectTypeNameOnAnyNameContext | null;
    TRIGGER(): antlr.TerminalNode | null;
    triggerName(): TriggerNameContext | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    TRANSFORM(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    LANGUAGE(): antlr.TerminalNode | null;
    CLASS(): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    FAMILY(): antlr.TerminalNode | null;
    LARGE_P(): antlr.TerminalNode | null;
    OBJECT_P(): antlr.TerminalNode | null;
    numericOnly(): NumericOnlyContext | null;
    CAST(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    AS(): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CommentTextContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext | null;
    NULL_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SecurityLabelStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SECURITY(): antlr.TerminalNode;
    LABEL(): antlr.TerminalNode;
    optionalProvider(): OptionalProviderContext;
    ON(): antlr.TerminalNode;
    objectTypeAnyName(): ObjectTypeAnyNameContext | null;
    anyName(): AnyNameContext | null;
    IS(): antlr.TerminalNode;
    securityLabel(): SecurityLabelContext;
    SEQUENCE(): antlr.TerminalNode | null;
    sequenceName(): SequenceNameContext | null;
    INDEX(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    COLUMN(): antlr.TerminalNode | null;
    objectTypeName(): ObjectTypeNameContext | null;
    name(): NameContext | null;
    ROLE(): antlr.TerminalNode | null;
    roleName(): RoleNameContext | null;
    DATABASE(): antlr.TerminalNode | null;
    databaseName(): DatabaseNameContext | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaName(): SchemaNameContext | null;
    TYPE_P(): antlr.TerminalNode | null;
    typeName(): TypeNameContext | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    AGGREGATE(): antlr.TerminalNode | null;
    aggregateWithArgumentTypes(): AggregateWithArgumentTypesContext | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    LARGE_P(): antlr.TerminalNode | null;
    OBJECT_P(): antlr.TerminalNode | null;
    numericOnly(): NumericOnlyContext | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalProviderContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode | null;
    nonReservedWordOrSconst(): NonReservedWordOrSconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SecurityLabelContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext | null;
    NULL_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FetchStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FETCH(): antlr.TerminalNode | null;
    fetchArguments(): FetchArgumentsContext;
    MOVE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FetchArgumentsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    cursorName(): CursorNameContext;
    fromOrIn(): FromOrInContext | null;
    NEXT(): antlr.TerminalNode | null;
    optionalFromOrIn(): OptionalFromOrInContext | null;
    PRIOR(): antlr.TerminalNode | null;
    FIRST_P(): antlr.TerminalNode | null;
    LAST_P(): antlr.TerminalNode | null;
    ABSOLUTE_P(): antlr.TerminalNode | null;
    signedIconst(): SignedIconstContext | null;
    RELATIVE_P(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    FORWARD(): antlr.TerminalNode | null;
    BACKWARD(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FromOrInContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FROM(): antlr.TerminalNode | null;
    IN_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalFromOrInContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    fromOrIn(): FromOrInContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GrantStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GRANT(): antlr.TerminalNode;
    privileges(): PrivilegesContext;
    ON(): antlr.TerminalNode;
    privilegeTarget(): PrivilegeTargetContext;
    TO(): antlr.TerminalNode;
    granteeList(): GranteeListContext;
    optionalWithGrantOption(): OptionalWithGrantOptionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RevokeStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REVOKE(): antlr.TerminalNode;
    privileges(): PrivilegesContext;
    ON(): antlr.TerminalNode;
    privilegeTarget(): PrivilegeTargetContext;
    FROM(): antlr.TerminalNode;
    granteeList(): GranteeListContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    GRANT(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PrivilegesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    privilegeList(): PrivilegeListContext | null;
    ALL(): antlr.TerminalNode | null;
    PRIVILEGES(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    columnList(): ColumnListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PrivilegeListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    privilege(): PrivilegeContext[];
    privilege(i: number): PrivilegeContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PrivilegeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SELECT(): antlr.TerminalNode | null;
    columnListWithParentheses(): ColumnListWithParenthesesContext;
    REFERENCES(): antlr.TerminalNode | null;
    CREATE(): antlr.TerminalNode | null;
    columnId(): ColumnIdContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PrivilegeTargetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedNameList(): QualifiedNameListContext | null;
    TABLE(): antlr.TerminalNode | null;
    SEQUENCE(): antlr.TerminalNode | null;
    sequenceNameList(): SequenceNameListContext | null;
    FOREIGN(): antlr.TerminalNode | null;
    DATA_P(): antlr.TerminalNode | null;
    WRAPPER(): antlr.TerminalNode | null;
    nameList(): NameListContext | null;
    SERVER(): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypesList(): FunctionWithArgumentTypesListContext | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    DATABASE(): antlr.TerminalNode | null;
    databaseNameList(): DatabaseNameListContext | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    anyNameList(): AnyNameListContext | null;
    LANGUAGE(): antlr.TerminalNode | null;
    LARGE_P(): antlr.TerminalNode | null;
    OBJECT_P(): antlr.TerminalNode | null;
    numericOnlyList(): NumericOnlyListContext | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaNameList(): SchemaNameListContext | null;
    TABLESPACE(): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    IN_P(): antlr.TerminalNode | null;
    TABLES(): antlr.TerminalNode | null;
    SEQUENCES(): antlr.TerminalNode | null;
    FUNCTIONS(): antlr.TerminalNode | null;
    PROCEDURES(): antlr.TerminalNode | null;
    ROUTINES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GranteeListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    grantee(): GranteeContext[];
    grantee(i: number): GranteeContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GranteeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    roleName(): RoleNameContext;
    GROUP_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalWithGrantOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    GRANT(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GrantPrivilegeStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GRANT(): antlr.TerminalNode;
    privilegeList(): PrivilegeListContext;
    TO(): antlr.TerminalNode;
    roleNameList(): RoleNameListContext;
    optionalGrantAdminOption(): OptionalGrantAdminOptionContext;
    optionalGrantedBy(): OptionalGrantedByContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RevokePrivilegeStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REVOKE(): antlr.TerminalNode;
    privilegeList(): PrivilegeListContext;
    FROM(): antlr.TerminalNode;
    roleNameList(): RoleNameListContext;
    optionalGrantedBy(): OptionalGrantedByContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    ADMIN(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalGrantAdminOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    ADMIN(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalGrantedByContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GRANTED(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    roleName(): RoleNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterDefaultPrivilegesStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    DEFAULT(): antlr.TerminalNode;
    PRIVILEGES(): antlr.TerminalNode;
    defaultPrivelegeAction(): DefaultPrivelegeActionContext;
    defultPrivilegeOption(): DefultPrivilegeOptionContext[];
    defultPrivilegeOption(i: number): DefultPrivilegeOptionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DefultPrivilegeOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IN_P(): antlr.TerminalNode | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaNameList(): SchemaNameListContext | null;
    FOR(): antlr.TerminalNode | null;
    roleOrAliases(): RoleOrAliasesContext | null;
    roleNameList(): RoleNameListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DefaultPrivelegeActionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GRANT(): antlr.TerminalNode | null;
    privileges(): PrivilegesContext;
    ON(): antlr.TerminalNode;
    defultPrivilegeTarget(): DefultPrivilegeTargetContext;
    TO(): antlr.TerminalNode | null;
    granteeList(): GranteeListContext;
    optionalWithGrantOption(): OptionalWithGrantOptionContext | null;
    REVOKE(): antlr.TerminalNode | null;
    FROM(): antlr.TerminalNode | null;
    optionalDropBehavior(): OptionalDropBehaviorContext | null;
    OPTION(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DefultPrivilegeTargetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLES(): antlr.TerminalNode | null;
    FUNCTIONS(): antlr.TerminalNode | null;
    ROUTINES(): antlr.TerminalNode | null;
    SEQUENCES(): antlr.TerminalNode | null;
    TYPES_P(): antlr.TerminalNode | null;
    SCHEMAS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndexStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    INDEX(): antlr.TerminalNode;
    ON(): antlr.TerminalNode;
    relationExpression(): RelationExpressionContext;
    optionalAccessMethodClause(): OptionalAccessMethodClauseContext;
    OPEN_PAREN(): antlr.TerminalNode;
    indexParameters(): IndexParametersContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    optionalInclude(): OptionalIncludeContext;
    optionalRelOptions(): OptionalRelOptionsContext;
    optionalTablespace(): OptionalTablespaceContext;
    whereClause(): WhereClauseContext;
    UNIQUE(): antlr.TerminalNode | null;
    CONCURRENTLY(): antlr.TerminalNode | null;
    name(): NameContext | null;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalAccessMethodClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    name(): NameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndexParametersContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    indexElement(): IndexElementContext[];
    indexElement(i: number): IndexElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndexElemOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalCollate(): OptionalCollateContext;
    optionalClass(): OptionalClassContext | null;
    optionalAscOrDesc(): OptionalAscOrDescContext;
    optionalNullsOrder(): OptionalNullsOrderContext;
    anyName(): AnyNameContext | null;
    relOptions(): RelOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndexElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext | null;
    indexElemOptions(): IndexElemOptionsContext;
    functionExpressionWindowless(): FunctionExpressionWindowlessContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalIncludeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INCLUDE(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    indexElement(): IndexElementContext[];
    indexElement(i: number): IndexElementContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalCollateContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COLLATE(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalClassContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anyName(): AnyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalAscOrDescContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ASC(): antlr.TerminalNode | null;
    DESC(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalNullsOrderContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NULLS_P(): antlr.TerminalNode | null;
    FIRST_P(): antlr.TerminalNode | null;
    LAST_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateFunctionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    optionalOrReplace(): OptionalOrReplaceContext;
    functionName(): FunctionNameContext;
    OPEN_PAREN(): antlr.TerminalNode[];
    OPEN_PAREN(i: number): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode[];
    CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    createFunctionOptionList(): CreateFunctionOptionListContext;
    FUNCTION(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    functionArgumentsWithDefaultsList(): FunctionArgumentsWithDefaultsListContext | null;
    RETURNS(): antlr.TerminalNode | null;
    functionReturn(): FunctionReturnContext | null;
    TABLE(): antlr.TerminalNode | null;
    tableFunctionColumnList(): TableFunctionColumnListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalOrReplaceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OR(): antlr.TerminalNode | null;
    REPLACE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionArgumentsListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionArgument(): FunctionArgumentContext[];
    functionArgument(i: number): FunctionArgumentContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionWithArgumentTypesListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext[];
    functionWithArgumentTypes(i: number): FunctionWithArgumentTypesContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionWithArgumentTypesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionName(): FunctionNameContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    functionArgumentsList(): FunctionArgumentsListContext | null;
    typeFunctionNameKeyword(): TypeFunctionNameKeywordContext | null;
    columnId(): ColumnIdContext | null;
    indirection(): IndirectionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionArgumentsWithDefaultsListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionArgumentWithDefault(): FunctionArgumentWithDefaultContext[];
    functionArgumentWithDefault(i: number): FunctionArgumentWithDefaultContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionArgumentWithDefaultContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionArgument(): FunctionArgumentContext;
    expression1(): Expression1Context | null;
    DEFAULT(): antlr.TerminalNode | null;
    EQUAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    argumentClass(): ArgumentClassContext | null;
    functionType(): FunctionTypeContext;
    parameterName(): ParameterNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ArgumentClassContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IN_P(): antlr.TerminalNode | null;
    OUT_P(): antlr.TerminalNode | null;
    INOUT(): antlr.TerminalNode | null;
    VARIADIC(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ParameterNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    typeFunctionName(): TypeFunctionNameContext | null;
    builtinFunctionName(): BuiltinFunctionNameContext | null;
    LEFT(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionReturnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionType(): FunctionTypeContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    typeName(): TypeNameContext | null;
    attributes(): AttributesContext | null;
    PERCENT(): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode | null;
    builtinFunctionName(): BuiltinFunctionNameContext | null;
    typeFunctionName(): TypeFunctionNameContext | null;
    LEFT(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    SETOF(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AggregateArgumentsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode;
    CLOSE_PAREN(): antlr.TerminalNode;
    STAR(): antlr.TerminalNode | null;
    aggregateArgumentsList(): AggregateArgumentsListContext[];
    aggregateArgumentsList(i: number): AggregateArgumentsListContext | null;
    ORDER(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AggregateArgumentsListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionArgument(): FunctionArgumentContext[];
    functionArgument(i: number): FunctionArgumentContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AggregateWithArgumentTypesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionName(): FunctionNameContext;
    aggregateArguments(): AggregateArgumentsContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AggregateWithArgumentTypesListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    aggregateWithArgumentTypes(): AggregateWithArgumentTypesContext[];
    aggregateWithArgumentTypes(i: number): AggregateWithArgumentTypesContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateFunctionOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    createFunctionOptionItem(): CreateFunctionOptionItemContext[];
    createFunctionOptionItem(i: number): CreateFunctionOptionItemContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CommonFunctionOptionItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CALLED(): antlr.TerminalNode | null;
    ON(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode[];
    NULL_P(i: number): antlr.TerminalNode | null;
    INPUT_P(): antlr.TerminalNode | null;
    RETURNS(): antlr.TerminalNode | null;
    STRICT_P(): antlr.TerminalNode | null;
    IMMUTABLE(): antlr.TerminalNode | null;
    STABLE(): antlr.TerminalNode | null;
    VOLATILE(): antlr.TerminalNode | null;
    EXTERNAL(): antlr.TerminalNode | null;
    SECURITY(): antlr.TerminalNode | null;
    DEFINER(): antlr.TerminalNode | null;
    INVOKER(): antlr.TerminalNode | null;
    LEAKPROOF(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    COST(): antlr.TerminalNode | null;
    numericOnly(): NumericOnlyContext | null;
    ROWS(): antlr.TerminalNode | null;
    SUPPORT(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    functionSetResetClause(): FunctionSetResetClauseContext | null;
    PARALLEL(): antlr.TerminalNode | null;
    columnId(): ColumnIdContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateFunctionOptionItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AS(): antlr.TerminalNode | null;
    functionAs(): FunctionAsContext | null;
    LANGUAGE(): antlr.TerminalNode | null;
    nonReservedWordOrSconst(): NonReservedWordOrSconstContext | null;
    TRANSFORM(): antlr.TerminalNode | null;
    transformTypeList(): TransformTypeListContext | null;
    WINDOW(): antlr.TerminalNode | null;
    commonFunctionOptionItem(): CommonFunctionOptionItemContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionAsContext extends antlr.ParserRuleContext {
    Definition: antlr.ParserRuleContext;
    _def?: SconstContext;
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext[];
    sconst(i: number): SconstContext | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TransformTypeListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode[];
    FOR(i: number): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode[];
    TYPE_P(i: number): antlr.TerminalNode | null;
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalDefinitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    definition(): DefinitionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableFunctionColumnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    parameterName(): ParameterNameContext;
    functionType(): FunctionTypeContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableFunctionColumnListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableFunctionColumn(): TableFunctionColumnContext[];
    tableFunctionColumn(i: number): TableFunctionColumnContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterFunctionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext;
    FUNCTION(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    commonFunctionOptionItem(): CommonFunctionOptionItemContext[];
    commonFunctionOptionItem(i: number): CommonFunctionOptionItemContext | null;
    RESTRICT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RemoveFunctionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypesList(): FunctionWithArgumentTypesListContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RemoveAggregateStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    AGGREGATE(): antlr.TerminalNode;
    aggregateWithArgumentTypesList(): AggregateWithArgumentTypesListContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RemoveOperatorStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    OPERATOR(): antlr.TerminalNode;
    operatorWithArgumentTypesList(): OperatorWithArgumentTypesListContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorArgumentTypesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode;
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    CLOSE_PAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode | null;
    NONE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AnyOperatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    allOperator(): AllOperatorContext;
    columnId(): ColumnIdContext[];
    columnId(i: number): ColumnIdContext | null;
    DOT(): antlr.TerminalNode[];
    DOT(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorWithArgumentTypesListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    operatorWithArgumentTypes(): OperatorWithArgumentTypesContext[];
    operatorWithArgumentTypes(i: number): OperatorWithArgumentTypesContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorWithArgumentTypesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anyOperator(): AnyOperatorContext;
    operatorArgumentTypes(): OperatorArgumentTypesContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DoStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DO(): antlr.TerminalNode;
    doStatementOptionsList(): DoStatementOptionsListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DoStatementOptionsListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    doStatementOptionItem(): DoStatementOptionItemContext[];
    doStatementOptionItem(i: number): DoStatementOptionItemContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DoStatementOptionItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext | null;
    LANGUAGE(): antlr.TerminalNode | null;
    nonReservedWordOrSconst(): NonReservedWordOrSconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateCastStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    CAST(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode;
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    AS(): antlr.TerminalNode;
    CLOSE_PAREN(): antlr.TerminalNode;
    WITH(): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    castContext(): CastContextContext;
    WITHOUT(): antlr.TerminalNode | null;
    INOUT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CastContextContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AS(): antlr.TerminalNode | null;
    IMPLICIT_P(): antlr.TerminalNode | null;
    ASSIGNMENT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropCastStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    CAST(): antlr.TerminalNode;
    optionalIfExists(): OptionalIfExistsContext;
    OPEN_PAREN(): antlr.TerminalNode;
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    AS(): antlr.TerminalNode;
    CLOSE_PAREN(): antlr.TerminalNode;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalIfExistsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateTransformStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    optionalOrReplace(): OptionalOrReplaceContext;
    TRANSFORM(): antlr.TerminalNode;
    FOR(): antlr.TerminalNode;
    typeName(): TypeNameContext;
    LANGUAGE(): antlr.TerminalNode;
    name(): NameContext;
    OPEN_PAREN(): antlr.TerminalNode;
    transformElementList(): TransformElementListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TransformElementListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FROM(): antlr.TerminalNode | null;
    SQL_P(): antlr.TerminalNode[];
    SQL_P(i: number): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode[];
    WITH(i: number): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode[];
    FUNCTION(i: number): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext[];
    functionWithArgumentTypes(i: number): FunctionWithArgumentTypesContext | null;
    COMMA(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropTransformStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    TRANSFORM(): antlr.TerminalNode;
    optionalIfExists(): OptionalIfExistsContext;
    FOR(): antlr.TerminalNode;
    typeName(): TypeNameContext;
    LANGUAGE(): antlr.TerminalNode;
    name(): NameContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ReindexStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REINDEX(): antlr.TerminalNode;
    reindexTargetType(): ReindexTargetTypeContext | null;
    qualifiedName(): QualifiedNameContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    reindexOptionList(): ReindexOptionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    CONCURRENTLY(): antlr.TerminalNode | null;
    DATABASE(): antlr.TerminalNode | null;
    databaseName(): DatabaseNameContext | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaName(): SchemaNameContext | null;
    INDEX(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    SYSTEM_P(): antlr.TerminalNode | null;
    name(): NameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ReindexTargetTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLE(): antlr.TerminalNode | null;
    SYSTEM_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ReindexOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    reindexOptionElement(): ReindexOptionElementContext[];
    reindexOptionElement(i: number): ReindexOptionElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ReindexOptionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VERBOSE(): antlr.TerminalNode | null;
    TABLESPACE(): antlr.TerminalNode | null;
    CONCURRENTLY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterTablespaceStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TABLESPACE(): antlr.TerminalNode;
    name(): NameContext;
    SET(): antlr.TerminalNode | null;
    relOptions(): RelOptionsContext;
    RESET(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RenameStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    AGGREGATE(): antlr.TerminalNode | null;
    aggregateWithArgumentTypes(): AggregateWithArgumentTypesContext | null;
    RENAME(): antlr.TerminalNode;
    TO(): antlr.TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext | null;
    COLLATION(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    CONVERSION_P(): antlr.TerminalNode | null;
    DATABASE(): antlr.TerminalNode | null;
    databaseName(): DatabaseNameContext | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    CONSTRAINT(): antlr.TerminalNode | null;
    constraintName(): ConstraintNameContext | null;
    FOREIGN(): antlr.TerminalNode | null;
    DATA_P(): antlr.TerminalNode | null;
    WRAPPER(): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    optionalProcedural(): OptionalProceduralContext | null;
    LANGUAGE(): antlr.TerminalNode | null;
    OPERATOR(): antlr.TerminalNode | null;
    CLASS(): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    FAMILY(): antlr.TerminalNode | null;
    POLICY(): antlr.TerminalNode | null;
    ON(): antlr.TerminalNode | null;
    qualifiedName(): QualifiedNameContext | null;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    PUBLICATION(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaName(): SchemaNameContext | null;
    SERVER(): antlr.TerminalNode | null;
    SUBSCRIPTION(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    relationExpression(): RelationExpressionContext | null;
    SEQUENCE(): antlr.TerminalNode | null;
    sequenceName(): SequenceNameContext | null;
    VIEW(): antlr.TerminalNode | null;
    MATERIALIZED(): antlr.TerminalNode | null;
    INDEX(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    optionalColumn(): OptionalColumnContext | null;
    RULE(): antlr.TerminalNode | null;
    TRIGGER(): antlr.TerminalNode | null;
    triggerName(): TriggerNameContext | null;
    EVENT(): antlr.TerminalNode | null;
    roleOrAliases(): RoleOrAliasesContext | null;
    roleName(): RoleNameContext[];
    roleName(i: number): RoleNameContext | null;
    TABLESPACE(): antlr.TerminalNode | null;
    STATISTICS(): antlr.TerminalNode | null;
    TEXT_P(): antlr.TerminalNode | null;
    SEARCH(): antlr.TerminalNode | null;
    PARSER(): antlr.TerminalNode | null;
    DICTIONARY(): antlr.TerminalNode | null;
    TEMPLATE(): antlr.TerminalNode | null;
    CONFIGURATION(): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode | null;
    ATTRIBUTE(): antlr.TerminalNode | null;
    optionalDropBehavior(): OptionalDropBehaviorContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalColumnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COLUMN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalSetDataContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode | null;
    DATA_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterObjectDependsStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    DEPENDS(): antlr.TerminalNode;
    ON(): antlr.TerminalNode[];
    ON(i: number): antlr.TerminalNode | null;
    EXTENSION(): antlr.TerminalNode;
    name(): NameContext;
    NO(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    TRIGGER(): antlr.TerminalNode | null;
    triggerName(): TriggerNameContext | null;
    qualifiedName(): QualifiedNameContext | null;
    MATERIALIZED(): antlr.TerminalNode | null;
    VIEW(): antlr.TerminalNode | null;
    INDEX(): antlr.TerminalNode | null;
    indexName(): IndexNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterObjectSchemaStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    AGGREGATE(): antlr.TerminalNode | null;
    aggregateWithArgumentTypes(): AggregateWithArgumentTypesContext | null;
    SET(): antlr.TerminalNode;
    SCHEMA(): antlr.TerminalNode;
    schemaName(): SchemaNameContext;
    COLLATION(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    CONVERSION_P(): antlr.TerminalNode | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    EXTENSION(): antlr.TerminalNode | null;
    name(): NameContext | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    OPERATOR(): antlr.TerminalNode | null;
    operatorWithArgumentTypes(): OperatorWithArgumentTypesContext | null;
    CLASS(): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    FAMILY(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    relationExpression(): RelationExpressionContext | null;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    STATISTICS(): antlr.TerminalNode | null;
    TEXT_P(): antlr.TerminalNode | null;
    SEARCH(): antlr.TerminalNode | null;
    PARSER(): antlr.TerminalNode | null;
    DICTIONARY(): antlr.TerminalNode | null;
    TEMPLATE(): antlr.TerminalNode | null;
    CONFIGURATION(): antlr.TerminalNode | null;
    SEQUENCE(): antlr.TerminalNode | null;
    sequenceName(): SequenceNameContext | null;
    VIEW(): antlr.TerminalNode | null;
    qualifiedName(): QualifiedNameContext | null;
    MATERIALIZED(): antlr.TerminalNode | null;
    FOREIGN(): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterOperatorStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    OPERATOR(): antlr.TerminalNode;
    operatorWithArgumentTypes(): OperatorWithArgumentTypesContext;
    SET(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode;
    operatorDefinitionList(): OperatorDefinitionListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorDefinitionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    operatorDefinitionElement(): OperatorDefinitionElementContext[];
    operatorDefinitionElement(i: number): OperatorDefinitionElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorDefinitionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnLabel(): ColumnLabelContext;
    EQUAL(): antlr.TerminalNode;
    NONE(): antlr.TerminalNode | null;
    operatorDefinitionArgument(): OperatorDefinitionArgumentContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorDefinitionArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionType(): FunctionTypeContext | null;
    reservedKeyword(): ReservedKeywordContext | null;
    allOperatorQualifier(): AllOperatorQualifierContext | null;
    numericOnly(): NumericOnlyContext | null;
    sconst(): SconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterTypeStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TYPE_P(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    SET(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode;
    operatorDefinitionList(): OperatorDefinitionListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterOwnerStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    AGGREGATE(): antlr.TerminalNode | null;
    aggregateWithArgumentTypes(): AggregateWithArgumentTypesContext | null;
    OWNER(): antlr.TerminalNode;
    TO(): antlr.TerminalNode;
    roleName(): RoleNameContext;
    COLLATION(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    CONVERSION_P(): antlr.TerminalNode | null;
    DATABASE(): antlr.TerminalNode | null;
    databaseName(): DatabaseNameContext | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode | null;
    functionWithArgumentTypes(): FunctionWithArgumentTypesContext | null;
    optionalProcedural(): OptionalProceduralContext | null;
    LANGUAGE(): antlr.TerminalNode | null;
    name(): NameContext | null;
    LARGE_P(): antlr.TerminalNode | null;
    OBJECT_P(): antlr.TerminalNode | null;
    numericOnly(): NumericOnlyContext | null;
    OPERATOR(): antlr.TerminalNode | null;
    operatorWithArgumentTypes(): OperatorWithArgumentTypesContext | null;
    CLASS(): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    FAMILY(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    SCHEMA(): antlr.TerminalNode | null;
    schemaName(): SchemaNameContext | null;
    TYPE_P(): antlr.TerminalNode | null;
    TABLESPACE(): antlr.TerminalNode | null;
    STATISTICS(): antlr.TerminalNode | null;
    TEXT_P(): antlr.TerminalNode | null;
    SEARCH(): antlr.TerminalNode | null;
    DICTIONARY(): antlr.TerminalNode | null;
    CONFIGURATION(): antlr.TerminalNode | null;
    FOREIGN(): antlr.TerminalNode | null;
    DATA_P(): antlr.TerminalNode | null;
    WRAPPER(): antlr.TerminalNode | null;
    SERVER(): antlr.TerminalNode | null;
    EVENT(): antlr.TerminalNode | null;
    TRIGGER(): antlr.TerminalNode | null;
    PUBLICATION(): antlr.TerminalNode | null;
    SUBSCRIPTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreatePublicationStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    PUBLICATION(): antlr.TerminalNode;
    name(): NameContext;
    optionalPublicationForTables(): OptionalPublicationForTablesContext;
    optionalDefinition(): OptionalDefinitionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalPublicationForTablesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    publicationForTables(): PublicationForTablesContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PublicationForTablesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode;
    TABLE(): antlr.TerminalNode | null;
    relationExpressionList(): RelationExpressionListContext | null;
    ALL(): antlr.TerminalNode | null;
    TABLES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterPublicationStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    PUBLICATION(): antlr.TerminalNode;
    name(): NameContext;
    SET(): antlr.TerminalNode | null;
    definition(): DefinitionContext | null;
    ADD_P(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    relationExpressionList(): RelationExpressionListContext | null;
    DROP(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateSubscriptionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    SUBSCRIPTION(): antlr.TerminalNode;
    name(): NameContext;
    CONNECTION(): antlr.TerminalNode;
    sconst(): SconstContext;
    PUBLICATION(): antlr.TerminalNode;
    publicationNameList(): PublicationNameListContext;
    optionalDefinition(): OptionalDefinitionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PublicationNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    publicationNameItem(): PublicationNameItemContext[];
    publicationNameItem(i: number): PublicationNameItemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PublicationNameItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnLabel(): ColumnLabelContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterSubscriptionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    SUBSCRIPTION(): antlr.TerminalNode;
    name(): NameContext;
    SET(): antlr.TerminalNode | null;
    definition(): DefinitionContext | null;
    CONNECTION(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    REFRESH(): antlr.TerminalNode | null;
    PUBLICATION(): antlr.TerminalNode | null;
    optionalDefinition(): OptionalDefinitionContext | null;
    publicationNameList(): PublicationNameListContext | null;
    ENABLE_P(): antlr.TerminalNode | null;
    DISABLE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropSubscriptionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    SUBSCRIPTION(): antlr.TerminalNode;
    name(): NameContext;
    optionalDropBehavior(): OptionalDropBehaviorContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RuleStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    optionalOrReplace(): OptionalOrReplaceContext;
    RULE(): antlr.TerminalNode;
    name(): NameContext;
    AS(): antlr.TerminalNode;
    ON(): antlr.TerminalNode;
    event(): EventContext;
    TO(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext;
    whereClause(): WhereClauseContext;
    DO(): antlr.TerminalNode;
    optionalInstead(): OptionalInsteadContext;
    ruleActionList(): RuleActionListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RuleActionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NOTHING(): antlr.TerminalNode | null;
    ruleActionStatement(): RuleActionStatementContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    ruleActionMulti(): RuleActionMultiContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RuleActionMultiContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ruleActionStatementOrEmpty(): RuleActionStatementOrEmptyContext[];
    ruleActionStatementOrEmpty(i: number): RuleActionStatementOrEmptyContext | null;
    SEMI(): antlr.TerminalNode[];
    SEMI(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RuleActionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    selectStatement(): SelectStatementContext | null;
    insertStatement(): InsertStatementContext | null;
    updateStatement(): UpdateStatementContext | null;
    deleteStatement(): DeleteStatementContext | null;
    notifyStatement(): NotifyStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RuleActionStatementOrEmptyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ruleActionStatement(): RuleActionStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class EventContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SELECT(): antlr.TerminalNode | null;
    UPDATE(): antlr.TerminalNode | null;
    DELETE_P(): antlr.TerminalNode | null;
    INSERT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalInsteadContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INSTEAD(): antlr.TerminalNode | null;
    ALSO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NotifyStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NOTIFY(): antlr.TerminalNode;
    columnId(): ColumnIdContext;
    notifyPayload(): NotifyPayloadContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NotifyPayloadContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMA(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ListenStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LISTEN(): antlr.TerminalNode;
    columnId(): ColumnIdContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class UnlistenStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UNLISTEN(): antlr.TerminalNode;
    columnId(): ColumnIdContext | null;
    STAR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TransactionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ABORT_P(): antlr.TerminalNode | null;
    optionalTransaction(): OptionalTransactionContext | null;
    optionalTransactionChain(): OptionalTransactionChainContext | null;
    BEGIN_P(): antlr.TerminalNode | null;
    transactionModeList(): TransactionModeListContext | null;
    START(): antlr.TerminalNode | null;
    TRANSACTION(): antlr.TerminalNode | null;
    COMMIT(): antlr.TerminalNode | null;
    END_P(): antlr.TerminalNode | null;
    ROLLBACK(): antlr.TerminalNode | null;
    SAVEPOINT(): antlr.TerminalNode | null;
    columnId(): ColumnIdContext | null;
    RELEASE(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    PREPARE(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    PREPARED(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTransactionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WORK(): antlr.TerminalNode | null;
    TRANSACTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TransactionModeItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ISOLATION(): antlr.TerminalNode | null;
    LEVEL(): antlr.TerminalNode | null;
    isoLevel(): IsoLevelContext | null;
    READ(): antlr.TerminalNode | null;
    ONLY(): antlr.TerminalNode | null;
    WRITE(): antlr.TerminalNode | null;
    DEFERRABLE(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TransactionModeListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    transactionModeItem(): TransactionModeItemContext[];
    transactionModeItem(i: number): TransactionModeItemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTransactionChainContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AND(): antlr.TerminalNode | null;
    CHAIN(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ViewStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    temporaryOption(): TemporaryOptionContext;
    AS(): antlr.TerminalNode;
    selectStatement(): SelectStatementContext;
    optionalCheckOption(): OptionalCheckOptionContext;
    VIEW(): antlr.TerminalNode | null;
    qualifiedName(): QualifiedNameContext | null;
    columnListWithParentheses(): ColumnListWithParenthesesContext | null;
    optionalRelOptions(): OptionalRelOptionsContext | null;
    RECURSIVE(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    columnList(): ColumnListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    OR(): antlr.TerminalNode | null;
    REPLACE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalCheckOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    CHECK(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    CASCADED(): antlr.TerminalNode | null;
    LOCAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class LoadStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LOAD(): antlr.TerminalNode;
    fileName(): FileNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateDatabaseStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    DATABASE(): antlr.TerminalNode;
    name(): NameContext;
    optionalWith(): OptionalWithContext;
    createDatabaseOptionList(): CreateDatabaseOptionListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateDatabaseOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    createDatabaseOptionItem(): CreateDatabaseOptionItemContext[];
    createDatabaseOptionItem(i: number): CreateDatabaseOptionItemContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateDatabaseOptionItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    createDatabaseOptionName(): CreateDatabaseOptionNameContext;
    signedIconst(): SignedIconstContext | null;
    booleanOrString(): BooleanOrStringContext | null;
    DEFAULT(): antlr.TerminalNode | null;
    EQUAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateDatabaseOptionNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    CONNECTION(): antlr.TerminalNode | null;
    LIMIT(): antlr.TerminalNode | null;
    ENCODING(): antlr.TerminalNode | null;
    LOCATION(): antlr.TerminalNode | null;
    OWNER(): antlr.TerminalNode | null;
    TABLESPACE(): antlr.TerminalNode | null;
    TEMPLATE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterDatabaseStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    DATABASE(): antlr.TerminalNode;
    databaseName(): DatabaseNameContext;
    WITH(): antlr.TerminalNode | null;
    createDatabaseOptionList(): CreateDatabaseOptionListContext | null;
    SET(): antlr.TerminalNode | null;
    TABLESPACE(): antlr.TerminalNode | null;
    name(): NameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterDatabaseSetStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    DATABASE(): antlr.TerminalNode;
    databaseName(): DatabaseNameContext;
    setResetClause(): SetResetClauseContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DropDatabaseStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    DATABASE(): antlr.TerminalNode;
    databaseName(): DatabaseNameContext;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    optionalWith(): OptionalWithContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    FORCE(): antlr.TerminalNode[];
    FORCE(i: number): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterCollationStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    COLLATION(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    REFRESH(): antlr.TerminalNode;
    VERSION_P(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterSystemStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    SYSTEM_P(): antlr.TerminalNode;
    genericSetClause(): GenericSetClauseContext;
    SET(): antlr.TerminalNode | null;
    RESET(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateDomainStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    DOMAIN_P(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    optionalAs(): OptionalAsContext;
    typeName(): TypeNameContext;
    columnQualifierList(): ColumnQualifierListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterDomainStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    DOMAIN_P(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    alterDomainCommand(): AlterDomainCommandContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AlterDomainCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alterColumnDefault(): AlterColumnDefaultContext | null;
    DROP(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    SET(): antlr.TerminalNode | null;
    ADD_P(): antlr.TerminalNode | null;
    tableConstraint(): TableConstraintContext | null;
    CONSTRAINT(): antlr.TerminalNode | null;
    constraintName(): ConstraintNameContext | null;
    optionalDropBehavior(): OptionalDropBehaviorContext | null;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    VALIDATE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalAsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AltertsDictionaryStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TEXT_P(): antlr.TerminalNode;
    SEARCH(): antlr.TerminalNode;
    DICTIONARY(): antlr.TerminalNode;
    anyName(): AnyNameContext;
    definition(): DefinitionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AltertsConfigurationStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode[];
    ALTER(i: number): antlr.TerminalNode | null;
    TEXT_P(): antlr.TerminalNode;
    SEARCH(): antlr.TerminalNode;
    CONFIGURATION(): antlr.TerminalNode;
    anyName(): AnyNameContext[];
    anyName(i: number): AnyNameContext | null;
    ADD_P(): antlr.TerminalNode | null;
    MAPPING(): antlr.TerminalNode;
    FOR(): antlr.TerminalNode | null;
    nameList(): NameListContext | null;
    WITH(): antlr.TerminalNode | null;
    anyNameList(): AnyNameListContext | null;
    REPLACE(): antlr.TerminalNode | null;
    DROP(): antlr.TerminalNode | null;
    IF_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CreateConversionStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    CONVERSION_P(): antlr.TerminalNode;
    anyName(): AnyNameContext[];
    anyName(i: number): AnyNameContext | null;
    FOR(): antlr.TerminalNode;
    sconst(): SconstContext[];
    sconst(i: number): SconstContext | null;
    TO(): antlr.TerminalNode;
    FROM(): antlr.TerminalNode;
    DEFAULT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ClusterStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CLUSTER(): antlr.TerminalNode;
    optionalVerbose(): OptionalVerboseContext;
    qualifiedName(): QualifiedNameContext | null;
    clusterIndexSpecification(): ClusterIndexSpecificationContext | null;
    name(): NameContext | null;
    ON(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ClusterIndexSpecificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    name(): NameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VacuumStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VACUUM(): antlr.TerminalNode;
    optionalVerbose(): OptionalVerboseContext | null;
    optionalVacuumRelationList(): OptionalVacuumRelationListContext;
    FULL(): antlr.TerminalNode | null;
    FREEZE(): antlr.TerminalNode | null;
    analyzeKeyword(): AnalyzeKeywordContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    vacuumAnalyzeOptionList(): VacuumAnalyzeOptionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AnalyzeStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    analyzeKeyword(): AnalyzeKeywordContext;
    optionalVerbose(): OptionalVerboseContext | null;
    optionalVacuumRelationList(): OptionalVacuumRelationListContext;
    OPEN_PAREN(): antlr.TerminalNode | null;
    vacuumAnalyzeOptionList(): VacuumAnalyzeOptionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VacuumAnalyzeOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    vacuumAnalyzeOptionElement(): VacuumAnalyzeOptionElementContext[];
    vacuumAnalyzeOptionElement(i: number): VacuumAnalyzeOptionElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AnalyzeKeywordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ANALYZE(): antlr.TerminalNode | null;
    ANALYSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VacuumAnalyzeOptionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    vacuumAnalyzeOptionName(): VacuumAnalyzeOptionNameContext;
    vacuumAnalyzeOptionArgument(): VacuumAnalyzeOptionArgumentContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VacuumAnalyzeOptionNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    nonReservedWord(): NonReservedWordContext | null;
    analyzeKeyword(): AnalyzeKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VacuumAnalyzeOptionArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    booleanOrString(): BooleanOrStringContext | null;
    numericOnly(): NumericOnlyContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalVerboseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VERBOSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    nameList(): NameListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class VacuumRelationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext;
    optionalNameList(): OptionalNameListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalVacuumRelationListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    vacuumRelation(): VacuumRelationContext[];
    vacuumRelation(i: number): VacuumRelationContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExplainStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXPLAIN(): antlr.TerminalNode;
    explainableStatement(): ExplainableStatementContext;
    analyzeKeyword(): AnalyzeKeywordContext | null;
    optionalVerbose(): OptionalVerboseContext | null;
    VERBOSE(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    explainOptionElement(): ExplainOptionElementContext[];
    explainOptionElement(i: number): ExplainOptionElementContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExplainableStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    selectStatement(): SelectStatementContext | null;
    insertStatement(): InsertStatementContext | null;
    updateStatement(): UpdateStatementContext | null;
    deleteStatement(): DeleteStatementContext | null;
    declareCursorStatement(): DeclareCursorStatementContext | null;
    createAsStatement(): CreateAsStatementContext | null;
    createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null;
    refreshMaterializedViewStatement(): RefreshMaterializedViewStatementContext | null;
    executeStatement(): ExecuteStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExplainOptionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    explainOptionName(): ExplainOptionNameContext;
    explainOptionArgument(): ExplainOptionArgumentContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExplainOptionNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    nonReservedWord(): NonReservedWordContext | null;
    analyzeKeyword(): AnalyzeKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExplainOptionArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    booleanOrString(): BooleanOrStringContext | null;
    numericOnly(): NumericOnlyContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PrepareStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PREPARE(): antlr.TerminalNode;
    name(): NameContext;
    prepareTypeClause(): PrepareTypeClauseContext;
    AS(): antlr.TerminalNode;
    preparableStatement(): PreparableStatementContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PrepareTypeClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    typeList(): TypeListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PreparableStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    selectStatement(): SelectStatementContext | null;
    insertStatement(): InsertStatementContext | null;
    updateStatement(): UpdateStatementContext | null;
    deleteStatement(): DeleteStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExecuteStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXECUTE(): antlr.TerminalNode;
    name(): NameContext;
    executeParameterClause(): ExecuteParameterClauseContext;
    CREATE(): antlr.TerminalNode | null;
    temporaryOption(): TemporaryOptionContext | null;
    TABLE(): antlr.TerminalNode | null;
    createAsTarget(): CreateAsTargetContext | null;
    AS(): antlr.TerminalNode | null;
    withData(): WithDataContext | null;
    IF_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExecuteParameterClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeallocateStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DEALLOCATE(): antlr.TerminalNode;
    name(): NameContext | null;
    PREPARE(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class InsertStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INSERT(): antlr.TerminalNode;
    INTO(): antlr.TerminalNode;
    insertTarget(): InsertTargetContext;
    insertRest(): InsertRestContext;
    optionalOnConflict(): OptionalOnConflictContext;
    returningClause(): ReturningClauseContext;
    withClause(): WithClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class InsertTargetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext;
    AS(): antlr.TerminalNode | null;
    columnId(): ColumnIdContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class InsertRestContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    selectStatement(): SelectStatementContext | null;
    OVERRIDING(): antlr.TerminalNode | null;
    overrideKind(): OverrideKindContext | null;
    VALUE_P(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    insertColumnList(): InsertColumnListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    VALUES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OverrideKindContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USER(): antlr.TerminalNode | null;
    SYSTEM_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class InsertColumnListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    insertColumnItem(): InsertColumnItemContext[];
    insertColumnItem(i: number): InsertColumnItemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class InsertColumnItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    optionalIndirection(): OptionalIndirectionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalOnConflictContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON(): antlr.TerminalNode | null;
    CONFLICT(): antlr.TerminalNode | null;
    optionalConflictExpr(): OptionalConflictExprContext | null;
    DO(): antlr.TerminalNode | null;
    UPDATE(): antlr.TerminalNode | null;
    SET(): antlr.TerminalNode | null;
    setClauseList(): SetClauseListContext | null;
    whereClause(): WhereClauseContext | null;
    NOTHING(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalConflictExprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    indexParameters(): IndexParametersContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    whereClause(): WhereClauseContext | null;
    ON(): antlr.TerminalNode | null;
    CONSTRAINT(): antlr.TerminalNode | null;
    constraintName(): ConstraintNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ReturningClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RETURNING(): antlr.TerminalNode | null;
    targetList(): TargetListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class MergeStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MERGE(): antlr.TerminalNode;
    qualifiedName(): QualifiedNameContext[];
    qualifiedName(i: number): QualifiedNameContext | null;
    USING(): antlr.TerminalNode;
    ON(): antlr.TerminalNode;
    expression1(): Expression1Context;
    selectWithParenthesis(): SelectWithParenthesisContext | null;
    mergeInsertClause(): MergeInsertClauseContext | null;
    mergeUpdateClause(): MergeUpdateClauseContext | null;
    INTO(): antlr.TerminalNode | null;
    aliasClause(): AliasClauseContext[];
    aliasClause(i: number): AliasClauseContext | null;
    mergeDeleteClause(): MergeDeleteClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class MergeInsertClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode;
    NOT(): antlr.TerminalNode;
    MATCHED(): antlr.TerminalNode;
    INSERT(): antlr.TerminalNode;
    valuesClause(): ValuesClauseContext;
    AND(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    THEN(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    insertColumnList(): InsertColumnListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class MergeUpdateClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode;
    MATCHED(): antlr.TerminalNode;
    UPDATE(): antlr.TerminalNode;
    SET(): antlr.TerminalNode;
    setClauseList(): SetClauseListContext;
    AND(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    THEN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class MergeDeleteClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode;
    MATCHED(): antlr.TerminalNode;
    DELETE_P(): antlr.TerminalNode;
    THEN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeleteStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DELETE_P(): antlr.TerminalNode;
    FROM(): antlr.TerminalNode;
    relationExpressionOptionalAlias(): RelationExpressionOptionalAliasContext;
    usingClause(): UsingClauseContext;
    whereOrCurrentClause(): WhereOrCurrentClauseContext;
    returningClause(): ReturningClauseContext;
    withClause(): WithClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class UsingClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    fromList(): FromListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class LockStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LOCK_P(): antlr.TerminalNode;
    optionalTable(): OptionalTableContext;
    relationExpressionList(): RelationExpressionListContext;
    optionalLock(): OptionalLockContext;
    optionalNowait(): OptionalNowaitContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalLockContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IN_P(): antlr.TerminalNode | null;
    lockType(): LockTypeContext | null;
    MODE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class LockTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ACCESS(): antlr.TerminalNode | null;
    SHARE(): antlr.TerminalNode | null;
    EXCLUSIVE(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    UPDATE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalNowaitContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NOWAIT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalNowaitOrSkipContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NOWAIT(): antlr.TerminalNode | null;
    SKIP_P(): antlr.TerminalNode | null;
    LOCKED(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class UpdateStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UPDATE(): antlr.TerminalNode;
    relationExpressionOptionalAlias(): RelationExpressionOptionalAliasContext;
    SET(): antlr.TerminalNode;
    setClauseList(): SetClauseListContext;
    fromClause(): FromClauseContext;
    whereOrCurrentClause(): WhereOrCurrentClauseContext;
    returningClause(): ReturningClauseContext;
    withClause(): WithClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SetClauseListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    setClause(): SetClauseContext[];
    setClause(i: number): SetClauseContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SetClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    setTarget(): SetTargetContext[];
    setTarget(i: number): SetTargetContext | null;
    EQUAL(): antlr.TerminalNode;
    expression1(): Expression1Context;
    OPEN_PAREN(): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SetTargetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    optionalIndirection(): OptionalIndirectionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareCursorStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DECLARE(): antlr.TerminalNode;
    cursorName(): CursorNameContext;
    CURSOR(): antlr.TerminalNode;
    optionalHold(): OptionalHoldContext;
    FOR(): antlr.TerminalNode;
    selectStatement(): SelectStatementContext;
    NO(): antlr.TerminalNode[];
    NO(i: number): antlr.TerminalNode | null;
    SCROLL(): antlr.TerminalNode[];
    SCROLL(i: number): antlr.TerminalNode | null;
    BINARY(): antlr.TerminalNode[];
    BINARY(i: number): antlr.TerminalNode | null;
    INSENSITIVE(): antlr.TerminalNode[];
    INSENSITIVE(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CursorNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalHoldContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    HOLD(): antlr.TerminalNode | null;
    WITHOUT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SelectStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    selectWithoutParenthesis(): SelectWithoutParenthesisContext | null;
    selectWithParenthesis(): SelectWithParenthesisContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SelectWithParenthesisContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode;
    selectWithoutParenthesis(): SelectWithoutParenthesisContext | null;
    CLOSE_PAREN(): antlr.TerminalNode;
    selectWithParenthesis(): SelectWithParenthesisContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SelectWithoutParenthesisContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    selectClause(): SelectClauseContext;
    optionalSortClause(): OptionalSortClauseContext;
    forLockingClause(): ForLockingClauseContext | null;
    optionalSelectLimit(): OptionalSelectLimitContext | null;
    selectLimit(): SelectLimitContext | null;
    withClause(): WithClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SelectClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    simpleSelectIntersect(): SimpleSelectIntersectContext[];
    simpleSelectIntersect(i: number): SimpleSelectIntersectContext | null;
    allOrDistinct(): AllOrDistinctContext[];
    allOrDistinct(i: number): AllOrDistinctContext | null;
    UNION(): antlr.TerminalNode[];
    UNION(i: number): antlr.TerminalNode | null;
    EXCEPT(): antlr.TerminalNode[];
    EXCEPT(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SimpleSelectIntersectContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    simpleSelectPramary(): SimpleSelectPramaryContext[];
    simpleSelectPramary(i: number): SimpleSelectPramaryContext | null;
    INTERSECT(): antlr.TerminalNode[];
    INTERSECT(i: number): antlr.TerminalNode | null;
    allOrDistinct(): AllOrDistinctContext[];
    allOrDistinct(i: number): AllOrDistinctContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SimpleSelectStartContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    targetList(): TargetListContext | null;
    intoClause(): IntoClauseContext | null;
    allClause(): AllClauseContext | null;
    optionalTargetList(): OptionalTargetListContext | null;
    distinctClause(): DistinctClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SimpleSelectPramaryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SELECT(): antlr.TerminalNode | null;
    simpleSelectStart(): SimpleSelectStartContext | null;
    fromClause(): FromClauseContext | null;
    whereClause(): WhereClauseContext | null;
    groupClause(): GroupClauseContext | null;
    havingClause(): HavingClauseContext | null;
    windowClause(): WindowClauseContext | null;
    valuesClause(): ValuesClauseContext | null;
    TABLE(): antlr.TerminalNode | null;
    relationExpression(): RelationExpressionContext | null;
    selectWithParenthesis(): SelectWithParenthesisContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WithClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode;
    commonTableExpression(): CommonTableExpressionContext[];
    commonTableExpression(i: number): CommonTableExpressionContext | null;
    RECURSIVE(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CommonTableExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext;
    optionalNameList(): OptionalNameListContext;
    AS(): antlr.TerminalNode;
    optionalMaterialized(): OptionalMaterializedContext;
    OPEN_PAREN(): antlr.TerminalNode;
    preparableStatement(): PreparableStatementContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalMaterializedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MATERIALIZED(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IntoClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INTO(): antlr.TerminalNode;
    optionalTemporaryTableName(): OptionalTemporaryTableNameContext | null;
    intoTarget(): IntoTargetContext | null;
    STRICT_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTemporaryTableNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalTable(): OptionalTableContext | null;
    qualifiedName(): QualifiedNameContext;
    TEMPORARY(): antlr.TerminalNode | null;
    TEMP(): antlr.TerminalNode | null;
    LOCAL(): antlr.TerminalNode | null;
    GLOBAL(): antlr.TerminalNode | null;
    UNLOGGED(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AllOrDistinctContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALL(): antlr.TerminalNode | null;
    DISTINCT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DistinctClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DISTINCT(): antlr.TerminalNode;
    ON(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AllClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalSortClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sortClause(): SortClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SortClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ORDER(): antlr.TerminalNode;
    BY(): antlr.TerminalNode;
    sortByList(): SortByListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SortByListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sortBy(): SortByContext[];
    sortBy(i: number): SortByContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SortByContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context;
    optionalNullsOrder(): OptionalNullsOrderContext;
    USING(): antlr.TerminalNode | null;
    allOperatorQualifier(): AllOperatorQualifierContext | null;
    optionalAscOrDesc(): OptionalAscOrDescContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SelectLimitContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    limitClause(): LimitClauseContext | null;
    offsetClause(): OffsetClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalSelectLimitContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    selectLimit(): SelectLimitContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class LimitClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LIMIT(): antlr.TerminalNode | null;
    selectLimitValue(): SelectLimitValueContext | null;
    COMMA(): antlr.TerminalNode | null;
    selectOffsetValue(): SelectOffsetValueContext | null;
    FETCH(): antlr.TerminalNode | null;
    firstOrNext(): FirstOrNextContext | null;
    selectFetchFirstValue(): SelectFetchFirstValueContext | null;
    rowOrRows(): RowOrRowsContext | null;
    ONLY(): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    TIES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OffsetClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OFFSET(): antlr.TerminalNode;
    selectOffsetValue(): SelectOffsetValueContext | null;
    selectFetchFirstValue(): SelectFetchFirstValueContext | null;
    rowOrRows(): RowOrRowsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SelectLimitValueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context | null;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SelectOffsetValueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SelectFetchFirstValueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression3(): Expression3Context | null;
    PLUS(): antlr.TerminalNode | null;
    anyConst(): AnyConstContext | null;
    MINUS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AnyConstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    iconst(): IconstContext | null;
    fconst(): FconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowOrRowsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROW(): antlr.TerminalNode | null;
    ROWS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FirstOrNextContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FIRST_P(): antlr.TerminalNode | null;
    NEXT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GroupClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GROUP_P(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    groupByList(): GroupByListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GroupByListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    groupByItem(): GroupByItemContext[];
    groupByItem(i: number): GroupByItemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GroupByItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    CUBE(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    ROLLUP(): antlr.TerminalNode | null;
    GROUPING(): antlr.TerminalNode | null;
    SETS(): antlr.TerminalNode | null;
    groupByList(): GroupByListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class HavingClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HAVING(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForLockingClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    forLockingItem(): ForLockingItemContext[];
    forLockingItem(i: number): ForLockingItemContext | null;
    FOR(): antlr.TerminalNode | null;
    READ(): antlr.TerminalNode | null;
    ONLY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForLockingItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    forLockingStrength(): ForLockingStrengthContext;
    lockedRelationsList(): LockedRelationsListContext;
    optionalNowaitOrSkip(): OptionalNowaitOrSkipContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForLockingStrengthContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode;
    UPDATE(): antlr.TerminalNode | null;
    SHARE(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    KEY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class LockedRelationsListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OF(): antlr.TerminalNode | null;
    qualifiedNameList(): QualifiedNameListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ValuesClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VALUES(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode[];
    OPEN_PAREN(i: number): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext[];
    expressionList(i: number): ExpressionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode[];
    CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FromClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FROM(): antlr.TerminalNode | null;
    fromList(): FromListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FromListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    nonAnsiJoin(): NonAnsiJoinContext | null;
    tableReference(): TableReferenceContext[];
    tableReference(i: number): TableReferenceContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NonAnsiJoinContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableReference(): TableReferenceContext[];
    tableReference(i: number): TableReferenceContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableReferenceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    relationExpression(): RelationExpressionContext | null;
    optionalAliasClause(): OptionalAliasClauseContext | null;
    functionTable(): FunctionTableContext | null;
    functionAliasClause(): FunctionAliasClauseContext | null;
    xmlTable(): XmlTableContext | null;
    selectWithParenthesis(): SelectWithParenthesisContext | null;
    LATERAL_P(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    tableReference(): TableReferenceContext[];
    tableReference(i: number): TableReferenceContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    CROSS(): antlr.TerminalNode[];
    CROSS(i: number): antlr.TerminalNode | null;
    JOIN(): antlr.TerminalNode[];
    JOIN(i: number): antlr.TerminalNode | null;
    NATURAL(): antlr.TerminalNode[];
    NATURAL(i: number): antlr.TerminalNode | null;
    joinQualifier(): JoinQualifierContext[];
    joinQualifier(i: number): JoinQualifierContext | null;
    tableSampleClause(): TableSampleClauseContext | null;
    joinType(): JoinTypeContext[];
    joinType(i: number): JoinTypeContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AliasClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    AS(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    nameList(): NameListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalAliasClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableAliasClause(): TableAliasClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableAliasClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableAlias(): TableAliasContext;
    AS(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    nameList(): NameListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionAliasClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    aliasClause(): AliasClauseContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    tableFunctionElementList(): TableFunctionElementListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    AS(): antlr.TerminalNode | null;
    columnId(): ColumnIdContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class JoinTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FULL(): antlr.TerminalNode | null;
    LEFT(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    INNER_P(): antlr.TerminalNode | null;
    OUTER_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class JoinQualifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    nameList(): NameListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    ON(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ViewNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RelationExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext | null;
    STAR(): antlr.TerminalNode | null;
    ONLY(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RelationExpressionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    relationExpression(): RelationExpressionContext[];
    relationExpression(i: number): RelationExpressionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RelationExpressionOptionalAliasContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    relationExpression(): RelationExpressionContext;
    columnId(): ColumnIdContext | null;
    AS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableSampleClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLESAMPLE(): antlr.TerminalNode;
    functionName(): FunctionNameContext;
    OPEN_PAREN(): antlr.TerminalNode[];
    OPEN_PAREN(i: number): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext;
    CLOSE_PAREN(): antlr.TerminalNode[];
    CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    REPEATABLE(): antlr.TerminalNode;
    expression1(): Expression1Context;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionTableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionExpressionWindowless(): FunctionExpressionWindowlessContext | null;
    optionalOrdinality(): OptionalOrdinalityContext;
    ROWS(): antlr.TerminalNode | null;
    FROM(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    rowsFromItem(): RowsFromItemContext[];
    rowsFromItem(i: number): RowsFromItemContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowsFromItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionExpressionWindowless(): FunctionExpressionWindowlessContext;
    optionalColumnDefinitionList(): OptionalColumnDefinitionListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalColumnDefinitionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AS(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    tableFunctionElementList(): TableFunctionElementListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalOrdinalityContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    ORDINALITY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WhereClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHERE(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WhereOrCurrentClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHERE(): antlr.TerminalNode | null;
    CURRENT_P(): antlr.TerminalNode | null;
    OF(): antlr.TerminalNode | null;
    cursorName(): CursorNameContext | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTableFunctionElementListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableFunctionElementList(): TableFunctionElementListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableFunctionElementListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    tableFunctionElement(): TableFunctionElementContext[];
    tableFunctionElement(i: number): TableFunctionElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableFunctionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    typeName(): TypeNameContext;
    optionalCollateClause(): OptionalCollateClauseContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlTableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    XMLTABLE(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode[];
    OPEN_PAREN(i: number): antlr.TerminalNode | null;
    CLOSE_PAREN(): antlr.TerminalNode[];
    CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    expression3(): Expression3Context | null;
    xmlExistsArgument(): XmlExistsArgumentContext | null;
    COLUMNS(): antlr.TerminalNode | null;
    xmlTableColumnElement(): XmlTableColumnElementContext[];
    xmlTableColumnElement(i: number): XmlTableColumnElementContext | null;
    XMLNAMESPACES(): antlr.TerminalNode | null;
    xmlNamespaceList(): XmlNamespaceListContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlTableColumnElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    typeName(): TypeNameContext | null;
    FOR(): antlr.TerminalNode | null;
    ORDINALITY(): antlr.TerminalNode | null;
    xmlTableColumnOptionList(): XmlTableColumnOptionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlTableColumnOptionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    xmlTableColumnOptionElement(): XmlTableColumnOptionElementContext[];
    xmlTableColumnOptionElement(i: number): XmlTableColumnOptionElementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlTableColumnOptionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DEFAULT(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    identifier(): IdentifierContext | null;
    NOT(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlNamespaceListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    xmlNamespaceElement(): XmlNamespaceElementContext[];
    xmlNamespaceElement(i: number): XmlNamespaceElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlNamespaceElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression2(): Expression2Context;
    AS(): antlr.TerminalNode | null;
    columnLabel(): ColumnLabelContext | null;
    DEFAULT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TypeNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    simpleTypeName(): SimpleTypeNameContext | null;
    ARRAY(): antlr.TerminalNode | null;
    SETOF(): antlr.TerminalNode | null;
    OPEN_BRACKET(): antlr.TerminalNode[];
    OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    CLOSE_BRACKET(): antlr.TerminalNode[];
    CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    iconst(): IconstContext[];
    iconst(i: number): IconstContext | null;
    qualifiedName(): QualifiedNameContext | null;
    PERCENT(): antlr.TerminalNode | null;
    ROWTYPE(): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SimpleTypeNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    genericType(): GenericTypeContext | null;
    numeric(): NumericContext | null;
    bit(): BitContext | null;
    character(): CharacterContext | null;
    constDateTime(): ConstDateTimeContext | null;
    constInterval(): ConstIntervalContext | null;
    optionalInterval(): OptionalIntervalContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstTypeNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    numeric(): NumericContext | null;
    constBit(): ConstBitContext | null;
    constCharacter(): ConstCharacterContext | null;
    constDateTime(): ConstDateTimeContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GenericTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalTypeModifiers(): OptionalTypeModifiersContext;
    builtinFunctionName(): BuiltinFunctionNameContext | null;
    typeFunctionName(): TypeFunctionNameContext | null;
    LEFT(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    attributes(): AttributesContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTypeModifiersContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NumericContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INT_P(): antlr.TerminalNode | null;
    INTEGER(): antlr.TerminalNode | null;
    SMALLINT(): antlr.TerminalNode | null;
    BIGINT(): antlr.TerminalNode | null;
    REAL(): antlr.TerminalNode | null;
    FLOAT_P(): antlr.TerminalNode | null;
    optionalFloat(): OptionalFloatContext | null;
    DOUBLE_P(): antlr.TerminalNode | null;
    PRECISION(): antlr.TerminalNode | null;
    DECIMAL_P(): antlr.TerminalNode | null;
    optionalTypeModifiers(): OptionalTypeModifiersContext | null;
    DEC(): antlr.TerminalNode | null;
    NUMERIC(): antlr.TerminalNode | null;
    BOOLEAN_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalFloatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class BitContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    bitWithLength(): BitWithLengthContext | null;
    bitWithoutLength(): BitWithoutLengthContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstBitContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    bitWithLength(): BitWithLengthContext | null;
    bitWithoutLength(): BitWithoutLengthContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class BitWithLengthContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BIT(): antlr.TerminalNode;
    optionalVarying(): OptionalVaryingContext;
    OPEN_PAREN(): antlr.TerminalNode;
    expressionList(): ExpressionListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class BitWithoutLengthContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BIT(): antlr.TerminalNode;
    optionalVarying(): OptionalVaryingContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CharacterContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    characterChar(): CharacterCharContext;
    OPEN_PAREN(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstCharacterContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    characterChar(): CharacterCharContext;
    OPEN_PAREN(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CharacterCharContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalVarying(): OptionalVaryingContext | null;
    CHARACTER(): antlr.TerminalNode | null;
    CHAR_P(): antlr.TerminalNode | null;
    NCHAR(): antlr.TerminalNode | null;
    VARCHAR(): antlr.TerminalNode | null;
    NATIONAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalVaryingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VARYING(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstDateTimeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalTimezone(): OptionalTimezoneContext;
    TIMESTAMP(): antlr.TerminalNode | null;
    TIME(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstIntervalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INTERVAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTimezoneContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode | null;
    TIME(): antlr.TerminalNode | null;
    ZONE(): antlr.TerminalNode | null;
    WITHOUT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalIntervalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    YEAR_P(): antlr.TerminalNode | null;
    MONTH_P(): antlr.TerminalNode | null;
    DAY_P(): antlr.TerminalNode | null;
    HOUR_P(): antlr.TerminalNode | null;
    MINUTE_P(): antlr.TerminalNode | null;
    intervalSecond(): IntervalSecondContext | null;
    TO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IntervalSecondContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SECOND_P(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalEscapeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ESCAPE(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1Context extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Qualifier(): Expression1QualifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1QualifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1LessLess(): Expression1LessLessContext;
    operatorQualifier(): OperatorQualifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1LessLessContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Or(): Expression1OrContext[];
    expression1Or(i: number): Expression1OrContext | null;
    LESS_LESS(): antlr.TerminalNode[];
    LESS_LESS(i: number): antlr.TerminalNode | null;
    GREATER_GREATER(): antlr.TerminalNode[];
    GREATER_GREATER(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1OrContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1And(): Expression1AndContext[];
    expression1And(i: number): Expression1AndContext | null;
    OR(): antlr.TerminalNode[];
    OR(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1AndContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Between(): Expression1BetweenContext[];
    expression1Between(i: number): Expression1BetweenContext | null;
    AND(): antlr.TerminalNode[];
    AND(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1BetweenContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1In(): Expression1InContext[];
    expression1In(i: number): Expression1InContext | null;
    BETWEEN(): antlr.TerminalNode | null;
    AND(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    SYMMETRIC(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1InContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1UnaryNot(): Expression1UnaryNotContext;
    IN_P(): antlr.TerminalNode | null;
    inExpression(): InExpressionContext | null;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1UnaryNotContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1IsNull(): Expression1IsNullContext;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1IsNullContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1IsNot(): Expression1IsNotContext;
    ISNULL(): antlr.TerminalNode | null;
    NOTNULL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1IsNotContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Compare(): Expression1CompareContext;
    IS(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    TRUE_P(): antlr.TerminalNode | null;
    FALSE_P(): antlr.TerminalNode | null;
    UNKNOWN(): antlr.TerminalNode | null;
    DISTINCT(): antlr.TerminalNode | null;
    FROM(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    OF(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    typeList(): TypeListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    DOCUMENT_P(): antlr.TerminalNode | null;
    NORMALIZED(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    unicodeNormalForm(): UnicodeNormalFormContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1CompareContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Like(): Expression1LikeContext[];
    expression1Like(i: number): Expression1LikeContext | null;
    subqueryOperator(): SubqueryOperatorContext | null;
    subType(): SubTypeContext | null;
    LT(): antlr.TerminalNode | null;
    GT(): antlr.TerminalNode | null;
    EQUAL(): antlr.TerminalNode | null;
    LESS_EQUALS(): antlr.TerminalNode | null;
    GREATER_EQUALS(): antlr.TerminalNode | null;
    NOT_EQUALS(): antlr.TerminalNode | null;
    selectWithParenthesis(): SelectWithParenthesisContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1LikeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1qualifierOperator(): Expression1qualifierOperatorContext[];
    expression1qualifierOperator(i: number): Expression1qualifierOperatorContext | null;
    optionalEscape(): OptionalEscapeContext | null;
    LIKE(): antlr.TerminalNode | null;
    ILIKE(): antlr.TerminalNode | null;
    SIMILAR(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1qualifierOperatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1UnaryQualifierOperator(): Expression1UnaryQualifierOperatorContext[];
    expression1UnaryQualifierOperator(i: number): Expression1UnaryQualifierOperatorContext | null;
    operatorQualifier(): OperatorQualifierContext[];
    operatorQualifier(i: number): OperatorQualifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1UnaryQualifierOperatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Add(): Expression1AddContext;
    operatorQualifier(): OperatorQualifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1AddContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expressionMultiply(): ExpressionMultiplyContext[];
    expressionMultiply(i: number): ExpressionMultiplyContext | null;
    MINUS(): antlr.TerminalNode[];
    MINUS(i: number): antlr.TerminalNode | null;
    PLUS(): antlr.TerminalNode[];
    PLUS(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExpressionMultiplyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Caret(): Expression1CaretContext[];
    expression1Caret(i: number): Expression1CaretContext | null;
    STAR(): antlr.TerminalNode[];
    STAR(i: number): antlr.TerminalNode | null;
    SLASH(): antlr.TerminalNode[];
    SLASH(i: number): antlr.TerminalNode | null;
    PERCENT(): antlr.TerminalNode[];
    PERCENT(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1CaretContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1UnarySign(): Expression1UnarySignContext;
    CARET(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1UnarySignContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1AtTimeZone(): Expression1AtTimeZoneContext;
    MINUS(): antlr.TerminalNode | null;
    PLUS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1AtTimeZoneContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Collate(): Expression1CollateContext;
    AT(): antlr.TerminalNode | null;
    TIME(): antlr.TerminalNode | null;
    ZONE(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1CollateContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1Typecast(): Expression1TypecastContext;
    COLLATE(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression1TypecastContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression3(): Expression3Context;
    TYPECAST(): antlr.TerminalNode[];
    TYPECAST(i: number): antlr.TerminalNode | null;
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression2Context extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression3(): Expression3Context | null;
    expression2(): Expression2Context[];
    expression2(i: number): Expression2Context | null;
    PLUS(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode | null;
    operatorQualifier(): OperatorQualifierContext | null;
    CARET(): antlr.TerminalNode | null;
    STAR(): antlr.TerminalNode | null;
    SLASH(): antlr.TerminalNode | null;
    PERCENT(): antlr.TerminalNode | null;
    LT(): antlr.TerminalNode | null;
    GT(): antlr.TerminalNode | null;
    EQUAL(): antlr.TerminalNode | null;
    LESS_EQUALS(): antlr.TerminalNode | null;
    GREATER_EQUALS(): antlr.TerminalNode | null;
    NOT_EQUALS(): antlr.TerminalNode | null;
    TYPECAST(): antlr.TerminalNode | null;
    typeName(): TypeNameContext | null;
    IS(): antlr.TerminalNode | null;
    DISTINCT(): antlr.TerminalNode | null;
    FROM(): antlr.TerminalNode | null;
    OF(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    typeList(): TypeListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    DOCUMENT_P(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Expression3Context extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: Expression3Context): void;
}
export declare class C_expr_existsContext extends Expression3Context {
    constructor(ctx: Expression3Context);
    EXISTS(): antlr.TerminalNode;
    selectWithParenthesis(): SelectWithParenthesisContext;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class C_expr_caseContext extends Expression3Context {
    constructor(ctx: Expression3Context);
    caseExpression(): CaseExpressionContext;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class C_expr_exprContext extends Expression3Context {
    _a_expr_in_parens?: Expression1Context;
    constructor(ctx: Expression3Context);
    ARRAY(): antlr.TerminalNode | null;
    selectWithParenthesis(): SelectWithParenthesisContext | null;
    arrayExpression(): ArrayExpressionContext | null;
    PARAM(): antlr.TerminalNode | null;
    optionalIndirection(): OptionalIndirectionContext | null;
    GROUPING(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    UNIQUE(): antlr.TerminalNode | null;
    columnReference(): ColumnReferenceContext | null;
    aExpressionConst(): AExpressionConstContext | null;
    plsqlVariableName(): PlsqlVariableNameContext | null;
    expression1(): Expression1Context | null;
    functionExpression(): FunctionExpressionContext | null;
    indirection(): IndirectionContext | null;
    explicitRow(): ExplicitRowContext | null;
    implicitRow(): ImplicitRowContext | null;
    row(): RowContext[];
    row(i: number): RowContext | null;
    OVERLAPS(): antlr.TerminalNode | null;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PlsqlVariableNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PLSQLVARIABLENAME(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionApplicationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionName(): FunctionNameContext;
    OPEN_PAREN(): antlr.TerminalNode;
    CLOSE_PAREN(): antlr.TerminalNode;
    functionArgumentList(): FunctionArgumentListContext | null;
    optionalSortClause(): OptionalSortClauseContext | null;
    VARIADIC(): antlr.TerminalNode | null;
    functionArgumentExpression(): FunctionArgumentExpressionContext | null;
    STAR(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    DISTINCT(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionApplication(): FunctionApplicationContext | null;
    withinGroupClause(): WithinGroupClauseContext | null;
    filterClause(): FilterClauseContext | null;
    overClause(): OverClauseContext | null;
    functionExpressionCommonSubexpr(): FunctionExpressionCommonSubexprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionExpressionWindowlessContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionApplication(): FunctionApplicationContext | null;
    functionExpressionCommonSubexpr(): FunctionExpressionCommonSubexprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionExpressionCommonSubexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COLLATION(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    CURRENT_DATE(): antlr.TerminalNode | null;
    CURRENT_TIME(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    CURRENT_TIMESTAMP(): antlr.TerminalNode | null;
    LOCALTIME(): antlr.TerminalNode | null;
    LOCALTIMESTAMP(): antlr.TerminalNode | null;
    CURRENT_ROLE(): antlr.TerminalNode | null;
    CURRENT_USER(): antlr.TerminalNode | null;
    SESSION_USER(): antlr.TerminalNode | null;
    USER(): antlr.TerminalNode | null;
    CURRENT_CATALOG(): antlr.TerminalNode | null;
    CURRENT_SCHEMA(): antlr.TerminalNode | null;
    CAST(): antlr.TerminalNode | null;
    AS(): antlr.TerminalNode | null;
    typeName(): TypeNameContext | null;
    EXTRACT(): antlr.TerminalNode | null;
    extractList(): ExtractListContext | null;
    NORMALIZE(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    unicodeNormalForm(): UnicodeNormalFormContext | null;
    OVERLAY(): antlr.TerminalNode | null;
    overlayList(): OverlayListContext | null;
    POSITION(): antlr.TerminalNode | null;
    positionList(): PositionListContext | null;
    SUBSTRING(): antlr.TerminalNode | null;
    substrList(): SubstrListContext | null;
    TREAT(): antlr.TerminalNode | null;
    TRIM(): antlr.TerminalNode | null;
    trimList(): TrimListContext | null;
    BOTH(): antlr.TerminalNode | null;
    LEADING(): antlr.TerminalNode | null;
    TRAILING(): antlr.TerminalNode | null;
    NULLIF(): antlr.TerminalNode | null;
    COALESCE(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    GREATEST(): antlr.TerminalNode | null;
    LEAST(): antlr.TerminalNode | null;
    XMLCONCAT(): antlr.TerminalNode | null;
    XMLELEMENT(): antlr.TerminalNode | null;
    NAME_P(): antlr.TerminalNode | null;
    columnLabel(): ColumnLabelContext | null;
    xmlAttributes(): XmlAttributesContext | null;
    XMLEXISTS(): antlr.TerminalNode | null;
    expression3(): Expression3Context | null;
    xmlExistsArgument(): XmlExistsArgumentContext | null;
    XMLFOREST(): antlr.TerminalNode | null;
    xmlAttributeList(): XmlAttributeListContext | null;
    XMLPARSE(): antlr.TerminalNode | null;
    documentOrContent(): DocumentOrContentContext | null;
    xmlWhitespaceOption(): XmlWhitespaceOptionContext | null;
    XMLPI(): antlr.TerminalNode | null;
    XMLROOT(): antlr.TerminalNode | null;
    XML_P(): antlr.TerminalNode | null;
    xmlRootVersion(): XmlRootVersionContext | null;
    optionalXmlRootStandalone(): OptionalXmlRootStandaloneContext | null;
    XMLSERIALIZE(): antlr.TerminalNode | null;
    simpleTypeName(): SimpleTypeNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlRootVersionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VERSION_P(): antlr.TerminalNode;
    expression1(): Expression1Context | null;
    NO(): antlr.TerminalNode | null;
    VALUE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalXmlRootStandaloneContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMA(): antlr.TerminalNode | null;
    STANDALONE_P(): antlr.TerminalNode | null;
    YES_P(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    VALUE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlAttributesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    XMLATTRIBUTES(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode;
    xmlAttributeList(): XmlAttributeListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlAttributeListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    xmlAttributeElement(): XmlAttributeElementContext[];
    xmlAttributeElement(i: number): XmlAttributeElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlAttributeElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context;
    AS(): antlr.TerminalNode | null;
    columnLabel(): ColumnLabelContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DocumentOrContentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DOCUMENT_P(): antlr.TerminalNode | null;
    CONTENT_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlWhitespaceOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PRESERVE(): antlr.TerminalNode | null;
    WHITESPACE_P(): antlr.TerminalNode | null;
    STRIP_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlExistsArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PASSING(): antlr.TerminalNode;
    expression3(): Expression3Context;
    xmlPassingMech(): XmlPassingMechContext[];
    xmlPassingMech(i: number): XmlPassingMechContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XmlPassingMechContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BY(): antlr.TerminalNode;
    REF(): antlr.TerminalNode | null;
    VALUE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WithinGroupClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITHIN(): antlr.TerminalNode | null;
    GROUP_P(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    sortClause(): SortClauseContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FilterClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FILTER(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    WHERE(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WindowClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WINDOW(): antlr.TerminalNode | null;
    windowDefinitionList(): WindowDefinitionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WindowDefinitionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    windowDefinition(): WindowDefinitionContext[];
    windowDefinition(i: number): WindowDefinitionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WindowDefinitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    AS(): antlr.TerminalNode;
    windowSpecification(): WindowSpecificationContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OverClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OVER(): antlr.TerminalNode | null;
    windowSpecification(): WindowSpecificationContext | null;
    columnId(): ColumnIdContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WindowSpecificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode;
    optionalExistingWindowName(): OptionalExistingWindowNameContext;
    optionalPartitionClause(): OptionalPartitionClauseContext;
    optionalSortClause(): OptionalSortClauseContext;
    optionalFrameClause(): OptionalFrameClauseContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalExistingWindowNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalPartitionClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PARTITION(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalFrameClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RANGE(): antlr.TerminalNode | null;
    frameExtent(): FrameExtentContext | null;
    optionalWindowExclusionClause(): OptionalWindowExclusionClauseContext | null;
    ROWS(): antlr.TerminalNode | null;
    GROUPS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FrameExtentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    frameBound(): FrameBoundContext[];
    frameBound(i: number): FrameBoundContext | null;
    BETWEEN(): antlr.TerminalNode | null;
    AND(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FrameBoundContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UNBOUNDED(): antlr.TerminalNode | null;
    PRECEDING(): antlr.TerminalNode | null;
    FOLLOWING(): antlr.TerminalNode | null;
    CURRENT_P(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalWindowExclusionClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXCLUDE(): antlr.TerminalNode | null;
    CURRENT_P(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    GROUP_P(): antlr.TerminalNode | null;
    TIES(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    OTHERS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RowContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROW(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode;
    CLOSE_PAREN(): antlr.TerminalNode;
    expressionList(): ExpressionListContext | null;
    COMMA(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExplicitRowContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROW(): antlr.TerminalNode;
    OPEN_PAREN(): antlr.TerminalNode;
    CLOSE_PAREN(): antlr.TerminalNode;
    expressionList(): ExpressionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ImplicitRowContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode;
    expressionList(): ExpressionListContext;
    COMMA(): antlr.TerminalNode;
    expression1(): Expression1Context;
    CLOSE_PAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SubTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ANY(): antlr.TerminalNode | null;
    SOME(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AllOperatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    Operator(): antlr.TerminalNode | null;
    mathOperator(): MathOperatorContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class MathOperatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PLUS(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode | null;
    STAR(): antlr.TerminalNode | null;
    SLASH(): antlr.TerminalNode | null;
    PERCENT(): antlr.TerminalNode | null;
    CARET(): antlr.TerminalNode | null;
    LT(): antlr.TerminalNode | null;
    GT(): antlr.TerminalNode | null;
    EQUAL(): antlr.TerminalNode | null;
    LESS_EQUALS(): antlr.TerminalNode | null;
    GREATER_EQUALS(): antlr.TerminalNode | null;
    NOT_EQUALS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OperatorQualifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    Operator(): antlr.TerminalNode | null;
    OPERATOR(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    anyOperator(): AnyOperatorContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AllOperatorQualifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    allOperator(): AllOperatorContext | null;
    OPERATOR(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    anyOperator(): AnyOperatorContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SubqueryOperatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    allOperator(): AllOperatorContext | null;
    OPERATOR(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    anyOperator(): AnyOperatorContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    LIKE(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    ILIKE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExpressionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionArgumentListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    functionArgumentExpression(): FunctionArgumentExpressionContext[];
    functionArgumentExpression(i: number): FunctionArgumentExpressionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionArgumentExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context;
    parameterName(): ParameterNameContext | null;
    COLON_EQUALS(): antlr.TerminalNode | null;
    EQUALS_GREATER(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TypeListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ArrayExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_BRACKET(): antlr.TerminalNode;
    CLOSE_BRACKET(): antlr.TerminalNode;
    expressionList(): ExpressionListContext | null;
    arrayExpressionList(): ArrayExpressionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ArrayExpressionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    arrayExpression(): ArrayExpressionContext[];
    arrayExpression(i: number): ArrayExpressionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExtractListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    extractArgument(): ExtractArgumentContext | null;
    FROM(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExtractArgumentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    YEAR_P(): antlr.TerminalNode | null;
    MONTH_P(): antlr.TerminalNode | null;
    DAY_P(): antlr.TerminalNode | null;
    HOUR_P(): antlr.TerminalNode | null;
    MINUTE_P(): antlr.TerminalNode | null;
    SECOND_P(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class UnicodeNormalFormContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NFC(): antlr.TerminalNode | null;
    NFD(): antlr.TerminalNode | null;
    NFKC(): antlr.TerminalNode | null;
    NFKD(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OverlayListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    PLACING(): antlr.TerminalNode;
    FROM(): antlr.TerminalNode;
    FOR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PositionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression2(): Expression2Context[];
    expression2(i: number): Expression2Context | null;
    IN_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SubstrListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    FROM(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    SIMILAR(): antlr.TerminalNode | null;
    ESCAPE(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TrimListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context | null;
    FROM(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class InExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: InExpressionContext): void;
}
export declare class In_expr_listContext extends InExpressionContext {
    constructor(ctx: InExpressionContext);
    OPEN_PAREN(): antlr.TerminalNode;
    expressionList(): ExpressionListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class In_expr_selectContext extends InExpressionContext {
    constructor(ctx: InExpressionContext);
    selectWithParenthesis(): SelectWithParenthesisContext;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CaseExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CASE(): antlr.TerminalNode;
    caseArg(): CaseArgContext;
    whenClauseList(): WhenClauseListContext;
    caseDefault(): CaseDefaultContext;
    END_P(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WhenClauseListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    whenClause(): WhenClauseContext[];
    whenClause(i: number): WhenClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class WhenClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode;
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    THEN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CaseDefaultContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ELSE(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CaseArgContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnReferenceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    indirection(): IndirectionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndirectionElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DOT(): antlr.TerminalNode | null;
    attributeName(): AttributeNameContext | null;
    STAR(): antlr.TerminalNode | null;
    OPEN_BRACKET(): antlr.TerminalNode | null;
    CLOSE_BRACKET(): antlr.TerminalNode | null;
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    COLON(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndirectionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    indirectionElement(): IndirectionElementContext[];
    indirectionElement(i: number): IndirectionElementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalIndirectionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    indirectionElement(): IndirectionElementContext[];
    indirectionElement(i: number): IndirectionElementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalTargetListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    targetList(): TargetListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TargetListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    targetElement(): TargetElementContext[];
    targetElement(i: number): TargetElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TargetElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: TargetElementContext): void;
}
export declare class Target_starContext extends TargetElementContext {
    constructor(ctx: TargetElementContext);
    STAR(): antlr.TerminalNode;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class Target_labelContext extends TargetElementContext {
    constructor(ctx: TargetElementContext);
    expression1(): Expression1Context;
    AS(): antlr.TerminalNode | null;
    columnLabel(): ColumnLabelContext | null;
    identifier(): IdentifierContext | null;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class QualifiedNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext[];
    qualifiedName(i: number): QualifiedNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DatabaseNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DatabaseNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    databaseName(): DatabaseNameContext[];
    databaseName(i: number): DatabaseNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SchemaNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SchemaNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    schemaName(): SchemaNameContext[];
    schemaName(i: number): SchemaNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndexNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IndexNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    indexName(): IndexNameContext[];
    indexName(i: number): IndexNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TriggerNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ConstraintNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SequenceNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    qualifiedName(): QualifiedNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SequenceNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sequenceName(): SequenceNameContext[];
    sequenceName(i: number): SequenceNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class QualifiedNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    indirection(): IndirectionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    name(): NameContext[];
    name(i: number): NameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AttributeNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnLabel(): ColumnLabelContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FileNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FunctionNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    builtinFunctionName(): BuiltinFunctionNameContext | null;
    typeFunctionName(): TypeFunctionNameContext | null;
    columnId(): ColumnIdContext | null;
    indirection(): IndirectionContext | null;
    LEFT(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AExpressionConstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    iconst(): IconstContext | null;
    fconst(): FconstContext | null;
    sconst(): SconstContext | null;
    bconst(): BconstContext | null;
    xconst(): XconstContext | null;
    functionName(): FunctionNameContext | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    functionArgumentList(): FunctionArgumentListContext | null;
    optionalSortClause(): OptionalSortClauseContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    constTypeName(): ConstTypeNameContext | null;
    constInterval(): ConstIntervalContext | null;
    optionalInterval(): OptionalIntervalContext | null;
    TRUE_P(): antlr.TerminalNode | null;
    FALSE_P(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class XconstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HexadecimalStringConstant(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class BconstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BinaryStringConstant(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class FconstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    Numeric(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IconstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    Integral(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SconstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anySconst(): AnySconstContext;
    optionalUescape(): OptionalUescapeContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AnySconstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    StringConstant(): antlr.TerminalNode | null;
    UnicodeEscapeStringConstant(): antlr.TerminalNode | null;
    BeginDollarStringConstant(): antlr.TerminalNode | null;
    EndDollarStringConstant(): antlr.TerminalNode | null;
    DollarText(): antlr.TerminalNode[];
    DollarText(i: number): antlr.TerminalNode | null;
    EscapeStringConstant(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalUescapeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UESCAPE(): antlr.TerminalNode | null;
    anySconst(): AnySconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SignedIconstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    iconst(): IconstContext;
    PLUS(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RoleNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    nonReservedWord(): NonReservedWordContext | null;
    CURRENT_USER(): antlr.TerminalNode | null;
    SESSION_USER(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RoleNameListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    roleName(): RoleNameContext[];
    roleName(i: number): RoleNameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnIdContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    unreservedKeyword(): UnreservedKeywordContext | null;
    columnNameKeyword(): ColumnNameKeywordContext | null;
    plsqlUnreservedKeyword(): PlsqlUnreservedKeywordContext | null;
    LEFT(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TableAliasContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    unreservedKeyword(): UnreservedKeywordContext | null;
    columnNameKeyword(): ColumnNameKeywordContext | null;
    plsqlUnreservedKeyword(): PlsqlUnreservedKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TypeFunctionNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    unreservedKeyword(): UnreservedKeywordContext | null;
    plsqlUnreservedKeyword(): PlsqlUnreservedKeywordContext | null;
    typeFunctionNameKeyword(): TypeFunctionNameKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class NonReservedWordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    unreservedKeyword(): UnreservedKeywordContext | null;
    columnNameKeyword(): ColumnNameKeywordContext | null;
    typeFunctionNameKeyword(): TypeFunctionNameKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnLabelContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    plsqlUnreservedKeyword(): PlsqlUnreservedKeywordContext | null;
    unreservedKeyword(): UnreservedKeywordContext | null;
    columnNameKeyword(): ColumnNameKeywordContext | null;
    typeFunctionNameKeyword(): TypeFunctionNameKeywordContext | null;
    reservedKeyword(): ReservedKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IdentifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    Identifier(): antlr.TerminalNode | null;
    optionalUescape(): OptionalUescapeContext | null;
    QuotedIdentifier(): antlr.TerminalNode | null;
    UnicodeQuotedIdentifier(): antlr.TerminalNode | null;
    plsqlVariableName(): PlsqlVariableNameContext | null;
    plsqlIdentifier(): PlsqlIdentifierContext | null;
    plsqlUnreservedKeyword(): PlsqlUnreservedKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PlsqlIdentifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PLSQLIDENTIFIER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class UnreservedKeywordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ABORT_P(): antlr.TerminalNode | null;
    ABSOLUTE_P(): antlr.TerminalNode | null;
    ACCESS(): antlr.TerminalNode | null;
    ACTION(): antlr.TerminalNode | null;
    ADD_P(): antlr.TerminalNode | null;
    ADMIN(): antlr.TerminalNode | null;
    AFTER(): antlr.TerminalNode | null;
    AGGREGATE(): antlr.TerminalNode | null;
    ALSO(): antlr.TerminalNode | null;
    ALTER(): antlr.TerminalNode | null;
    ALWAYS(): antlr.TerminalNode | null;
    ASSERTION(): antlr.TerminalNode | null;
    ASSIGNMENT(): antlr.TerminalNode | null;
    AT(): antlr.TerminalNode | null;
    ATTACH(): antlr.TerminalNode | null;
    ATTRIBUTE(): antlr.TerminalNode | null;
    BACKWARD(): antlr.TerminalNode | null;
    BEFORE(): antlr.TerminalNode | null;
    BEGIN_P(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    CACHE(): antlr.TerminalNode | null;
    CALL(): antlr.TerminalNode | null;
    CALLED(): antlr.TerminalNode | null;
    CASCADE(): antlr.TerminalNode | null;
    CASCADED(): antlr.TerminalNode | null;
    CATALOG(): antlr.TerminalNode | null;
    CHAIN(): antlr.TerminalNode | null;
    CHARACTERISTICS(): antlr.TerminalNode | null;
    CHECKPOINT(): antlr.TerminalNode | null;
    CLASS(): antlr.TerminalNode | null;
    CLOSE(): antlr.TerminalNode | null;
    CLUSTER(): antlr.TerminalNode | null;
    COLUMNS(): antlr.TerminalNode | null;
    COMMENT(): antlr.TerminalNode | null;
    COMMENTS(): antlr.TerminalNode | null;
    COMMIT(): antlr.TerminalNode | null;
    COMMITTED(): antlr.TerminalNode | null;
    CONFIGURATION(): antlr.TerminalNode | null;
    CONFLICT(): antlr.TerminalNode | null;
    CONNECTION(): antlr.TerminalNode | null;
    CONSTRAINTS(): antlr.TerminalNode | null;
    CONTENT_P(): antlr.TerminalNode | null;
    CONTINUE_P(): antlr.TerminalNode | null;
    CONVERSION_P(): antlr.TerminalNode | null;
    COPY(): antlr.TerminalNode | null;
    COST(): antlr.TerminalNode | null;
    CSV(): antlr.TerminalNode | null;
    CUBE(): antlr.TerminalNode | null;
    CURRENT_P(): antlr.TerminalNode | null;
    CURSOR(): antlr.TerminalNode | null;
    CYCLE(): antlr.TerminalNode | null;
    DATA_P(): antlr.TerminalNode | null;
    DATABASE(): antlr.TerminalNode | null;
    DAY_P(): antlr.TerminalNode | null;
    DEALLOCATE(): antlr.TerminalNode | null;
    DECLARE(): antlr.TerminalNode | null;
    DEFAULTS(): antlr.TerminalNode | null;
    DEFERRED(): antlr.TerminalNode | null;
    DEFINER(): antlr.TerminalNode | null;
    DELETE_P(): antlr.TerminalNode | null;
    DELIMITER(): antlr.TerminalNode | null;
    DELIMITERS(): antlr.TerminalNode | null;
    DEPENDS(): antlr.TerminalNode | null;
    DETACH(): antlr.TerminalNode | null;
    DICTIONARY(): antlr.TerminalNode | null;
    DISABLE_P(): antlr.TerminalNode | null;
    DISCARD(): antlr.TerminalNode | null;
    DOCUMENT_P(): antlr.TerminalNode | null;
    DOMAIN_P(): antlr.TerminalNode | null;
    DOUBLE_P(): antlr.TerminalNode | null;
    DROP(): antlr.TerminalNode | null;
    EACH(): antlr.TerminalNode | null;
    ENABLE_P(): antlr.TerminalNode | null;
    ENCODING(): antlr.TerminalNode | null;
    ENCRYPTED(): antlr.TerminalNode | null;
    ENUM_P(): antlr.TerminalNode | null;
    ESCAPE(): antlr.TerminalNode | null;
    EVENT(): antlr.TerminalNode | null;
    EXCLUDE(): antlr.TerminalNode | null;
    EXCLUDING(): antlr.TerminalNode | null;
    EXCLUSIVE(): antlr.TerminalNode | null;
    EXECUTE(): antlr.TerminalNode | null;
    EXPLAIN(): antlr.TerminalNode | null;
    EXPRESSION(): antlr.TerminalNode | null;
    EXTENSION(): antlr.TerminalNode | null;
    EXTERNAL(): antlr.TerminalNode | null;
    FAMILY(): antlr.TerminalNode | null;
    FILTER(): antlr.TerminalNode | null;
    FIRST_P(): antlr.TerminalNode | null;
    FOLLOWING(): antlr.TerminalNode | null;
    FORCE(): antlr.TerminalNode | null;
    FORWARD(): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode | null;
    FUNCTIONS(): antlr.TerminalNode | null;
    GENERATED(): antlr.TerminalNode | null;
    GLOBAL(): antlr.TerminalNode | null;
    GRANTED(): antlr.TerminalNode | null;
    GROUPS(): antlr.TerminalNode | null;
    HANDLER(): antlr.TerminalNode | null;
    HEADER_P(): antlr.TerminalNode | null;
    HOLD(): antlr.TerminalNode | null;
    HOUR_P(): antlr.TerminalNode | null;
    IDENTITY_P(): antlr.TerminalNode | null;
    IF_P(): antlr.TerminalNode | null;
    IMMEDIATE(): antlr.TerminalNode | null;
    IMMUTABLE(): antlr.TerminalNode | null;
    IMPLICIT_P(): antlr.TerminalNode | null;
    IMPORT_P(): antlr.TerminalNode | null;
    INCLUDE(): antlr.TerminalNode | null;
    INCLUDING(): antlr.TerminalNode | null;
    INCREMENT(): antlr.TerminalNode | null;
    INDEX(): antlr.TerminalNode | null;
    INDEXES(): antlr.TerminalNode | null;
    INHERIT(): antlr.TerminalNode | null;
    INHERITS(): antlr.TerminalNode | null;
    INLINE_P(): antlr.TerminalNode | null;
    INPUT_P(): antlr.TerminalNode | null;
    INSENSITIVE(): antlr.TerminalNode | null;
    INSERT(): antlr.TerminalNode | null;
    INSTEAD(): antlr.TerminalNode | null;
    INVOKER(): antlr.TerminalNode | null;
    ISOLATION(): antlr.TerminalNode | null;
    KEY(): antlr.TerminalNode | null;
    LABEL(): antlr.TerminalNode | null;
    LANGUAGE(): antlr.TerminalNode | null;
    LARGE_P(): antlr.TerminalNode | null;
    LAST_P(): antlr.TerminalNode | null;
    LEAKPROOF(): antlr.TerminalNode | null;
    LEVEL(): antlr.TerminalNode | null;
    LISTEN(): antlr.TerminalNode | null;
    LOAD(): antlr.TerminalNode | null;
    LOCAL(): antlr.TerminalNode | null;
    LOCATION(): antlr.TerminalNode | null;
    LOCK_P(): antlr.TerminalNode | null;
    LOCKED(): antlr.TerminalNode | null;
    LOGGED(): antlr.TerminalNode | null;
    MAPPING(): antlr.TerminalNode | null;
    MATCH(): antlr.TerminalNode | null;
    MATERIALIZED(): antlr.TerminalNode | null;
    MAXVALUE(): antlr.TerminalNode | null;
    METHOD(): antlr.TerminalNode | null;
    MINUTE_P(): antlr.TerminalNode | null;
    MINVALUE(): antlr.TerminalNode | null;
    MODE(): antlr.TerminalNode | null;
    MONTH_P(): antlr.TerminalNode | null;
    MOVE(): antlr.TerminalNode | null;
    NAME_P(): antlr.TerminalNode | null;
    NAMES(): antlr.TerminalNode | null;
    NEW(): antlr.TerminalNode | null;
    NEXT(): antlr.TerminalNode | null;
    NFC(): antlr.TerminalNode | null;
    NFD(): antlr.TerminalNode | null;
    NFKC(): antlr.TerminalNode | null;
    NFKD(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    NORMALIZED(): antlr.TerminalNode | null;
    NOTHING(): antlr.TerminalNode | null;
    NOTIFY(): antlr.TerminalNode | null;
    NOWAIT(): antlr.TerminalNode | null;
    NULLS_P(): antlr.TerminalNode | null;
    OBJECT_P(): antlr.TerminalNode | null;
    OF(): antlr.TerminalNode | null;
    OFF(): antlr.TerminalNode | null;
    OIDS(): antlr.TerminalNode | null;
    OLD(): antlr.TerminalNode | null;
    OPERATOR(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    OPTIONS(): antlr.TerminalNode | null;
    ORDINALITY(): antlr.TerminalNode | null;
    OTHERS(): antlr.TerminalNode | null;
    OVER(): antlr.TerminalNode | null;
    OVERRIDING(): antlr.TerminalNode | null;
    OWNED(): antlr.TerminalNode | null;
    OWNER(): antlr.TerminalNode | null;
    PARALLEL(): antlr.TerminalNode | null;
    PARSER(): antlr.TerminalNode | null;
    PARTIAL(): antlr.TerminalNode | null;
    PARTITION(): antlr.TerminalNode | null;
    PASSING(): antlr.TerminalNode | null;
    PASSWORD(): antlr.TerminalNode | null;
    PLANS(): antlr.TerminalNode | null;
    POLICY(): antlr.TerminalNode | null;
    PRECEDING(): antlr.TerminalNode | null;
    PREPARE(): antlr.TerminalNode | null;
    PREPARED(): antlr.TerminalNode | null;
    PRESERVE(): antlr.TerminalNode | null;
    PRIOR(): antlr.TerminalNode | null;
    PRIVILEGES(): antlr.TerminalNode | null;
    PROCEDURAL(): antlr.TerminalNode | null;
    PROCEDURE(): antlr.TerminalNode | null;
    PROCEDURES(): antlr.TerminalNode | null;
    PROGRAM(): antlr.TerminalNode | null;
    PUBLICATION(): antlr.TerminalNode | null;
    QUOTE(): antlr.TerminalNode | null;
    RANGE(): antlr.TerminalNode | null;
    READ(): antlr.TerminalNode | null;
    REASSIGN(): antlr.TerminalNode | null;
    RECHECK(): antlr.TerminalNode | null;
    RECURSIVE(): antlr.TerminalNode | null;
    REF(): antlr.TerminalNode | null;
    REFERENCING(): antlr.TerminalNode | null;
    REFRESH(): antlr.TerminalNode | null;
    REINDEX(): antlr.TerminalNode | null;
    RELATIVE_P(): antlr.TerminalNode | null;
    RELEASE(): antlr.TerminalNode | null;
    RENAME(): antlr.TerminalNode | null;
    REPEATABLE(): antlr.TerminalNode | null;
    REPLICA(): antlr.TerminalNode | null;
    RESET(): antlr.TerminalNode | null;
    RESTART(): antlr.TerminalNode | null;
    RESTRICT(): antlr.TerminalNode | null;
    RETURNS(): antlr.TerminalNode | null;
    REVOKE(): antlr.TerminalNode | null;
    ROLE(): antlr.TerminalNode | null;
    ROLLBACK(): antlr.TerminalNode | null;
    ROLLUP(): antlr.TerminalNode | null;
    ROUTINE(): antlr.TerminalNode | null;
    ROUTINES(): antlr.TerminalNode | null;
    ROWS(): antlr.TerminalNode | null;
    RULE(): antlr.TerminalNode | null;
    SAVEPOINT(): antlr.TerminalNode | null;
    SCHEMA(): antlr.TerminalNode | null;
    SCHEMAS(): antlr.TerminalNode | null;
    SCROLL(): antlr.TerminalNode | null;
    SEARCH(): antlr.TerminalNode | null;
    SECOND_P(): antlr.TerminalNode | null;
    SECURITY(): antlr.TerminalNode | null;
    SEQUENCE(): antlr.TerminalNode | null;
    SEQUENCES(): antlr.TerminalNode | null;
    SERIALIZABLE(): antlr.TerminalNode | null;
    SERVER(): antlr.TerminalNode | null;
    SESSION(): antlr.TerminalNode | null;
    SET(): antlr.TerminalNode | null;
    SETS(): antlr.TerminalNode | null;
    SHARE(): antlr.TerminalNode | null;
    SHOW(): antlr.TerminalNode | null;
    SIMPLE(): antlr.TerminalNode | null;
    SKIP_P(): antlr.TerminalNode | null;
    SNAPSHOT(): antlr.TerminalNode | null;
    SQL_P(): antlr.TerminalNode | null;
    STABLE(): antlr.TerminalNode | null;
    STANDALONE_P(): antlr.TerminalNode | null;
    START(): antlr.TerminalNode | null;
    STATEMENT(): antlr.TerminalNode | null;
    STATISTICS(): antlr.TerminalNode | null;
    STDIN(): antlr.TerminalNode | null;
    STDOUT(): antlr.TerminalNode | null;
    STORAGE(): antlr.TerminalNode | null;
    STORED(): antlr.TerminalNode | null;
    STRICT_P(): antlr.TerminalNode | null;
    STRIP_P(): antlr.TerminalNode | null;
    SUBSCRIPTION(): antlr.TerminalNode | null;
    SUPPORT(): antlr.TerminalNode | null;
    SYSID(): antlr.TerminalNode | null;
    SYSTEM_P(): antlr.TerminalNode | null;
    TABLES(): antlr.TerminalNode | null;
    TABLESPACE(): antlr.TerminalNode | null;
    TEMP(): antlr.TerminalNode | null;
    TEMPLATE(): antlr.TerminalNode | null;
    TEMPORARY(): antlr.TerminalNode | null;
    TEXT_P(): antlr.TerminalNode | null;
    TIES(): antlr.TerminalNode | null;
    TRANSACTION(): antlr.TerminalNode | null;
    TRANSFORM(): antlr.TerminalNode | null;
    TRIGGER(): antlr.TerminalNode | null;
    TRUNCATE(): antlr.TerminalNode | null;
    TRUSTED(): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode | null;
    TYPES_P(): antlr.TerminalNode | null;
    UESCAPE(): antlr.TerminalNode | null;
    UNBOUNDED(): antlr.TerminalNode | null;
    UNCOMMITTED(): antlr.TerminalNode | null;
    UNENCRYPTED(): antlr.TerminalNode | null;
    UNKNOWN(): antlr.TerminalNode | null;
    UNLISTEN(): antlr.TerminalNode | null;
    UNLOGGED(): antlr.TerminalNode | null;
    UNTIL(): antlr.TerminalNode | null;
    UPDATE(): antlr.TerminalNode | null;
    VACUUM(): antlr.TerminalNode | null;
    VALID(): antlr.TerminalNode | null;
    VALIDATE(): antlr.TerminalNode | null;
    VALIDATOR(): antlr.TerminalNode | null;
    VALUE_P(): antlr.TerminalNode | null;
    VARYING(): antlr.TerminalNode | null;
    VERSION_P(): antlr.TerminalNode | null;
    VIEW(): antlr.TerminalNode | null;
    VIEWS(): antlr.TerminalNode | null;
    VOLATILE(): antlr.TerminalNode | null;
    WHITESPACE_P(): antlr.TerminalNode | null;
    WITHIN(): antlr.TerminalNode | null;
    WITHOUT(): antlr.TerminalNode | null;
    WORK(): antlr.TerminalNode | null;
    WRAPPER(): antlr.TerminalNode | null;
    WRITE(): antlr.TerminalNode | null;
    XML_P(): antlr.TerminalNode | null;
    YEAR_P(): antlr.TerminalNode | null;
    YES_P(): antlr.TerminalNode | null;
    ZONE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ColumnNameKeywordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BETWEEN(): antlr.TerminalNode | null;
    BIGINT(): antlr.TerminalNode | null;
    bit(): BitContext | null;
    BOOLEAN_P(): antlr.TerminalNode | null;
    CHAR_P(): antlr.TerminalNode | null;
    character(): CharacterContext | null;
    COALESCE(): antlr.TerminalNode | null;
    DEC(): antlr.TerminalNode | null;
    DECIMAL_P(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    EXTRACT(): antlr.TerminalNode | null;
    FLOAT_P(): antlr.TerminalNode | null;
    GREATEST(): antlr.TerminalNode | null;
    GROUPING(): antlr.TerminalNode | null;
    INOUT(): antlr.TerminalNode | null;
    INT_P(): antlr.TerminalNode | null;
    INTEGER(): antlr.TerminalNode | null;
    INTERVAL(): antlr.TerminalNode | null;
    LEAST(): antlr.TerminalNode | null;
    NATIONAL(): antlr.TerminalNode | null;
    NCHAR(): antlr.TerminalNode | null;
    NONE(): antlr.TerminalNode | null;
    NORMALIZE(): antlr.TerminalNode | null;
    NULLIF(): antlr.TerminalNode | null;
    numeric(): NumericContext | null;
    OUT_P(): antlr.TerminalNode | null;
    OVERLAY(): antlr.TerminalNode | null;
    POSITION(): antlr.TerminalNode | null;
    PRECISION(): antlr.TerminalNode | null;
    REAL(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    SETOF(): antlr.TerminalNode | null;
    SMALLINT(): antlr.TerminalNode | null;
    SUBSTRING(): antlr.TerminalNode | null;
    TIME(): antlr.TerminalNode | null;
    TIMESTAMP(): antlr.TerminalNode | null;
    TREAT(): antlr.TerminalNode | null;
    TRIM(): antlr.TerminalNode | null;
    VALUES(): antlr.TerminalNode | null;
    VARCHAR(): antlr.TerminalNode | null;
    XMLATTRIBUTES(): antlr.TerminalNode | null;
    XMLCONCAT(): antlr.TerminalNode | null;
    XMLELEMENT(): antlr.TerminalNode | null;
    XMLEXISTS(): antlr.TerminalNode | null;
    XMLFOREST(): antlr.TerminalNode | null;
    XMLNAMESPACES(): antlr.TerminalNode | null;
    XMLPARSE(): antlr.TerminalNode | null;
    XMLPI(): antlr.TerminalNode | null;
    XMLROOT(): antlr.TerminalNode | null;
    XMLSERIALIZE(): antlr.TerminalNode | null;
    XMLTABLE(): antlr.TerminalNode | null;
    builtinFunctionName(): BuiltinFunctionNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class TypeFunctionNameKeywordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AUTHORIZATION(): antlr.TerminalNode | null;
    BINARY(): antlr.TerminalNode | null;
    COLLATION(): antlr.TerminalNode | null;
    CONCURRENTLY(): antlr.TerminalNode | null;
    CROSS(): antlr.TerminalNode | null;
    CURRENT_SCHEMA(): antlr.TerminalNode | null;
    FREEZE(): antlr.TerminalNode | null;
    FULL(): antlr.TerminalNode | null;
    ILIKE(): antlr.TerminalNode | null;
    INNER_P(): antlr.TerminalNode | null;
    IS(): antlr.TerminalNode | null;
    ISNULL(): antlr.TerminalNode | null;
    JOIN(): antlr.TerminalNode | null;
    LIKE(): antlr.TerminalNode | null;
    NATURAL(): antlr.TerminalNode | null;
    NOTNULL(): antlr.TerminalNode | null;
    OUTER_P(): antlr.TerminalNode | null;
    OVERLAPS(): antlr.TerminalNode | null;
    SIMILAR(): antlr.TerminalNode | null;
    TABLESAMPLE(): antlr.TerminalNode | null;
    VERBOSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ReservedKeywordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALL(): antlr.TerminalNode | null;
    ANALYSE(): antlr.TerminalNode | null;
    ANALYZE(): antlr.TerminalNode | null;
    AND(): antlr.TerminalNode | null;
    ANY(): antlr.TerminalNode | null;
    ARRAY(): antlr.TerminalNode | null;
    AS(): antlr.TerminalNode | null;
    ASC(): antlr.TerminalNode | null;
    ASYMMETRIC(): antlr.TerminalNode | null;
    BOTH(): antlr.TerminalNode | null;
    CASE(): antlr.TerminalNode | null;
    CAST(): antlr.TerminalNode | null;
    CHECK(): antlr.TerminalNode | null;
    COLLATE(): antlr.TerminalNode | null;
    COLUMN(): antlr.TerminalNode | null;
    CONSTRAINT(): antlr.TerminalNode | null;
    CREATE(): antlr.TerminalNode | null;
    CURRENT_CATALOG(): antlr.TerminalNode | null;
    CURRENT_DATE(): antlr.TerminalNode | null;
    CURRENT_ROLE(): antlr.TerminalNode | null;
    CURRENT_TIME(): antlr.TerminalNode | null;
    CURRENT_TIMESTAMP(): antlr.TerminalNode | null;
    CURRENT_USER(): antlr.TerminalNode | null;
    DEFERRABLE(): antlr.TerminalNode | null;
    DESC(): antlr.TerminalNode | null;
    DISTINCT(): antlr.TerminalNode | null;
    DO(): antlr.TerminalNode | null;
    ELSE(): antlr.TerminalNode | null;
    END_P(): antlr.TerminalNode | null;
    EXCEPT(): antlr.TerminalNode | null;
    FALSE_P(): antlr.TerminalNode | null;
    FETCH(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    FOREIGN(): antlr.TerminalNode | null;
    FROM(): antlr.TerminalNode | null;
    GRANT(): antlr.TerminalNode | null;
    GROUP_P(): antlr.TerminalNode | null;
    HAVING(): antlr.TerminalNode | null;
    IN_P(): antlr.TerminalNode | null;
    INITIALLY(): antlr.TerminalNode | null;
    INTERSECT(): antlr.TerminalNode | null;
    LATERAL_P(): antlr.TerminalNode | null;
    LEADING(): antlr.TerminalNode | null;
    LIMIT(): antlr.TerminalNode | null;
    LOCALTIME(): antlr.TerminalNode | null;
    LOCALTIMESTAMP(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    OFFSET(): antlr.TerminalNode | null;
    ON(): antlr.TerminalNode | null;
    ONLY(): antlr.TerminalNode | null;
    OR(): antlr.TerminalNode | null;
    ORDER(): antlr.TerminalNode | null;
    PLACING(): antlr.TerminalNode | null;
    PRIMARY(): antlr.TerminalNode | null;
    REFERENCES(): antlr.TerminalNode | null;
    RETURNING(): antlr.TerminalNode | null;
    SELECT(): antlr.TerminalNode | null;
    SESSION_USER(): antlr.TerminalNode | null;
    SOME(): antlr.TerminalNode | null;
    SYMMETRIC(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    THEN(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    TRAILING(): antlr.TerminalNode | null;
    TRUE_P(): antlr.TerminalNode | null;
    UNION(): antlr.TerminalNode | null;
    UNIQUE(): antlr.TerminalNode | null;
    USER(): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    VARIADIC(): antlr.TerminalNode | null;
    WHEN(): antlr.TerminalNode | null;
    WHERE(): antlr.TerminalNode | null;
    WINDOW(): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class BuiltinFunctionNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    XMLCOMMENT(): antlr.TerminalNode | null;
    XML_IS_WELL_FORMED(): antlr.TerminalNode | null;
    XML_IS_WELL_FORMED_DOCUMENT(): antlr.TerminalNode | null;
    XML_IS_WELL_FORMED_CONTENT(): antlr.TerminalNode | null;
    XMLAGG(): antlr.TerminalNode | null;
    XPATH(): antlr.TerminalNode | null;
    XPATH_EXISTS(): antlr.TerminalNode | null;
    ABS(): antlr.TerminalNode | null;
    CBRT(): antlr.TerminalNode | null;
    CEIL(): antlr.TerminalNode | null;
    CEILING(): antlr.TerminalNode | null;
    DEGREES(): antlr.TerminalNode | null;
    DIV(): antlr.TerminalNode | null;
    EXP(): antlr.TerminalNode | null;
    FACTORIAL(): antlr.TerminalNode | null;
    FLOOR(): antlr.TerminalNode | null;
    GCD(): antlr.TerminalNode | null;
    LCM(): antlr.TerminalNode | null;
    LN(): antlr.TerminalNode | null;
    LOG(): antlr.TerminalNode | null;
    LOG10(): antlr.TerminalNode | null;
    MIN_SCALE(): antlr.TerminalNode | null;
    MOD(): antlr.TerminalNode | null;
    PI(): antlr.TerminalNode | null;
    POWER(): antlr.TerminalNode | null;
    RADIANS(): antlr.TerminalNode | null;
    ROUND(): antlr.TerminalNode | null;
    SCALE(): antlr.TerminalNode | null;
    SIGN(): antlr.TerminalNode | null;
    SQRT(): antlr.TerminalNode | null;
    TRIM_SCALE(): antlr.TerminalNode | null;
    TRUNC(): antlr.TerminalNode | null;
    WIDTH_BUCKET(): antlr.TerminalNode | null;
    RANDOM(): antlr.TerminalNode | null;
    SETSEED(): antlr.TerminalNode | null;
    ACOS(): antlr.TerminalNode | null;
    ACOSD(): antlr.TerminalNode | null;
    ACOSH(): antlr.TerminalNode | null;
    ASIN(): antlr.TerminalNode | null;
    ASIND(): antlr.TerminalNode | null;
    ASINH(): antlr.TerminalNode | null;
    ATAN(): antlr.TerminalNode | null;
    ATAND(): antlr.TerminalNode | null;
    ATANH(): antlr.TerminalNode | null;
    ATAN2(): antlr.TerminalNode | null;
    ATAN2D(): antlr.TerminalNode | null;
    COS(): antlr.TerminalNode | null;
    COSD(): antlr.TerminalNode | null;
    COSH(): antlr.TerminalNode | null;
    COT(): antlr.TerminalNode | null;
    COTD(): antlr.TerminalNode | null;
    SIN(): antlr.TerminalNode | null;
    SIND(): antlr.TerminalNode | null;
    SINH(): antlr.TerminalNode | null;
    TAN(): antlr.TerminalNode | null;
    TAND(): antlr.TerminalNode | null;
    TANH(): antlr.TerminalNode | null;
    BIT_LENGTH(): antlr.TerminalNode | null;
    CHAR_LENGTH(): antlr.TerminalNode | null;
    CHARACTER_LENGTH(): antlr.TerminalNode | null;
    LOWER(): antlr.TerminalNode | null;
    OCTET_LENGTH(): antlr.TerminalNode | null;
    UPPER(): antlr.TerminalNode | null;
    ASCII(): antlr.TerminalNode | null;
    BTRIM(): antlr.TerminalNode | null;
    CHR(): antlr.TerminalNode | null;
    CONCAT(): antlr.TerminalNode | null;
    CONCAT_WS(): antlr.TerminalNode | null;
    FORMAT(): antlr.TerminalNode | null;
    INITCAP(): antlr.TerminalNode | null;
    LENGTH(): antlr.TerminalNode | null;
    LPAD(): antlr.TerminalNode | null;
    LTRIM(): antlr.TerminalNode | null;
    MD5(): antlr.TerminalNode | null;
    PARSE_IDENT(): antlr.TerminalNode | null;
    PG_CLIENT_ENCODING(): antlr.TerminalNode | null;
    QUOTE_IDENT(): antlr.TerminalNode | null;
    QUOTE_LITERAL(): antlr.TerminalNode | null;
    QUOTE_NULLABLE(): antlr.TerminalNode | null;
    REGEXP_COUNT(): antlr.TerminalNode | null;
    REGEXP_INSTR(): antlr.TerminalNode | null;
    REGEXP_LIKE(): antlr.TerminalNode | null;
    REGEXP_MATCH(): antlr.TerminalNode | null;
    REGEXP_MATCHES(): antlr.TerminalNode | null;
    REGEXP_REPLACE(): antlr.TerminalNode | null;
    REGEXP_SPLIT_TO_ARRAY(): antlr.TerminalNode | null;
    REGEXP_SPLIT_TO_TABLE(): antlr.TerminalNode | null;
    REGEXP_SUBSTR(): antlr.TerminalNode | null;
    REPEAT(): antlr.TerminalNode | null;
    REPLACE(): antlr.TerminalNode | null;
    REVERSE(): antlr.TerminalNode | null;
    RPAD(): antlr.TerminalNode | null;
    RTRIM(): antlr.TerminalNode | null;
    SPLIT_PART(): antlr.TerminalNode | null;
    STARTS_WITH(): antlr.TerminalNode | null;
    STRING_TO_ARRAY(): antlr.TerminalNode | null;
    STRING_TO_TABLE(): antlr.TerminalNode | null;
    STRPOS(): antlr.TerminalNode | null;
    SUBSTR(): antlr.TerminalNode | null;
    TO_ASCII(): antlr.TerminalNode | null;
    TO_HEX(): antlr.TerminalNode | null;
    TRANSLATE(): antlr.TerminalNode | null;
    UNISTR(): antlr.TerminalNode | null;
    AGE(): antlr.TerminalNode | null;
    DATE_BIN(): antlr.TerminalNode | null;
    DATE_PART(): antlr.TerminalNode | null;
    DATE_TRUNC(): antlr.TerminalNode | null;
    ISFINITE(): antlr.TerminalNode | null;
    JUSTIFY_DAYS(): antlr.TerminalNode | null;
    JUSTIFY_HOURS(): antlr.TerminalNode | null;
    JUSTIFY_INTERVAL(): antlr.TerminalNode | null;
    MAKE_DATE(): antlr.TerminalNode | null;
    MAKE_INTERVAL(): antlr.TerminalNode | null;
    MAKE_TIME(): antlr.TerminalNode | null;
    MAKE_TIMESTAMP(): antlr.TerminalNode | null;
    MAKE_TIMESTAMPTZ(): antlr.TerminalNode | null;
    CLOCK_TIMESTAMP(): antlr.TerminalNode | null;
    NOW(): antlr.TerminalNode | null;
    STATEMENT_TIMESTAMP(): antlr.TerminalNode | null;
    TIMEOFDAY(): antlr.TerminalNode | null;
    TRANSACTION_TIMESTAMP(): antlr.TerminalNode | null;
    TO_TIMESTAMP(): antlr.TerminalNode | null;
    TO_CHAR(): antlr.TerminalNode | null;
    TO_DATE(): antlr.TerminalNode | null;
    TO_NUMBER(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PlsqlFunctionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    computeOptions(): ComputeOptionsContext;
    plsqlBlock(): PlsqlBlockContext;
    optionalSemi(): OptionalSemiContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ComputeOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    computeOption(): ComputeOptionContext[];
    computeOption(i: number): ComputeOptionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ComputeOptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sharp(): SharpContext;
    OPTION(): antlr.TerminalNode | null;
    DUMP(): antlr.TerminalNode | null;
    PRINT_STRICT_PARAMS(): antlr.TerminalNode | null;
    optionValue(): OptionValueContext | null;
    VARIABLE_CONFLICT(): antlr.TerminalNode | null;
    ERROR(): antlr.TerminalNode | null;
    USE_VARIABLE(): antlr.TerminalNode | null;
    USE_COLUMN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SharpContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    Operator(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionValueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sconst(): SconstContext | null;
    reservedKeyword(): ReservedKeywordContext | null;
    plsqlUnreservedKeyword(): PlsqlUnreservedKeywordContext | null;
    unreservedKeyword(): UnreservedKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalSemiContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SEMI(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PlsqlBlockContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    declareSection(): DeclareSectionContext;
    BEGIN_P(): antlr.TerminalNode;
    procedureSection(): ProcedureSectionContext;
    exceptionSection(): ExceptionSectionContext;
    END_P(): antlr.TerminalNode;
    optionalLabel(): OptionalLabelContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareSectionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalBlockLabel(): OptionalBlockLabelContext;
    declareStart(): DeclareStartContext | null;
    declareStatements(): DeclareStatementsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareStartContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DECLARE(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareStatementsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    declareStatement(): DeclareStatementContext[];
    declareStatement(i: number): DeclareStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class LabelDeclarationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LESS_LESS(): antlr.TerminalNode;
    anyIdentifier(): AnyIdentifierContext;
    GREATER_GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    declareStatement2(): DeclareStatement2Context | null;
    DECLARE(): antlr.TerminalNode | null;
    labelDeclaration(): LabelDeclarationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareStatement2Context extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    declareVarname(): DeclareVarnameContext;
    SEMI(): antlr.TerminalNode;
    ALIAS(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    declareAliasItem(): DeclareAliasItemContext | null;
    declareConst(): DeclareConstContext | null;
    declareDatatype(): DeclareDatatypeContext | null;
    declareCollate(): DeclareCollateContext | null;
    declareNotNull(): DeclareNotNullContext | null;
    declareDefaultValue(): DeclareDefaultValueContext | null;
    optionalScrollable(): OptionalScrollableContext | null;
    CURSOR(): antlr.TerminalNode | null;
    declareCursorArgs(): DeclareCursorArgsContext | null;
    declareIsOrFor(): DeclareIsOrForContext | null;
    declareCursorQuery(): DeclareCursorQueryContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalScrollableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NO(): antlr.TerminalNode | null;
    SCROLL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareCursorQueryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    selectStatement(): SelectStatementContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareCursorArgsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    declareCursorArglist(): DeclareCursorArglistContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareCursorArglistContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    declareCursorArg(): DeclareCursorArgContext[];
    declareCursorArg(i: number): DeclareCursorArgContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareCursorArgContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    declareVarname(): DeclareVarnameContext;
    declareDatatype(): DeclareDatatypeContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareIsOrForContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IS(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareAliasItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PARAM(): antlr.TerminalNode | null;
    columnId(): ColumnIdContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareVarnameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anyIdentifier(): AnyIdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareConstContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CONSTANT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareDatatypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    typeName(): TypeNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareCollateContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COLLATE(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareNotNullContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NOT(): antlr.TerminalNode | null;
    NULL_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareDefaultValueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    declareDefaultKey(): DeclareDefaultKeyContext | null;
    sqlExpression(): SqlExpressionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class DeclareDefaultKeyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    assignOperator(): AssignOperatorContext | null;
    DEFAULT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AssignOperatorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EQUAL(): antlr.TerminalNode | null;
    COLON_EQUALS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ProcedureSectionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    proceduralStatement(): ProceduralStatementContext[];
    proceduralStatement(i: number): ProceduralStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ProceduralStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    plsqlBlock(): PlsqlBlockContext | null;
    SEMI(): antlr.TerminalNode | null;
    statementReturn(): StatementReturnContext | null;
    statementRaise(): StatementRaiseContext | null;
    statementAssign(): StatementAssignContext | null;
    statementIf(): StatementIfContext | null;
    statementCase(): StatementCaseContext | null;
    statementLoop(): StatementLoopContext | null;
    statementWhile(): StatementWhileContext | null;
    statementFor(): StatementForContext | null;
    statementForeachA(): StatementForeachAContext | null;
    statementExit(): StatementExitContext | null;
    statementAssert(): StatementAssertContext | null;
    statementExecSql(): StatementExecSqlContext | null;
    statementDynExecute(): StatementDynExecuteContext | null;
    statementPerform(): StatementPerformContext | null;
    statementCall(): StatementCallContext | null;
    statementGetDiagram(): StatementGetDiagramContext | null;
    statementOpen(): StatementOpenContext | null;
    statementFetch(): StatementFetchContext | null;
    statementMove(): StatementMoveContext | null;
    statementClose(): StatementCloseContext | null;
    statementNull(): StatementNullContext | null;
    statementCommit(): StatementCommitContext | null;
    statementRollback(): StatementRollbackContext | null;
    statementSet(): StatementSetContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementPerformContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PERFORM(): antlr.TerminalNode;
    expressionUntilSemi(): ExpressionUntilSemiContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementCallContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CALL(): antlr.TerminalNode | null;
    anyIdentifier(): AnyIdentifierContext;
    OPEN_PAREN(): antlr.TerminalNode;
    optionalExpressionList(): OptionalExpressionListContext;
    CLOSE_PAREN(): antlr.TerminalNode;
    SEMI(): antlr.TerminalNode;
    DO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalExpressionListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expressionList(): ExpressionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementAssignContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    assignVariable(): AssignVariableContext;
    assignOperator(): AssignOperatorContext;
    sqlExpression(): SqlExpressionContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementGetDiagramContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GET(): antlr.TerminalNode;
    optionalGetDiagramArea(): OptionalGetDiagramAreaContext;
    DIAGNOSTICS(): antlr.TerminalNode;
    getDiagramList(): GetDiagramListContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalGetDiagramAreaContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CURRENT_P(): antlr.TerminalNode | null;
    STACKED(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GetDiagramListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    getDiagramListItem(): GetDiagramListItemContext[];
    getDiagramListItem(i: number): GetDiagramListItemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GetDiagramListItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    getDiagramTarget(): GetDiagramTargetContext;
    assignOperator(): AssignOperatorContext;
    getDiagramItem(): GetDiagramItemContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GetDiagramItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class GetDiagramTargetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    assignVariable(): AssignVariableContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AssignVariableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anyName(): AnyNameContext | null;
    PARAM(): antlr.TerminalNode | null;
    OPEN_BRACKET(): antlr.TerminalNode[];
    OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    expressionUntilRightbracket(): ExpressionUntilRightbracketContext[];
    expressionUntilRightbracket(i: number): ExpressionUntilRightbracketContext | null;
    CLOSE_BRACKET(): antlr.TerminalNode[];
    CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementIfContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IF_P(): antlr.TerminalNode[];
    IF_P(i: number): antlr.TerminalNode | null;
    expressionUntilThen(): ExpressionUntilThenContext;
    THEN(): antlr.TerminalNode;
    procedureSection(): ProcedureSectionContext;
    statementElsifs(): StatementElsifsContext;
    statementElse(): StatementElseContext;
    END_P(): antlr.TerminalNode;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementElsifsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ELSIF(): antlr.TerminalNode[];
    ELSIF(i: number): antlr.TerminalNode | null;
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    THEN(): antlr.TerminalNode[];
    THEN(i: number): antlr.TerminalNode | null;
    procedureSection(): ProcedureSectionContext[];
    procedureSection(i: number): ProcedureSectionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementElseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ELSE(): antlr.TerminalNode | null;
    procedureSection(): ProcedureSectionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementCaseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CASE(): antlr.TerminalNode[];
    CASE(i: number): antlr.TerminalNode | null;
    optionalExpressionUntilWhen(): OptionalExpressionUntilWhenContext;
    caseWhenList(): CaseWhenListContext;
    optionalCaseElse(): OptionalCaseElseContext;
    END_P(): antlr.TerminalNode;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalExpressionUntilWhenContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sqlExpression(): SqlExpressionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CaseWhenListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    caseWhen(): CaseWhenContext[];
    caseWhen(i: number): CaseWhenContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CaseWhenContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode;
    expressionList(): ExpressionListContext;
    THEN(): antlr.TerminalNode;
    procedureSection(): ProcedureSectionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalCaseElseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ELSE(): antlr.TerminalNode | null;
    procedureSection(): ProcedureSectionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementLoopContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalLoopLabel(): OptionalLoopLabelContext;
    loopBody(): LoopBodyContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementWhileContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalLoopLabel(): OptionalLoopLabelContext;
    WHILE(): antlr.TerminalNode;
    expressionUntilLoop(): ExpressionUntilLoopContext;
    loopBody(): LoopBodyContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementForContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalLoopLabel(): OptionalLoopLabelContext;
    FOR(): antlr.TerminalNode;
    forControl(): ForControlContext;
    loopBody(): LoopBodyContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForControlContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    forVariable(): ForVariableContext;
    IN_P(): antlr.TerminalNode;
    cursorName(): CursorNameContext | null;
    optionalCursorParameters(): OptionalCursorParametersContext | null;
    selectStatement(): SelectStatementContext | null;
    explainStatement(): ExplainStatementContext | null;
    EXECUTE(): antlr.TerminalNode | null;
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    optionalForUsingExpression(): OptionalForUsingExpressionContext | null;
    optionalReverse(): OptionalReverseContext | null;
    DOT_DOT(): antlr.TerminalNode | null;
    optionalByExpression(): OptionalByExpressionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalForUsingExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalCursorParametersContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN_PAREN(): antlr.TerminalNode | null;
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalReverseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REVERSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalByExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BY(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForVariableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anyNameList(): AnyNameListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementForeachAContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalLoopLabel(): OptionalLoopLabelContext;
    FOREACH(): antlr.TerminalNode;
    forVariable(): ForVariableContext;
    foreachSlice(): ForeachSliceContext;
    IN_P(): antlr.TerminalNode;
    ARRAY(): antlr.TerminalNode;
    expression1(): Expression1Context;
    loopBody(): LoopBodyContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ForeachSliceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SLICE(): antlr.TerminalNode | null;
    iconst(): IconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementExitContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    exitType(): ExitTypeContext;
    optionalLabel(): OptionalLabelContext;
    optionalExitCondition(): OptionalExitConditionContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExitTypeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXIT(): antlr.TerminalNode | null;
    CONTINUE_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementReturnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RETURN(): antlr.TerminalNode;
    SEMI(): antlr.TerminalNode;
    NEXT(): antlr.TerminalNode | null;
    sqlExpression(): SqlExpressionContext | null;
    QUERY(): antlr.TerminalNode | null;
    optionalReturnResult(): OptionalReturnResultContext | null;
    EXECUTE(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    optionalForUsingExpression(): OptionalForUsingExpressionContext | null;
    selectStatement(): SelectStatementContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalReturnResultContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sqlExpression(): SqlExpressionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementRaiseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RAISE(): antlr.TerminalNode;
    optionalStatementRaiseLevel(): OptionalStatementRaiseLevelContext | null;
    sconst(): SconstContext | null;
    optionalRaiseList(): OptionalRaiseListContext | null;
    optionalRaiseUsing(): OptionalRaiseUsingContext | null;
    SEMI(): antlr.TerminalNode | null;
    identifier(): IdentifierContext | null;
    SQLSTATE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalStatementRaiseLevelContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DEBUG(): antlr.TerminalNode | null;
    LOG(): antlr.TerminalNode | null;
    INFO(): antlr.TerminalNode | null;
    NOTICE(): antlr.TerminalNode | null;
    WARNING(): antlr.TerminalNode | null;
    EXCEPTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalRaiseListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalRaiseUsingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    optionalRaiseUsingElement(): OptionalRaiseUsingElementContext[];
    optionalRaiseUsingElement(i: number): OptionalRaiseUsingElementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalRaiseUsingElementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    EQUAL(): antlr.TerminalNode;
    expression1(): Expression1Context;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementAssertContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ASSERT(): antlr.TerminalNode;
    sqlExpression(): SqlExpressionContext;
    optionalStatementAssertMessage(): OptionalStatementAssertMessageContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalStatementAssertMessageContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMA(): antlr.TerminalNode | null;
    sqlExpression(): SqlExpressionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class LoopBodyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LOOP(): antlr.TerminalNode[];
    LOOP(i: number): antlr.TerminalNode | null;
    procedureSection(): ProcedureSectionContext;
    END_P(): antlr.TerminalNode;
    optionalLabel(): OptionalLabelContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementExecSqlContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    makeExecuteSqlStatement(): MakeExecuteSqlStatementContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementDynExecuteContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXECUTE(): antlr.TerminalNode;
    expression1(): Expression1Context;
    SEMI(): antlr.TerminalNode;
    optionalExecuteInto(): OptionalExecuteIntoContext | null;
    optionalExecuteUsing(): OptionalExecuteUsingContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalExecuteUsingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USING(): antlr.TerminalNode | null;
    optionalExecuteUsingList(): OptionalExecuteUsingListContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalExecuteUsingListContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context[];
    expression1(i: number): Expression1Context | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalExecuteIntoContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INTO(): antlr.TerminalNode | null;
    intoTarget(): IntoTargetContext | null;
    STRICT_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementOpenContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPEN(): antlr.TerminalNode;
    SEMI(): antlr.TerminalNode;
    cursorVariable(): CursorVariableContext | null;
    SCROLL(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    columnId(): ColumnIdContext | null;
    selectStatement(): SelectStatementContext | null;
    EXECUTE(): antlr.TerminalNode | null;
    sqlExpression(): SqlExpressionContext | null;
    USING(): antlr.TerminalNode | null;
    expressionList(): ExpressionListContext | null;
    NO(): antlr.TerminalNode | null;
    OPEN_PAREN(): antlr.TerminalNode | null;
    optionalOpenBoundListItem(): OptionalOpenBoundListItemContext[];
    optionalOpenBoundListItem(i: number): OptionalOpenBoundListItemContext | null;
    CLOSE_PAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalOpenBoundListItemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext | null;
    COLON_EQUALS(): antlr.TerminalNode | null;
    expression1(): Expression1Context;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementFetchContext extends antlr.ParserRuleContext {
    _direction?: OptionalFetchDirectionContext;
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FETCH(): antlr.TerminalNode;
    optionalCursorFrom(): OptionalCursorFromContext;
    cursorVariable(): CursorVariableContext;
    INTO(): antlr.TerminalNode;
    intoTarget(): IntoTargetContext;
    SEMI(): antlr.TerminalNode;
    optionalFetchDirection(): OptionalFetchDirectionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class IntoTargetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expressionList(): ExpressionListContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalCursorFromContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FROM(): antlr.TerminalNode | null;
    IN_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalFetchDirectionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NEXT(): antlr.TerminalNode | null;
    PRIOR(): antlr.TerminalNode | null;
    FIRST_P(): antlr.TerminalNode | null;
    LAST_P(): antlr.TerminalNode | null;
    ABSOLUTE_P(): antlr.TerminalNode | null;
    expression1(): Expression1Context | null;
    RELATIVE_P(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    FORWARD(): antlr.TerminalNode | null;
    BACKWARD(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementMoveContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MOVE(): antlr.TerminalNode;
    optionalFetchDirection(): OptionalFetchDirectionContext;
    cursorVariable(): CursorVariableContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementCloseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CLOSE(): antlr.TerminalNode;
    cursorVariable(): CursorVariableContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementNullContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NULL_P(): antlr.TerminalNode;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementCommitContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMIT(): antlr.TerminalNode;
    plsqlOptionalTransactionChain(): PlsqlOptionalTransactionChainContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementRollbackContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROLLBACK(): antlr.TerminalNode;
    plsqlOptionalTransactionChain(): PlsqlOptionalTransactionChainContext;
    SEMI(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PlsqlOptionalTransactionChainContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AND(): antlr.TerminalNode | null;
    CHAIN(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class StatementSetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode | null;
    anyName(): AnyNameContext | null;
    TO(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    SEMI(): antlr.TerminalNode;
    RESET(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class CursorVariableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext | null;
    PARAM(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExceptionSectionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXCEPTION(): antlr.TerminalNode | null;
    procedureExceptions(): ProcedureExceptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ProcedureExceptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    procedureException(): ProcedureExceptionContext[];
    procedureException(i: number): ProcedureExceptionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ProcedureExceptionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode;
    procedureConditions(): ProcedureConditionsContext;
    THEN(): antlr.TerminalNode;
    procedureSection(): ProcedureSectionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ProcedureConditionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    procedureCondition(): ProcedureConditionContext[];
    procedureCondition(i: number): ProcedureConditionContext | null;
    OR(): antlr.TerminalNode[];
    OR(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ProcedureConditionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anyIdentifier(): AnyIdentifierContext | null;
    SQLSTATE(): antlr.TerminalNode | null;
    sconst(): SconstContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalBlockLabelContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    labelDeclaration(): LabelDeclarationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalLoopLabelContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    labelDeclaration(): LabelDeclarationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalLabelContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    anyIdentifier(): AnyIdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalExitConditionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode | null;
    expressionUntilSemi(): ExpressionUntilSemiContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class AnyIdentifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    columnId(): ColumnIdContext | null;
    plsqlUnreservedKeyword(): PlsqlUnreservedKeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class PlsqlUnreservedKeywordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ABSOLUTE_P(): antlr.TerminalNode | null;
    ALIAS(): antlr.TerminalNode | null;
    AND(): antlr.TerminalNode | null;
    ARRAY(): antlr.TerminalNode | null;
    ASSERT(): antlr.TerminalNode | null;
    BACKWARD(): antlr.TerminalNode | null;
    CALL(): antlr.TerminalNode | null;
    CHAIN(): antlr.TerminalNode | null;
    CLOSE(): antlr.TerminalNode | null;
    COLLATE(): antlr.TerminalNode | null;
    COLUMN(): antlr.TerminalNode | null;
    COMMIT(): antlr.TerminalNode | null;
    CONSTANT(): antlr.TerminalNode | null;
    CONSTRAINT(): antlr.TerminalNode | null;
    CONTINUE_P(): antlr.TerminalNode | null;
    CURRENT_P(): antlr.TerminalNode | null;
    CURSOR(): antlr.TerminalNode | null;
    DEBUG(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    DIAGNOSTICS(): antlr.TerminalNode | null;
    DO(): antlr.TerminalNode | null;
    DUMP(): antlr.TerminalNode | null;
    ELSIF(): antlr.TerminalNode | null;
    ERROR(): antlr.TerminalNode | null;
    EXCEPTION(): antlr.TerminalNode | null;
    EXIT(): antlr.TerminalNode | null;
    FETCH(): antlr.TerminalNode | null;
    FIRST_P(): antlr.TerminalNode | null;
    FORWARD(): antlr.TerminalNode | null;
    GET(): antlr.TerminalNode | null;
    INFO(): antlr.TerminalNode | null;
    INSERT(): antlr.TerminalNode | null;
    IS(): antlr.TerminalNode | null;
    LAST_P(): antlr.TerminalNode | null;
    MOVE(): antlr.TerminalNode | null;
    NEXT(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    NOTICE(): antlr.TerminalNode | null;
    OPEN(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    PERFORM(): antlr.TerminalNode | null;
    PRINT_STRICT_PARAMS(): antlr.TerminalNode | null;
    PRIOR(): antlr.TerminalNode | null;
    QUERY(): antlr.TerminalNode | null;
    RAISE(): antlr.TerminalNode | null;
    RELATIVE_P(): antlr.TerminalNode | null;
    RESET(): antlr.TerminalNode | null;
    RETURN(): antlr.TerminalNode | null;
    ROLLBACK(): antlr.TerminalNode | null;
    ROWTYPE(): antlr.TerminalNode | null;
    SCHEMA(): antlr.TerminalNode | null;
    SCROLL(): antlr.TerminalNode | null;
    SET(): antlr.TerminalNode | null;
    SLICE(): antlr.TerminalNode | null;
    SQLSTATE(): antlr.TerminalNode | null;
    STACKED(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    TYPE_P(): antlr.TerminalNode | null;
    USE_COLUMN(): antlr.TerminalNode | null;
    USE_VARIABLE(): antlr.TerminalNode | null;
    VARIABLE_CONFLICT(): antlr.TerminalNode | null;
    WARNING(): antlr.TerminalNode | null;
    OUTER_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class SqlExpressionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    optionalTargetList(): OptionalTargetListContext;
    fromClause(): FromClauseContext;
    whereClause(): WhereClauseContext;
    groupClause(): GroupClauseContext;
    havingClause(): HavingClauseContext;
    windowClause(): WindowClauseContext;
    intoClause(): IntoClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExpressionUntilThenContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sqlExpression(): SqlExpressionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExpressionUntilSemiContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sqlExpression(): SqlExpressionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExpressionUntilRightbracketContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class ExpressionUntilLoopContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expression1(): Expression1Context;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class MakeExecuteSqlStatementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    statement(): StatementContext;
    optionalReturningClauseInto(): OptionalReturningClauseIntoContext;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class OptionalReturningClauseIntoContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INTO(): antlr.TerminalNode | null;
    intoTarget(): IntoTargetContext | null;
    STRICT_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
export declare class RoleOrAliasesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROLE(): antlr.TerminalNode | null;
    USER(): antlr.TerminalNode | null;
    GROUP_P(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null;
}
