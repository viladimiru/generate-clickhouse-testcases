import * as antlr from "antlr4ng";
import { YQLVisitor } from "./YQLVisitor.js";
export declare class YQLParser extends antlr.Parser {
    static readonly QUERY = 1;
    static readonly EQUALS = 2;
    static readonly EQUALS2 = 3;
    static readonly NOT_EQUALS = 4;
    static readonly NOT_EQUALS2 = 5;
    static readonly LESS = 6;
    static readonly LESS_OR_EQ = 7;
    static readonly GREATER = 8;
    static readonly GREATER_OR_EQ = 9;
    static readonly SHIFT_LEFT = 10;
    static readonly ROT_LEFT = 11;
    static readonly AMPERSAND = 12;
    static readonly PIPE = 13;
    static readonly DOUBLE_PIPE = 14;
    static readonly STRUCT_OPEN = 15;
    static readonly STRUCT_CLOSE = 16;
    static readonly PLUS = 17;
    static readonly MINUS = 18;
    static readonly TILDA = 19;
    static readonly ASTERISK = 20;
    static readonly SLASH = 21;
    static readonly BACKSLASH = 22;
    static readonly PERCENT = 23;
    static readonly SEMICOLON = 24;
    static readonly DOT = 25;
    static readonly COMMA = 26;
    static readonly LPAREN = 27;
    static readonly RPAREN = 28;
    static readonly QUESTION = 29;
    static readonly COLON = 30;
    static readonly AT = 31;
    static readonly DOUBLE_AT = 32;
    static readonly DOLLAR = 33;
    static readonly QUOTE_DOUBLE = 34;
    static readonly QUOTE_SINGLE = 35;
    static readonly BACKTICK = 36;
    static readonly LBRACE_CURLY = 37;
    static readonly RBRACE_CURLY = 38;
    static readonly CARET = 39;
    static readonly NAMESPACE = 40;
    static readonly ARROW = 41;
    static readonly RBRACE_SQUARE = 42;
    static readonly LBRACE_SQUARE = 43;
    static readonly ABORT = 44;
    static readonly ACTION = 45;
    static readonly ADD = 46;
    static readonly AFTER = 47;
    static readonly ALL = 48;
    static readonly ALTER = 49;
    static readonly ANALYZE = 50;
    static readonly AND = 51;
    static readonly ANSI = 52;
    static readonly ANY = 53;
    static readonly ARRAY = 54;
    static readonly AS = 55;
    static readonly ASC = 56;
    static readonly ASSUME = 57;
    static readonly ASYMMETRIC = 58;
    static readonly ASYNC = 59;
    static readonly ATTACH = 60;
    static readonly ATTRIBUTES = 61;
    static readonly AUTOINCREMENT = 62;
    static readonly AUTOMAP = 63;
    static readonly BEFORE = 64;
    static readonly BEGIN = 65;
    static readonly BERNOULLI = 66;
    static readonly BETWEEN = 67;
    static readonly BITCAST = 68;
    static readonly BY = 69;
    static readonly CALLABLE = 70;
    static readonly CASCADE = 71;
    static readonly CASE = 72;
    static readonly CAST = 73;
    static readonly CHANGEFEED = 74;
    static readonly CHECK = 75;
    static readonly COLLATE = 76;
    static readonly COLUMN = 77;
    static readonly COLUMNS = 78;
    static readonly COMMIT = 79;
    static readonly COMPACT = 80;
    static readonly CONDITIONAL = 81;
    static readonly CONFLICT = 82;
    static readonly CONNECT = 83;
    static readonly CONSTRAINT = 84;
    static readonly CONSUMER = 85;
    static readonly COVER = 86;
    static readonly CREATE = 87;
    static readonly CROSS = 88;
    static readonly CUBE = 89;
    static readonly CURRENT = 90;
    static readonly CURRENT_DATE = 91;
    static readonly CURRENT_TIME = 92;
    static readonly CURRENT_TIMESTAMP = 93;
    static readonly DATA = 94;
    static readonly DATABASE = 95;
    static readonly DECIMAL = 96;
    static readonly DECLARE = 97;
    static readonly DEFAULT = 98;
    static readonly DEFERRABLE = 99;
    static readonly DEFERRED = 100;
    static readonly DEFINE = 101;
    static readonly DELETE = 102;
    static readonly DESC = 103;
    static readonly DESCRIBE = 104;
    static readonly DETACH = 105;
    static readonly DICT = 106;
    static readonly DIRECTORY = 107;
    static readonly DISABLE = 108;
    static readonly DISCARD = 109;
    static readonly DISTINCT = 110;
    static readonly DO = 111;
    static readonly DROP = 112;
    static readonly EACH = 113;
    static readonly ELSE = 114;
    static readonly EMPTY = 115;
    static readonly EMPTY_ACTION = 116;
    static readonly ENCRYPTED = 117;
    static readonly END = 118;
    static readonly ENUM = 119;
    static readonly ERASE = 120;
    static readonly ERROR = 121;
    static readonly ESCAPE = 122;
    static readonly EVALUATE = 123;
    static readonly EXCEPT = 124;
    static readonly EXCLUDE = 125;
    static readonly EXCLUSION = 126;
    static readonly EXCLUSIVE = 127;
    static readonly EXISTS = 128;
    static readonly EXPLAIN = 129;
    static readonly EXPORT = 130;
    static readonly EXTERNAL = 131;
    static readonly FAIL = 132;
    static readonly FALSE = 133;
    static readonly FAMILY = 134;
    static readonly FILTER = 135;
    static readonly FIRST = 136;
    static readonly FLATTEN = 137;
    static readonly FLOW = 138;
    static readonly FOLLOWING = 139;
    static readonly FOR = 140;
    static readonly FOREIGN = 141;
    static readonly FROM = 142;
    static readonly FULL = 143;
    static readonly FUNCTION = 144;
    static readonly GLOB = 145;
    static readonly GLOBAL = 146;
    static readonly GRANT = 147;
    static readonly GROUP = 148;
    static readonly GROUPING = 149;
    static readonly GROUPS = 150;
    static readonly HASH = 151;
    static readonly HAVING = 152;
    static readonly HOP = 153;
    static readonly IF = 154;
    static readonly IGNORE = 155;
    static readonly ILIKE = 156;
    static readonly IMMEDIATE = 157;
    static readonly IMPORT = 158;
    static readonly IN = 159;
    static readonly INDEX = 160;
    static readonly INDEXED = 161;
    static readonly INHERITS = 162;
    static readonly INITIAL = 163;
    static readonly INITIALLY = 164;
    static readonly INNER = 165;
    static readonly INSERT = 166;
    static readonly INSTEAD = 167;
    static readonly INTERSECT = 168;
    static readonly INTO = 169;
    static readonly IS = 170;
    static readonly ISNULL = 171;
    static readonly JOIN = 172;
    static readonly JSON_EXISTS = 173;
    static readonly JSON_QUERY = 174;
    static readonly JSON_VALUE = 175;
    static readonly KEY = 176;
    static readonly LAST = 177;
    static readonly LEFT = 178;
    static readonly LEGACY = 179;
    static readonly LIKE = 180;
    static readonly LIMIT = 181;
    static readonly LIST = 182;
    static readonly LOCAL = 183;
    static readonly MANAGE = 184;
    static readonly MATCH = 185;
    static readonly MATCHES = 186;
    static readonly MATCH_RECOGNIZE = 187;
    static readonly MEASURES = 188;
    static readonly MICROSECONDS = 189;
    static readonly MILLISECONDS = 190;
    static readonly MODIFY = 191;
    static readonly NANOSECONDS = 192;
    static readonly NATURAL = 193;
    static readonly NEXT = 194;
    static readonly NO = 195;
    static readonly NOT = 196;
    static readonly NOTNULL = 197;
    static readonly NULL = 198;
    static readonly NULLS = 199;
    static readonly OBJECT = 200;
    static readonly OF = 201;
    static readonly OFFSET = 202;
    static readonly OMIT = 203;
    static readonly ON = 204;
    static readonly ONE = 205;
    static readonly ONLY = 206;
    static readonly OPTION = 207;
    static readonly OPTIONAL = 208;
    static readonly OR = 209;
    static readonly ORDER = 210;
    static readonly OTHERS = 211;
    static readonly OUTER = 212;
    static readonly OVER = 213;
    static readonly PARALLEL = 214;
    static readonly PARTITION = 215;
    static readonly PASSING = 216;
    static readonly PASSWORD = 217;
    static readonly PAST = 218;
    static readonly PATTERN = 219;
    static readonly PER = 220;
    static readonly PERMUTE = 221;
    static readonly PLAN = 222;
    static readonly PRAGMA = 223;
    static readonly PRECEDING = 224;
    static readonly PRESORT = 225;
    static readonly PRIMARY = 226;
    static readonly PRIVILEGES = 227;
    static readonly PROCESS = 228;
    static readonly QUEUE = 229;
    static readonly RAISE = 230;
    static readonly RANGE = 231;
    static readonly REDUCE = 232;
    static readonly REFERENCES = 233;
    static readonly REGEXP = 234;
    static readonly REINDEX = 235;
    static readonly RELEASE = 236;
    static readonly REMOVE = 237;
    static readonly RENAME = 238;
    static readonly REPEATABLE = 239;
    static readonly REPLACE = 240;
    static readonly REPLICATION = 241;
    static readonly RESET = 242;
    static readonly RESOURCE = 243;
    static readonly RESPECT = 244;
    static readonly RESTRICT = 245;
    static readonly RESULT = 246;
    static readonly RETURN = 247;
    static readonly RETURNING = 248;
    static readonly REVERT = 249;
    static readonly REVOKE = 250;
    static readonly RIGHT = 251;
    static readonly RLIKE = 252;
    static readonly ROLLBACK = 253;
    static readonly ROLLUP = 254;
    static readonly ROW = 255;
    static readonly ROWS = 256;
    static readonly SAMPLE = 257;
    static readonly SAVEPOINT = 258;
    static readonly SCHEMA = 259;
    static readonly SECONDS = 260;
    static readonly SEEK = 261;
    static readonly SELECT = 262;
    static readonly SEMI = 263;
    static readonly SET = 264;
    static readonly SETS = 265;
    static readonly SHOW = 266;
    static readonly SKIP_RULE = 267;
    static readonly SOURCE = 268;
    static readonly STREAM = 269;
    static readonly STRUCT = 270;
    static readonly SUBQUERY = 271;
    static readonly SUBSET = 272;
    static readonly SYMBOLS = 273;
    static readonly SYMMETRIC = 274;
    static readonly SYNC = 275;
    static readonly SYSTEM = 276;
    static readonly TABLE = 277;
    static readonly TABLES = 278;
    static readonly TABLESAMPLE = 279;
    static readonly TABLESTORE = 280;
    static readonly TAGGED = 281;
    static readonly TEMP = 282;
    static readonly TEMPORARY = 283;
    static readonly THEN = 284;
    static readonly TIES = 285;
    static readonly TO = 286;
    static readonly TOPIC = 287;
    static readonly TRANSACTION = 288;
    static readonly TRIGGER = 289;
    static readonly TRUE = 290;
    static readonly TUPLE = 291;
    static readonly TYPE = 292;
    static readonly UNBOUNDED = 293;
    static readonly UNCONDITIONAL = 294;
    static readonly UNION = 295;
    static readonly UNIQUE = 296;
    static readonly UNKNOWN = 297;
    static readonly UNMATCHED = 298;
    static readonly UPDATE = 299;
    static readonly UPSERT = 300;
    static readonly USE = 301;
    static readonly USER = 302;
    static readonly USING = 303;
    static readonly VACUUM = 304;
    static readonly VALUES = 305;
    static readonly VARIANT = 306;
    static readonly VIEW = 307;
    static readonly VIRTUAL = 308;
    static readonly WHEN = 309;
    static readonly WHERE = 310;
    static readonly WINDOW = 311;
    static readonly WITH = 312;
    static readonly WITHOUT = 313;
    static readonly WRAPPER = 314;
    static readonly XOR = 315;
    static readonly STRING_VALUE = 316;
    static readonly ID_PLAIN = 317;
    static readonly ID_QUOTED = 318;
    static readonly DIGITS = 319;
    static readonly INTEGER_VALUE = 320;
    static readonly REAL = 321;
    static readonly BLOB = 322;
    static readonly WS = 323;
    static readonly COMMENT = 324;
    static readonly RULE_sql_query = 0;
    static readonly RULE_sql_stmt_list = 1;
    static readonly RULE_ansi_sql_stmt_list = 2;
    static readonly RULE_lambda_body = 3;
    static readonly RULE_lambda_stmt = 4;
    static readonly RULE_sql_stmt = 5;
    static readonly RULE_sql_stmt_core = 6;
    static readonly RULE_expr = 7;
    static readonly RULE_or_subexpr = 8;
    static readonly RULE_and_subexpr = 9;
    static readonly RULE_xor_subexpr = 10;
    static readonly RULE_distinct_from_op = 11;
    static readonly RULE_cond_expr = 12;
    static readonly RULE_match_op = 13;
    static readonly RULE_eq_subexpr = 14;
    static readonly RULE_shift_right = 15;
    static readonly RULE_rot_right = 16;
    static readonly RULE_double_question = 17;
    static readonly RULE_neq_subexpr = 18;
    static readonly RULE_bit_subexpr = 19;
    static readonly RULE_add_subexpr = 20;
    static readonly RULE_mul_subexpr = 21;
    static readonly RULE_con_subexpr = 22;
    static readonly RULE_unary_op = 23;
    static readonly RULE_unary_subexpr_suffix = 24;
    static readonly RULE_unary_casual_subexpr = 25;
    static readonly RULE_in_unary_casual_subexpr = 26;
    static readonly RULE_unary_subexpr = 27;
    static readonly RULE_in_unary_subexpr = 28;
    static readonly RULE_list_literal = 29;
    static readonly RULE_expr_dict_list = 30;
    static readonly RULE_dict_literal = 31;
    static readonly RULE_expr_struct_list = 32;
    static readonly RULE_struct_literal = 33;
    static readonly RULE_atom_expr = 34;
    static readonly RULE_in_atom_expr = 35;
    static readonly RULE_cast_expr = 36;
    static readonly RULE_bitcast_expr = 37;
    static readonly RULE_exists_expr = 38;
    static readonly RULE_case_expr = 39;
    static readonly RULE_lambda = 40;
    static readonly RULE_in_expr = 41;
    static readonly RULE_json_api_expr = 42;
    static readonly RULE_jsonpath_spec = 43;
    static readonly RULE_json_variable_name = 44;
    static readonly RULE_json_variable = 45;
    static readonly RULE_json_variables = 46;
    static readonly RULE_json_common_args = 47;
    static readonly RULE_json_case_handler = 48;
    static readonly RULE_json_value = 49;
    static readonly RULE_json_exists_handler = 50;
    static readonly RULE_json_exists = 51;
    static readonly RULE_json_query_wrapper = 52;
    static readonly RULE_json_query_handler = 53;
    static readonly RULE_json_query = 54;
    static readonly RULE_smart_parenthesis = 55;
    static readonly RULE_expr_list = 56;
    static readonly RULE_pure_column_list = 57;
    static readonly RULE_pure_column_or_named = 58;
    static readonly RULE_pure_column_or_named_list = 59;
    static readonly RULE_column_name = 60;
    static readonly RULE_without_column_name = 61;
    static readonly RULE_column_list = 62;
    static readonly RULE_without_column_list = 63;
    static readonly RULE_named_expr = 64;
    static readonly RULE_named_expr_list = 65;
    static readonly RULE_invoke_expr = 66;
    static readonly RULE_invoke_expr_tail = 67;
    static readonly RULE_using_call_expr = 68;
    static readonly RULE_key_expr = 69;
    static readonly RULE_when_expr = 70;
    static readonly RULE_literal_value = 71;
    static readonly RULE_bind_parameter = 72;
    static readonly RULE_opt_bind_parameter = 73;
    static readonly RULE_bind_parameter_list = 74;
    static readonly RULE_named_bind_parameter = 75;
    static readonly RULE_named_bind_parameter_list = 76;
    static readonly RULE_signed_number = 77;
    static readonly RULE_type_name_simple = 78;
    static readonly RULE_integer_or_bind = 79;
    static readonly RULE_type_name_tag = 80;
    static readonly RULE_struct_arg = 81;
    static readonly RULE_struct_arg_positional = 82;
    static readonly RULE_variant_arg = 83;
    static readonly RULE_callable_arg = 84;
    static readonly RULE_callable_arg_list = 85;
    static readonly RULE_type_name_decimal = 86;
    static readonly RULE_type_name_optional = 87;
    static readonly RULE_type_name_tuple = 88;
    static readonly RULE_type_name_struct = 89;
    static readonly RULE_type_name_variant = 90;
    static readonly RULE_type_name_list = 91;
    static readonly RULE_type_name_stream = 92;
    static readonly RULE_type_name_flow = 93;
    static readonly RULE_type_name_dict = 94;
    static readonly RULE_type_name_set = 95;
    static readonly RULE_type_name_enum = 96;
    static readonly RULE_type_name_resource = 97;
    static readonly RULE_type_name_tagged = 98;
    static readonly RULE_type_name_callable = 99;
    static readonly RULE_type_name_composite = 100;
    static readonly RULE_type_name = 101;
    static readonly RULE_type_name_or_bind = 102;
    static readonly RULE_value_constructor_literal = 103;
    static readonly RULE_value_constructor = 104;
    static readonly RULE_declare_stmt = 105;
    static readonly RULE_module_path = 106;
    static readonly RULE_import_stmt = 107;
    static readonly RULE_export_stmt = 108;
    static readonly RULE_call_action = 109;
    static readonly RULE_inline_action = 110;
    static readonly RULE_do_stmt = 111;
    static readonly RULE_pragma_stmt = 112;
    static readonly RULE_pragma_value = 113;
    static readonly RULE_sort_specification = 114;
    static readonly RULE_sort_specification_list = 115;
    static readonly RULE_select_stmt = 116;
    static readonly RULE_select_unparenthesized_stmt = 117;
    static readonly RULE_select_kind_parenthesis = 118;
    static readonly RULE_select_op = 119;
    static readonly RULE_select_kind_partial = 120;
    static readonly RULE_select_kind = 121;
    static readonly RULE_process_core = 122;
    static readonly RULE_external_call_param = 123;
    static readonly RULE_external_call_settings = 124;
    static readonly RULE_reduce_core = 125;
    static readonly RULE_opt_set_quantifier = 126;
    static readonly RULE_select_core = 127;
    static readonly RULE_row_pattern_recognition_clause = 128;
    static readonly RULE_row_pattern_rows_per_match = 129;
    static readonly RULE_row_pattern_empty_match_handling = 130;
    static readonly RULE_row_pattern_measures = 131;
    static readonly RULE_row_pattern_measure_list = 132;
    static readonly RULE_row_pattern_measure_definition = 133;
    static readonly RULE_row_pattern_common_syntax = 134;
    static readonly RULE_row_pattern_skip_to = 135;
    static readonly RULE_row_pattern_skip_to_variable_name = 136;
    static readonly RULE_row_pattern_initial_or_seek = 137;
    static readonly RULE_row_pattern = 138;
    static readonly RULE_row_pattern_term = 139;
    static readonly RULE_row_pattern_factor = 140;
    static readonly RULE_row_pattern_quantifier = 141;
    static readonly RULE_row_pattern_primary = 142;
    static readonly RULE_row_pattern_primary_variable_name = 143;
    static readonly RULE_row_pattern_permute = 144;
    static readonly RULE_row_pattern_subset_clause = 145;
    static readonly RULE_row_pattern_subset_list = 146;
    static readonly RULE_row_pattern_subset_item = 147;
    static readonly RULE_row_pattern_subset_item_variable_name = 148;
    static readonly RULE_row_pattern_subset_rhs = 149;
    static readonly RULE_row_pattern_subset_rhs_variable_name = 150;
    static readonly RULE_row_pattern_definition_list = 151;
    static readonly RULE_row_pattern_definition = 152;
    static readonly RULE_row_pattern_definition_variable_name = 153;
    static readonly RULE_row_pattern_definition_search_condition = 154;
    static readonly RULE_search_condition = 155;
    static readonly RULE_row_pattern_variable_name = 156;
    static readonly RULE_order_by_clause = 157;
    static readonly RULE_ext_order_by_clause = 158;
    static readonly RULE_group_by_clause = 159;
    static readonly RULE_grouping_element_list = 160;
    static readonly RULE_grouping_element = 161;
    static readonly RULE_ordinary_grouping_set = 162;
    static readonly RULE_ordinary_grouping_set_list = 163;
    static readonly RULE_rollup_list = 164;
    static readonly RULE_cube_list = 165;
    static readonly RULE_grouping_sets_specification = 166;
    static readonly RULE_hopping_window_specification = 167;
    static readonly RULE_result_column = 168;
    static readonly RULE_join_source = 169;
    static readonly RULE_named_column = 170;
    static readonly RULE_flatten_by_arg = 171;
    static readonly RULE_flatten_source = 172;
    static readonly RULE_named_single_source = 173;
    static readonly RULE_single_source = 174;
    static readonly RULE_sample_clause = 175;
    static readonly RULE_tablesample_clause = 176;
    static readonly RULE_sampling_mode = 177;
    static readonly RULE_repeatable_clause = 178;
    static readonly RULE_join_op = 179;
    static readonly RULE_join_constraint = 180;
    static readonly RULE_returning_columns_list = 181;
    static readonly RULE_into_table_stmt = 182;
    static readonly RULE_into_table_stmt_yq = 183;
    static readonly RULE_into_values_source = 184;
    static readonly RULE_values_stmt = 185;
    static readonly RULE_values_source = 186;
    static readonly RULE_values_source_row_list = 187;
    static readonly RULE_values_source_row = 188;
    static readonly RULE_simple_values_source = 189;
    static readonly RULE_create_external_data_source_stmt = 190;
    static readonly RULE_alter_external_data_source_stmt = 191;
    static readonly RULE_alter_external_data_source_action = 192;
    static readonly RULE_drop_external_data_source_stmt = 193;
    static readonly RULE_create_view_stmt = 194;
    static readonly RULE_drop_view_stmt = 195;
    static readonly RULE_upsert_object_stmt = 196;
    static readonly RULE_create_object_stmt = 197;
    static readonly RULE_create_object_features = 198;
    static readonly RULE_alter_object_stmt = 199;
    static readonly RULE_alter_object_features = 200;
    static readonly RULE_drop_object_stmt = 201;
    static readonly RULE_drop_object_features = 202;
    static readonly RULE_object_feature_value = 203;
    static readonly RULE_object_feature_kv = 204;
    static readonly RULE_object_feature_flag = 205;
    static readonly RULE_object_feature = 206;
    static readonly RULE_object_features = 207;
    static readonly RULE_object_type_ref = 208;
    static readonly RULE_create_table_stmt = 209;
    static readonly RULE_create_table_entry = 210;
    static readonly RULE_table_inherits = 211;
    static readonly RULE_table_partition_by = 212;
    static readonly RULE_with_table_settings = 213;
    static readonly RULE_table_tablestore = 214;
    static readonly RULE_table_settings_entry = 215;
    static readonly RULE_table_as_source = 216;
    static readonly RULE_alter_table_stmt = 217;
    static readonly RULE_alter_table_action = 218;
    static readonly RULE_alter_external_table_stmt = 219;
    static readonly RULE_alter_external_table_action = 220;
    static readonly RULE_alter_table_store_stmt = 221;
    static readonly RULE_alter_table_store_action = 222;
    static readonly RULE_alter_table_add_column = 223;
    static readonly RULE_alter_table_drop_column = 224;
    static readonly RULE_alter_table_alter_column = 225;
    static readonly RULE_alter_table_add_column_family = 226;
    static readonly RULE_alter_table_alter_column_family = 227;
    static readonly RULE_alter_table_set_table_setting_uncompat = 228;
    static readonly RULE_alter_table_set_table_setting_compat = 229;
    static readonly RULE_alter_table_reset_table_setting = 230;
    static readonly RULE_alter_table_add_index = 231;
    static readonly RULE_alter_table_drop_index = 232;
    static readonly RULE_alter_table_rename_to = 233;
    static readonly RULE_alter_table_rename_index_to = 234;
    static readonly RULE_alter_table_add_changefeed = 235;
    static readonly RULE_alter_table_alter_changefeed = 236;
    static readonly RULE_alter_table_drop_changefeed = 237;
    static readonly RULE_column_schema = 238;
    static readonly RULE_family_relation = 239;
    static readonly RULE_opt_column_constraints = 240;
    static readonly RULE_column_order_by_specification = 241;
    static readonly RULE_table_constraint = 242;
    static readonly RULE_table_index = 243;
    static readonly RULE_table_index_type = 244;
    static readonly RULE_global_index = 245;
    static readonly RULE_local_index = 246;
    static readonly RULE_changefeed = 247;
    static readonly RULE_changefeed_settings = 248;
    static readonly RULE_changefeed_settings_entry = 249;
    static readonly RULE_changefeed_setting_value = 250;
    static readonly RULE_changefeed_alter_settings = 251;
    static readonly RULE_alter_table_setting_entry = 252;
    static readonly RULE_table_setting_value = 253;
    static readonly RULE_family_entry = 254;
    static readonly RULE_family_settings = 255;
    static readonly RULE_family_settings_entry = 256;
    static readonly RULE_family_setting_value = 257;
    static readonly RULE_split_boundaries = 258;
    static readonly RULE_literal_value_list = 259;
    static readonly RULE_drop_table_stmt = 260;
    static readonly RULE_create_user_stmt = 261;
    static readonly RULE_alter_user_stmt = 262;
    static readonly RULE_create_group_stmt = 263;
    static readonly RULE_alter_group_stmt = 264;
    static readonly RULE_drop_role_stmt = 265;
    static readonly RULE_role_name = 266;
    static readonly RULE_create_user_option = 267;
    static readonly RULE_grant_permissions_stmt = 268;
    static readonly RULE_revoke_permissions_stmt = 269;
    static readonly RULE_permission_id = 270;
    static readonly RULE_permission_name = 271;
    static readonly RULE_permission_name_target = 272;
    static readonly RULE_create_replication_stmt = 273;
    static readonly RULE_replication_target = 274;
    static readonly RULE_replication_settings = 275;
    static readonly RULE_replication_settings_entry = 276;
    static readonly RULE_alter_replication_stmt = 277;
    static readonly RULE_alter_replication_action = 278;
    static readonly RULE_alter_replication_set_setting = 279;
    static readonly RULE_drop_replication_stmt = 280;
    static readonly RULE_action_or_subquery_args = 281;
    static readonly RULE_define_action_or_subquery_stmt = 282;
    static readonly RULE_define_action_or_subquery_body = 283;
    static readonly RULE_if_stmt = 284;
    static readonly RULE_for_stmt = 285;
    static readonly RULE_table_ref = 286;
    static readonly RULE_table_key = 287;
    static readonly RULE_table_arg = 288;
    static readonly RULE_table_hints = 289;
    static readonly RULE_table_hint = 290;
    static readonly RULE_object_ref = 291;
    static readonly RULE_simple_table_ref_core = 292;
    static readonly RULE_simple_table_ref = 293;
    static readonly RULE_into_simple_table_ref = 294;
    static readonly RULE_delete_stmt = 295;
    static readonly RULE_update_stmt = 296;
    static readonly RULE_set_clause_choice = 297;
    static readonly RULE_set_clause_list = 298;
    static readonly RULE_set_clause = 299;
    static readonly RULE_set_target = 300;
    static readonly RULE_multiple_column_assignment = 301;
    static readonly RULE_set_target_list = 302;
    static readonly RULE_create_topic_stmt = 303;
    static readonly RULE_create_topic_entries = 304;
    static readonly RULE_create_topic_entry = 305;
    static readonly RULE_with_topic_settings = 306;
    static readonly RULE_alter_topic_stmt = 307;
    static readonly RULE_alter_topic_action = 308;
    static readonly RULE_alter_topic_add_consumer = 309;
    static readonly RULE_topic_create_consumer_entry = 310;
    static readonly RULE_alter_topic_alter_consumer = 311;
    static readonly RULE_alter_topic_alter_consumer_entry = 312;
    static readonly RULE_alter_topic_drop_consumer = 313;
    static readonly RULE_topic_alter_consumer_set = 314;
    static readonly RULE_topic_alter_consumer_reset = 315;
    static readonly RULE_alter_topic_set_settings = 316;
    static readonly RULE_alter_topic_reset_settings = 317;
    static readonly RULE_drop_topic_stmt = 318;
    static readonly RULE_topic_settings = 319;
    static readonly RULE_topic_settings_entry = 320;
    static readonly RULE_topic_setting_value = 321;
    static readonly RULE_topic_consumer_with_settings = 322;
    static readonly RULE_topic_consumer_settings = 323;
    static readonly RULE_topic_consumer_settings_entry = 324;
    static readonly RULE_topic_consumer_setting_value = 325;
    static readonly RULE_topic_ref = 326;
    static readonly RULE_topic_consumer_ref = 327;
    static readonly RULE_null_treatment = 328;
    static readonly RULE_filter_clause = 329;
    static readonly RULE_window_name_or_specification = 330;
    static readonly RULE_window_name = 331;
    static readonly RULE_window_clause = 332;
    static readonly RULE_window_definition_list = 333;
    static readonly RULE_window_definition = 334;
    static readonly RULE_new_window_name = 335;
    static readonly RULE_window_specification = 336;
    static readonly RULE_window_specification_details = 337;
    static readonly RULE_existing_window_name = 338;
    static readonly RULE_window_partition_clause = 339;
    static readonly RULE_window_order_clause = 340;
    static readonly RULE_window_frame_clause = 341;
    static readonly RULE_window_frame_units = 342;
    static readonly RULE_window_frame_extent = 343;
    static readonly RULE_window_frame_between = 344;
    static readonly RULE_window_frame_bound = 345;
    static readonly RULE_window_frame_exclusion = 346;
    static readonly RULE_use_stmt = 347;
    static readonly RULE_subselect_stmt = 348;
    static readonly RULE_named_nodes_stmt = 349;
    static readonly RULE_commit_stmt = 350;
    static readonly RULE_rollback_stmt = 351;
    static readonly RULE_identifier = 352;
    static readonly RULE_id = 353;
    static readonly RULE_id_schema = 354;
    static readonly RULE_id_expr = 355;
    static readonly RULE_id_expr_in = 356;
    static readonly RULE_id_window = 357;
    static readonly RULE_id_table = 358;
    static readonly RULE_id_without = 359;
    static readonly RULE_id_hint = 360;
    static readonly RULE_id_as_compat = 361;
    static readonly RULE_an_id = 362;
    static readonly RULE_an_id_or_type = 363;
    static readonly RULE_an_id_schema = 364;
    static readonly RULE_an_id_expr = 365;
    static readonly RULE_an_id_expr_in = 366;
    static readonly RULE_an_id_window = 367;
    static readonly RULE_an_id_table = 368;
    static readonly RULE_an_id_without = 369;
    static readonly RULE_an_id_hint = 370;
    static readonly RULE_an_id_pure = 371;
    static readonly RULE_an_id_as_compat = 372;
    static readonly RULE_view_name = 373;
    static readonly RULE_opt_id_prefix = 374;
    static readonly RULE_cluster_expr = 375;
    static readonly RULE_id_or_type = 376;
    static readonly RULE_opt_id_prefix_or_type = 377;
    static readonly RULE_id_or_at = 378;
    static readonly RULE_id_table_or_type = 379;
    static readonly RULE_id_table_or_at = 380;
    static readonly RULE_keyword = 381;
    static readonly RULE_keyword_expr_uncompat = 382;
    static readonly RULE_keyword_table_uncompat = 383;
    static readonly RULE_keyword_select_uncompat = 384;
    static readonly RULE_keyword_alter_uncompat = 385;
    static readonly RULE_keyword_in_uncompat = 386;
    static readonly RULE_keyword_window_uncompat = 387;
    static readonly RULE_keyword_hint_uncompat = 388;
    static readonly RULE_keyword_as_compat = 389;
    static readonly RULE_keyword_compat = 390;
    static readonly RULE_type_id = 391;
    static readonly RULE_bool_value = 392;
    static readonly RULE_real = 393;
    static readonly RULE_integer = 394;
    static readonly RULE_sql_query_yq = 395;
    static readonly RULE_sql_stmt_list_yq = 396;
    static readonly RULE_sql_stmt_yq = 397;
    static readonly RULE_sql_stmt_core_yq = 398;
    static readonly RULE_replication_name = 399;
    static readonly RULE_where_expr = 400;
    static readonly RULE_from_stmt = 401;
    static readonly RULE_alter_table_for_autocomplete = 402;
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly ruleNames: string[];
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException;
    constructor(input: antlr.TokenStream);
    sql_query(): Sql_queryContext;
    sql_stmt_list(): Sql_stmt_listContext;
    ansi_sql_stmt_list(): Ansi_sql_stmt_listContext;
    lambda_body(): Lambda_bodyContext;
    lambda_stmt(): Lambda_stmtContext;
    sql_stmt(): Sql_stmtContext;
    sql_stmt_core(): Sql_stmt_coreContext;
    expr(): ExprContext;
    or_subexpr(): Or_subexprContext;
    and_subexpr(): And_subexprContext;
    xor_subexpr(): Xor_subexprContext;
    distinct_from_op(): Distinct_from_opContext;
    cond_expr(): Cond_exprContext;
    match_op(): Match_opContext;
    eq_subexpr(): Eq_subexprContext;
    shift_right(): Shift_rightContext;
    rot_right(): Rot_rightContext;
    double_question(): Double_questionContext;
    neq_subexpr(): Neq_subexprContext;
    bit_subexpr(): Bit_subexprContext;
    add_subexpr(): Add_subexprContext;
    mul_subexpr(): Mul_subexprContext;
    con_subexpr(): Con_subexprContext;
    unary_op(): Unary_opContext;
    unary_subexpr_suffix(): Unary_subexpr_suffixContext;
    unary_casual_subexpr(): Unary_casual_subexprContext;
    in_unary_casual_subexpr(): In_unary_casual_subexprContext;
    unary_subexpr(): Unary_subexprContext;
    in_unary_subexpr(): In_unary_subexprContext;
    list_literal(): List_literalContext;
    expr_dict_list(): Expr_dict_listContext;
    dict_literal(): Dict_literalContext;
    expr_struct_list(): Expr_struct_listContext;
    struct_literal(): Struct_literalContext;
    atom_expr(): Atom_exprContext;
    in_atom_expr(): In_atom_exprContext;
    cast_expr(): Cast_exprContext;
    bitcast_expr(): Bitcast_exprContext;
    exists_expr(): Exists_exprContext;
    case_expr(): Case_exprContext;
    lambda(): LambdaContext;
    in_expr(): In_exprContext;
    json_api_expr(): Json_api_exprContext;
    jsonpath_spec(): Jsonpath_specContext;
    json_variable_name(): Json_variable_nameContext;
    json_variable(): Json_variableContext;
    json_variables(): Json_variablesContext;
    json_common_args(): Json_common_argsContext;
    json_case_handler(): Json_case_handlerContext;
    json_value(): Json_valueContext;
    json_exists_handler(): Json_exists_handlerContext;
    json_exists(): Json_existsContext;
    json_query_wrapper(): Json_query_wrapperContext;
    json_query_handler(): Json_query_handlerContext;
    json_query(): Json_queryContext;
    smart_parenthesis(): Smart_parenthesisContext;
    expr_list(): Expr_listContext;
    pure_column_list(): Pure_column_listContext;
    pure_column_or_named(): Pure_column_or_namedContext;
    pure_column_or_named_list(): Pure_column_or_named_listContext;
    column_name(): Column_nameContext;
    without_column_name(): Without_column_nameContext;
    column_list(): Column_listContext;
    without_column_list(): Without_column_listContext;
    named_expr(): Named_exprContext;
    named_expr_list(): Named_expr_listContext;
    invoke_expr(): Invoke_exprContext;
    invoke_expr_tail(): Invoke_expr_tailContext;
    using_call_expr(): Using_call_exprContext;
    key_expr(): Key_exprContext;
    when_expr(): When_exprContext;
    literal_value(): Literal_valueContext;
    bind_parameter(): Bind_parameterContext;
    opt_bind_parameter(): Opt_bind_parameterContext;
    bind_parameter_list(): Bind_parameter_listContext;
    named_bind_parameter(): Named_bind_parameterContext;
    named_bind_parameter_list(): Named_bind_parameter_listContext;
    signed_number(): Signed_numberContext;
    type_name_simple(): Type_name_simpleContext;
    integer_or_bind(): Integer_or_bindContext;
    type_name_tag(): Type_name_tagContext;
    struct_arg(): Struct_argContext;
    struct_arg_positional(): Struct_arg_positionalContext;
    variant_arg(): Variant_argContext;
    callable_arg(): Callable_argContext;
    callable_arg_list(): Callable_arg_listContext;
    type_name_decimal(): Type_name_decimalContext;
    type_name_optional(): Type_name_optionalContext;
    type_name_tuple(): Type_name_tupleContext;
    type_name_struct(): Type_name_structContext;
    type_name_variant(): Type_name_variantContext;
    type_name_list(): Type_name_listContext;
    type_name_stream(): Type_name_streamContext;
    type_name_flow(): Type_name_flowContext;
    type_name_dict(): Type_name_dictContext;
    type_name_set(): Type_name_setContext;
    type_name_enum(): Type_name_enumContext;
    type_name_resource(): Type_name_resourceContext;
    type_name_tagged(): Type_name_taggedContext;
    type_name_callable(): Type_name_callableContext;
    type_name_composite(): Type_name_compositeContext;
    type_name(): Type_nameContext;
    type_name_or_bind(): Type_name_or_bindContext;
    value_constructor_literal(): Value_constructor_literalContext;
    value_constructor(): Value_constructorContext;
    declare_stmt(): Declare_stmtContext;
    module_path(): Module_pathContext;
    import_stmt(): Import_stmtContext;
    export_stmt(): Export_stmtContext;
    call_action(): Call_actionContext;
    inline_action(): Inline_actionContext;
    do_stmt(): Do_stmtContext;
    pragma_stmt(): Pragma_stmtContext;
    pragma_value(): Pragma_valueContext;
    sort_specification(): Sort_specificationContext;
    sort_specification_list(): Sort_specification_listContext;
    select_stmt(): Select_stmtContext;
    select_unparenthesized_stmt(): Select_unparenthesized_stmtContext;
    select_kind_parenthesis(): Select_kind_parenthesisContext;
    select_op(): Select_opContext;
    select_kind_partial(): Select_kind_partialContext;
    select_kind(): Select_kindContext;
    process_core(): Process_coreContext;
    external_call_param(): External_call_paramContext;
    external_call_settings(): External_call_settingsContext;
    reduce_core(): Reduce_coreContext;
    opt_set_quantifier(): Opt_set_quantifierContext;
    select_core(): Select_coreContext;
    row_pattern_recognition_clause(): Row_pattern_recognition_clauseContext;
    row_pattern_rows_per_match(): Row_pattern_rows_per_matchContext;
    row_pattern_empty_match_handling(): Row_pattern_empty_match_handlingContext;
    row_pattern_measures(): Row_pattern_measuresContext;
    row_pattern_measure_list(): Row_pattern_measure_listContext;
    row_pattern_measure_definition(): Row_pattern_measure_definitionContext;
    row_pattern_common_syntax(): Row_pattern_common_syntaxContext;
    row_pattern_skip_to(): Row_pattern_skip_toContext;
    row_pattern_skip_to_variable_name(): Row_pattern_skip_to_variable_nameContext;
    row_pattern_initial_or_seek(): Row_pattern_initial_or_seekContext;
    row_pattern(): Row_patternContext;
    row_pattern_term(): Row_pattern_termContext;
    row_pattern_factor(): Row_pattern_factorContext;
    row_pattern_quantifier(): Row_pattern_quantifierContext;
    row_pattern_primary(): Row_pattern_primaryContext;
    row_pattern_primary_variable_name(): Row_pattern_primary_variable_nameContext;
    row_pattern_permute(): Row_pattern_permuteContext;
    row_pattern_subset_clause(): Row_pattern_subset_clauseContext;
    row_pattern_subset_list(): Row_pattern_subset_listContext;
    row_pattern_subset_item(): Row_pattern_subset_itemContext;
    row_pattern_subset_item_variable_name(): Row_pattern_subset_item_variable_nameContext;
    row_pattern_subset_rhs(): Row_pattern_subset_rhsContext;
    row_pattern_subset_rhs_variable_name(): Row_pattern_subset_rhs_variable_nameContext;
    row_pattern_definition_list(): Row_pattern_definition_listContext;
    row_pattern_definition(): Row_pattern_definitionContext;
    row_pattern_definition_variable_name(): Row_pattern_definition_variable_nameContext;
    row_pattern_definition_search_condition(): Row_pattern_definition_search_conditionContext;
    search_condition(): Search_conditionContext;
    row_pattern_variable_name(): Row_pattern_variable_nameContext;
    order_by_clause(): Order_by_clauseContext;
    ext_order_by_clause(): Ext_order_by_clauseContext;
    group_by_clause(): Group_by_clauseContext;
    grouping_element_list(): Grouping_element_listContext;
    grouping_element(): Grouping_elementContext;
    ordinary_grouping_set(): Ordinary_grouping_setContext;
    ordinary_grouping_set_list(): Ordinary_grouping_set_listContext;
    rollup_list(): Rollup_listContext;
    cube_list(): Cube_listContext;
    grouping_sets_specification(): Grouping_sets_specificationContext;
    hopping_window_specification(): Hopping_window_specificationContext;
    result_column(): Result_columnContext;
    join_source(): Join_sourceContext;
    named_column(): Named_columnContext;
    flatten_by_arg(): Flatten_by_argContext;
    flatten_source(): Flatten_sourceContext;
    named_single_source(): Named_single_sourceContext;
    single_source(): Single_sourceContext;
    sample_clause(): Sample_clauseContext;
    tablesample_clause(): Tablesample_clauseContext;
    sampling_mode(): Sampling_modeContext;
    repeatable_clause(): Repeatable_clauseContext;
    join_op(): Join_opContext;
    join_constraint(): Join_constraintContext;
    returning_columns_list(): Returning_columns_listContext;
    into_table_stmt(): Into_table_stmtContext;
    into_table_stmt_yq(): Into_table_stmt_yqContext;
    into_values_source(): Into_values_sourceContext;
    values_stmt(): Values_stmtContext;
    values_source(): Values_sourceContext;
    values_source_row_list(): Values_source_row_listContext;
    values_source_row(): Values_source_rowContext;
    simple_values_source(): Simple_values_sourceContext;
    create_external_data_source_stmt(): Create_external_data_source_stmtContext;
    alter_external_data_source_stmt(): Alter_external_data_source_stmtContext;
    alter_external_data_source_action(): Alter_external_data_source_actionContext;
    drop_external_data_source_stmt(): Drop_external_data_source_stmtContext;
    create_view_stmt(): Create_view_stmtContext;
    drop_view_stmt(): Drop_view_stmtContext;
    upsert_object_stmt(): Upsert_object_stmtContext;
    create_object_stmt(): Create_object_stmtContext;
    create_object_features(): Create_object_featuresContext;
    alter_object_stmt(): Alter_object_stmtContext;
    alter_object_features(): Alter_object_featuresContext;
    drop_object_stmt(): Drop_object_stmtContext;
    drop_object_features(): Drop_object_featuresContext;
    object_feature_value(): Object_feature_valueContext;
    object_feature_kv(): Object_feature_kvContext;
    object_feature_flag(): Object_feature_flagContext;
    object_feature(): Object_featureContext;
    object_features(): Object_featuresContext;
    object_type_ref(): Object_type_refContext;
    create_table_stmt(): Create_table_stmtContext;
    create_table_entry(): Create_table_entryContext;
    table_inherits(): Table_inheritsContext;
    table_partition_by(): Table_partition_byContext;
    with_table_settings(): With_table_settingsContext;
    table_tablestore(): Table_tablestoreContext;
    table_settings_entry(): Table_settings_entryContext;
    table_as_source(): Table_as_sourceContext;
    alter_table_stmt(): Alter_table_stmtContext;
    alter_table_action(): Alter_table_actionContext;
    alter_external_table_stmt(): Alter_external_table_stmtContext;
    alter_external_table_action(): Alter_external_table_actionContext;
    alter_table_store_stmt(): Alter_table_store_stmtContext;
    alter_table_store_action(): Alter_table_store_actionContext;
    alter_table_add_column(): Alter_table_add_columnContext;
    alter_table_drop_column(): Alter_table_drop_columnContext;
    alter_table_alter_column(): Alter_table_alter_columnContext;
    alter_table_add_column_family(): Alter_table_add_column_familyContext;
    alter_table_alter_column_family(): Alter_table_alter_column_familyContext;
    alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext;
    alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext;
    alter_table_reset_table_setting(): Alter_table_reset_table_settingContext;
    alter_table_add_index(): Alter_table_add_indexContext;
    alter_table_drop_index(): Alter_table_drop_indexContext;
    alter_table_rename_to(): Alter_table_rename_toContext;
    alter_table_rename_index_to(): Alter_table_rename_index_toContext;
    alter_table_add_changefeed(): Alter_table_add_changefeedContext;
    alter_table_alter_changefeed(): Alter_table_alter_changefeedContext;
    alter_table_drop_changefeed(): Alter_table_drop_changefeedContext;
    column_schema(): Column_schemaContext;
    family_relation(): Family_relationContext;
    opt_column_constraints(): Opt_column_constraintsContext;
    column_order_by_specification(): Column_order_by_specificationContext;
    table_constraint(): Table_constraintContext;
    table_index(): Table_indexContext;
    table_index_type(): Table_index_typeContext;
    global_index(): Global_indexContext;
    local_index(): Local_indexContext;
    changefeed(): ChangefeedContext;
    changefeed_settings(): Changefeed_settingsContext;
    changefeed_settings_entry(): Changefeed_settings_entryContext;
    changefeed_setting_value(): Changefeed_setting_valueContext;
    changefeed_alter_settings(): Changefeed_alter_settingsContext;
    alter_table_setting_entry(): Alter_table_setting_entryContext;
    table_setting_value(): Table_setting_valueContext;
    family_entry(): Family_entryContext;
    family_settings(): Family_settingsContext;
    family_settings_entry(): Family_settings_entryContext;
    family_setting_value(): Family_setting_valueContext;
    split_boundaries(): Split_boundariesContext;
    literal_value_list(): Literal_value_listContext;
    drop_table_stmt(): Drop_table_stmtContext;
    create_user_stmt(): Create_user_stmtContext;
    alter_user_stmt(): Alter_user_stmtContext;
    create_group_stmt(): Create_group_stmtContext;
    alter_group_stmt(): Alter_group_stmtContext;
    drop_role_stmt(): Drop_role_stmtContext;
    role_name(): Role_nameContext;
    create_user_option(): Create_user_optionContext;
    grant_permissions_stmt(): Grant_permissions_stmtContext;
    revoke_permissions_stmt(): Revoke_permissions_stmtContext;
    permission_id(): Permission_idContext;
    permission_name(): Permission_nameContext;
    permission_name_target(): Permission_name_targetContext;
    create_replication_stmt(): Create_replication_stmtContext;
    replication_target(): Replication_targetContext;
    replication_settings(): Replication_settingsContext;
    replication_settings_entry(): Replication_settings_entryContext;
    alter_replication_stmt(): Alter_replication_stmtContext;
    alter_replication_action(): Alter_replication_actionContext;
    alter_replication_set_setting(): Alter_replication_set_settingContext;
    drop_replication_stmt(): Drop_replication_stmtContext;
    action_or_subquery_args(): Action_or_subquery_argsContext;
    define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext;
    define_action_or_subquery_body(): Define_action_or_subquery_bodyContext;
    if_stmt(): If_stmtContext;
    for_stmt(): For_stmtContext;
    table_ref(): Table_refContext;
    table_key(): Table_keyContext;
    table_arg(): Table_argContext;
    table_hints(): Table_hintsContext;
    table_hint(): Table_hintContext;
    object_ref(): Object_refContext;
    simple_table_ref_core(): Simple_table_ref_coreContext;
    simple_table_ref(): Simple_table_refContext;
    into_simple_table_ref(): Into_simple_table_refContext;
    delete_stmt(): Delete_stmtContext;
    update_stmt(): Update_stmtContext;
    set_clause_choice(): Set_clause_choiceContext;
    set_clause_list(): Set_clause_listContext;
    set_clause(): Set_clauseContext;
    set_target(): Set_targetContext;
    multiple_column_assignment(): Multiple_column_assignmentContext;
    set_target_list(): Set_target_listContext;
    create_topic_stmt(): Create_topic_stmtContext;
    create_topic_entries(): Create_topic_entriesContext;
    create_topic_entry(): Create_topic_entryContext;
    with_topic_settings(): With_topic_settingsContext;
    alter_topic_stmt(): Alter_topic_stmtContext;
    alter_topic_action(): Alter_topic_actionContext;
    alter_topic_add_consumer(): Alter_topic_add_consumerContext;
    topic_create_consumer_entry(): Topic_create_consumer_entryContext;
    alter_topic_alter_consumer(): Alter_topic_alter_consumerContext;
    alter_topic_alter_consumer_entry(): Alter_topic_alter_consumer_entryContext;
    alter_topic_drop_consumer(): Alter_topic_drop_consumerContext;
    topic_alter_consumer_set(): Topic_alter_consumer_setContext;
    topic_alter_consumer_reset(): Topic_alter_consumer_resetContext;
    alter_topic_set_settings(): Alter_topic_set_settingsContext;
    alter_topic_reset_settings(): Alter_topic_reset_settingsContext;
    drop_topic_stmt(): Drop_topic_stmtContext;
    topic_settings(): Topic_settingsContext;
    topic_settings_entry(): Topic_settings_entryContext;
    topic_setting_value(): Topic_setting_valueContext;
    topic_consumer_with_settings(): Topic_consumer_with_settingsContext;
    topic_consumer_settings(): Topic_consumer_settingsContext;
    topic_consumer_settings_entry(): Topic_consumer_settings_entryContext;
    topic_consumer_setting_value(): Topic_consumer_setting_valueContext;
    topic_ref(): Topic_refContext;
    topic_consumer_ref(): Topic_consumer_refContext;
    null_treatment(): Null_treatmentContext;
    filter_clause(): Filter_clauseContext;
    window_name_or_specification(): Window_name_or_specificationContext;
    window_name(): Window_nameContext;
    window_clause(): Window_clauseContext;
    window_definition_list(): Window_definition_listContext;
    window_definition(): Window_definitionContext;
    new_window_name(): New_window_nameContext;
    window_specification(): Window_specificationContext;
    window_specification_details(): Window_specification_detailsContext;
    existing_window_name(): Existing_window_nameContext;
    window_partition_clause(): Window_partition_clauseContext;
    window_order_clause(): Window_order_clauseContext;
    window_frame_clause(): Window_frame_clauseContext;
    window_frame_units(): Window_frame_unitsContext;
    window_frame_extent(): Window_frame_extentContext;
    window_frame_between(): Window_frame_betweenContext;
    window_frame_bound(): Window_frame_boundContext;
    window_frame_exclusion(): Window_frame_exclusionContext;
    use_stmt(): Use_stmtContext;
    subselect_stmt(): Subselect_stmtContext;
    named_nodes_stmt(): Named_nodes_stmtContext;
    commit_stmt(): Commit_stmtContext;
    rollback_stmt(): Rollback_stmtContext;
    identifier(): IdentifierContext;
    id(): IdContext;
    id_schema(): Id_schemaContext;
    id_expr(): Id_exprContext;
    id_expr_in(): Id_expr_inContext;
    id_window(): Id_windowContext;
    id_table(): Id_tableContext;
    id_without(): Id_withoutContext;
    id_hint(): Id_hintContext;
    id_as_compat(): Id_as_compatContext;
    an_id(): An_idContext;
    an_id_or_type(): An_id_or_typeContext;
    an_id_schema(): An_id_schemaContext;
    an_id_expr(): An_id_exprContext;
    an_id_expr_in(): An_id_expr_inContext;
    an_id_window(): An_id_windowContext;
    an_id_table(): An_id_tableContext;
    an_id_without(): An_id_withoutContext;
    an_id_hint(): An_id_hintContext;
    an_id_pure(): An_id_pureContext;
    an_id_as_compat(): An_id_as_compatContext;
    view_name(): View_nameContext;
    opt_id_prefix(): Opt_id_prefixContext;
    cluster_expr(): Cluster_exprContext;
    id_or_type(): Id_or_typeContext;
    opt_id_prefix_or_type(): Opt_id_prefix_or_typeContext;
    id_or_at(): Id_or_atContext;
    id_table_or_type(): Id_table_or_typeContext;
    id_table_or_at(): Id_table_or_atContext;
    keyword(): KeywordContext;
    keyword_expr_uncompat(): Keyword_expr_uncompatContext;
    keyword_table_uncompat(): Keyword_table_uncompatContext;
    keyword_select_uncompat(): Keyword_select_uncompatContext;
    keyword_alter_uncompat(): Keyword_alter_uncompatContext;
    keyword_in_uncompat(): Keyword_in_uncompatContext;
    keyword_window_uncompat(): Keyword_window_uncompatContext;
    keyword_hint_uncompat(): Keyword_hint_uncompatContext;
    keyword_as_compat(): Keyword_as_compatContext;
    keyword_compat(): Keyword_compatContext;
    type_id(): Type_idContext;
    bool_value(): Bool_valueContext;
    real(): RealContext;
    integer(): IntegerContext;
    sql_query_yq(): Sql_query_yqContext;
    sql_stmt_list_yq(): Sql_stmt_list_yqContext;
    sql_stmt_yq(): Sql_stmt_yqContext;
    sql_stmt_core_yq(): Sql_stmt_core_yqContext;
    replication_name(): Replication_nameContext;
    where_expr(): Where_exprContext;
    from_stmt(): From_stmtContext;
    alter_table_for_autocomplete(): Alter_table_for_autocompleteContext;
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): antlr.ATN;
    private static readonly vocabulary;
    get vocabulary(): antlr.Vocabulary;
    private static readonly decisionsToDFA;
}
export declare class Sql_queryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sql_stmt_list(): Sql_stmt_listContext | null;
    PRAGMA(): antlr.TerminalNode | null;
    ANSI(): antlr.TerminalNode | null;
    DIGITS(): antlr.TerminalNode | null;
    ansi_sql_stmt_list(): Ansi_sql_stmt_listContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sql_stmt_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sql_stmt(): Sql_stmtContext[];
    sql_stmt(i: number): Sql_stmtContext | null;
    EOF(): antlr.TerminalNode;
    SEMICOLON(): antlr.TerminalNode[];
    SEMICOLON(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Ansi_sql_stmt_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EOF(): antlr.TerminalNode;
    SEMICOLON(): antlr.TerminalNode[];
    SEMICOLON(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Lambda_bodyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RETURN(): antlr.TerminalNode;
    expr(): ExprContext;
    SEMICOLON(): antlr.TerminalNode[];
    SEMICOLON(i: number): antlr.TerminalNode | null;
    lambda_stmt(): Lambda_stmtContext[];
    lambda_stmt(i: number): Lambda_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Lambda_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    named_nodes_stmt(): Named_nodes_stmtContext | null;
    import_stmt(): Import_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sql_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sql_stmt_core(): Sql_stmt_coreContext;
    EXPLAIN(): antlr.TerminalNode | null;
    QUERY(): antlr.TerminalNode | null;
    PLAN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sql_stmt_coreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    pragma_stmt(): Pragma_stmtContext | null;
    select_stmt(): Select_stmtContext | null;
    named_nodes_stmt(): Named_nodes_stmtContext | null;
    create_table_stmt(): Create_table_stmtContext | null;
    drop_table_stmt(): Drop_table_stmtContext | null;
    use_stmt(): Use_stmtContext | null;
    into_table_stmt(): Into_table_stmtContext | null;
    commit_stmt(): Commit_stmtContext | null;
    update_stmt(): Update_stmtContext | null;
    delete_stmt(): Delete_stmtContext | null;
    rollback_stmt(): Rollback_stmtContext | null;
    declare_stmt(): Declare_stmtContext | null;
    import_stmt(): Import_stmtContext | null;
    export_stmt(): Export_stmtContext | null;
    alter_table_stmt(): Alter_table_stmtContext | null;
    alter_external_table_stmt(): Alter_external_table_stmtContext | null;
    do_stmt(): Do_stmtContext | null;
    define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext | null;
    if_stmt(): If_stmtContext | null;
    for_stmt(): For_stmtContext | null;
    values_stmt(): Values_stmtContext | null;
    create_user_stmt(): Create_user_stmtContext | null;
    alter_user_stmt(): Alter_user_stmtContext | null;
    create_group_stmt(): Create_group_stmtContext | null;
    alter_group_stmt(): Alter_group_stmtContext | null;
    drop_role_stmt(): Drop_role_stmtContext | null;
    create_object_stmt(): Create_object_stmtContext | null;
    alter_object_stmt(): Alter_object_stmtContext | null;
    drop_object_stmt(): Drop_object_stmtContext | null;
    create_external_data_source_stmt(): Create_external_data_source_stmtContext | null;
    alter_external_data_source_stmt(): Alter_external_data_source_stmtContext | null;
    drop_external_data_source_stmt(): Drop_external_data_source_stmtContext | null;
    create_replication_stmt(): Create_replication_stmtContext | null;
    drop_replication_stmt(): Drop_replication_stmtContext | null;
    create_topic_stmt(): Create_topic_stmtContext | null;
    alter_topic_stmt(): Alter_topic_stmtContext | null;
    drop_topic_stmt(): Drop_topic_stmtContext | null;
    grant_permissions_stmt(): Grant_permissions_stmtContext | null;
    revoke_permissions_stmt(): Revoke_permissions_stmtContext | null;
    alter_table_store_stmt(): Alter_table_store_stmtContext | null;
    upsert_object_stmt(): Upsert_object_stmtContext | null;
    create_view_stmt(): Create_view_stmtContext | null;
    drop_view_stmt(): Drop_view_stmtContext | null;
    alter_replication_stmt(): Alter_replication_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class ExprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    or_subexpr(): Or_subexprContext[];
    or_subexpr(i: number): Or_subexprContext | null;
    OR(): antlr.TerminalNode[];
    OR(i: number): antlr.TerminalNode | null;
    type_name_composite(): Type_name_compositeContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Or_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    and_subexpr(): And_subexprContext[];
    and_subexpr(i: number): And_subexprContext | null;
    AND(): antlr.TerminalNode[];
    AND(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class And_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    xor_subexpr(): Xor_subexprContext[];
    xor_subexpr(i: number): Xor_subexprContext | null;
    XOR(): antlr.TerminalNode[];
    XOR(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Xor_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    eq_subexpr(): Eq_subexprContext;
    cond_expr(): Cond_exprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Distinct_from_opContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IS(): antlr.TerminalNode;
    DISTINCT(): antlr.TerminalNode;
    FROM(): antlr.TerminalNode;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Cond_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    match_op(): Match_opContext | null;
    eq_subexpr(): Eq_subexprContext[];
    eq_subexpr(i: number): Eq_subexprContext | null;
    NOT(): antlr.TerminalNode | null;
    ESCAPE(): antlr.TerminalNode | null;
    IN(): antlr.TerminalNode | null;
    in_expr(): In_exprContext | null;
    COMPACT(): antlr.TerminalNode | null;
    ISNULL(): antlr.TerminalNode | null;
    NOTNULL(): antlr.TerminalNode | null;
    IS(): antlr.TerminalNode | null;
    NULL(): antlr.TerminalNode | null;
    BETWEEN(): antlr.TerminalNode | null;
    AND(): antlr.TerminalNode | null;
    SYMMETRIC(): antlr.TerminalNode | null;
    ASYMMETRIC(): antlr.TerminalNode | null;
    EQUALS(): antlr.TerminalNode[];
    EQUALS(i: number): antlr.TerminalNode | null;
    EQUALS2(): antlr.TerminalNode[];
    EQUALS2(i: number): antlr.TerminalNode | null;
    NOT_EQUALS(): antlr.TerminalNode[];
    NOT_EQUALS(i: number): antlr.TerminalNode | null;
    NOT_EQUALS2(): antlr.TerminalNode[];
    NOT_EQUALS2(i: number): antlr.TerminalNode | null;
    distinct_from_op(): Distinct_from_opContext[];
    distinct_from_op(i: number): Distinct_from_opContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Match_opContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LIKE(): antlr.TerminalNode | null;
    ILIKE(): antlr.TerminalNode | null;
    GLOB(): antlr.TerminalNode | null;
    REGEXP(): antlr.TerminalNode | null;
    RLIKE(): antlr.TerminalNode | null;
    MATCH(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Eq_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    neq_subexpr(): Neq_subexprContext[];
    neq_subexpr(i: number): Neq_subexprContext | null;
    LESS(): antlr.TerminalNode[];
    LESS(i: number): antlr.TerminalNode | null;
    LESS_OR_EQ(): antlr.TerminalNode[];
    LESS_OR_EQ(i: number): antlr.TerminalNode | null;
    GREATER(): antlr.TerminalNode[];
    GREATER(i: number): antlr.TerminalNode | null;
    GREATER_OR_EQ(): antlr.TerminalNode[];
    GREATER_OR_EQ(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Shift_rightContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GREATER(): antlr.TerminalNode[];
    GREATER(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Rot_rightContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GREATER(): antlr.TerminalNode[];
    GREATER(i: number): antlr.TerminalNode | null;
    PIPE(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Double_questionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    QUESTION(): antlr.TerminalNode[];
    QUESTION(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Neq_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    bit_subexpr(): Bit_subexprContext[];
    bit_subexpr(i: number): Bit_subexprContext | null;
    SHIFT_LEFT(): antlr.TerminalNode[];
    SHIFT_LEFT(i: number): antlr.TerminalNode | null;
    shift_right(): Shift_rightContext[];
    shift_right(i: number): Shift_rightContext | null;
    ROT_LEFT(): antlr.TerminalNode[];
    ROT_LEFT(i: number): antlr.TerminalNode | null;
    rot_right(): Rot_rightContext[];
    rot_right(i: number): Rot_rightContext | null;
    AMPERSAND(): antlr.TerminalNode[];
    AMPERSAND(i: number): antlr.TerminalNode | null;
    PIPE(): antlr.TerminalNode[];
    PIPE(i: number): antlr.TerminalNode | null;
    CARET(): antlr.TerminalNode[];
    CARET(i: number): antlr.TerminalNode | null;
    double_question(): Double_questionContext | null;
    neq_subexpr(): Neq_subexprContext | null;
    QUESTION(): antlr.TerminalNode[];
    QUESTION(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Bit_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    add_subexpr(): Add_subexprContext[];
    add_subexpr(i: number): Add_subexprContext | null;
    PLUS(): antlr.TerminalNode[];
    PLUS(i: number): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode[];
    MINUS(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Add_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    mul_subexpr(): Mul_subexprContext[];
    mul_subexpr(i: number): Mul_subexprContext | null;
    ASTERISK(): antlr.TerminalNode[];
    ASTERISK(i: number): antlr.TerminalNode | null;
    SLASH(): antlr.TerminalNode[];
    SLASH(i: number): antlr.TerminalNode | null;
    PERCENT(): antlr.TerminalNode[];
    PERCENT(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Mul_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    con_subexpr(): Con_subexprContext[];
    con_subexpr(i: number): Con_subexprContext | null;
    DOUBLE_PIPE(): antlr.TerminalNode[];
    DOUBLE_PIPE(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Con_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    unary_subexpr(): Unary_subexprContext;
    unary_op(): Unary_opContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Unary_opContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PLUS(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode | null;
    TILDA(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Unary_subexpr_suffixContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    key_expr(): Key_exprContext[];
    key_expr(i: number): Key_exprContext | null;
    invoke_expr(): Invoke_exprContext[];
    invoke_expr(i: number): Invoke_exprContext | null;
    COLLATE(): antlr.TerminalNode | null;
    an_id(): An_idContext | null;
    DOT(): antlr.TerminalNode[];
    DOT(i: number): antlr.TerminalNode | null;
    bind_parameter(): Bind_parameterContext[];
    bind_parameter(i: number): Bind_parameterContext | null;
    DIGITS(): antlr.TerminalNode[];
    DIGITS(i: number): antlr.TerminalNode | null;
    an_id_or_type(): An_id_or_typeContext[];
    an_id_or_type(i: number): An_id_or_typeContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Unary_casual_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    unary_subexpr_suffix(): Unary_subexpr_suffixContext;
    id_expr(): Id_exprContext | null;
    atom_expr(): Atom_exprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class In_unary_casual_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    unary_subexpr_suffix(): Unary_subexpr_suffixContext;
    id_expr_in(): Id_expr_inContext | null;
    in_atom_expr(): In_atom_exprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Unary_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    unary_casual_subexpr(): Unary_casual_subexprContext | null;
    json_api_expr(): Json_api_exprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class In_unary_subexprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    in_unary_casual_subexpr(): In_unary_casual_subexprContext | null;
    json_api_expr(): Json_api_exprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class List_literalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LBRACE_SQUARE(): antlr.TerminalNode;
    RBRACE_SQUARE(): antlr.TerminalNode;
    expr_list(): Expr_listContext | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Expr_dict_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    COLON(): antlr.TerminalNode[];
    COLON(i: number): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Dict_literalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LBRACE_CURLY(): antlr.TerminalNode;
    RBRACE_CURLY(): antlr.TerminalNode;
    expr_dict_list(): Expr_dict_listContext | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Expr_struct_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    COLON(): antlr.TerminalNode[];
    COLON(i: number): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Struct_literalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STRUCT_OPEN(): antlr.TerminalNode;
    STRUCT_CLOSE(): antlr.TerminalNode;
    expr_struct_list(): Expr_struct_listContext | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Atom_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    literal_value(): Literal_valueContext | null;
    bind_parameter(): Bind_parameterContext | null;
    lambda(): LambdaContext | null;
    cast_expr(): Cast_exprContext | null;
    exists_expr(): Exists_exprContext | null;
    case_expr(): Case_exprContext | null;
    an_id_or_type(): An_id_or_typeContext | null;
    NAMESPACE(): antlr.TerminalNode | null;
    id_or_type(): Id_or_typeContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    value_constructor(): Value_constructorContext | null;
    bitcast_expr(): Bitcast_exprContext | null;
    list_literal(): List_literalContext | null;
    dict_literal(): Dict_literalContext | null;
    struct_literal(): Struct_literalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class In_atom_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    literal_value(): Literal_valueContext | null;
    bind_parameter(): Bind_parameterContext | null;
    lambda(): LambdaContext | null;
    cast_expr(): Cast_exprContext | null;
    case_expr(): Case_exprContext | null;
    an_id_or_type(): An_id_or_typeContext | null;
    NAMESPACE(): antlr.TerminalNode | null;
    id_or_type(): Id_or_typeContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    LPAREN(): antlr.TerminalNode | null;
    select_stmt(): Select_stmtContext | null;
    RPAREN(): antlr.TerminalNode | null;
    value_constructor(): Value_constructorContext | null;
    bitcast_expr(): Bitcast_exprContext | null;
    list_literal(): List_literalContext | null;
    dict_literal(): Dict_literalContext | null;
    struct_literal(): Struct_literalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Cast_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CAST(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    expr(): ExprContext;
    AS(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Bitcast_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BITCAST(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    expr(): ExprContext;
    AS(): antlr.TerminalNode;
    type_name_simple(): Type_name_simpleContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Exists_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXISTS(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    RPAREN(): antlr.TerminalNode;
    select_stmt(): Select_stmtContext | null;
    values_stmt(): Values_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Case_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CASE(): antlr.TerminalNode;
    END(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    when_expr(): When_exprContext[];
    when_expr(i: number): When_exprContext | null;
    ELSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class LambdaContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    smart_parenthesis(): Smart_parenthesisContext;
    ARROW(): antlr.TerminalNode | null;
    LPAREN(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    RPAREN(): antlr.TerminalNode | null;
    LBRACE_CURLY(): antlr.TerminalNode | null;
    lambda_body(): Lambda_bodyContext | null;
    RBRACE_CURLY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class In_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    in_unary_subexpr(): In_unary_subexprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_api_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    json_value(): Json_valueContext | null;
    json_exists(): Json_existsContext | null;
    json_query(): Json_queryContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Jsonpath_specContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STRING_VALUE(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_variable_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_expr(): Id_exprContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_variableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    AS(): antlr.TerminalNode;
    json_variable_name(): Json_variable_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_variablesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    json_variable(): Json_variableContext[];
    json_variable(i: number): Json_variableContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_common_argsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    COMMA(): antlr.TerminalNode;
    jsonpath_spec(): Jsonpath_specContext;
    PASSING(): antlr.TerminalNode | null;
    json_variables(): Json_variablesContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_case_handlerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ERROR(): antlr.TerminalNode | null;
    NULL(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    JSON_VALUE(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    json_common_args(): Json_common_argsContext;
    RPAREN(): antlr.TerminalNode;
    RETURNING(): antlr.TerminalNode | null;
    type_name_simple(): Type_name_simpleContext | null;
    json_case_handler(): Json_case_handlerContext[];
    json_case_handler(i: number): Json_case_handlerContext | null;
    ON(): antlr.TerminalNode[];
    ON(i: number): antlr.TerminalNode | null;
    EMPTY(): antlr.TerminalNode[];
    EMPTY(i: number): antlr.TerminalNode | null;
    ERROR(): antlr.TerminalNode[];
    ERROR(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_exists_handlerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON(): antlr.TerminalNode;
    ERROR(): antlr.TerminalNode[];
    ERROR(i: number): antlr.TerminalNode | null;
    TRUE(): antlr.TerminalNode | null;
    FALSE(): antlr.TerminalNode | null;
    UNKNOWN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_existsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    JSON_EXISTS(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    json_common_args(): Json_common_argsContext;
    RPAREN(): antlr.TerminalNode;
    json_exists_handler(): Json_exists_handlerContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_query_wrapperContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITHOUT(): antlr.TerminalNode | null;
    ARRAY(): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    CONDITIONAL(): antlr.TerminalNode | null;
    UNCONDITIONAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_query_handlerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ERROR(): antlr.TerminalNode | null;
    NULL(): antlr.TerminalNode | null;
    EMPTY(): antlr.TerminalNode | null;
    ARRAY(): antlr.TerminalNode | null;
    OBJECT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Json_queryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    JSON_QUERY(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    json_common_args(): Json_common_argsContext;
    RPAREN(): antlr.TerminalNode;
    json_query_wrapper(): Json_query_wrapperContext | null;
    WRAPPER(): antlr.TerminalNode | null;
    json_query_handler(): Json_query_handlerContext[];
    json_query_handler(i: number): Json_query_handlerContext | null;
    ON(): antlr.TerminalNode[];
    ON(i: number): antlr.TerminalNode | null;
    EMPTY(): antlr.TerminalNode | null;
    ERROR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Smart_parenthesisContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    RPAREN(): antlr.TerminalNode;
    named_expr_list(): Named_expr_listContext | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Expr_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Pure_column_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Pure_column_or_namedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    bind_parameter(): Bind_parameterContext | null;
    an_id(): An_idContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Pure_column_or_named_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    pure_column_or_named(): Pure_column_or_namedContext[];
    pure_column_or_named(i: number): Pure_column_or_namedContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Column_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    opt_id_prefix(): Opt_id_prefixContext;
    an_id(): An_idContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Without_column_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    DOT(): antlr.TerminalNode | null;
    an_id_without(): An_id_withoutContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Column_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Without_column_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    without_column_name(): Without_column_nameContext[];
    without_column_name(i: number): Without_column_nameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Named_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    AS(): antlr.TerminalNode | null;
    an_id_or_type(): An_id_or_typeContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Named_expr_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    named_expr(): Named_exprContext[];
    named_expr(i: number): Named_exprContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Invoke_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    RPAREN(): antlr.TerminalNode;
    invoke_expr_tail(): Invoke_expr_tailContext;
    opt_set_quantifier(): Opt_set_quantifierContext | null;
    named_expr_list(): Named_expr_listContext | null;
    ASTERISK(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Invoke_expr_tailContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    null_treatment(): Null_treatmentContext | null;
    filter_clause(): Filter_clauseContext | null;
    OVER(): antlr.TerminalNode | null;
    window_name_or_specification(): Window_name_or_specificationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Using_call_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    invoke_expr(): Invoke_exprContext;
    an_id_expr(): An_id_exprContext | null;
    bind_parameter(): Bind_parameterContext | null;
    an_id_or_type(): An_id_or_typeContext[];
    an_id_or_type(i: number): An_id_or_typeContext | null;
    NAMESPACE(): antlr.TerminalNode | null;
    EXTERNAL(): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Key_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LBRACE_SQUARE(): antlr.TerminalNode;
    expr(): ExprContext;
    RBRACE_SQUARE(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class When_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHEN(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    THEN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Literal_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    integer(): IntegerContext | null;
    real(): RealContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    BLOB(): antlr.TerminalNode | null;
    NULL(): antlr.TerminalNode | null;
    CURRENT_TIME(): antlr.TerminalNode | null;
    CURRENT_DATE(): antlr.TerminalNode | null;
    CURRENT_TIMESTAMP(): antlr.TerminalNode | null;
    bool_value(): Bool_valueContext | null;
    EMPTY_ACTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Bind_parameterContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DOLLAR(): antlr.TerminalNode;
    an_id_or_type(): An_id_or_typeContext | null;
    TRUE(): antlr.TerminalNode | null;
    FALSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Opt_bind_parameterContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    bind_parameter(): Bind_parameterContext;
    QUESTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Bind_parameter_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    bind_parameter(): Bind_parameterContext[];
    bind_parameter(i: number): Bind_parameterContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Named_bind_parameterContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    bind_parameter(): Bind_parameterContext[];
    bind_parameter(i: number): Bind_parameterContext | null;
    AS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Named_bind_parameter_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    named_bind_parameter(): Named_bind_parameterContext[];
    named_bind_parameter(i: number): Named_bind_parameterContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Signed_numberContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    integer(): IntegerContext | null;
    real(): RealContext | null;
    PLUS(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_simpleContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_pure(): An_id_pureContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Integer_or_bindContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    integer(): IntegerContext | null;
    bind_parameter(): Bind_parameterContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_tagContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id(): IdContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    bind_parameter(): Bind_parameterContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Struct_argContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    type_name_tag(): Type_name_tagContext;
    COLON(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Struct_arg_positionalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    type_name_tag(): Type_name_tagContext;
    type_name_or_bind(): Type_name_or_bindContext;
    NULL(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    AS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Variant_argContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    type_name_or_bind(): Type_name_or_bindContext;
    type_name_tag(): Type_name_tagContext | null;
    COLON(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Callable_argContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    variant_arg(): Variant_argContext;
    LBRACE_CURLY(): antlr.TerminalNode | null;
    AUTOMAP(): antlr.TerminalNode | null;
    RBRACE_CURLY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Callable_arg_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    callable_arg(): Callable_argContext[];
    callable_arg(i: number): Callable_argContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_decimalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DECIMAL(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    integer_or_bind(): Integer_or_bindContext[];
    integer_or_bind(i: number): Integer_or_bindContext | null;
    COMMA(): antlr.TerminalNode;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_optionalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPTIONAL(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_tupleContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TUPLE(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode | null;
    GREATER(): antlr.TerminalNode | null;
    NOT_EQUALS2(): antlr.TerminalNode | null;
    type_name_or_bind(): Type_name_or_bindContext[];
    type_name_or_bind(i: number): Type_name_or_bindContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_structContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STRUCT(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode | null;
    GREATER(): antlr.TerminalNode | null;
    NOT_EQUALS2(): antlr.TerminalNode | null;
    struct_arg(): Struct_argContext[];
    struct_arg(i: number): Struct_argContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_variantContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VARIANT(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    variant_arg(): Variant_argContext[];
    variant_arg(i: number): Variant_argContext | null;
    GREATER(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LIST(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_streamContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STREAM(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_flowContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FLOW(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_dictContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DICT(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext[];
    type_name_or_bind(i: number): Type_name_or_bindContext | null;
    COMMA(): antlr.TerminalNode;
    GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_setContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_enumContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ENUM(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_tag(): Type_name_tagContext[];
    type_name_tag(i: number): Type_name_tagContext | null;
    GREATER(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_resourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RESOURCE(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_tag(): Type_name_tagContext;
    GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_taggedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TAGGED(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    COMMA(): antlr.TerminalNode;
    type_name_tag(): Type_name_tagContext;
    GREATER(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_callableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CALLABLE(): antlr.TerminalNode;
    LESS(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    RPAREN(): antlr.TerminalNode;
    ARROW(): antlr.TerminalNode;
    type_name_or_bind(): Type_name_or_bindContext;
    GREATER(): antlr.TerminalNode;
    callable_arg_list(): Callable_arg_listContext[];
    callable_arg_list(i: number): Callable_arg_listContext | null;
    COMMA(): antlr.TerminalNode | null;
    LBRACE_SQUARE(): antlr.TerminalNode | null;
    RBRACE_SQUARE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_compositeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    type_name_optional(): Type_name_optionalContext | null;
    type_name_tuple(): Type_name_tupleContext | null;
    type_name_struct(): Type_name_structContext | null;
    type_name_variant(): Type_name_variantContext | null;
    type_name_list(): Type_name_listContext | null;
    type_name_stream(): Type_name_streamContext | null;
    type_name_flow(): Type_name_flowContext | null;
    type_name_dict(): Type_name_dictContext | null;
    type_name_set(): Type_name_setContext | null;
    type_name_enum(): Type_name_enumContext | null;
    type_name_resource(): Type_name_resourceContext | null;
    type_name_tagged(): Type_name_taggedContext | null;
    type_name_callable(): Type_name_callableContext | null;
    QUESTION(): antlr.TerminalNode[];
    QUESTION(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    type_name_composite(): Type_name_compositeContext | null;
    type_name_decimal(): Type_name_decimalContext | null;
    type_name_simple(): Type_name_simpleContext | null;
    QUESTION(): antlr.TerminalNode[];
    QUESTION(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_name_or_bindContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    type_name(): Type_nameContext | null;
    bind_parameter(): Bind_parameterContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Value_constructor_literalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STRING_VALUE(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Value_constructorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VARIANT(): antlr.TerminalNode | null;
    LPAREN(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode;
    ENUM(): antlr.TerminalNode | null;
    CALLABLE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Declare_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DECLARE(): antlr.TerminalNode;
    bind_parameter(): Bind_parameterContext;
    AS(): antlr.TerminalNode;
    type_name(): Type_nameContext;
    EQUALS(): antlr.TerminalNode | null;
    literal_value(): Literal_valueContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Module_pathContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    DOT(): antlr.TerminalNode[];
    DOT(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Import_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IMPORT(): antlr.TerminalNode;
    module_path(): Module_pathContext;
    SYMBOLS(): antlr.TerminalNode;
    named_bind_parameter_list(): Named_bind_parameter_listContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Export_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXPORT(): antlr.TerminalNode;
    bind_parameter_list(): Bind_parameter_listContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Call_actionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    RPAREN(): antlr.TerminalNode;
    bind_parameter(): Bind_parameterContext | null;
    EMPTY_ACTION(): antlr.TerminalNode | null;
    expr_list(): Expr_listContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Inline_actionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BEGIN(): antlr.TerminalNode;
    define_action_or_subquery_body(): Define_action_or_subquery_bodyContext;
    END(): antlr.TerminalNode;
    DO(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Do_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DO(): antlr.TerminalNode;
    call_action(): Call_actionContext | null;
    inline_action(): Inline_actionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Pragma_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PRAGMA(): antlr.TerminalNode;
    opt_id_prefix_or_type(): Opt_id_prefix_or_typeContext;
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode | null;
    pragma_value(): Pragma_valueContext[];
    pragma_value(i: number): Pragma_valueContext | null;
    LPAREN(): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Pragma_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    signed_number(): Signed_numberContext | null;
    id(): IdContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    bool_value(): Bool_valueContext | null;
    bind_parameter(): Bind_parameterContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sort_specificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    ASC(): antlr.TerminalNode | null;
    DESC(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sort_specification_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sort_specification(): Sort_specificationContext[];
    sort_specification(i: number): Sort_specificationContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Select_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_kind_parenthesis(): Select_kind_parenthesisContext[];
    select_kind_parenthesis(i: number): Select_kind_parenthesisContext | null;
    select_op(): Select_opContext[];
    select_op(i: number): Select_opContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Select_unparenthesized_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_kind_partial(): Select_kind_partialContext;
    select_op(): Select_opContext[];
    select_op(i: number): Select_opContext | null;
    select_kind_parenthesis(): Select_kind_parenthesisContext[];
    select_kind_parenthesis(i: number): Select_kind_parenthesisContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Select_kind_parenthesisContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_kind_partial(): Select_kind_partialContext;
    LPAREN(): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Select_opContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UNION(): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    INTERSECT(): antlr.TerminalNode | null;
    EXCEPT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Select_kind_partialContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    select_kind(): Select_kindContext;
    LIMIT(): antlr.TerminalNode | null;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    OFFSET(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Select_kindContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    process_core(): Process_coreContext | null;
    reduce_core(): Reduce_coreContext | null;
    select_core(): Select_coreContext | null;
    DISCARD(): antlr.TerminalNode | null;
    INTO(): antlr.TerminalNode | null;
    RESULT(): antlr.TerminalNode | null;
    pure_column_or_named(): Pure_column_or_namedContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Process_coreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PROCESS(): antlr.TerminalNode;
    named_single_source(): Named_single_sourceContext[];
    named_single_source(i: number): Named_single_sourceContext | null;
    STREAM(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    using_call_expr(): Using_call_exprContext | null;
    AS(): antlr.TerminalNode | null;
    an_id(): An_idContext | null;
    WITH(): antlr.TerminalNode | null;
    external_call_settings(): External_call_settingsContext | null;
    where_expr(): Where_exprContext | null;
    HAVING(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    ASSUME(): antlr.TerminalNode | null;
    order_by_clause(): Order_by_clauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class External_call_paramContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode;
    expr(): ExprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class External_call_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    external_call_param(): External_call_paramContext[];
    external_call_param(i: number): External_call_paramContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Reduce_coreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REDUCE(): antlr.TerminalNode;
    named_single_source(): Named_single_sourceContext[];
    named_single_source(i: number): Named_single_sourceContext | null;
    ON(): antlr.TerminalNode;
    column_list(): Column_listContext;
    USING(): antlr.TerminalNode;
    using_call_expr(): Using_call_exprContext;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    PRESORT(): antlr.TerminalNode | null;
    sort_specification_list(): Sort_specification_listContext | null;
    ALL(): antlr.TerminalNode | null;
    AS(): antlr.TerminalNode | null;
    an_id(): An_idContext | null;
    where_expr(): Where_exprContext | null;
    HAVING(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    ASSUME(): antlr.TerminalNode | null;
    order_by_clause(): Order_by_clauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Opt_set_quantifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALL(): antlr.TerminalNode | null;
    DISTINCT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Select_coreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SELECT(): antlr.TerminalNode;
    opt_set_quantifier(): Opt_set_quantifierContext;
    result_column(): Result_columnContext[];
    result_column(i: number): Result_columnContext | null;
    FROM(): antlr.TerminalNode[];
    FROM(i: number): antlr.TerminalNode | null;
    join_source(): Join_sourceContext[];
    join_source(i: number): Join_sourceContext | null;
    STREAM(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    WITHOUT(): antlr.TerminalNode | null;
    without_column_list(): Without_column_listContext | null;
    where_expr(): Where_exprContext | null;
    group_by_clause(): Group_by_clauseContext | null;
    HAVING(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    window_clause(): Window_clauseContext | null;
    ext_order_by_clause(): Ext_order_by_clauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_recognition_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MATCH_RECOGNIZE(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    row_pattern_common_syntax(): Row_pattern_common_syntaxContext;
    RPAREN(): antlr.TerminalNode;
    window_partition_clause(): Window_partition_clauseContext | null;
    order_by_clause(): Order_by_clauseContext | null;
    row_pattern_measures(): Row_pattern_measuresContext | null;
    row_pattern_rows_per_match(): Row_pattern_rows_per_matchContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_rows_per_matchContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ONE(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    PER(): antlr.TerminalNode;
    MATCH(): antlr.TerminalNode;
    ALL(): antlr.TerminalNode | null;
    ROWS(): antlr.TerminalNode | null;
    row_pattern_empty_match_handling(): Row_pattern_empty_match_handlingContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_empty_match_handlingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SHOW(): antlr.TerminalNode | null;
    EMPTY(): antlr.TerminalNode | null;
    MATCHES(): antlr.TerminalNode | null;
    OMIT(): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    UNMATCHED(): antlr.TerminalNode | null;
    ROWS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_measuresContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MEASURES(): antlr.TerminalNode;
    row_pattern_measure_list(): Row_pattern_measure_listContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_measure_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_measure_definition(): Row_pattern_measure_definitionContext[];
    row_pattern_measure_definition(i: number): Row_pattern_measure_definitionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_measure_definitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    AS(): antlr.TerminalNode;
    an_id(): An_idContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_common_syntaxContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PATTERN(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    row_pattern(): Row_patternContext;
    RPAREN(): antlr.TerminalNode;
    DEFINE(): antlr.TerminalNode;
    row_pattern_definition_list(): Row_pattern_definition_listContext;
    AFTER(): antlr.TerminalNode | null;
    MATCH(): antlr.TerminalNode | null;
    row_pattern_skip_to(): Row_pattern_skip_toContext | null;
    row_pattern_initial_or_seek(): Row_pattern_initial_or_seekContext | null;
    row_pattern_subset_clause(): Row_pattern_subset_clauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_skip_toContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SKIP_RULE(): antlr.TerminalNode;
    TO(): antlr.TerminalNode | null;
    NEXT(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    PAST(): antlr.TerminalNode | null;
    LAST(): antlr.TerminalNode | null;
    FIRST(): antlr.TerminalNode | null;
    row_pattern_skip_to_variable_name(): Row_pattern_skip_to_variable_nameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_skip_to_variable_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_variable_name(): Row_pattern_variable_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_initial_or_seekContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INITIAL(): antlr.TerminalNode | null;
    SEEK(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_patternContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_term(): Row_pattern_termContext[];
    row_pattern_term(i: number): Row_pattern_termContext | null;
    PIPE(): antlr.TerminalNode[];
    PIPE(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_termContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_factor(): Row_pattern_factorContext[];
    row_pattern_factor(i: number): Row_pattern_factorContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_factorContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_primary(): Row_pattern_primaryContext;
    row_pattern_quantifier(): Row_pattern_quantifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_quantifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ASTERISK(): antlr.TerminalNode | null;
    QUESTION(): antlr.TerminalNode[];
    QUESTION(i: number): antlr.TerminalNode | null;
    PLUS(): antlr.TerminalNode | null;
    LBRACE_CURLY(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    RBRACE_CURLY(): antlr.TerminalNode | null;
    integer(): IntegerContext[];
    integer(i: number): IntegerContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_primaryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_primary_variable_name(): Row_pattern_primary_variable_nameContext | null;
    DOLLAR(): antlr.TerminalNode | null;
    CARET(): antlr.TerminalNode | null;
    LPAREN(): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode | null;
    row_pattern(): Row_patternContext | null;
    LBRACE_CURLY(): antlr.TerminalNode | null;
    MINUS(): antlr.TerminalNode[];
    MINUS(i: number): antlr.TerminalNode | null;
    RBRACE_CURLY(): antlr.TerminalNode | null;
    row_pattern_permute(): Row_pattern_permuteContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_primary_variable_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_variable_name(): Row_pattern_variable_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_permuteContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PERMUTE(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    row_pattern(): Row_patternContext[];
    row_pattern(i: number): Row_patternContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_subset_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SUBSET(): antlr.TerminalNode;
    row_pattern_subset_list(): Row_pattern_subset_listContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_subset_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_subset_item(): Row_pattern_subset_itemContext[];
    row_pattern_subset_item(i: number): Row_pattern_subset_itemContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_subset_itemContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_subset_item_variable_name(): Row_pattern_subset_item_variable_nameContext;
    EQUALS(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    row_pattern_subset_rhs(): Row_pattern_subset_rhsContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_subset_item_variable_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_variable_name(): Row_pattern_variable_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_subset_rhsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_subset_rhs_variable_name(): Row_pattern_subset_rhs_variable_nameContext[];
    row_pattern_subset_rhs_variable_name(i: number): Row_pattern_subset_rhs_variable_nameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_subset_rhs_variable_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_variable_name(): Row_pattern_variable_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_definition_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_definition(): Row_pattern_definitionContext[];
    row_pattern_definition(i: number): Row_pattern_definitionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_definitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_definition_variable_name(): Row_pattern_definition_variable_nameContext;
    AS(): antlr.TerminalNode;
    row_pattern_definition_search_condition(): Row_pattern_definition_search_conditionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_definition_variable_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    row_pattern_variable_name(): Row_pattern_variable_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_definition_search_conditionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    search_condition(): Search_conditionContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Search_conditionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Row_pattern_variable_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Order_by_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ORDER(): antlr.TerminalNode;
    BY(): antlr.TerminalNode;
    sort_specification_list(): Sort_specification_listContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Ext_order_by_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    order_by_clause(): Order_by_clauseContext;
    ASSUME(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Group_by_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GROUP(): antlr.TerminalNode;
    BY(): antlr.TerminalNode;
    opt_set_quantifier(): Opt_set_quantifierContext;
    grouping_element_list(): Grouping_element_listContext;
    COMPACT(): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    an_id(): An_idContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Grouping_element_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    grouping_element(): Grouping_elementContext[];
    grouping_element(i: number): Grouping_elementContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Grouping_elementContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ordinary_grouping_set(): Ordinary_grouping_setContext | null;
    rollup_list(): Rollup_listContext | null;
    cube_list(): Cube_listContext | null;
    grouping_sets_specification(): Grouping_sets_specificationContext | null;
    hopping_window_specification(): Hopping_window_specificationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Ordinary_grouping_setContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    named_expr(): Named_exprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Ordinary_grouping_set_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ordinary_grouping_set(): Ordinary_grouping_setContext[];
    ordinary_grouping_set(i: number): Ordinary_grouping_setContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Rollup_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROLLUP(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    ordinary_grouping_set_list(): Ordinary_grouping_set_listContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Cube_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CUBE(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    ordinary_grouping_set_list(): Ordinary_grouping_set_listContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Grouping_sets_specificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GROUPING(): antlr.TerminalNode;
    SETS(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    grouping_element_list(): Grouping_element_listContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Hopping_window_specificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HOP(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    expr(): ExprContext[];
    expr(i: number): ExprContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Result_columnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    opt_id_prefix(): Opt_id_prefixContext | null;
    ASTERISK(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    an_id_as_compat(): An_id_as_compatContext | null;
    AS(): antlr.TerminalNode | null;
    an_id_or_type(): An_id_or_typeContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Join_sourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    flatten_source(): Flatten_sourceContext[];
    flatten_source(i: number): Flatten_sourceContext | null;
    ANY(): antlr.TerminalNode[];
    ANY(i: number): antlr.TerminalNode | null;
    join_op(): Join_opContext[];
    join_op(i: number): Join_opContext | null;
    join_constraint(): Join_constraintContext[];
    join_constraint(i: number): Join_constraintContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Named_columnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    column_name(): Column_nameContext;
    AS(): antlr.TerminalNode | null;
    an_id(): An_idContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Flatten_by_argContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    named_column(): Named_columnContext | null;
    LPAREN(): antlr.TerminalNode | null;
    named_expr_list(): Named_expr_listContext | null;
    RPAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Flatten_sourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    named_single_source(): Named_single_sourceContext;
    FLATTEN(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    flatten_by_arg(): Flatten_by_argContext | null;
    COLUMNS(): antlr.TerminalNode | null;
    OPTIONAL(): antlr.TerminalNode | null;
    LIST(): antlr.TerminalNode | null;
    DICT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Named_single_sourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    single_source(): Single_sourceContext;
    row_pattern_recognition_clause(): Row_pattern_recognition_clauseContext | null;
    sample_clause(): Sample_clauseContext | null;
    tablesample_clause(): Tablesample_clauseContext | null;
    an_id_as_compat(): An_id_as_compatContext | null;
    pure_column_list(): Pure_column_listContext | null;
    AS(): antlr.TerminalNode | null;
    an_id(): An_idContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Single_sourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    table_ref(): Table_refContext | null;
    LPAREN(): antlr.TerminalNode | null;
    select_stmt(): Select_stmtContext | null;
    RPAREN(): antlr.TerminalNode | null;
    values_stmt(): Values_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sample_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SAMPLE(): antlr.TerminalNode;
    expr(): ExprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Tablesample_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLESAMPLE(): antlr.TerminalNode;
    sampling_mode(): Sampling_modeContext;
    LPAREN(): antlr.TerminalNode;
    expr(): ExprContext;
    RPAREN(): antlr.TerminalNode;
    repeatable_clause(): Repeatable_clauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sampling_modeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BERNOULLI(): antlr.TerminalNode | null;
    SYSTEM(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Repeatable_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REPEATABLE(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    expr(): ExprContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Join_opContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMA(): antlr.TerminalNode | null;
    JOIN(): antlr.TerminalNode | null;
    INNER(): antlr.TerminalNode | null;
    CROSS(): antlr.TerminalNode | null;
    NATURAL(): antlr.TerminalNode | null;
    LEFT(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    EXCLUSION(): antlr.TerminalNode | null;
    FULL(): antlr.TerminalNode | null;
    OUTER(): antlr.TerminalNode | null;
    ONLY(): antlr.TerminalNode | null;
    SEMI(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Join_constraintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ON(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    USING(): antlr.TerminalNode | null;
    pure_column_or_named_list(): Pure_column_or_named_listContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Returning_columns_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RETURNING(): antlr.TerminalNode;
    ASTERISK(): antlr.TerminalNode | null;
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Into_table_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INTO(): antlr.TerminalNode;
    into_simple_table_ref(): Into_simple_table_refContext;
    into_values_source(): Into_values_sourceContext;
    INSERT(): antlr.TerminalNode | null;
    OR(): antlr.TerminalNode | null;
    ABORT(): antlr.TerminalNode | null;
    REVERT(): antlr.TerminalNode | null;
    IGNORE(): antlr.TerminalNode | null;
    UPSERT(): antlr.TerminalNode | null;
    REPLACE(): antlr.TerminalNode | null;
    returning_columns_list(): Returning_columns_listContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Into_table_stmt_yqContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INTO(): antlr.TerminalNode;
    into_simple_table_ref(): Into_simple_table_refContext;
    into_values_source(): Into_values_sourceContext;
    INSERT(): antlr.TerminalNode | null;
    OR(): antlr.TerminalNode | null;
    ABORT(): antlr.TerminalNode | null;
    REVERT(): antlr.TerminalNode | null;
    IGNORE(): antlr.TerminalNode | null;
    REPLACE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Into_values_sourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    values_source(): Values_sourceContext | null;
    pure_column_list(): Pure_column_listContext | null;
    DEFAULT(): antlr.TerminalNode | null;
    VALUES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Values_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    VALUES(): antlr.TerminalNode;
    values_source_row_list(): Values_source_row_listContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Values_sourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    values_stmt(): Values_stmtContext | null;
    select_stmt(): Select_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Values_source_row_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    values_source_row(): Values_source_rowContext[];
    values_source_row(i: number): Values_source_rowContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Values_source_rowContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    expr_list(): Expr_listContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Simple_values_sourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr_list(): Expr_listContext | null;
    select_stmt(): Select_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_external_data_source_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    EXTERNAL(): antlr.TerminalNode;
    DATA(): antlr.TerminalNode;
    SOURCE(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    with_table_settings(): With_table_settingsContext;
    OR(): antlr.TerminalNode | null;
    REPLACE(): antlr.TerminalNode | null;
    IF(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_external_data_source_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    EXTERNAL(): antlr.TerminalNode;
    DATA(): antlr.TerminalNode;
    SOURCE(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    alter_external_data_source_action(): Alter_external_data_source_actionContext[];
    alter_external_data_source_action(i: number): Alter_external_data_source_actionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_external_data_source_actionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null;
    alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null;
    alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Drop_external_data_source_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    EXTERNAL(): antlr.TerminalNode;
    DATA(): antlr.TerminalNode;
    SOURCE(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    IF(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_view_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    VIEW(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    with_table_settings(): With_table_settingsContext;
    AS(): antlr.TerminalNode;
    select_stmt(): Select_stmtContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Drop_view_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    VIEW(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Upsert_object_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UPSERT(): antlr.TerminalNode;
    OBJECT(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    LPAREN(): antlr.TerminalNode;
    TYPE(): antlr.TerminalNode;
    object_type_ref(): Object_type_refContext;
    RPAREN(): antlr.TerminalNode;
    create_object_features(): Create_object_featuresContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_object_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    OBJECT(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    LPAREN(): antlr.TerminalNode;
    TYPE(): antlr.TerminalNode;
    object_type_ref(): Object_type_refContext;
    RPAREN(): antlr.TerminalNode;
    IF(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    create_object_features(): Create_object_featuresContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_object_featuresContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode;
    object_features(): Object_featuresContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_object_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    OBJECT(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    LPAREN(): antlr.TerminalNode;
    TYPE(): antlr.TerminalNode;
    object_type_ref(): Object_type_refContext;
    RPAREN(): antlr.TerminalNode;
    alter_object_features(): Alter_object_featuresContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_object_featuresContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    object_features(): Object_featuresContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Drop_object_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    OBJECT(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    LPAREN(): antlr.TerminalNode;
    TYPE(): antlr.TerminalNode;
    object_type_ref(): Object_type_refContext;
    RPAREN(): antlr.TerminalNode;
    IF(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    drop_object_features(): Drop_object_featuresContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Drop_object_featuresContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode;
    object_features(): Object_featuresContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Object_feature_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_or_type(): Id_or_typeContext | null;
    bind_parameter(): Bind_parameterContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Object_feature_kvContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_or_type(): An_id_or_typeContext;
    EQUALS(): antlr.TerminalNode;
    object_feature_value(): Object_feature_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Object_feature_flagContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_or_type(): An_id_or_typeContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Object_featureContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    object_feature_kv(): Object_feature_kvContext | null;
    object_feature_flag(): Object_feature_flagContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Object_featuresContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    object_feature(): Object_featureContext[];
    object_feature(i: number): Object_featureContext | null;
    LPAREN(): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Object_type_refContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_or_type(): An_id_or_typeContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_table_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    simple_table_ref(): Simple_table_refContext;
    LPAREN(): antlr.TerminalNode;
    create_table_entry(): Create_table_entryContext[];
    create_table_entry(i: number): Create_table_entryContext | null;
    RPAREN(): antlr.TerminalNode;
    TABLE(): antlr.TerminalNode | null;
    TABLESTORE(): antlr.TerminalNode | null;
    EXTERNAL(): antlr.TerminalNode | null;
    TEMP(): antlr.TerminalNode | null;
    TEMPORARY(): antlr.TerminalNode | null;
    OR(): antlr.TerminalNode | null;
    REPLACE(): antlr.TerminalNode | null;
    IF(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    table_inherits(): Table_inheritsContext | null;
    table_partition_by(): Table_partition_byContext | null;
    with_table_settings(): With_table_settingsContext | null;
    table_tablestore(): Table_tablestoreContext | null;
    table_as_source(): Table_as_sourceContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_table_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    column_schema(): Column_schemaContext | null;
    table_constraint(): Table_constraintContext | null;
    table_index(): Table_indexContext | null;
    family_entry(): Family_entryContext | null;
    changefeed(): ChangefeedContext | null;
    an_id_schema(): An_id_schemaContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_inheritsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INHERITS(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    simple_table_ref_core(): Simple_table_ref_coreContext[];
    simple_table_ref_core(i: number): Simple_table_ref_coreContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_partition_byContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PARTITION(): antlr.TerminalNode;
    BY(): antlr.TerminalNode;
    HASH(): antlr.TerminalNode;
    pure_column_list(): Pure_column_listContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class With_table_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    table_settings_entry(): Table_settings_entryContext[];
    table_settings_entry(i: number): Table_settings_entryContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_tablestoreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TABLESTORE(): antlr.TerminalNode;
    simple_table_ref_core(): Simple_table_ref_coreContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_settings_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode;
    table_setting_value(): Table_setting_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_as_sourceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AS(): antlr.TerminalNode;
    values_source(): Values_sourceContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TABLE(): antlr.TerminalNode;
    simple_table_ref(): Simple_table_refContext;
    alter_table_action(): Alter_table_actionContext[];
    alter_table_action(i: number): Alter_table_actionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_actionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alter_table_add_column(): Alter_table_add_columnContext | null;
    alter_table_drop_column(): Alter_table_drop_columnContext | null;
    alter_table_alter_column(): Alter_table_alter_columnContext | null;
    alter_table_add_column_family(): Alter_table_add_column_familyContext | null;
    alter_table_alter_column_family(): Alter_table_alter_column_familyContext | null;
    alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null;
    alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null;
    alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null;
    alter_table_add_index(): Alter_table_add_indexContext | null;
    alter_table_drop_index(): Alter_table_drop_indexContext | null;
    alter_table_rename_to(): Alter_table_rename_toContext | null;
    alter_table_add_changefeed(): Alter_table_add_changefeedContext | null;
    alter_table_alter_changefeed(): Alter_table_alter_changefeedContext | null;
    alter_table_drop_changefeed(): Alter_table_drop_changefeedContext | null;
    alter_table_rename_index_to(): Alter_table_rename_index_toContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_external_table_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    EXTERNAL(): antlr.TerminalNode;
    TABLE(): antlr.TerminalNode;
    simple_table_ref(): Simple_table_refContext;
    alter_external_table_action(): Alter_external_table_actionContext[];
    alter_external_table_action(i: number): Alter_external_table_actionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_external_table_actionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alter_table_add_column(): Alter_table_add_columnContext | null;
    alter_table_drop_column(): Alter_table_drop_columnContext | null;
    alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null;
    alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null;
    alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_store_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TABLESTORE(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    alter_table_store_action(): Alter_table_store_actionContext[];
    alter_table_store_action(i: number): Alter_table_store_actionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_store_actionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alter_table_add_column(): Alter_table_add_columnContext | null;
    alter_table_drop_column(): Alter_table_drop_columnContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_add_columnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ADD(): antlr.TerminalNode;
    column_schema(): Column_schemaContext;
    COLUMN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_drop_columnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    an_id(): An_idContext;
    COLUMN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_alter_columnContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    COLUMN(): antlr.TerminalNode;
    an_id(): An_idContext;
    SET(): antlr.TerminalNode;
    family_relation(): Family_relationContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_add_column_familyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ADD(): antlr.TerminalNode;
    family_entry(): Family_entryContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_alter_column_familyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    FAMILY(): antlr.TerminalNode;
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    SET(): antlr.TerminalNode;
    family_setting_value(): Family_setting_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_set_table_setting_uncompatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    an_id(): An_idContext;
    table_setting_value(): Table_setting_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_set_table_setting_compatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    alter_table_setting_entry(): Alter_table_setting_entryContext[];
    alter_table_setting_entry(i: number): Alter_table_setting_entryContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_reset_table_settingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RESET(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_add_indexContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ADD(): antlr.TerminalNode;
    table_index(): Table_indexContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_drop_indexContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    INDEX(): antlr.TerminalNode;
    an_id(): An_idContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_rename_toContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RENAME(): antlr.TerminalNode;
    TO(): antlr.TerminalNode;
    an_id_table(): An_id_tableContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_rename_index_toContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RENAME(): antlr.TerminalNode;
    INDEX(): antlr.TerminalNode;
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    TO(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_add_changefeedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ADD(): antlr.TerminalNode;
    changefeed(): ChangefeedContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_alter_changefeedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    CHANGEFEED(): antlr.TerminalNode;
    an_id(): An_idContext;
    changefeed_alter_settings(): Changefeed_alter_settingsContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_drop_changefeedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    CHANGEFEED(): antlr.TerminalNode;
    an_id(): An_idContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Column_schemaContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_schema(): An_id_schemaContext;
    type_name_or_bind(): Type_name_or_bindContext;
    opt_column_constraints(): Opt_column_constraintsContext;
    family_relation(): Family_relationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Family_relationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FAMILY(): antlr.TerminalNode;
    an_id(): An_idContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Opt_column_constraintsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NULL(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    NOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Column_order_by_specificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    ASC(): antlr.TerminalNode | null;
    DESC(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_constraintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PRIMARY(): antlr.TerminalNode | null;
    KEY(): antlr.TerminalNode | null;
    LPAREN(): antlr.TerminalNode;
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    PARTITION(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    ORDER(): antlr.TerminalNode | null;
    column_order_by_specification(): Column_order_by_specificationContext[];
    column_order_by_specification(i: number): Column_order_by_specificationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_indexContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INDEX(): antlr.TerminalNode;
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    table_index_type(): Table_index_typeContext;
    ON(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode[];
    LPAREN(i: number): antlr.TerminalNode | null;
    an_id_schema(): An_id_schemaContext[];
    an_id_schema(i: number): An_id_schemaContext | null;
    RPAREN(): antlr.TerminalNode[];
    RPAREN(i: number): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    EQUALS(): antlr.TerminalNode[];
    EQUALS(i: number): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    COVER(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_index_typeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    global_index(): Global_indexContext | null;
    local_index(): Local_indexContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Global_indexContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GLOBAL(): antlr.TerminalNode;
    UNIQUE(): antlr.TerminalNode | null;
    SYNC(): antlr.TerminalNode | null;
    ASYNC(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Local_indexContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LOCAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class ChangefeedContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CHANGEFEED(): antlr.TerminalNode;
    an_id(): An_idContext;
    WITH(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    changefeed_settings(): Changefeed_settingsContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Changefeed_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    changefeed_settings_entry(): Changefeed_settings_entryContext[];
    changefeed_settings_entry(i: number): Changefeed_settings_entryContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Changefeed_settings_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode;
    changefeed_setting_value(): Changefeed_setting_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Changefeed_setting_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Changefeed_alter_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DISABLE(): antlr.TerminalNode | null;
    SET(): antlr.TerminalNode | null;
    LPAREN(): antlr.TerminalNode | null;
    changefeed_settings(): Changefeed_settingsContext | null;
    RPAREN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_setting_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode;
    table_setting_value(): Table_setting_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_setting_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id(): IdContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    integer(): IntegerContext | null;
    split_boundaries(): Split_boundariesContext | null;
    expr(): ExprContext | null;
    ON(): antlr.TerminalNode | null;
    an_id(): An_idContext | null;
    AS(): antlr.TerminalNode | null;
    SECONDS(): antlr.TerminalNode | null;
    MILLISECONDS(): antlr.TerminalNode | null;
    MICROSECONDS(): antlr.TerminalNode | null;
    NANOSECONDS(): antlr.TerminalNode | null;
    bool_value(): Bool_valueContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Family_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FAMILY(): antlr.TerminalNode;
    an_id(): An_idContext;
    family_settings(): Family_settingsContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Family_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    RPAREN(): antlr.TerminalNode;
    family_settings_entry(): Family_settings_entryContext[];
    family_settings_entry(i: number): Family_settings_entryContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Family_settings_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode;
    family_setting_value(): Family_setting_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Family_setting_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STRING_VALUE(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Split_boundariesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode | null;
    literal_value_list(): Literal_value_listContext[];
    literal_value_list(i: number): Literal_value_listContext | null;
    RPAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Literal_value_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    literal_value(): Literal_valueContext[];
    literal_value(i: number): Literal_valueContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Drop_table_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    simple_table_ref(): Simple_table_refContext;
    TABLE(): antlr.TerminalNode | null;
    TABLESTORE(): antlr.TerminalNode | null;
    EXTERNAL(): antlr.TerminalNode | null;
    IF(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_user_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    USER(): antlr.TerminalNode;
    role_name(): Role_nameContext;
    create_user_option(): Create_user_optionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_user_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    USER(): antlr.TerminalNode;
    role_name(): Role_nameContext[];
    role_name(i: number): Role_nameContext | null;
    create_user_option(): Create_user_optionContext | null;
    RENAME(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_group_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    GROUP(): antlr.TerminalNode;
    role_name(): Role_nameContext[];
    role_name(i: number): Role_nameContext | null;
    WITH(): antlr.TerminalNode | null;
    USER(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_group_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    GROUP(): antlr.TerminalNode;
    role_name(): Role_nameContext[];
    role_name(i: number): Role_nameContext | null;
    USER(): antlr.TerminalNode | null;
    RENAME(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    ADD(): antlr.TerminalNode | null;
    DROP(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Drop_role_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    role_name(): Role_nameContext[];
    role_name(i: number): Role_nameContext | null;
    USER(): antlr.TerminalNode | null;
    GROUP(): antlr.TerminalNode | null;
    IF(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Role_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_or_type(): An_id_or_typeContext | null;
    bind_parameter(): Bind_parameterContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_user_optionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PASSWORD(): antlr.TerminalNode;
    expr(): ExprContext;
    ENCRYPTED(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Grant_permissions_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GRANT(): antlr.TerminalNode[];
    GRANT(i: number): antlr.TerminalNode | null;
    permission_name_target(): Permission_name_targetContext;
    ON(): antlr.TerminalNode;
    an_id_schema(): An_id_schemaContext[];
    an_id_schema(i: number): An_id_schemaContext | null;
    TO(): antlr.TerminalNode;
    role_name(): Role_nameContext[];
    role_name(i: number): Role_nameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Revoke_permissions_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REVOKE(): antlr.TerminalNode;
    permission_name_target(): Permission_name_targetContext;
    ON(): antlr.TerminalNode;
    an_id_schema(): An_id_schemaContext[];
    an_id_schema(i: number): An_id_schemaContext | null;
    FROM(): antlr.TerminalNode;
    role_name(): Role_nameContext[];
    role_name(i: number): Role_nameContext | null;
    GRANT(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Permission_idContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CONNECT(): antlr.TerminalNode | null;
    LIST(): antlr.TerminalNode | null;
    INSERT(): antlr.TerminalNode | null;
    MANAGE(): antlr.TerminalNode | null;
    DROP(): antlr.TerminalNode | null;
    GRANT(): antlr.TerminalNode | null;
    MODIFY(): antlr.TerminalNode | null;
    TABLES(): antlr.TerminalNode | null;
    ATTRIBUTES(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    UPDATE(): antlr.TerminalNode | null;
    ERASE(): antlr.TerminalNode | null;
    SCHEMA(): antlr.TerminalNode | null;
    REMOVE(): antlr.TerminalNode | null;
    DESCRIBE(): antlr.TerminalNode | null;
    ALTER(): antlr.TerminalNode | null;
    SELECT(): antlr.TerminalNode | null;
    USE(): antlr.TerminalNode | null;
    FULL(): antlr.TerminalNode | null;
    LEGACY(): antlr.TerminalNode | null;
    CREATE(): antlr.TerminalNode | null;
    DIRECTORY(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    QUEUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Permission_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    permission_id(): Permission_idContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Permission_name_targetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    permission_name(): Permission_nameContext[];
    permission_name(i: number): Permission_nameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    ALL(): antlr.TerminalNode | null;
    PRIVILEGES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_replication_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    ASYNC(): antlr.TerminalNode;
    REPLICATION(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    FOR(): antlr.TerminalNode;
    replication_target(): Replication_targetContext[];
    replication_target(i: number): Replication_targetContext | null;
    WITH(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    replication_settings(): Replication_settingsContext;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Replication_targetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    object_ref(): Object_refContext;
    replication_name(): Replication_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Replication_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    replication_settings_entry(): Replication_settings_entryContext[];
    replication_settings_entry(i: number): Replication_settings_entryContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Replication_settings_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode;
    STRING_VALUE(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_replication_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    ASYNC(): antlr.TerminalNode;
    REPLICATION(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    alter_replication_action(): Alter_replication_actionContext[];
    alter_replication_action(i: number): Alter_replication_actionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_replication_actionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alter_replication_set_setting(): Alter_replication_set_settingContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_replication_set_settingContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    replication_settings(): Replication_settingsContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Drop_replication_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    ASYNC(): antlr.TerminalNode;
    REPLICATION(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    CASCADE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Action_or_subquery_argsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    opt_bind_parameter(): Opt_bind_parameterContext[];
    opt_bind_parameter(i: number): Opt_bind_parameterContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Define_action_or_subquery_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DEFINE(): antlr.TerminalNode[];
    DEFINE(i: number): antlr.TerminalNode | null;
    bind_parameter(): Bind_parameterContext;
    LPAREN(): antlr.TerminalNode;
    RPAREN(): antlr.TerminalNode;
    AS(): antlr.TerminalNode;
    define_action_or_subquery_body(): Define_action_or_subquery_bodyContext;
    END(): antlr.TerminalNode;
    ACTION(): antlr.TerminalNode | null;
    SUBQUERY(): antlr.TerminalNode | null;
    action_or_subquery_args(): Action_or_subquery_argsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Define_action_or_subquery_bodyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SEMICOLON(): antlr.TerminalNode[];
    SEMICOLON(i: number): antlr.TerminalNode | null;
    sql_stmt_core(): Sql_stmt_coreContext[];
    sql_stmt_core(i: number): Sql_stmt_coreContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class If_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IF(): antlr.TerminalNode;
    expr(): ExprContext;
    do_stmt(): Do_stmtContext[];
    do_stmt(i: number): Do_stmtContext | null;
    EVALUATE(): antlr.TerminalNode | null;
    ELSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class For_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FOR(): antlr.TerminalNode;
    bind_parameter(): Bind_parameterContext;
    IN(): antlr.TerminalNode;
    expr(): ExprContext;
    do_stmt(): Do_stmtContext[];
    do_stmt(i: number): Do_stmtContext | null;
    EVALUATE(): antlr.TerminalNode | null;
    PARALLEL(): antlr.TerminalNode | null;
    ELSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_refContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    table_key(): Table_keyContext | null;
    an_id_expr(): An_id_exprContext | null;
    LPAREN(): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode | null;
    bind_parameter(): Bind_parameterContext | null;
    cluster_expr(): Cluster_exprContext | null;
    DOT(): antlr.TerminalNode | null;
    AT(): antlr.TerminalNode | null;
    table_hints(): Table_hintsContext | null;
    table_arg(): Table_argContext[];
    table_arg(i: number): Table_argContext | null;
    VIEW(): antlr.TerminalNode | null;
    view_name(): View_nameContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    expr_list(): Expr_listContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_keyContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_table_or_type(): Id_table_or_typeContext;
    VIEW(): antlr.TerminalNode | null;
    view_name(): View_nameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_argContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    named_expr(): Named_exprContext;
    AT(): antlr.TerminalNode | null;
    VIEW(): antlr.TerminalNode | null;
    view_name(): View_nameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_hintsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode;
    table_hint(): Table_hintContext[];
    table_hint(i: number): Table_hintContext | null;
    LPAREN(): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Table_hintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_hint(): An_id_hintContext | null;
    EQUALS(): antlr.TerminalNode | null;
    type_name_tag(): Type_name_tagContext[];
    type_name_tag(i: number): Type_name_tagContext | null;
    LPAREN(): antlr.TerminalNode | null;
    RPAREN(): antlr.TerminalNode | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    type_name_or_bind(): Type_name_or_bindContext | null;
    SCHEMA(): antlr.TerminalNode | null;
    COLUMNS(): antlr.TerminalNode | null;
    struct_arg_positional(): Struct_arg_positionalContext[];
    struct_arg_positional(i: number): Struct_arg_positionalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Object_refContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_or_at(): Id_or_atContext;
    cluster_expr(): Cluster_exprContext | null;
    DOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Simple_table_ref_coreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    object_ref(): Object_refContext | null;
    bind_parameter(): Bind_parameterContext | null;
    AT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Simple_table_refContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    simple_table_ref_core(): Simple_table_ref_coreContext;
    table_hints(): Table_hintsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Into_simple_table_refContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    simple_table_ref(): Simple_table_refContext;
    ERASE(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    pure_column_list(): Pure_column_listContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Delete_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DELETE(): antlr.TerminalNode;
    FROM(): antlr.TerminalNode;
    simple_table_ref(): Simple_table_refContext;
    where_expr(): Where_exprContext | null;
    ON(): antlr.TerminalNode | null;
    into_values_source(): Into_values_sourceContext | null;
    returning_columns_list(): Returning_columns_listContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Update_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UPDATE(): antlr.TerminalNode;
    simple_table_ref(): Simple_table_refContext;
    SET(): antlr.TerminalNode | null;
    set_clause_choice(): Set_clause_choiceContext | null;
    ON(): antlr.TerminalNode | null;
    into_values_source(): Into_values_sourceContext | null;
    returning_columns_list(): Returning_columns_listContext | null;
    where_expr(): Where_exprContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Set_clause_choiceContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    set_clause_list(): Set_clause_listContext | null;
    multiple_column_assignment(): Multiple_column_assignmentContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Set_clause_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    set_clause(): Set_clauseContext[];
    set_clause(i: number): Set_clauseContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Set_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    set_target(): Set_targetContext;
    EQUALS(): antlr.TerminalNode;
    expr(): ExprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Set_targetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    column_name(): Column_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Multiple_column_assignmentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    set_target_list(): Set_target_listContext;
    EQUALS(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    simple_values_source(): Simple_values_sourceContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Set_target_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    set_target(): Set_targetContext[];
    set_target(i: number): Set_targetContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_topic_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CREATE(): antlr.TerminalNode;
    TOPIC(): antlr.TerminalNode;
    topic_ref(): Topic_refContext;
    create_topic_entries(): Create_topic_entriesContext | null;
    with_topic_settings(): With_topic_settingsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_topic_entriesContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    create_topic_entry(): Create_topic_entryContext[];
    create_topic_entry(i: number): Create_topic_entryContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Create_topic_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    topic_create_consumer_entry(): Topic_create_consumer_entryContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class With_topic_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    topic_settings(): Topic_settingsContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_topic_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    TOPIC(): antlr.TerminalNode;
    topic_ref(): Topic_refContext;
    alter_topic_action(): Alter_topic_actionContext[];
    alter_topic_action(i: number): Alter_topic_actionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_topic_actionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alter_topic_add_consumer(): Alter_topic_add_consumerContext | null;
    alter_topic_alter_consumer(): Alter_topic_alter_consumerContext | null;
    alter_topic_drop_consumer(): Alter_topic_drop_consumerContext | null;
    alter_topic_set_settings(): Alter_topic_set_settingsContext | null;
    alter_topic_reset_settings(): Alter_topic_reset_settingsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_topic_add_consumerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ADD(): antlr.TerminalNode;
    topic_create_consumer_entry(): Topic_create_consumer_entryContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_create_consumer_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CONSUMER(): antlr.TerminalNode;
    an_id(): An_idContext;
    topic_consumer_with_settings(): Topic_consumer_with_settingsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_topic_alter_consumerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALTER(): antlr.TerminalNode;
    CONSUMER(): antlr.TerminalNode;
    topic_consumer_ref(): Topic_consumer_refContext;
    alter_topic_alter_consumer_entry(): Alter_topic_alter_consumer_entryContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_topic_alter_consumer_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    topic_alter_consumer_set(): Topic_alter_consumer_setContext | null;
    topic_alter_consumer_reset(): Topic_alter_consumer_resetContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_topic_drop_consumerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    CONSUMER(): antlr.TerminalNode;
    topic_consumer_ref(): Topic_consumer_refContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_alter_consumer_setContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    topic_consumer_settings(): Topic_consumer_settingsContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_alter_consumer_resetContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RESET(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    an_id(): An_idContext[];
    an_id(i: number): An_idContext | null;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_topic_set_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    topic_settings(): Topic_settingsContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_topic_reset_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RESET(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    an_id(): An_idContext;
    RPAREN(): antlr.TerminalNode;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    an_id_pure(): An_id_pureContext[];
    an_id_pure(i: number): An_id_pureContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Drop_topic_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DROP(): antlr.TerminalNode;
    TOPIC(): antlr.TerminalNode;
    topic_ref(): Topic_refContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    topic_settings_entry(): Topic_settings_entryContext[];
    topic_settings_entry(i: number): Topic_settings_entryContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_settings_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode;
    topic_setting_value(): Topic_setting_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_setting_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_consumer_with_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WITH(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    topic_consumer_settings(): Topic_consumer_settingsContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_consumer_settingsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    topic_consumer_settings_entry(): Topic_consumer_settings_entryContext[];
    topic_consumer_settings_entry(i: number): Topic_consumer_settings_entryContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_consumer_settings_entryContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    EQUALS(): antlr.TerminalNode;
    topic_consumer_setting_value(): Topic_consumer_setting_valueContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_consumer_setting_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    expr(): ExprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_refContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext;
    cluster_expr(): Cluster_exprContext | null;
    DOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Topic_consumer_refContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_pure(): An_id_pureContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Null_treatmentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RESPECT(): antlr.TerminalNode | null;
    NULLS(): antlr.TerminalNode;
    IGNORE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Filter_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FILTER(): antlr.TerminalNode;
    LPAREN(): antlr.TerminalNode;
    where_expr(): Where_exprContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_name_or_specificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    window_name(): Window_nameContext | null;
    window_specification(): Window_specificationContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_window(): An_id_windowContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WINDOW(): antlr.TerminalNode;
    window_definition_list(): Window_definition_listContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_definition_listContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    window_definition(): Window_definitionContext[];
    window_definition(i: number): Window_definitionContext | null;
    COMMA(): antlr.TerminalNode[];
    COMMA(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_definitionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    new_window_name(): New_window_nameContext;
    AS(): antlr.TerminalNode;
    window_specification(): Window_specificationContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class New_window_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    window_name(): Window_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_specificationContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode;
    window_specification_details(): Window_specification_detailsContext;
    RPAREN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_specification_detailsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    existing_window_name(): Existing_window_nameContext | null;
    window_partition_clause(): Window_partition_clauseContext | null;
    window_order_clause(): Window_order_clauseContext | null;
    window_frame_clause(): Window_frame_clauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Existing_window_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    window_name(): Window_nameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_partition_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PARTITION(): antlr.TerminalNode;
    BY(): antlr.TerminalNode;
    named_expr_list(): Named_expr_listContext;
    COMPACT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_order_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    order_by_clause(): Order_by_clauseContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_frame_clauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    window_frame_units(): Window_frame_unitsContext;
    window_frame_extent(): Window_frame_extentContext;
    window_frame_exclusion(): Window_frame_exclusionContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_frame_unitsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROWS(): antlr.TerminalNode | null;
    RANGE(): antlr.TerminalNode | null;
    GROUPS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_frame_extentContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    window_frame_bound(): Window_frame_boundContext | null;
    window_frame_between(): Window_frame_betweenContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_frame_betweenContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BETWEEN(): antlr.TerminalNode;
    window_frame_bound(): Window_frame_boundContext[];
    window_frame_bound(i: number): Window_frame_boundContext | null;
    AND(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_frame_boundContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    CURRENT(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    PRECEDING(): antlr.TerminalNode | null;
    FOLLOWING(): antlr.TerminalNode | null;
    expr(): ExprContext | null;
    UNBOUNDED(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Window_frame_exclusionContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXCLUDE(): antlr.TerminalNode;
    CURRENT(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    GROUP(): antlr.TerminalNode | null;
    TIES(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    OTHERS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Use_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    USE(): antlr.TerminalNode;
    cluster_expr(): Cluster_exprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Subselect_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPAREN(): antlr.TerminalNode | null;
    select_stmt(): Select_stmtContext | null;
    RPAREN(): antlr.TerminalNode | null;
    select_unparenthesized_stmt(): Select_unparenthesized_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Named_nodes_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    bind_parameter_list(): Bind_parameter_listContext;
    EQUALS(): antlr.TerminalNode;
    expr(): ExprContext | null;
    subselect_stmt(): Subselect_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Commit_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMMIT(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Rollback_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ROLLBACK(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class IdentifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ID_PLAIN(): antlr.TerminalNode | null;
    ID_QUOTED(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class IdContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword(): KeywordContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_schemaContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword_compat(): Keyword_compatContext | null;
    keyword_expr_uncompat(): Keyword_expr_uncompatContext | null;
    keyword_select_uncompat(): Keyword_select_uncompatContext | null;
    keyword_in_uncompat(): Keyword_in_uncompatContext | null;
    keyword_window_uncompat(): Keyword_window_uncompatContext | null;
    keyword_hint_uncompat(): Keyword_hint_uncompatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword_compat(): Keyword_compatContext | null;
    keyword_alter_uncompat(): Keyword_alter_uncompatContext | null;
    keyword_in_uncompat(): Keyword_in_uncompatContext | null;
    keyword_window_uncompat(): Keyword_window_uncompatContext | null;
    keyword_hint_uncompat(): Keyword_hint_uncompatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_expr_inContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword_compat(): Keyword_compatContext | null;
    keyword_alter_uncompat(): Keyword_alter_uncompatContext | null;
    keyword_window_uncompat(): Keyword_window_uncompatContext | null;
    keyword_hint_uncompat(): Keyword_hint_uncompatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_windowContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword_compat(): Keyword_compatContext | null;
    keyword_expr_uncompat(): Keyword_expr_uncompatContext | null;
    keyword_table_uncompat(): Keyword_table_uncompatContext | null;
    keyword_select_uncompat(): Keyword_select_uncompatContext | null;
    keyword_alter_uncompat(): Keyword_alter_uncompatContext | null;
    keyword_in_uncompat(): Keyword_in_uncompatContext | null;
    keyword_hint_uncompat(): Keyword_hint_uncompatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_tableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword_compat(): Keyword_compatContext | null;
    keyword_expr_uncompat(): Keyword_expr_uncompatContext | null;
    keyword_select_uncompat(): Keyword_select_uncompatContext | null;
    keyword_in_uncompat(): Keyword_in_uncompatContext | null;
    keyword_window_uncompat(): Keyword_window_uncompatContext | null;
    keyword_hint_uncompat(): Keyword_hint_uncompatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_withoutContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword_compat(): Keyword_compatContext | null;
    keyword_table_uncompat(): Keyword_table_uncompatContext | null;
    keyword_alter_uncompat(): Keyword_alter_uncompatContext | null;
    keyword_in_uncompat(): Keyword_in_uncompatContext | null;
    keyword_window_uncompat(): Keyword_window_uncompatContext | null;
    keyword_hint_uncompat(): Keyword_hint_uncompatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_hintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword_compat(): Keyword_compatContext | null;
    keyword_expr_uncompat(): Keyword_expr_uncompatContext | null;
    keyword_table_uncompat(): Keyword_table_uncompatContext | null;
    keyword_select_uncompat(): Keyword_select_uncompatContext | null;
    keyword_alter_uncompat(): Keyword_alter_uncompatContext | null;
    keyword_in_uncompat(): Keyword_in_uncompatContext | null;
    keyword_window_uncompat(): Keyword_window_uncompatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_as_compatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    keyword_as_compat(): Keyword_as_compatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_idContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id(): IdContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_or_typeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_or_type(): Id_or_typeContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_schemaContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_schema(): Id_schemaContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_expr(): Id_exprContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_expr_inContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_expr_in(): Id_expr_inContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_windowContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_window(): Id_windowContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_tableContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_table(): Id_tableContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_withoutContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_without(): Id_withoutContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_hintContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_hint(): Id_hintContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_pureContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class An_id_as_compatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_as_compat(): Id_as_compatContext | null;
    STRING_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class View_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext | null;
    PRIMARY(): antlr.TerminalNode | null;
    KEY(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Opt_id_prefixContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id(): An_idContext | null;
    DOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Cluster_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    pure_column_or_named(): Pure_column_or_namedContext | null;
    ASTERISK(): antlr.TerminalNode | null;
    an_id(): An_idContext | null;
    COLON(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_or_typeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id(): IdContext | null;
    type_id(): Type_idContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Opt_id_prefix_or_typeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_or_type(): An_id_or_typeContext | null;
    DOT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_or_atContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_or_type(): An_id_or_typeContext;
    AT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_table_or_typeContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    an_id_table(): An_id_tableContext | null;
    type_id(): Type_idContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Id_table_or_atContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    id_table_or_type(): Id_table_or_typeContext;
    AT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class KeywordContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    keyword_compat(): Keyword_compatContext | null;
    keyword_expr_uncompat(): Keyword_expr_uncompatContext | null;
    keyword_table_uncompat(): Keyword_table_uncompatContext | null;
    keyword_select_uncompat(): Keyword_select_uncompatContext | null;
    keyword_alter_uncompat(): Keyword_alter_uncompatContext | null;
    keyword_in_uncompat(): Keyword_in_uncompatContext | null;
    keyword_window_uncompat(): Keyword_window_uncompatContext | null;
    keyword_hint_uncompat(): Keyword_hint_uncompatContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_expr_uncompatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ASYMMETRIC(): antlr.TerminalNode | null;
    BETWEEN(): antlr.TerminalNode | null;
    BITCAST(): antlr.TerminalNode | null;
    CASE(): antlr.TerminalNode | null;
    CAST(): antlr.TerminalNode | null;
    CUBE(): antlr.TerminalNode | null;
    CURRENT_DATE(): antlr.TerminalNode | null;
    CURRENT_TIME(): antlr.TerminalNode | null;
    CURRENT_TIMESTAMP(): antlr.TerminalNode | null;
    EMPTY_ACTION(): antlr.TerminalNode | null;
    EXISTS(): antlr.TerminalNode | null;
    FROM(): antlr.TerminalNode | null;
    FULL(): antlr.TerminalNode | null;
    HOP(): antlr.TerminalNode | null;
    JSON_EXISTS(): antlr.TerminalNode | null;
    JSON_VALUE(): antlr.TerminalNode | null;
    JSON_QUERY(): antlr.TerminalNode | null;
    LOCAL(): antlr.TerminalNode | null;
    NOT(): antlr.TerminalNode | null;
    NULL(): antlr.TerminalNode | null;
    PROCESS(): antlr.TerminalNode | null;
    REDUCE(): antlr.TerminalNode | null;
    RETURN(): antlr.TerminalNode | null;
    RETURNING(): antlr.TerminalNode | null;
    ROLLUP(): antlr.TerminalNode | null;
    SELECT(): antlr.TerminalNode | null;
    SYMMETRIC(): antlr.TerminalNode | null;
    UNBOUNDED(): antlr.TerminalNode | null;
    WHEN(): antlr.TerminalNode | null;
    WHERE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_table_uncompatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ANY(): antlr.TerminalNode | null;
    ERASE(): antlr.TerminalNode | null;
    STREAM(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_select_uncompatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ALL(): antlr.TerminalNode | null;
    AS(): antlr.TerminalNode | null;
    ASSUME(): antlr.TerminalNode | null;
    DISTINCT(): antlr.TerminalNode | null;
    EXCEPT(): antlr.TerminalNode | null;
    HAVING(): antlr.TerminalNode | null;
    INTERSECT(): antlr.TerminalNode | null;
    LIMIT(): antlr.TerminalNode | null;
    UNION(): antlr.TerminalNode | null;
    WINDOW(): antlr.TerminalNode | null;
    WITHOUT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_alter_uncompatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COLUMN(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_in_uncompatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COMPACT(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_window_uncompatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GROUPS(): antlr.TerminalNode | null;
    RANGE(): antlr.TerminalNode | null;
    ROWS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_hint_uncompatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SCHEMA(): antlr.TerminalNode | null;
    COLUMNS(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_as_compatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ATTRIBUTES(): antlr.TerminalNode | null;
    CONNECT(): antlr.TerminalNode | null;
    CONSUMER(): antlr.TerminalNode | null;
    DATA(): antlr.TerminalNode | null;
    DESCRIBE(): antlr.TerminalNode | null;
    DIRECTORY(): antlr.TerminalNode | null;
    FIRST(): antlr.TerminalNode | null;
    GRANT(): antlr.TerminalNode | null;
    INITIAL(): antlr.TerminalNode | null;
    LAST(): antlr.TerminalNode | null;
    LEGACY(): antlr.TerminalNode | null;
    MANAGE(): antlr.TerminalNode | null;
    MATCHES(): antlr.TerminalNode | null;
    MATCH_RECOGNIZE(): antlr.TerminalNode | null;
    MEASURES(): antlr.TerminalNode | null;
    MICROSECONDS(): antlr.TerminalNode | null;
    MILLISECONDS(): antlr.TerminalNode | null;
    MODIFY(): antlr.TerminalNode | null;
    NANOSECONDS(): antlr.TerminalNode | null;
    NEXT(): antlr.TerminalNode | null;
    OMIT(): antlr.TerminalNode | null;
    ONE(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    PARALLEL(): antlr.TerminalNode | null;
    PAST(): antlr.TerminalNode | null;
    PATTERN(): antlr.TerminalNode | null;
    PER(): antlr.TerminalNode | null;
    PERMUTE(): antlr.TerminalNode | null;
    PRIVILEGES(): antlr.TerminalNode | null;
    QUEUE(): antlr.TerminalNode | null;
    REMOVE(): antlr.TerminalNode | null;
    REPLICATION(): antlr.TerminalNode | null;
    REVOKE(): antlr.TerminalNode | null;
    SECONDS(): antlr.TerminalNode | null;
    SEEK(): antlr.TerminalNode | null;
    SHOW(): antlr.TerminalNode | null;
    SKIP_RULE(): antlr.TerminalNode | null;
    SOURCE(): antlr.TerminalNode | null;
    SUBSET(): antlr.TerminalNode | null;
    TABLES(): antlr.TerminalNode | null;
    TOPIC(): antlr.TerminalNode | null;
    TYPE(): antlr.TerminalNode | null;
    UNMATCHED(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Keyword_compatContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ABORT(): antlr.TerminalNode | null;
    ACTION(): antlr.TerminalNode | null;
    ADD(): antlr.TerminalNode | null;
    AFTER(): antlr.TerminalNode | null;
    ALTER(): antlr.TerminalNode | null;
    ANALYZE(): antlr.TerminalNode | null;
    AND(): antlr.TerminalNode | null;
    ANSI(): antlr.TerminalNode | null;
    ARRAY(): antlr.TerminalNode | null;
    ASC(): antlr.TerminalNode | null;
    ASYNC(): antlr.TerminalNode | null;
    ATTACH(): antlr.TerminalNode | null;
    ATTRIBUTES(): antlr.TerminalNode | null;
    AUTOINCREMENT(): antlr.TerminalNode | null;
    BEFORE(): antlr.TerminalNode | null;
    BEGIN(): antlr.TerminalNode | null;
    BERNOULLI(): antlr.TerminalNode | null;
    BY(): antlr.TerminalNode | null;
    CASCADE(): antlr.TerminalNode | null;
    CHANGEFEED(): antlr.TerminalNode | null;
    CHECK(): antlr.TerminalNode | null;
    COLLATE(): antlr.TerminalNode | null;
    COMMIT(): antlr.TerminalNode | null;
    CONDITIONAL(): antlr.TerminalNode | null;
    CONFLICT(): antlr.TerminalNode | null;
    CONNECT(): antlr.TerminalNode | null;
    CONSTRAINT(): antlr.TerminalNode | null;
    CONSUMER(): antlr.TerminalNode | null;
    COVER(): antlr.TerminalNode | null;
    CREATE(): antlr.TerminalNode | null;
    CROSS(): antlr.TerminalNode | null;
    CURRENT(): antlr.TerminalNode | null;
    DATA(): antlr.TerminalNode | null;
    DATABASE(): antlr.TerminalNode | null;
    DECIMAL(): antlr.TerminalNode | null;
    DECLARE(): antlr.TerminalNode | null;
    DEFAULT(): antlr.TerminalNode | null;
    DEFERRABLE(): antlr.TerminalNode | null;
    DEFERRED(): antlr.TerminalNode | null;
    DEFINE(): antlr.TerminalNode | null;
    DELETE(): antlr.TerminalNode | null;
    DESC(): antlr.TerminalNode | null;
    DESCRIBE(): antlr.TerminalNode | null;
    DETACH(): antlr.TerminalNode | null;
    DIRECTORY(): antlr.TerminalNode | null;
    DISABLE(): antlr.TerminalNode | null;
    DISCARD(): antlr.TerminalNode | null;
    DO(): antlr.TerminalNode | null;
    DROP(): antlr.TerminalNode | null;
    EACH(): antlr.TerminalNode | null;
    ELSE(): antlr.TerminalNode | null;
    EMPTY(): antlr.TerminalNode | null;
    ENCRYPTED(): antlr.TerminalNode | null;
    END(): antlr.TerminalNode | null;
    ERROR(): antlr.TerminalNode | null;
    ESCAPE(): antlr.TerminalNode | null;
    EVALUATE(): antlr.TerminalNode | null;
    EXCLUDE(): antlr.TerminalNode | null;
    EXCLUSION(): antlr.TerminalNode | null;
    EXCLUSIVE(): antlr.TerminalNode | null;
    EXPLAIN(): antlr.TerminalNode | null;
    EXPORT(): antlr.TerminalNode | null;
    EXTERNAL(): antlr.TerminalNode | null;
    FAIL(): antlr.TerminalNode | null;
    FAMILY(): antlr.TerminalNode | null;
    FILTER(): antlr.TerminalNode | null;
    FIRST(): antlr.TerminalNode | null;
    FLATTEN(): antlr.TerminalNode | null;
    FOLLOWING(): antlr.TerminalNode | null;
    FOR(): antlr.TerminalNode | null;
    FOREIGN(): antlr.TerminalNode | null;
    FUNCTION(): antlr.TerminalNode | null;
    GLOB(): antlr.TerminalNode | null;
    GRANT(): antlr.TerminalNode | null;
    GROUP(): antlr.TerminalNode | null;
    GROUPING(): antlr.TerminalNode | null;
    HASH(): antlr.TerminalNode | null;
    IF(): antlr.TerminalNode | null;
    IGNORE(): antlr.TerminalNode | null;
    ILIKE(): antlr.TerminalNode | null;
    IMMEDIATE(): antlr.TerminalNode | null;
    IMPORT(): antlr.TerminalNode | null;
    IN(): antlr.TerminalNode | null;
    INDEX(): antlr.TerminalNode | null;
    INDEXED(): antlr.TerminalNode | null;
    INHERITS(): antlr.TerminalNode | null;
    INITIAL(): antlr.TerminalNode | null;
    INITIALLY(): antlr.TerminalNode | null;
    INNER(): antlr.TerminalNode | null;
    INSERT(): antlr.TerminalNode | null;
    INSTEAD(): antlr.TerminalNode | null;
    INTO(): antlr.TerminalNode | null;
    IS(): antlr.TerminalNode | null;
    ISNULL(): antlr.TerminalNode | null;
    JOIN(): antlr.TerminalNode | null;
    KEY(): antlr.TerminalNode | null;
    LAST(): antlr.TerminalNode | null;
    LEFT(): antlr.TerminalNode | null;
    LEGACY(): antlr.TerminalNode | null;
    LIKE(): antlr.TerminalNode | null;
    MANAGE(): antlr.TerminalNode | null;
    MATCH(): antlr.TerminalNode | null;
    MATCHES(): antlr.TerminalNode | null;
    MATCH_RECOGNIZE(): antlr.TerminalNode | null;
    MEASURES(): antlr.TerminalNode | null;
    MICROSECONDS(): antlr.TerminalNode | null;
    MILLISECONDS(): antlr.TerminalNode | null;
    MODIFY(): antlr.TerminalNode | null;
    NANOSECONDS(): antlr.TerminalNode | null;
    NATURAL(): antlr.TerminalNode | null;
    NEXT(): antlr.TerminalNode | null;
    NO(): antlr.TerminalNode | null;
    NOTNULL(): antlr.TerminalNode | null;
    NULLS(): antlr.TerminalNode | null;
    OBJECT(): antlr.TerminalNode | null;
    OF(): antlr.TerminalNode | null;
    OFFSET(): antlr.TerminalNode | null;
    OMIT(): antlr.TerminalNode | null;
    ON(): antlr.TerminalNode | null;
    ONE(): antlr.TerminalNode | null;
    ONLY(): antlr.TerminalNode | null;
    OPTION(): antlr.TerminalNode | null;
    OR(): antlr.TerminalNode | null;
    ORDER(): antlr.TerminalNode | null;
    OTHERS(): antlr.TerminalNode | null;
    OUTER(): antlr.TerminalNode | null;
    OVER(): antlr.TerminalNode | null;
    PARALLEL(): antlr.TerminalNode | null;
    PARTITION(): antlr.TerminalNode | null;
    PASSING(): antlr.TerminalNode | null;
    PASSWORD(): antlr.TerminalNode | null;
    PAST(): antlr.TerminalNode | null;
    PATTERN(): antlr.TerminalNode | null;
    PER(): antlr.TerminalNode | null;
    PERMUTE(): antlr.TerminalNode | null;
    PLAN(): antlr.TerminalNode | null;
    PRAGMA(): antlr.TerminalNode | null;
    PRECEDING(): antlr.TerminalNode | null;
    PRESORT(): antlr.TerminalNode | null;
    PRIMARY(): antlr.TerminalNode | null;
    PRIVILEGES(): antlr.TerminalNode | null;
    QUEUE(): antlr.TerminalNode | null;
    RAISE(): antlr.TerminalNode | null;
    REFERENCES(): antlr.TerminalNode | null;
    REGEXP(): antlr.TerminalNode | null;
    REINDEX(): antlr.TerminalNode | null;
    RELEASE(): antlr.TerminalNode | null;
    REMOVE(): antlr.TerminalNode | null;
    RENAME(): antlr.TerminalNode | null;
    REPLACE(): antlr.TerminalNode | null;
    REPLICATION(): antlr.TerminalNode | null;
    RESET(): antlr.TerminalNode | null;
    RESPECT(): antlr.TerminalNode | null;
    RESTRICT(): antlr.TerminalNode | null;
    RESULT(): antlr.TerminalNode | null;
    REVERT(): antlr.TerminalNode | null;
    REVOKE(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    RLIKE(): antlr.TerminalNode | null;
    ROLLBACK(): antlr.TerminalNode | null;
    ROW(): antlr.TerminalNode | null;
    SAMPLE(): antlr.TerminalNode | null;
    SAVEPOINT(): antlr.TerminalNode | null;
    SECONDS(): antlr.TerminalNode | null;
    SEEK(): antlr.TerminalNode | null;
    SEMI(): antlr.TerminalNode | null;
    SETS(): antlr.TerminalNode | null;
    SHOW(): antlr.TerminalNode | null;
    SKIP_RULE(): antlr.TerminalNode | null;
    SOURCE(): antlr.TerminalNode | null;
    SUBQUERY(): antlr.TerminalNode | null;
    SUBSET(): antlr.TerminalNode | null;
    SYMBOLS(): antlr.TerminalNode | null;
    SYNC(): antlr.TerminalNode | null;
    SYSTEM(): antlr.TerminalNode | null;
    TABLE(): antlr.TerminalNode | null;
    TABLES(): antlr.TerminalNode | null;
    TABLESAMPLE(): antlr.TerminalNode | null;
    TABLESTORE(): antlr.TerminalNode | null;
    TEMP(): antlr.TerminalNode | null;
    TEMPORARY(): antlr.TerminalNode | null;
    THEN(): antlr.TerminalNode | null;
    TIES(): antlr.TerminalNode | null;
    TO(): antlr.TerminalNode | null;
    TOPIC(): antlr.TerminalNode | null;
    TRANSACTION(): antlr.TerminalNode | null;
    TRIGGER(): antlr.TerminalNode | null;
    TYPE(): antlr.TerminalNode | null;
    UNCONDITIONAL(): antlr.TerminalNode | null;
    UNIQUE(): antlr.TerminalNode | null;
    UNKNOWN(): antlr.TerminalNode | null;
    UNMATCHED(): antlr.TerminalNode | null;
    UPDATE(): antlr.TerminalNode | null;
    UPSERT(): antlr.TerminalNode | null;
    USE(): antlr.TerminalNode | null;
    USER(): antlr.TerminalNode | null;
    USING(): antlr.TerminalNode | null;
    VACUUM(): antlr.TerminalNode | null;
    VALUES(): antlr.TerminalNode | null;
    VIEW(): antlr.TerminalNode | null;
    VIRTUAL(): antlr.TerminalNode | null;
    WITH(): antlr.TerminalNode | null;
    WRAPPER(): antlr.TerminalNode | null;
    XOR(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Type_idContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OPTIONAL(): antlr.TerminalNode | null;
    TUPLE(): antlr.TerminalNode | null;
    STRUCT(): antlr.TerminalNode | null;
    VARIANT(): antlr.TerminalNode | null;
    LIST(): antlr.TerminalNode | null;
    FLOW(): antlr.TerminalNode | null;
    DICT(): antlr.TerminalNode | null;
    SET(): antlr.TerminalNode | null;
    ENUM(): antlr.TerminalNode | null;
    RESOURCE(): antlr.TerminalNode | null;
    TAGGED(): antlr.TerminalNode | null;
    CALLABLE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Bool_valueContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TRUE(): antlr.TerminalNode | null;
    FALSE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class RealContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    REAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class IntegerContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DIGITS(): antlr.TerminalNode | null;
    INTEGER_VALUE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sql_query_yqContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sql_stmt_list_yq(): Sql_stmt_list_yqContext | null;
    PRAGMA(): antlr.TerminalNode | null;
    ANSI(): antlr.TerminalNode | null;
    DIGITS(): antlr.TerminalNode | null;
    ansi_sql_stmt_list(): Ansi_sql_stmt_listContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sql_stmt_list_yqContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sql_stmt_yq(): Sql_stmt_yqContext[];
    sql_stmt_yq(i: number): Sql_stmt_yqContext | null;
    EOF(): antlr.TerminalNode;
    SEMICOLON(): antlr.TerminalNode[];
    SEMICOLON(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sql_stmt_yqContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    sql_stmt_core_yq(): Sql_stmt_core_yqContext;
    EXPLAIN(): antlr.TerminalNode | null;
    QUERY(): antlr.TerminalNode | null;
    PLAN(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Sql_stmt_core_yqContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    pragma_stmt(): Pragma_stmtContext | null;
    select_stmt(): Select_stmtContext | null;
    named_nodes_stmt(): Named_nodes_stmtContext | null;
    use_stmt(): Use_stmtContext | null;
    into_table_stmt_yq(): Into_table_stmt_yqContext | null;
    declare_stmt(): Declare_stmtContext | null;
    import_stmt(): Import_stmtContext | null;
    export_stmt(): Export_stmtContext | null;
    do_stmt(): Do_stmtContext | null;
    define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext | null;
    if_stmt(): If_stmtContext | null;
    for_stmt(): For_stmtContext | null;
    values_stmt(): Values_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Replication_nameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AS(): antlr.TerminalNode;
    object_ref(): Object_refContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Where_exprContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WHERE(): antlr.TerminalNode;
    expr(): ExprContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class From_stmtContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FROM(): antlr.TerminalNode;
    join_source(): Join_sourceContext;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
export declare class Alter_table_for_autocompleteContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    alter_table_stmt(): Alter_table_stmtContext | null;
    alter_table_store_stmt(): Alter_table_store_stmtContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: YQLVisitor<Result>): Result | null;
}
