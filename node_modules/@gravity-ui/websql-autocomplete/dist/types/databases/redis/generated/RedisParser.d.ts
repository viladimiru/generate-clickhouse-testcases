import * as antlr from "antlr4ng";
import { RedisParserVisitor } from "./RedisParserVisitor.js";
export declare class RedisParser extends antlr.Parser {
    static readonly SPACE = 1;
    static readonly NEWLINE = 2;
    static readonly COPY = 3;
    static readonly DB = 4;
    static readonly REPLACE = 5;
    static readonly DEL = 6;
    static readonly UNLINK = 7;
    static readonly DUMP = 8;
    static readonly EXISTS = 9;
    static readonly EXPIRE = 10;
    static readonly GT = 11;
    static readonly LT = 12;
    static readonly NX = 13;
    static readonly XX = 14;
    static readonly EXPIREAT = 15;
    static readonly EXPIRETIME = 16;
    static readonly PEXPIRE = 17;
    static readonly PEXPIREAT = 18;
    static readonly PEXPIRETIME = 19;
    static readonly KEYS = 20;
    static readonly MOVE = 21;
    static readonly OBJECT = 22;
    static readonly ENCODING = 23;
    static readonly FREQ = 24;
    static readonly IDLETIME = 25;
    static readonly REFCOUNT = 26;
    static readonly PERSIST = 27;
    static readonly TTL = 28;
    static readonly PTTL = 29;
    static readonly RANDOMKEY = 30;
    static readonly RENAME = 31;
    static readonly RENAMENX = 32;
    static readonly SCAN = 33;
    static readonly MATCH = 34;
    static readonly COUNT = 35;
    static readonly TYPE = 36;
    static readonly TOUCH = 37;
    static readonly WAIT = 38;
    static readonly LEFT = 39;
    static readonly RIGHT = 40;
    static readonly BEFORE = 41;
    static readonly AFTER = 42;
    static readonly RANK = 43;
    static readonly MAXLEN = 44;
    static readonly LIMIT = 45;
    static readonly MIN = 46;
    static readonly MAX = 47;
    static readonly CH = 48;
    static readonly WITHSCORE = 49;
    static readonly WITHSCORES = 50;
    static readonly WEIGHTS = 51;
    static readonly AGGREGATE = 52;
    static readonly SUM = 53;
    static readonly BYSCORE = 54;
    static readonly BYLEX = 55;
    static readonly REV = 56;
    static readonly FIELDS = 57;
    static readonly WITHVALUES = 58;
    static readonly NOVALUES = 59;
    static readonly SET = 60;
    static readonly GET = 61;
    static readonly INCR = 62;
    static readonly INCRBY = 63;
    static readonly DECR = 64;
    static readonly DECRBY = 65;
    static readonly EX = 66;
    static readonly PX = 67;
    static readonly EXAT = 68;
    static readonly PXAT = 69;
    static readonly KEEPTTL = 70;
    static readonly APPEND = 71;
    static readonly GETDEL = 72;
    static readonly GETEX = 73;
    static readonly GETRANGE = 74;
    static readonly GETSET = 75;
    static readonly MGET = 76;
    static readonly MSET = 77;
    static readonly MSETNX = 78;
    static readonly PSETEX = 79;
    static readonly SETEX = 80;
    static readonly SETNX = 81;
    static readonly SETRANGE = 82;
    static readonly STRLEN = 83;
    static readonly SUBSTR = 84;
    static readonly LMOVE = 85;
    static readonly BLMOVE = 86;
    static readonly LMPOP = 87;
    static readonly BLMPOP = 88;
    static readonly LPOP = 89;
    static readonly BLPOP = 90;
    static readonly RPOP = 91;
    static readonly BRPOP = 92;
    static readonly RPOPLPUSH = 93;
    static readonly BRPOPLPUSH = 94;
    static readonly LINDEX = 95;
    static readonly LINSERT = 96;
    static readonly LLEN = 97;
    static readonly LPOS = 98;
    static readonly LPUSH = 99;
    static readonly LPUSHX = 100;
    static readonly RPUSH = 101;
    static readonly RPUSHX = 102;
    static readonly LRANGE = 103;
    static readonly LREM = 104;
    static readonly LSET = 105;
    static readonly LTRIM = 106;
    static readonly SADD = 107;
    static readonly SCARD = 108;
    static readonly SDIFF = 109;
    static readonly SDIFFSTORE = 110;
    static readonly SINTER = 111;
    static readonly SINTERCARD = 112;
    static readonly SINTERSTORE = 113;
    static readonly SISMEMBER = 114;
    static readonly SMISMEMBER = 115;
    static readonly SMEMBERS = 116;
    static readonly SMOVE = 117;
    static readonly SPOP = 118;
    static readonly SRANDMEMBER = 119;
    static readonly SREM = 120;
    static readonly SSCAN = 121;
    static readonly SUNION = 122;
    static readonly SUNIONSTORE = 123;
    static readonly ZMPOP = 124;
    static readonly BZMPOP = 125;
    static readonly ZPOPMAX = 126;
    static readonly BZPOPMAX = 127;
    static readonly ZPOPMIN = 128;
    static readonly BZPOPMIN = 129;
    static readonly ZADD = 130;
    static readonly ZCARD = 131;
    static readonly ZCOUNT = 132;
    static readonly ZDIFF = 133;
    static readonly ZDIFFSTORE = 134;
    static readonly ZINCRBY = 135;
    static readonly ZINTER = 136;
    static readonly ZINTERCARD = 137;
    static readonly ZINTERSTORE = 138;
    static readonly ZLEXCOUNT = 139;
    static readonly ZSCORE = 140;
    static readonly ZMSCORE = 141;
    static readonly ZRANDMEMBER = 142;
    static readonly ZRANGE = 143;
    static readonly ZRANGEBYLEX = 144;
    static readonly ZRANGEBYSCORE = 145;
    static readonly ZRANGESTORE = 146;
    static readonly ZRANK = 147;
    static readonly ZREM = 148;
    static readonly ZREMRANGEBYLEX = 149;
    static readonly ZREMRANGEBYRANK = 150;
    static readonly ZREMRANGEBYSCORE = 151;
    static readonly ZREVRANGE = 152;
    static readonly ZREVRANGEBYLEX = 153;
    static readonly ZREVRANGEBYSCORE = 154;
    static readonly ZREVRANK = 155;
    static readonly ZSCAN = 156;
    static readonly ZUNION = 157;
    static readonly ZUNIONSTORE = 158;
    static readonly HDEL = 159;
    static readonly HEXISTS = 160;
    static readonly HEXPIRE = 161;
    static readonly HPEXPIRE = 162;
    static readonly HEXPIREAT = 163;
    static readonly HPEXPIREAT = 164;
    static readonly HEXPIRETIME = 165;
    static readonly HPEXPIRETIME = 166;
    static readonly HGET = 167;
    static readonly HMGET = 168;
    static readonly HGETALL = 169;
    static readonly HINCRBY = 170;
    static readonly HKEYS = 171;
    static readonly HLEN = 172;
    static readonly HSET = 173;
    static readonly HMSET = 174;
    static readonly HSETNX = 175;
    static readonly HPERSIST = 176;
    static readonly HTTL = 177;
    static readonly HPTTL = 178;
    static readonly HRANDFIELD = 179;
    static readonly HSCAN = 180;
    static readonly HSTRLEN = 181;
    static readonly HVALS = 182;
    static readonly SINGLE_QUOTE = 183;
    static readonly DOUBLE_QUOTE = 184;
    static readonly POSITIVE_DECIMAL_LITERAL = 185;
    static readonly DECIMAL_LITERAL = 186;
    static readonly DECIMAL_SCORE_LITERAL = 187;
    static readonly IDENTIFIER = 188;
    static readonly RULE_root = 0;
    static readonly RULE_commands = 1;
    static readonly RULE_command = 2;
    static readonly RULE_commonCommand = 3;
    static readonly RULE_stringCommand = 4;
    static readonly RULE_listCommand = 5;
    static readonly RULE_setCommand = 6;
    static readonly RULE_sortedSetCommand = 7;
    static readonly RULE_hashCommand = 8;
    static readonly RULE_hdelCommand = 9;
    static readonly RULE_hexistsCommand = 10;
    static readonly RULE_hexpireCommand = 11;
    static readonly RULE_hpexpireCommand = 12;
    static readonly RULE_fieldsClause = 13;
    static readonly RULE_hexpireAtCommand = 14;
    static readonly RULE_hpexpireAtCommand = 15;
    static readonly RULE_hexpireTimeCommand = 16;
    static readonly RULE_hpexpireTimeCommand = 17;
    static readonly RULE_hgetCommand = 18;
    static readonly RULE_hmgetCommand = 19;
    static readonly RULE_hgetAllCommand = 20;
    static readonly RULE_hincrByCommand = 21;
    static readonly RULE_hkeysCommand = 22;
    static readonly RULE_hlenCommand = 23;
    static readonly RULE_hsetCommand = 24;
    static readonly RULE_hmsetCommand = 25;
    static readonly RULE_hsetnxCommand = 26;
    static readonly RULE_hpersistCommand = 27;
    static readonly RULE_httlCommand = 28;
    static readonly RULE_hpttlCommand = 29;
    static readonly RULE_hrandfieldCommand = 30;
    static readonly RULE_hscanCommand = 31;
    static readonly RULE_hstrlenCommand = 32;
    static readonly RULE_hvalsCommand = 33;
    static readonly RULE_zmpopCommand = 34;
    static readonly RULE_bzmpopCommand = 35;
    static readonly RULE_zpopmaxCommand = 36;
    static readonly RULE_bzpopmaxCommand = 37;
    static readonly RULE_zpopminCommand = 38;
    static readonly RULE_bzpopminCommand = 39;
    static readonly RULE_minMaxClause = 40;
    static readonly RULE_zaddCommand = 41;
    static readonly RULE_keyUpdateClause = 42;
    static readonly RULE_scoreMemberClause = 43;
    static readonly RULE_zcardCommand = 44;
    static readonly RULE_zcountCommand = 45;
    static readonly RULE_zdiffCommand = 46;
    static readonly RULE_zdiffstoreCommand = 47;
    static readonly RULE_zincrbyCommand = 48;
    static readonly RULE_zinterCommand = 49;
    static readonly RULE_zintercardCommand = 50;
    static readonly RULE_zinterstoreCommand = 51;
    static readonly RULE_weightsClause = 52;
    static readonly RULE_aggregateClause = 53;
    static readonly RULE_zlexcountCommand = 54;
    static readonly RULE_zscoreCommand = 55;
    static readonly RULE_zmscoreCommand = 56;
    static readonly RULE_zrandmemberCommand = 57;
    static readonly RULE_zrangeCommand = 58;
    static readonly RULE_zrangebylexCommand = 59;
    static readonly RULE_zrangebyscoreCommand = 60;
    static readonly RULE_zrangestoreCommand = 61;
    static readonly RULE_rangeTypeClause = 62;
    static readonly RULE_limitOffsetClause = 63;
    static readonly RULE_zrankCommand = 64;
    static readonly RULE_zrevrankCommand = 65;
    static readonly RULE_zremCommand = 66;
    static readonly RULE_zremrangebylexCommand = 67;
    static readonly RULE_zremrangebyrankCommand = 68;
    static readonly RULE_zremrangebyscoreCommand = 69;
    static readonly RULE_zrevrangeCommand = 70;
    static readonly RULE_zrevrangebylexCommand = 71;
    static readonly RULE_zrevrangebyscoreCommand = 72;
    static readonly RULE_zscanCommand = 73;
    static readonly RULE_zunionCommand = 74;
    static readonly RULE_zunionstoreCommand = 75;
    static readonly RULE_saddCommand = 76;
    static readonly RULE_scardCommand = 77;
    static readonly RULE_sdiffCommand = 78;
    static readonly RULE_sdiffstoreCommand = 79;
    static readonly RULE_sinterCommand = 80;
    static readonly RULE_sintercardCommand = 81;
    static readonly RULE_limitClause = 82;
    static readonly RULE_sinterstoreCommand = 83;
    static readonly RULE_sismemberCommand = 84;
    static readonly RULE_smismemberCommand = 85;
    static readonly RULE_smembersCommand = 86;
    static readonly RULE_smoveCommand = 87;
    static readonly RULE_spopCommand = 88;
    static readonly RULE_srandmemberCommand = 89;
    static readonly RULE_sremCommand = 90;
    static readonly RULE_sscanComman = 91;
    static readonly RULE_sunionCommand = 92;
    static readonly RULE_sunionstoreCommand = 93;
    static readonly RULE_lmoveCommand = 94;
    static readonly RULE_leftOrRightClause = 95;
    static readonly RULE_blmoveCommand = 96;
    static readonly RULE_lmpopCommand = 97;
    static readonly RULE_blmpopCommand = 98;
    static readonly RULE_lpopCommand = 99;
    static readonly RULE_blpopCommand = 100;
    static readonly RULE_rpopCommand = 101;
    static readonly RULE_brpopCommand = 102;
    static readonly RULE_rpopLpushCommand = 103;
    static readonly RULE_brpopLpushCommand = 104;
    static readonly RULE_lindexCommand = 105;
    static readonly RULE_linsertCommand = 106;
    static readonly RULE_beforeOrAfterClause = 107;
    static readonly RULE_llenCommand = 108;
    static readonly RULE_lposCommand = 109;
    static readonly RULE_rankClause = 110;
    static readonly RULE_maxLenClause = 111;
    static readonly RULE_lpushCommand = 112;
    static readonly RULE_lpushxCommand = 113;
    static readonly RULE_rpushCommand = 114;
    static readonly RULE_rpushxCommand = 115;
    static readonly RULE_lrangeCommand = 116;
    static readonly RULE_lremCommand = 117;
    static readonly RULE_lsetCommand = 118;
    static readonly RULE_ltrimCommand = 119;
    static readonly RULE_copyCommand = 120;
    static readonly RULE_dbClause = 121;
    static readonly RULE_databaseName = 122;
    static readonly RULE_deleteCommand = 123;
    static readonly RULE_unlinkCommand = 124;
    static readonly RULE_dumpCommand = 125;
    static readonly RULE_existsCommand = 126;
    static readonly RULE_expireCommand = 127;
    static readonly RULE_expireAtCommand = 128;
    static readonly RULE_pExpireCommand = 129;
    static readonly RULE_pExpireAtCommand = 130;
    static readonly RULE_expireOptions = 131;
    static readonly RULE_expireTimeCommand = 132;
    static readonly RULE_pExpireTimeCommand = 133;
    static readonly RULE_keysCommand = 134;
    static readonly RULE_moveCommand = 135;
    static readonly RULE_objectCommand = 136;
    static readonly RULE_objectOptions = 137;
    static readonly RULE_persistCommand = 138;
    static readonly RULE_ttlCommand = 139;
    static readonly RULE_pTtlCommand = 140;
    static readonly RULE_randomKeyCommand = 141;
    static readonly RULE_renameCommand = 142;
    static readonly RULE_renameNxCommand = 143;
    static readonly RULE_scanCommand = 144;
    static readonly RULE_matchClause = 145;
    static readonly RULE_countClause = 146;
    static readonly RULE_typeClause = 147;
    static readonly RULE_touchCommand = 148;
    static readonly RULE_typeCommand = 149;
    static readonly RULE_waitCommand = 150;
    static readonly RULE_stringSetCommand = 151;
    static readonly RULE_keyExistenceClause = 152;
    static readonly RULE_expirationClause = 153;
    static readonly RULE_getCommand = 154;
    static readonly RULE_incrementCommand = 155;
    static readonly RULE_incrementByCommand = 156;
    static readonly RULE_decrementCommand = 157;
    static readonly RULE_decrementByCommand = 158;
    static readonly RULE_appendCommand = 159;
    static readonly RULE_getDeleteCommand = 160;
    static readonly RULE_getExCommand = 161;
    static readonly RULE_getRangeCommand = 162;
    static readonly RULE_getSetCommand = 163;
    static readonly RULE_mGetCommand = 164;
    static readonly RULE_mSetCommand = 165;
    static readonly RULE_mSetNxCommand = 166;
    static readonly RULE_pSetExCommand = 167;
    static readonly RULE_setExCommand = 168;
    static readonly RULE_setNxCommand = 169;
    static readonly RULE_setRangeCommand = 170;
    static readonly RULE_stringLengthCommand = 171;
    static readonly RULE_substringCommand = 172;
    static readonly RULE_decimal = 173;
    static readonly RULE_decimalScore = 174;
    static readonly RULE_identifier = 175;
    static readonly RULE_lexicalScore = 176;
    static readonly RULE_stringKeyName = 177;
    static readonly RULE_listKeyName = 178;
    static readonly RULE_setKeyName = 179;
    static readonly RULE_sortedSetKeyName = 180;
    static readonly RULE_hashKeyName = 181;
    static readonly RULE_keyName = 182;
    static readonly RULE_keyPattern = 183;
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly ruleNames: string[];
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException;
    constructor(input: antlr.TokenStream);
    root(): RootContext;
    commands(): CommandsContext;
    command(): CommandContext;
    commonCommand(): CommonCommandContext;
    stringCommand(): StringCommandContext;
    listCommand(): ListCommandContext;
    setCommand(): SetCommandContext;
    sortedSetCommand(): SortedSetCommandContext;
    hashCommand(): HashCommandContext;
    hdelCommand(): HdelCommandContext;
    hexistsCommand(): HexistsCommandContext;
    hexpireCommand(): HexpireCommandContext;
    hpexpireCommand(): HpexpireCommandContext;
    fieldsClause(): FieldsClauseContext;
    hexpireAtCommand(): HexpireAtCommandContext;
    hpexpireAtCommand(): HpexpireAtCommandContext;
    hexpireTimeCommand(): HexpireTimeCommandContext;
    hpexpireTimeCommand(): HpexpireTimeCommandContext;
    hgetCommand(): HgetCommandContext;
    hmgetCommand(): HmgetCommandContext;
    hgetAllCommand(): HgetAllCommandContext;
    hincrByCommand(): HincrByCommandContext;
    hkeysCommand(): HkeysCommandContext;
    hlenCommand(): HlenCommandContext;
    hsetCommand(): HsetCommandContext;
    hmsetCommand(): HmsetCommandContext;
    hsetnxCommand(): HsetnxCommandContext;
    hpersistCommand(): HpersistCommandContext;
    httlCommand(): HttlCommandContext;
    hpttlCommand(): HpttlCommandContext;
    hrandfieldCommand(): HrandfieldCommandContext;
    hscanCommand(): HscanCommandContext;
    hstrlenCommand(): HstrlenCommandContext;
    hvalsCommand(): HvalsCommandContext;
    zmpopCommand(): ZmpopCommandContext;
    bzmpopCommand(): BzmpopCommandContext;
    zpopmaxCommand(): ZpopmaxCommandContext;
    bzpopmaxCommand(): BzpopmaxCommandContext;
    zpopminCommand(): ZpopminCommandContext;
    bzpopminCommand(): BzpopminCommandContext;
    minMaxClause(): MinMaxClauseContext;
    zaddCommand(): ZaddCommandContext;
    keyUpdateClause(): KeyUpdateClauseContext;
    scoreMemberClause(): ScoreMemberClauseContext;
    zcardCommand(): ZcardCommandContext;
    zcountCommand(): ZcountCommandContext;
    zdiffCommand(): ZdiffCommandContext;
    zdiffstoreCommand(): ZdiffstoreCommandContext;
    zincrbyCommand(): ZincrbyCommandContext;
    zinterCommand(): ZinterCommandContext;
    zintercardCommand(): ZintercardCommandContext;
    zinterstoreCommand(): ZinterstoreCommandContext;
    weightsClause(): WeightsClauseContext;
    aggregateClause(): AggregateClauseContext;
    zlexcountCommand(): ZlexcountCommandContext;
    zscoreCommand(): ZscoreCommandContext;
    zmscoreCommand(): ZmscoreCommandContext;
    zrandmemberCommand(): ZrandmemberCommandContext;
    zrangeCommand(): ZrangeCommandContext;
    zrangebylexCommand(): ZrangebylexCommandContext;
    zrangebyscoreCommand(): ZrangebyscoreCommandContext;
    zrangestoreCommand(): ZrangestoreCommandContext;
    rangeTypeClause(): RangeTypeClauseContext;
    limitOffsetClause(): LimitOffsetClauseContext;
    zrankCommand(): ZrankCommandContext;
    zrevrankCommand(): ZrevrankCommandContext;
    zremCommand(): ZremCommandContext;
    zremrangebylexCommand(): ZremrangebylexCommandContext;
    zremrangebyrankCommand(): ZremrangebyrankCommandContext;
    zremrangebyscoreCommand(): ZremrangebyscoreCommandContext;
    zrevrangeCommand(): ZrevrangeCommandContext;
    zrevrangebylexCommand(): ZrevrangebylexCommandContext;
    zrevrangebyscoreCommand(): ZrevrangebyscoreCommandContext;
    zscanCommand(): ZscanCommandContext;
    zunionCommand(): ZunionCommandContext;
    zunionstoreCommand(): ZunionstoreCommandContext;
    saddCommand(): SaddCommandContext;
    scardCommand(): ScardCommandContext;
    sdiffCommand(): SdiffCommandContext;
    sdiffstoreCommand(): SdiffstoreCommandContext;
    sinterCommand(): SinterCommandContext;
    sintercardCommand(): SintercardCommandContext;
    limitClause(): LimitClauseContext;
    sinterstoreCommand(): SinterstoreCommandContext;
    sismemberCommand(): SismemberCommandContext;
    smismemberCommand(): SmismemberCommandContext;
    smembersCommand(): SmembersCommandContext;
    smoveCommand(): SmoveCommandContext;
    spopCommand(): SpopCommandContext;
    srandmemberCommand(): SrandmemberCommandContext;
    sremCommand(): SremCommandContext;
    sscanComman(): SscanCommanContext;
    sunionCommand(): SunionCommandContext;
    sunionstoreCommand(): SunionstoreCommandContext;
    lmoveCommand(): LmoveCommandContext;
    leftOrRightClause(): LeftOrRightClauseContext;
    blmoveCommand(): BlmoveCommandContext;
    lmpopCommand(): LmpopCommandContext;
    blmpopCommand(): BlmpopCommandContext;
    lpopCommand(): LpopCommandContext;
    blpopCommand(): BlpopCommandContext;
    rpopCommand(): RpopCommandContext;
    brpopCommand(): BrpopCommandContext;
    rpopLpushCommand(): RpopLpushCommandContext;
    brpopLpushCommand(): BrpopLpushCommandContext;
    lindexCommand(): LindexCommandContext;
    linsertCommand(): LinsertCommandContext;
    beforeOrAfterClause(): BeforeOrAfterClauseContext;
    llenCommand(): LlenCommandContext;
    lposCommand(): LposCommandContext;
    rankClause(): RankClauseContext;
    maxLenClause(): MaxLenClauseContext;
    lpushCommand(): LpushCommandContext;
    lpushxCommand(): LpushxCommandContext;
    rpushCommand(): RpushCommandContext;
    rpushxCommand(): RpushxCommandContext;
    lrangeCommand(): LrangeCommandContext;
    lremCommand(): LremCommandContext;
    lsetCommand(): LsetCommandContext;
    ltrimCommand(): LtrimCommandContext;
    copyCommand(): CopyCommandContext;
    dbClause(): DbClauseContext;
    databaseName(): DatabaseNameContext;
    deleteCommand(): DeleteCommandContext;
    unlinkCommand(): UnlinkCommandContext;
    dumpCommand(): DumpCommandContext;
    existsCommand(): ExistsCommandContext;
    expireCommand(): ExpireCommandContext;
    expireAtCommand(): ExpireAtCommandContext;
    pExpireCommand(): PExpireCommandContext;
    pExpireAtCommand(): PExpireAtCommandContext;
    expireOptions(): ExpireOptionsContext;
    expireTimeCommand(): ExpireTimeCommandContext;
    pExpireTimeCommand(): PExpireTimeCommandContext;
    keysCommand(): KeysCommandContext;
    moveCommand(): MoveCommandContext;
    objectCommand(): ObjectCommandContext;
    objectOptions(): ObjectOptionsContext;
    persistCommand(): PersistCommandContext;
    ttlCommand(): TtlCommandContext;
    pTtlCommand(): PTtlCommandContext;
    randomKeyCommand(): RandomKeyCommandContext;
    renameCommand(): RenameCommandContext;
    renameNxCommand(): RenameNxCommandContext;
    scanCommand(): ScanCommandContext;
    matchClause(): MatchClauseContext;
    countClause(): CountClauseContext;
    typeClause(): TypeClauseContext;
    touchCommand(): TouchCommandContext;
    typeCommand(): TypeCommandContext;
    waitCommand(): WaitCommandContext;
    stringSetCommand(): StringSetCommandContext;
    keyExistenceClause(): KeyExistenceClauseContext;
    expirationClause(): ExpirationClauseContext;
    getCommand(): GetCommandContext;
    incrementCommand(): IncrementCommandContext;
    incrementByCommand(): IncrementByCommandContext;
    decrementCommand(): DecrementCommandContext;
    decrementByCommand(): DecrementByCommandContext;
    appendCommand(): AppendCommandContext;
    getDeleteCommand(): GetDeleteCommandContext;
    getExCommand(): GetExCommandContext;
    getRangeCommand(): GetRangeCommandContext;
    getSetCommand(): GetSetCommandContext;
    mGetCommand(): MGetCommandContext;
    mSetCommand(): MSetCommandContext;
    mSetNxCommand(): MSetNxCommandContext;
    pSetExCommand(): PSetExCommandContext;
    setExCommand(): SetExCommandContext;
    setNxCommand(): SetNxCommandContext;
    setRangeCommand(): SetRangeCommandContext;
    stringLengthCommand(): StringLengthCommandContext;
    substringCommand(): SubstringCommandContext;
    decimal(): DecimalContext;
    decimalScore(): DecimalScoreContext;
    identifier(): IdentifierContext;
    lexicalScore(): LexicalScoreContext;
    stringKeyName(): StringKeyNameContext;
    listKeyName(): ListKeyNameContext;
    setKeyName(): SetKeyNameContext;
    sortedSetKeyName(): SortedSetKeyNameContext;
    hashKeyName(): HashKeyNameContext;
    keyName(): KeyNameContext;
    keyPattern(): KeyPatternContext;
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): antlr.ATN;
    private static readonly vocabulary;
    get vocabulary(): antlr.Vocabulary;
    private static readonly decisionsToDFA;
}
export declare class RootContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EOF(): antlr.TerminalNode;
    commands(): CommandsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class CommandsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    command(): CommandContext;
    NEWLINE(): antlr.TerminalNode[];
    NEWLINE(i: number): antlr.TerminalNode | null;
    commands(): CommandsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class CommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    commonCommand(): CommonCommandContext | null;
    stringCommand(): StringCommandContext | null;
    listCommand(): ListCommandContext | null;
    setCommand(): SetCommandContext | null;
    sortedSetCommand(): SortedSetCommandContext | null;
    hashCommand(): HashCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class CommonCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    copyCommand(): CopyCommandContext | null;
    deleteCommand(): DeleteCommandContext | null;
    unlinkCommand(): UnlinkCommandContext | null;
    dumpCommand(): DumpCommandContext | null;
    existsCommand(): ExistsCommandContext | null;
    expireCommand(): ExpireCommandContext | null;
    expireAtCommand(): ExpireAtCommandContext | null;
    expireTimeCommand(): ExpireTimeCommandContext | null;
    pExpireCommand(): PExpireCommandContext | null;
    pExpireAtCommand(): PExpireAtCommandContext | null;
    pExpireTimeCommand(): PExpireTimeCommandContext | null;
    keysCommand(): KeysCommandContext | null;
    moveCommand(): MoveCommandContext | null;
    objectCommand(): ObjectCommandContext | null;
    persistCommand(): PersistCommandContext | null;
    ttlCommand(): TtlCommandContext | null;
    pTtlCommand(): PTtlCommandContext | null;
    randomKeyCommand(): RandomKeyCommandContext | null;
    renameCommand(): RenameCommandContext | null;
    renameNxCommand(): RenameNxCommandContext | null;
    scanCommand(): ScanCommandContext | null;
    touchCommand(): TouchCommandContext | null;
    typeCommand(): TypeCommandContext | null;
    waitCommand(): WaitCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class StringCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    stringSetCommand(): StringSetCommandContext | null;
    getCommand(): GetCommandContext | null;
    incrementCommand(): IncrementCommandContext | null;
    incrementByCommand(): IncrementByCommandContext | null;
    decrementCommand(): DecrementCommandContext | null;
    decrementByCommand(): DecrementByCommandContext | null;
    appendCommand(): AppendCommandContext | null;
    getDeleteCommand(): GetDeleteCommandContext | null;
    getExCommand(): GetExCommandContext | null;
    getRangeCommand(): GetRangeCommandContext | null;
    getSetCommand(): GetSetCommandContext | null;
    mGetCommand(): MGetCommandContext | null;
    mSetCommand(): MSetCommandContext | null;
    mSetNxCommand(): MSetNxCommandContext | null;
    pSetExCommand(): PSetExCommandContext | null;
    setExCommand(): SetExCommandContext | null;
    setNxCommand(): SetNxCommandContext | null;
    setRangeCommand(): SetRangeCommandContext | null;
    stringLengthCommand(): StringLengthCommandContext | null;
    substringCommand(): SubstringCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ListCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    lmoveCommand(): LmoveCommandContext | null;
    blmoveCommand(): BlmoveCommandContext | null;
    lmpopCommand(): LmpopCommandContext | null;
    blmpopCommand(): BlmpopCommandContext | null;
    lpopCommand(): LpopCommandContext | null;
    blpopCommand(): BlpopCommandContext | null;
    rpopCommand(): RpopCommandContext | null;
    brpopCommand(): BrpopCommandContext | null;
    rpopLpushCommand(): RpopLpushCommandContext | null;
    brpopLpushCommand(): BrpopLpushCommandContext | null;
    lindexCommand(): LindexCommandContext | null;
    linsertCommand(): LinsertCommandContext | null;
    llenCommand(): LlenCommandContext | null;
    lposCommand(): LposCommandContext | null;
    lpushCommand(): LpushCommandContext | null;
    lpushxCommand(): LpushxCommandContext | null;
    rpushCommand(): RpushCommandContext | null;
    rpushxCommand(): RpushxCommandContext | null;
    lrangeCommand(): LrangeCommandContext | null;
    lremCommand(): LremCommandContext | null;
    lsetCommand(): LsetCommandContext | null;
    ltrimCommand(): LtrimCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    saddCommand(): SaddCommandContext | null;
    scardCommand(): ScardCommandContext | null;
    sdiffCommand(): SdiffCommandContext | null;
    sdiffstoreCommand(): SdiffstoreCommandContext | null;
    sinterCommand(): SinterCommandContext | null;
    sintercardCommand(): SintercardCommandContext | null;
    sinterstoreCommand(): SinterstoreCommandContext | null;
    sismemberCommand(): SismemberCommandContext | null;
    smismemberCommand(): SmismemberCommandContext | null;
    smembersCommand(): SmembersCommandContext | null;
    smoveCommand(): SmoveCommandContext | null;
    spopCommand(): SpopCommandContext | null;
    srandmemberCommand(): SrandmemberCommandContext | null;
    sremCommand(): SremCommandContext | null;
    sscanComman(): SscanCommanContext | null;
    sunionCommand(): SunionCommandContext | null;
    sunionstoreCommand(): SunionstoreCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SortedSetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    zmpopCommand(): ZmpopCommandContext | null;
    bzmpopCommand(): BzmpopCommandContext | null;
    zpopmaxCommand(): ZpopmaxCommandContext | null;
    bzpopmaxCommand(): BzpopmaxCommandContext | null;
    zpopminCommand(): ZpopminCommandContext | null;
    bzpopminCommand(): BzpopminCommandContext | null;
    zaddCommand(): ZaddCommandContext | null;
    zcardCommand(): ZcardCommandContext | null;
    zcountCommand(): ZcountCommandContext | null;
    zdiffCommand(): ZdiffCommandContext | null;
    zdiffstoreCommand(): ZdiffstoreCommandContext | null;
    zincrbyCommand(): ZincrbyCommandContext | null;
    zinterCommand(): ZinterCommandContext | null;
    zintercardCommand(): ZintercardCommandContext | null;
    zinterstoreCommand(): ZinterstoreCommandContext | null;
    zlexcountCommand(): ZlexcountCommandContext | null;
    zscoreCommand(): ZscoreCommandContext | null;
    zmscoreCommand(): ZmscoreCommandContext | null;
    zrandmemberCommand(): ZrandmemberCommandContext | null;
    zrangeCommand(): ZrangeCommandContext | null;
    zrangebylexCommand(): ZrangebylexCommandContext | null;
    zrangebyscoreCommand(): ZrangebyscoreCommandContext | null;
    zrangestoreCommand(): ZrangestoreCommandContext | null;
    zrankCommand(): ZrankCommandContext | null;
    zrevrankCommand(): ZrevrankCommandContext | null;
    zremCommand(): ZremCommandContext | null;
    zremrangebylexCommand(): ZremrangebylexCommandContext | null;
    zremrangebyrankCommand(): ZremrangebyrankCommandContext | null;
    zremrangebyscoreCommand(): ZremrangebyscoreCommandContext | null;
    zrevrangeCommand(): ZrevrangeCommandContext | null;
    zrevrangebylexCommand(): ZrevrangebylexCommandContext | null;
    zrevrangebyscoreCommand(): ZrevrangebyscoreCommandContext | null;
    zscanCommand(): ZscanCommandContext | null;
    zunionCommand(): ZunionCommandContext | null;
    zunionstoreCommand(): ZunionstoreCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HashCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    hdelCommand(): HdelCommandContext | null;
    hexistsCommand(): HexistsCommandContext | null;
    hexpireCommand(): HexpireCommandContext | null;
    hpexpireCommand(): HpexpireCommandContext | null;
    hexpireAtCommand(): HexpireAtCommandContext | null;
    hpexpireAtCommand(): HpexpireAtCommandContext | null;
    hexpireTimeCommand(): HexpireTimeCommandContext | null;
    hpexpireTimeCommand(): HpexpireTimeCommandContext | null;
    hgetCommand(): HgetCommandContext | null;
    hgetAllCommand(): HgetAllCommandContext | null;
    hincrByCommand(): HincrByCommandContext | null;
    hkeysCommand(): HkeysCommandContext | null;
    hlenCommand(): HlenCommandContext | null;
    hmgetCommand(): HmgetCommandContext | null;
    hsetCommand(): HsetCommandContext | null;
    hmsetCommand(): HmsetCommandContext | null;
    hsetnxCommand(): HsetnxCommandContext | null;
    hpersistCommand(): HpersistCommandContext | null;
    httlCommand(): HttlCommandContext | null;
    hpttlCommand(): HpttlCommandContext | null;
    hrandfieldCommand(): HrandfieldCommandContext | null;
    hscanCommand(): HscanCommandContext | null;
    hstrlenCommand(): HstrlenCommandContext | null;
    hvalsCommand(): HvalsCommandContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HdelCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HDEL(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HexistsCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HEXISTS(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HexpireCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HEXPIRE(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    decimal(): DecimalContext;
    fieldsClause(): FieldsClauseContext;
    expireOptions(): ExpireOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HpexpireCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HPEXPIRE(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    decimal(): DecimalContext;
    fieldsClause(): FieldsClauseContext;
    expireOptions(): ExpireOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class FieldsClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    FIELDS(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HexpireAtCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HEXPIREAT(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    decimal(): DecimalContext;
    fieldsClause(): FieldsClauseContext;
    expireOptions(): ExpireOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HpexpireAtCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HPEXPIREAT(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    decimal(): DecimalContext;
    fieldsClause(): FieldsClauseContext;
    expireOptions(): ExpireOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HexpireTimeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HEXPIRETIME(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    fieldsClause(): FieldsClauseContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HpexpireTimeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HPEXPIRETIME(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    fieldsClause(): FieldsClauseContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HgetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HGET(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HmgetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HMGET(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HgetAllCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HGETALL(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HincrByCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HINCRBY(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext;
    decimal(): DecimalContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HkeysCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HKEYS(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HlenCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HLEN(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HsetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HSET(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HmsetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HMSET(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HsetnxCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HSETNX(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HpersistCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HPERSIST(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    fieldsClause(): FieldsClauseContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HttlCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HTTL(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    fieldsClause(): FieldsClauseContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HpttlCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HPTTL(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    fieldsClause(): FieldsClauseContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HrandfieldCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HRANDFIELD(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    decimal(): DecimalContext | null;
    WITHVALUES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HscanCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HSCAN(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    decimal(): DecimalContext;
    matchClause(): MatchClauseContext | null;
    countClause(): CountClauseContext | null;
    NOVALUES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HstrlenCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HSTRLEN(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HvalsCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    HVALS(): antlr.TerminalNode;
    hashKeyName(): HashKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZmpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZMPOP(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    minMaxClause(): MinMaxClauseContext;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    countClause(): CountClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BzmpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BZMPOP(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode[];
    POSITIVE_DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    minMaxClause(): MinMaxClauseContext;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    countClause(): CountClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZpopmaxCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZPOPMAX(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BzpopmaxCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BZPOPMAX(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZpopminCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZPOPMIN(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BzpopminCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BZPOPMIN(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class MinMaxClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MIN(): antlr.TerminalNode | null;
    MAX(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZaddCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZADD(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    keyExistenceClause(): KeyExistenceClauseContext | null;
    keyUpdateClause(): KeyUpdateClauseContext | null;
    CH(): antlr.TerminalNode | null;
    INCR(): antlr.TerminalNode | null;
    scoreMemberClause(): ScoreMemberClauseContext[];
    scoreMemberClause(i: number): ScoreMemberClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class KeyUpdateClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GT(): antlr.TerminalNode | null;
    LT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ScoreMemberClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    decimal(): DecimalContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZcardCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZCARD(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZcountCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZCOUNT(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimalScore(): DecimalScoreContext[];
    decimalScore(i: number): DecimalScoreContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZdiffCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZDIFF(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    WITHSCORES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZdiffstoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZDIFFSTORE(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZincrbyCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZINCRBY(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimal(): DecimalContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZinterCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZINTER(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    weightsClause(): WeightsClauseContext | null;
    aggregateClause(): AggregateClauseContext | null;
    WITHSCORES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZintercardCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZINTERCARD(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    limitClause(): LimitClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZinterstoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZINTERSTORE(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    weightsClause(): WeightsClauseContext | null;
    aggregateClause(): AggregateClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class WeightsClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WEIGHTS(): antlr.TerminalNode;
    decimal(): DecimalContext[];
    decimal(i: number): DecimalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class AggregateClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    AGGREGATE(): antlr.TerminalNode;
    MIN(): antlr.TerminalNode | null;
    MAX(): antlr.TerminalNode | null;
    SUM(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZlexcountCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZLEXCOUNT(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    lexicalScore(): LexicalScoreContext[];
    lexicalScore(i: number): LexicalScoreContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZscoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZSCORE(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZmscoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZMSCORE(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrandmemberCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZRANDMEMBER(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimal(): DecimalContext | null;
    WITHSCORES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrangeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZRANGE(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    lexicalScore(): LexicalScoreContext[];
    lexicalScore(i: number): LexicalScoreContext | null;
    rangeTypeClause(): RangeTypeClauseContext | null;
    REV(): antlr.TerminalNode | null;
    limitOffsetClause(): LimitOffsetClauseContext | null;
    WITHSCORES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrangebylexCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZRANGEBYLEX(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    lexicalScore(): LexicalScoreContext[];
    lexicalScore(i: number): LexicalScoreContext | null;
    limitOffsetClause(): LimitOffsetClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrangebyscoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZRANGEBYSCORE(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimalScore(): DecimalScoreContext[];
    decimalScore(i: number): DecimalScoreContext | null;
    WITHSCORES(): antlr.TerminalNode | null;
    limitOffsetClause(): LimitOffsetClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrangestoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZRANGESTORE(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    sortedSetKeyName(): SortedSetKeyNameContext;
    lexicalScore(): LexicalScoreContext[];
    lexicalScore(i: number): LexicalScoreContext | null;
    rangeTypeClause(): RangeTypeClauseContext | null;
    REV(): antlr.TerminalNode | null;
    limitOffsetClause(): LimitOffsetClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RangeTypeClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BYSCORE(): antlr.TerminalNode | null;
    BYLEX(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LimitOffsetClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LIMIT(): antlr.TerminalNode;
    decimal(): DecimalContext[];
    decimal(i: number): DecimalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrankCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZRANK(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    identifier(): IdentifierContext;
    WITHSCORE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrevrankCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZREVRANK(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    identifier(): IdentifierContext;
    WITHSCORE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZremCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZREM(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZremrangebylexCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZREMRANGEBYLEX(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    lexicalScore(): LexicalScoreContext[];
    lexicalScore(i: number): LexicalScoreContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZremrangebyrankCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZREMRANGEBYRANK(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimal(): DecimalContext[];
    decimal(i: number): DecimalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZremrangebyscoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZREMRANGEBYSCORE(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimalScore(): DecimalScoreContext[];
    decimalScore(i: number): DecimalScoreContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrevrangeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZREVRANGE(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimal(): DecimalContext[];
    decimal(i: number): DecimalContext | null;
    WITHSCORES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrevrangebylexCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZREVRANGEBYLEX(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    lexicalScore(): LexicalScoreContext[];
    lexicalScore(i: number): LexicalScoreContext | null;
    limitOffsetClause(): LimitOffsetClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZrevrangebyscoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZREVRANGEBYSCORE(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimalScore(): DecimalScoreContext[];
    decimalScore(i: number): DecimalScoreContext | null;
    WITHSCORES(): antlr.TerminalNode | null;
    limitOffsetClause(): LimitOffsetClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZscanCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZSCAN(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext;
    decimal(): DecimalContext;
    matchClause(): MatchClauseContext | null;
    countClause(): CountClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZunionCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZUNION(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    weightsClause(): WeightsClauseContext | null;
    aggregateClause(): AggregateClauseContext | null;
    WITHSCORES(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ZunionstoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ZUNIONSTORE(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    sortedSetKeyName(): SortedSetKeyNameContext[];
    sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    weightsClause(): WeightsClauseContext | null;
    aggregateClause(): AggregateClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SaddCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SADD(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ScardCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SCARD(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SdiffCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SDIFF(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext[];
    setKeyName(i: number): SetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SdiffstoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SDIFFSTORE(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    setKeyName(): SetKeyNameContext[];
    setKeyName(i: number): SetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SinterCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SINTER(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext[];
    setKeyName(i: number): SetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SintercardCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SINTERCARD(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext[];
    setKeyName(i: number): SetKeyNameContext | null;
    limitClause(): LimitClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LimitClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LIMIT(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SinterstoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SINTERSTORE(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    setKeyName(): SetKeyNameContext[];
    setKeyName(i: number): SetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SismemberCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SISMEMBER(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SmismemberCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SMISMEMBER(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SmembersCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SMEMBERS(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SmoveCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SMOVE(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext[];
    setKeyName(i: number): SetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SPOP(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SrandmemberCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SRANDMEMBER(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    decimal(): DecimalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SremCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SREM(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SscanCommanContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SSCAN(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext;
    decimal(): DecimalContext;
    matchClause(): MatchClauseContext | null;
    countClause(): CountClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SunionCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SUNION(): antlr.TerminalNode;
    setKeyName(): SetKeyNameContext[];
    setKeyName(i: number): SetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SunionstoreCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SUNIONSTORE(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    setKeyName(): SetKeyNameContext[];
    setKeyName(i: number): SetKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LmoveCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LMOVE(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext[];
    listKeyName(i: number): ListKeyNameContext | null;
    leftOrRightClause(): LeftOrRightClauseContext[];
    leftOrRightClause(i: number): LeftOrRightClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LeftOrRightClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LEFT(): antlr.TerminalNode | null;
    RIGHT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BlmoveCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BLMOVE(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext[];
    listKeyName(i: number): ListKeyNameContext | null;
    leftOrRightClause(): LeftOrRightClauseContext[];
    leftOrRightClause(i: number): LeftOrRightClauseContext | null;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LmpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LMPOP(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    leftOrRightClause(): LeftOrRightClauseContext;
    listKeyName(): ListKeyNameContext[];
    listKeyName(i: number): ListKeyNameContext | null;
    countClause(): CountClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BlmpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BLMPOP(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode[];
    POSITIVE_DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    leftOrRightClause(): LeftOrRightClauseContext;
    listKeyName(): ListKeyNameContext[];
    listKeyName(i: number): ListKeyNameContext | null;
    countClause(): CountClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPOP(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BlpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BLPOP(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext[];
    listKeyName(i: number): ListKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RPOP(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BrpopCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BRPOP(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext[];
    listKeyName(i: number): ListKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RpopLpushCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RPOPLPUSH(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext[];
    listKeyName(i: number): ListKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BrpopLpushCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BRPOPLPUSH(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext[];
    listKeyName(i: number): ListKeyNameContext | null;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LindexCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LINDEX(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    decimal(): DecimalContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LinsertCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LINSERT(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    beforeOrAfterClause(): BeforeOrAfterClauseContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class BeforeOrAfterClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    BEFORE(): antlr.TerminalNode | null;
    AFTER(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LlenCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LLEN(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LposCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPOS(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    identifier(): IdentifierContext;
    rankClause(): RankClauseContext | null;
    countClause(): CountClauseContext | null;
    maxLenClause(): MaxLenClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RankClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RANK(): antlr.TerminalNode;
    decimal(): DecimalContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class MaxLenClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MAXLEN(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LpushCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPUSH(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LpushxCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LPUSHX(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RpushCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RPUSH(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RpushxCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RPUSHX(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LrangeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LRANGE(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    decimal(): DecimalContext[];
    decimal(i: number): DecimalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LremCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LREM(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    decimal(): DecimalContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LsetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LSET(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    decimal(): DecimalContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LtrimCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    LTRIM(): antlr.TerminalNode;
    listKeyName(): ListKeyNameContext;
    decimal(): DecimalContext[];
    decimal(i: number): DecimalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class CopyCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COPY(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    identifier(): IdentifierContext;
    dbClause(): DbClauseContext | null;
    REPLACE(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class DbClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DB(): antlr.TerminalNode;
    databaseName(): DatabaseNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class DatabaseNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class DeleteCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DEL(): antlr.TerminalNode;
    keyName(): KeyNameContext[];
    keyName(i: number): KeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class UnlinkCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    UNLINK(): antlr.TerminalNode;
    keyName(): KeyNameContext[];
    keyName(i: number): KeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class DumpCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DUMP(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ExistsCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXISTS(): antlr.TerminalNode;
    keyName(): KeyNameContext[];
    keyName(i: number): KeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ExpireCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXPIRE(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    decimal(): DecimalContext;
    expireOptions(): ExpireOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ExpireAtCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXPIREAT(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    decimal(): DecimalContext;
    expireOptions(): ExpireOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class PExpireCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PEXPIRE(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    decimal(): DecimalContext;
    expireOptions(): ExpireOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class PExpireAtCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PEXPIREAT(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    decimal(): DecimalContext;
    expireOptions(): ExpireOptionsContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ExpireOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NX(): antlr.TerminalNode | null;
    XX(): antlr.TerminalNode | null;
    GT(): antlr.TerminalNode | null;
    LT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ExpireTimeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EXPIRETIME(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class PExpireTimeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PEXPIRETIME(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class KeysCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    KEYS(): antlr.TerminalNode;
    keyPattern(): KeyPatternContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class MoveCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MOVE(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    databaseName(): DatabaseNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ObjectCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    OBJECT(): antlr.TerminalNode;
    objectOptions(): ObjectOptionsContext;
    keyName(): KeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ObjectOptionsContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    ENCODING(): antlr.TerminalNode | null;
    FREQ(): antlr.TerminalNode | null;
    IDLETIME(): antlr.TerminalNode | null;
    REFCOUNT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class PersistCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PERSIST(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class TtlCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TTL(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class PTtlCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PTTL(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RandomKeyCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RANDOMKEY(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RenameCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RENAME(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class RenameNxCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    RENAMENX(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ScanCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SCAN(): antlr.TerminalNode;
    decimal(): DecimalContext;
    matchClause(): MatchClauseContext | null;
    countClause(): CountClauseContext | null;
    typeClause(): TypeClauseContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class MatchClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MATCH(): antlr.TerminalNode;
    keyPattern(): KeyPatternContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class CountClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    COUNT(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class TypeClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TYPE(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class TouchCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TOUCH(): antlr.TerminalNode;
    keyName(): KeyNameContext[];
    keyName(i: number): KeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class TypeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    TYPE(): antlr.TerminalNode;
    keyName(): KeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class WaitCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    WAIT(): antlr.TerminalNode;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode[];
    POSITIVE_DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class StringSetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SET(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    identifier(): IdentifierContext;
    keyExistenceClause(): KeyExistenceClauseContext | null;
    GET(): antlr.TerminalNode | null;
    expirationClause(): ExpirationClauseContext | null;
    KEEPTTL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class KeyExistenceClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    NX(): antlr.TerminalNode | null;
    XX(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ExpirationClauseContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    EX(): antlr.TerminalNode | null;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    PX(): antlr.TerminalNode | null;
    EXAT(): antlr.TerminalNode | null;
    PXAT(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class GetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GET(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class IncrementCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INCR(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class IncrementByCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    INCRBY(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    decimal(): DecimalContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class DecrementCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DECR(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class DecrementByCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    DECRBY(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    decimal(): DecimalContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class AppendCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    APPEND(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class GetDeleteCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GETDEL(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class GetExCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GETEX(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    expirationClause(): ExpirationClauseContext | null;
    PERSIST(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class GetRangeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GETRANGE(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    decimal(): DecimalContext[];
    decimal(i: number): DecimalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class GetSetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    GETSET(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class MGetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MGET(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext[];
    stringKeyName(i: number): StringKeyNameContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class MSetCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MSET(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext[];
    stringKeyName(i: number): StringKeyNameContext | null;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class MSetNxCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    MSETNX(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext[];
    stringKeyName(i: number): StringKeyNameContext | null;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class PSetExCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    PSETEX(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SetExCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SETEX(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SetNxCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SETNX(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SetRangeCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SETRANGE(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode;
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class StringLengthCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    STRLEN(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SubstringCommandContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    SUBSTR(): antlr.TerminalNode;
    stringKeyName(): StringKeyNameContext;
    decimal(): DecimalContext[];
    decimal(i: number): DecimalContext | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class DecimalContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null;
    DECIMAL_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class DecimalScoreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null;
    DECIMAL_LITERAL(): antlr.TerminalNode | null;
    DECIMAL_SCORE_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class IdentifierContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    IDENTIFIER(): antlr.TerminalNode | null;
    DECIMAL_LITERAL(): antlr.TerminalNode | null;
    POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null;
    DECIMAL_SCORE_LITERAL(): antlr.TerminalNode | null;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class LexicalScoreContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class StringKeyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class ListKeyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SetKeyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class SortedSetKeyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class HashKeyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class KeyNameContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    identifier(): IdentifierContext;
    get ruleIndex(): number;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
export declare class KeyPatternContext extends antlr.ParserRuleContext {
    constructor(parent: antlr.ParserRuleContext | null, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: KeyPatternContext): void;
}
export declare class NotProperPatternContext extends KeyPatternContext {
    constructor(ctx: KeyPatternContext);
    identifier(): IdentifierContext;
    accept<Result>(visitor: RedisParserVisitor<Result>): Result | null;
}
