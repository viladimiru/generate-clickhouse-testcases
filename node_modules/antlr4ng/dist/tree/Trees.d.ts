import { ParseTree } from "./ParseTree.js";
import { Parser } from "../Parser.js";
/** A set of utility routines useful for all kinds of ANTLR trees. */
export declare class Trees {
    /**
     * Print out a whole tree in LISP form. {@link getNodeText} is used on the
     * node payloads to get the text for the nodes.  Detect
     * parse trees and extract data appropriately.
     */
    static toStringTree(tree: ParseTree, ruleNames: string[] | null, recog?: Parser | null): string;
    static getNodeText(t: ParseTree, ruleNames: string[] | null, recog?: Parser | null): string | undefined;
    /**
     * Return ordered list of all children of this node
     */
    static getChildren(t: ParseTree): ParseTree[];
    /**
     * Return a list of all ancestors of this node.  The first node of
     * list is the root and the last is the parent of this node.
     */
    static getAncestors(t: ParseTree): ParseTree[];
    static findAllTokenNodes(t: ParseTree, ttype: number): ParseTree[];
    static findAllRuleNodes(t: ParseTree, ruleIndex: number): ParseTree[];
    static findAllNodes(t: ParseTree, index: number, findTokens: boolean): ParseTree[];
    static descendants(t: ParseTree): ParseTree[];
    private static doFindAllNodes;
}
